<UserControl x:Class="pdfconverter.Controls.ImageToPDFUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:pdfconverter.Controls"
             xmlns:localprop="clr-namespace:pdfconverter.Properties"
             xmlns:localconverter="clr-namespace:pdfconverter.Utils.Converters"
             xmlns:Models="clr-namespace:pdfconverter.Models"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
             Loaded="UserControl_Loaded" TextBlock.Foreground="{DynamicResource TextBrushWhiteAndBlack}"
             Background="{DynamicResource WindowsBackground}">
  <FrameworkElement.Resources>
    <ObjectDataProvider x:Key="PageSizes" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
      <ObjectDataProvider.MethodParameters>
        <x:Type TypeName="Models:PDFPageSize"/>
      </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>
    <ObjectDataProvider x:Key="ContentMargin" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
      <ObjectDataProvider.MethodParameters>
        <x:Type TypeName="Models:ContentMargin"/>
      </ObjectDataProvider.MethodParameters>
    </ObjectDataProvider>
    <Style x:Key="ButtonStyle1" TargetType="{x:Type local:ButtonEx}">
      <Setter Property="Control.Background" Value="White"/>
      <Setter Property="Control.BorderBrush" Value="Gray"/>
      <Setter Property="Control.Foreground" Value="Black"/>
      <Setter Property="Control.BorderThickness" Value="1"/>
      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
      <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
      <Setter Property="Control.Padding" Value="1"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type local:ButtonEx}">
            <Border x:Name="border" CornerRadius="{TemplateBinding local:ButtonEx.CornerRadius}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
              <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="border"
                        Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="Border.Background"/>
                <Setter TargetName="contentPresenter"
                        Value="{Binding MouseOverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="TextElement.Foreground"/>
              </Trigger>
              <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter TargetName="border"
                        Value="{Binding MousePressedBackground, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="Border.Background"/>
                <Setter TargetName="contentPresenter"
                        Value="{Binding MousePressedForeground, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="TextElement.Foreground"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="border"
                        Value="{Binding DisabledBackground, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="Border.Background"/>
                <Setter TargetName="border"
                        Value="{Binding DisabledBorderbrush, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="contentPresenter"
                        Value="{Binding DisabledForeground, RelativeSource={RelativeSource TemplatedParent}}"
                        Property="TextElement.Foreground"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style TargetType="{x:Type GridViewColumnHeader}">
      <Setter Property="FrameworkElement.Height" Value="32"/>
      <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="Control.Padding" Value="0,0,0,0"/>
      <Setter Property="FrameworkElement.Margin" Value="-5,0,0,0"/>
      <Setter Property="Control.Background" Value="{DynamicResource MainWindowFootbarBackground}"/>
      <Setter Property="Control.Foreground" Value="{DynamicResource TextBrushWhiteAndBlack}"/>
      <Setter Property="Control.FontSize" Value="12"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
            <Grid>
              <Rectangle Fill="Transparent" IsHitTestVisible="true"/>
              <Border x:Name="HeaderBorder" Padding="{TemplateBinding Control.Padding}"
                      Background="{TemplateBinding Control.Background}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}">
                <ContentPresenter x:Name="HeaderContent" Content="{TemplateBinding ContentControl.Content}"
                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Margin="5,1,5,1"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Border>
              <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,0,0"
                     Style="{StaticResource GridViewColumnHeaderGripper}"/>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Property="ButtonBase.IsPressed" Value="true">
                <Setter TargetName="HeaderContent" Property="FrameworkElement.Margin" Value="6,1,6,1"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <Trigger Property="GridViewColumnHeader.Role" Value="Padding">
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                <Border Name="HeaderBorder2" BorderThickness="0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        Background="{TemplateBinding Control.Background}"/>
                <ControlTemplate.Triggers>
                  <Trigger Property="FrameworkElement.Height" Value="Auto">
                    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Style.Triggers>
    </Style>
    <localconverter:ActionViewVisibilityConverter x:Key="ActionViewVisibilityConverter"/>
    <localconverter:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <Models:MergeStatusToPageCountVisibility x:Key="MergeStatusToPageCountVisibility"/>
    <Models:MergeStatusToFileItemEnabled x:Key="MergeStatusToFileItemEnabled"/>
    <Models:MergeStatusToStr x:Key="MergeStatusToStr"/>
    <Models:MergeStatusToOperationBtnVisibility x:Key="MergeStatusToOperationBtnVisibility"/>
    <Models:MergeStatusProgressRingActive x:Key="MergeStatusProgressRingActive"/>
    <Models:MergeStatusImageVisibility x:Key="MergeStatusImageVisibility"/>
    <Models:MergeStatusImage x:Key="MergeStatusImage"/>
    <Models:MergePDFUIStatusToUIElementVisibility x:Key="MergePDFUIStatusToUIElementVisibility"/>
    <Models:MergeFileItemMoveUpBtnIsEnabledConverter x:Key="MergeFileItemMoveUpBtnIsEnabledConverter"/>
    <Models:MergeFileItemMoveDownBtnIsEnabledConverter x:Key="MergeFileItemMoveDownBtnIsEnabledConverter"/>
    <Models:SplitStatusToParseFileProgressRingActive x:Key="SplitStatusToParseFileProgressRingActive"/>
    <Models:SplitStatusToPageCountVisibility x:Key="SplitStatusToPageCountVisibility"/>
    <Models:SplitStatusToFileItemEnabled x:Key="SplitStatusToFileItemEnabled"/>
    <Models:SplitStatusToStr x:Key="SplitStatusToStr"/>
    <Models:SplitStatusToOperationBtnVisibility x:Key="SplitStatusToOperationBtnVisibility"/>
    <Models:SplitStatusToOperationSuccBtnVisibility x:Key="SplitStatusToOperationSuccBtnVisibility"/>
    <Models:SplitStatusProgressRingActive x:Key="SplitStatusProgressRingActive"/>
    <Models:SplitStatusImageVisibility x:Key="SplitStatusImageVisibility"/>
    <Models:SplitStatusImage x:Key="SplitStatusImage"/>
    <Models:SplitPDFUIStatusToUIElementEnabled x:Key="SplitPDFUIStatusToUIElementEnabled"/>
    <Style x:Key="FocusVisual">
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate>
            <Rectangle StrokeDashArray="1 2" StrokeThickness="1"
                       Stroke="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"
                       SnapsToDevicePixels="true" Margin="2"/>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="combox1" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource DefaultComboBoxStyle}"/>
  </FrameworkElement.Resources>
  <Grid Column="2">
    <Grid.RowDefinitions>
      <RowDefinition Height="12"/>
      <RowDefinition Height="*"/>
      <RowDefinition Height="24"/>
    </Grid.RowDefinitions>
    <Grid Row="1">
      <Grid.RowDefinitions>
        <RowDefinition Height="32"/>
        <RowDefinition Height="12"/>
        <RowDefinition Height="*"/>
        <RowDefinition Height="12"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <StackPanel Grid.Row="0" Orientation="Horizontal">
        <Button x:Name="addFilesMergeBtn" Width="Auto" MinWidth="120" Style="{StaticResource DefaultButtonStyle}"
                Background="{DynamicResource MainWindow2ButtonBackground}" Command="{Binding AddOneFile}">
          <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Source="{DynamicResource MainWindow2AddFileBtnImage}"/>
            <TextBlock Margin="6,0" FontSize="12" Text="{x:Static localprop:Resources.WinMergeSplitBtnAddFilesContent}"
                       Foreground="{DynamicResource TextBrushWhiteAndBlack}"/>
          </StackPanel>
        </Button>
        <Button x:Name="clearFilesMergeBtn" Width="Auto" MinWidth="120" Margin="24,0,0,0"
                Style="{StaticResource DefaultButtonStyle}"
                Background="{DynamicResource MainWindow2ButtonBackground}" Command="{Binding ClearFiles}">
          <StackPanel Orientation="Horizontal">
            <Image Width="16" Height="16" Source="{DynamicResource MainWindow2ClearBtnImage}"/>
            <TextBlock Margin="5,0,0,0" FontSize="12" Text="{x:Static localprop:Resources.WinMergeSplitBtnClearContent}"
                       Foreground="{DynamicResource TextBrushWhiteAndBlack}"/>
          </StackPanel>
        </Button>
      </StackPanel>
      <local:MListView x:Name="lsvFiles" Drop="lsvFiles_Drop" DragEnter="lsvFiles_DragEnter" Grid.Row="2"
                       Style="{StaticResource ListViewStyle}" AllowDrop="true" BorderThickness="1"
                       BorderBrush="{DynamicResource MainWindow2FileListBorder}"
                       ItemContainerStyle="{StaticResource ListViewStyleForUC}"
                       TextBlock.Foreground="{DynamicResource TextBrushWhiteAndBlack}" SelectionMode="Single"
                       Background="{DynamicResource MainWindow2FileListBackground}"
                       ScrollViewer.HorizontalScrollBarVisibility="Hidden" ItemsSource="{Binding FileList}"
                       SelectedItem="{Binding Path=SelectedItem}">
        <ListView.View>
          <GridView>
            <GridViewColumn Header="{x:Static localprop:Resources.WinMergeSplitGridCloumnFilenameTitle}" Width="200">
              <GridViewColumn.HeaderTemplate>
                <DataTemplate>
                  <StackPanel Orientation="Horizontal">
                    <CheckBox IsThreeState="true" Margin="12,0,0,0" Style="{DynamicResource DefaultCheckBoxStyle}"
                              HorizontalAlignment="Left" VerticalAlignment="Center" HorizontalContentAlignment="Center"
                              IsEnabled="{Binding DataContext.UIStatus, Converter={StaticResource TaskStatusToEnable}, ElementName=lsvFiles}"
                              IsChecked="{Binding DataContext.IsAllMergeFilesSelected, ElementName=lsvFiles}"/>
                    <TextBlock VerticalAlignment="Center" Margin="8,0,0,0" Text="{Binding}"/>
                  </StackPanel>
                </DataTemplate>
              </GridViewColumn.HeaderTemplate>
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <StackPanel Orientation="Horizontal">
                    <CheckBox x:Name="mergeFileItemCB" VerticalAlignment="Center" Margin="8,0,0,0"
                              Style="{DynamicResource DefaultCheckBoxStyle}" IsChecked="{Binding IsFileSelected, Mode=TwoWay}"
                              IsEnabled="{Binding Status, Converter={StaticResource MergeStatusToFileItemEnabled}, Mode=OneWay}"
                              Command="{Binding DataContext.UpdateItem, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"/>
                    <TextBlock VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Margin="8,0,0,0" FontSize="12"
                               Text="{Binding FileName}" ToolTip="{Binding FilePath}"/>
                  </StackPanel>
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn Header="{x:Static localprop:Resources.WinMergeSplitGridCloumnStatusTitle}" Width="140">
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="5,0,0,0">
                    <Grid Height="15" Width="15">
                      <commonLibControl:ProgressRing xmlns:commonLibControl="clr-namespace:CommomLib.Controls;assembly=CommomLib"
                                                     Height="15" Width="15" MinHeight="15" MinWidth="15"
                                                     IsActive="{Binding Status, Converter={StaticResource MergeStatusProgressRingActive}, Mode=OneWay}"/>
                      <Image Height="12" Width="12"
                             Source="{Binding Status, Converter={StaticResource MergeStatusImage}, Mode=OneWay}"
                             Visibility="{Binding Status, Converter={StaticResource MergeStatusImageVisibility}, Mode=OneWay}"/>
                    </Grid>
                    <TextBlock VerticalAlignment="Center" FontSize="12" Margin="8,0,0,0"
                               Text="{Binding Status, Converter={StaticResource ItemStatusToStr}, Mode=OneWay}"/>
                  </StackPanel>
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn Header="{x:Static localprop:Resources.WinMergeSplitGridCloumnOperationTitle}" Width="100">
              <GridViewColumn.CellTemplate>
                <DataTemplate>
                  <Grid HorizontalAlignment="Right" Width="100" Background="Transparent">
                    <FrameworkElement.Resources>
                      <Style TargetType="{x:Type Button}">
                        <Setter Property="FrameworkElement.Width" Value="20"/>
                        <Setter Property="FrameworkElement.Height" Value="20"/>
                        <Setter Property="Control.Background" Value="Transparent"/>
                        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
                        <Setter Property="Control.BorderThickness" Value="0"/>
                        <Setter Property="Control.Padding" Value="0"/>
                      </Style>
                    </FrameworkElement.Resources>
                    <Button x:Name="moveupMergeBtn" Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                            Background="Transparent" Width="20" Height="20" BorderThickness="0" Padding="0"
                            FontFamily="Segoe MDL2 Assets" FontSize="14" HorizontalAlignment="Right" Margin="0 0 65 0"
                            Content=""
                            Visibility="{Binding DataContext.OurputInOneFile, Converter={StaticResource IsOutputInOneFileToMoveBtnVisibility}, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            Command="{Binding DataContext.MoveUpFile, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext}">
                      <UIElement.IsEnabled>
                        <MultiBinding Converter="{StaticResource ImageToPDFMoveUpBtnIsEnable}" Mode="OneWay"
                                      UpdateSourceTrigger="PropertyChanged">
                          <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=Self}"/>
                          <Binding ElementName="lsvFiles" Path="DataContext.FileList"/>
                        </MultiBinding>
                      </UIElement.IsEnabled>
                      <FrameworkElement.Style>
                        <Style TargetType="{x:Type Button}">
                          <Style.Triggers>
                            <Trigger Property="UIElement.IsEnabled" Value="false">
                              <Setter Property="UIElement.Opacity" Value="0"/>
                            </Trigger>
                          </Style.Triggers>
                        </Style>
                      </FrameworkElement.Style>
                    </Button>
                    <Button x:Name="movedownMergeBtn" Foreground="{DynamicResource TextBrushWhiteAndBlack}" Margin="0 0 40 0"
                            Background="Transparent" HorizontalAlignment="Right" Width="20" Height="20" BorderThickness="0"
                            Padding="0" FontFamily="Segoe MDL2 Assets" FontSize="14" Content=""
                            Visibility="{Binding DataContext.OurputInOneFile, Converter={StaticResource IsOutputInOneFileToMoveBtnVisibility}, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            Command="{Binding DataContext.MoveDownFile, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext}">
                      <UIElement.IsEnabled>
                        <MultiBinding Converter="{StaticResource ImageToPDFMoveDownBtnIsEnable}" Mode="OneWay"
                                      UpdateSourceTrigger="PropertyChanged">
                          <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=Self}"/>
                          <Binding ElementName="lsvFiles" Path="DataContext.FileList"/>
                        </MultiBinding>
                      </UIElement.IsEnabled>
                      <FrameworkElement.Style>
                        <Style TargetType="{x:Type Button}">
                          <Style.Triggers>
                            <Trigger Property="UIElement.IsEnabled" Value="false">
                              <Setter Property="UIElement.Opacity" Value="0"/>
                            </Trigger>
                          </Style.Triggers>
                        </Style>
                      </FrameworkElement.Style>
                    </Button>
                    <Button x:Name="openFileInExplorerSplitBtn" Margin="0 0 39 0"
                            Command="{Binding DataContext.OpenInExplorer, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext}">
                      <Image Source="{DynamicResource MainWindow2OpenFolderBtnImage}"/>
                      <UIElement.Visibility>
                        <MultiBinding Converter="{StaticResource IsOutputInOneFileToBrowseBtnVisibility}" Mode="OneWay"
                                      UpdateSourceTrigger="PropertyChanged">
                          <Binding Path="DataContext.Status" RelativeSource="{RelativeSource Mode=Self}"/>
                          <Binding ElementName="lsvFiles" Path="DataContext.OurputInOneFile"/>
                          <Binding ElementName="lsvFiles" Path="DataContext.UIStatus"/>
                        </MultiBinding>
                      </UIElement.Visibility>
                    </Button>
                    <Button x:Name="openFileWithDefaultApp" Margin="0 0 65 0"
                            Command="{Binding DataContext.OpenWithEditor, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext}">
                      <Image Source="{DynamicResource MainWindow2OpenFileBtnImage}"/>
                      <UIElement.Visibility>
                        <MultiBinding Converter="{StaticResource IsOutputInOneFileToBrowseBtnVisibility}" Mode="OneWay"
                                      UpdateSourceTrigger="PropertyChanged">
                          <Binding Path="DataContext.Status" RelativeSource="{RelativeSource Mode=Self}"/>
                          <Binding ElementName="lsvFiles" Path="DataContext.OurputInOneFile"/>
                          <Binding ElementName="lsvFiles" Path="DataContext.UIStatus"/>
                        </MultiBinding>
                      </UIElement.Visibility>
                    </Button>
                    <Button x:Name="deleteFileMergeBtn" Margin="0 0 15 0"
                            Command="{Binding DataContext.RemoveFromList, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext}"
                            Visibility="{Binding Status, Converter={StaticResource MergeStatusToOperationBtnVisibility}, Mode=OneWay}">
                      <Image Source="{DynamicResource MainWindow2DeleteBtnImage}"/>
                    </Button>
                  </Grid>
                </DataTemplate>
              </GridViewColumn.CellTemplate>
            </GridViewColumn>
          </GridView>
        </ListView.View>
      </local:MListView>
      <Grid Row="4">
        <Grid.RowDefinitions>
          <RowDefinition Height="32"/>
          <RowDefinition Height="12"/>
          <RowDefinition Height="32"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" MinWidth="80"/>
          <ColumnDefinition Width="10"/>
          <ColumnDefinition Width="220"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto" MinWidth="126"/>
        </Grid.ColumnDefinitions>
        <ComboBox Grid.Column="2" Height="25" MinWidth="105" MaxWidth="115" FontSize="12"
                  Style="{StaticResource combox1}" DisplayMemberPath="Capital" SelectedIndex="0"
                  HorizontalAlignment="Left" Margin="0,0,0,4" VerticalAlignment="Bottom"
                  SelectedValue="{Binding PDFPageSize, Mode=TwoWay}" ItemsSource="{Binding PageSizeItems}"/>
        <ComboBox Grid.Column="2" Height="25" MinWidth="105" MaxWidth="115" FontSize="12"
                  Style="{StaticResource combox1}" DisplayMemberPath="Capital" SelectedIndex="0"
                  HorizontalAlignment="Right" SelectedValue="{Binding ContentMargin, Mode=TwoWay}"
                  ItemsSource="{Binding PageMarginItems}"/>
        <TextBlock Grid.Column="0" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Center"
                   TextWrapping="Wrap" MaxWidth="100"
                   Text="{x:Static localprop:Resources.MainWinImageToPDFPageSetting}"/>
        <TextBlock Grid.Row="2" Grid.Column="0" FontSize="12" MaxWidth="100" HorizontalAlignment="Left"
                   VerticalAlignment="Center" TextWrapping="Wrap"
                   Text="{x:Static localprop:Resources.MainWindowOutputPathText}"/>
        <Grid Row="2" Column="2">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="28"/>
          </Grid.ColumnDefinitions>
          <TextBox Grid.Column="0" Background="{DynamicResource MainWindow2Selected}" FontSize="12"
                   Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                   BorderBrush="{DynamicResource MainViewRectangle}" Height="28" VerticalContentAlignment="Center"
                   IsReadOnly="true" Text="{Binding OutputPath, Mode=TwoWay}"
                   ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}"/>
          <Button x:Name="mergeDestPathBtn" Grid.Column="1" FontSize="12" Style="{StaticResource DefaultButtonStyle}"
                  Height="28" Foreground="{DynamicResource MainWindow2ListBoxForeground}" Background="Transparent"
                  Content="..." Command="{Binding SelectPath}"/>
        </Grid>
        <CheckBox Name="cboxOutputInOneFile" Grid.Column="3" Style="{DynamicResource DefaultCheckBoxStyle}"
                  HorizontalAlignment="Left" VerticalAlignment="Center" VerticalContentAlignment="Center"
                  Margin="10,0,10,0" IsChecked="{Binding OurputInOneFile, Mode=TwoWay}">
          <TextBlock Text="{x:Static localprop:Resources.MainWinImageToPDFCHBOutputInOneFile}"
                     Foreground="{DynamicResource TextBrushWhiteAndBlack}" FontSize="12" MaxWidth="250"
                     TextWrapping="Wrap"/>
        </CheckBox>
        <StackPanel Grid.Row="0" Grid.Column="4" Orientation="Horizontal" HorizontalAlignment="Left"
                    VerticalAlignment="Center" Margin="10,0,0,0"
                    Visibility="{Binding UIStatus, Converter={StaticResource MergePDFUIStatusToUIElementVisibility}}">
          <Button x:Name="mergeOpenFile" Width="20" Height="20" Background="Transparent" BorderThickness="0"
                  Padding="0" Command="{Binding OpenWithOneFileEditor}">
            <Image Width="20" Height="20" Source="{DynamicResource MainWindow2OpenFileBtnImage}"/>
            <UIElement.Visibility>
              <MultiBinding Converter="{StaticResource IsOutputInOneFileToOneFileBrowseBtnVisibility}" Mode="OneWay"
                            UpdateSourceTrigger="PropertyChanged">
                <Binding ElementName="lsvFiles" Path="DataContext.UIStatus"/>
                <Binding ElementName="lsvFiles" Path="DataContext.OurputInOneFile"/>
              </MultiBinding>
            </UIElement.Visibility>
          </Button>
          <Button x:Name="mergeOpenFileInExploreBtn" Width="20" Height="20" Background="Transparent"
                  Margin="10,0,0,0" BorderThickness="0" Padding="0" Command="{Binding OpenOneFileInExplorer}">
            <Image Width="20" Height="20" Source="{DynamicResource MainWindow2OpenFolderBtnImage}"/>
            <UIElement.Visibility>
              <MultiBinding Converter="{StaticResource IsOutputInOneFileToOneFileBrowseBtnVisibility}" Mode="OneWay"
                            UpdateSourceTrigger="PropertyChanged">
                <Binding ElementName="lsvFiles" Path="DataContext.UIStatus"/>
                <Binding ElementName="lsvFiles" Path="DataContext.OurputInOneFile"/>
              </MultiBinding>
            </UIElement.Visibility>
          </Button>
        </StackPanel>
        <CheckBox Grid.Row="2" Grid.Column="3" Style="{DynamicResource DefaultCheckBoxStyle}"
                  HorizontalAlignment="Left" VerticalAlignment="Center" VerticalContentAlignment="Center"
                  Margin="10,0,10,0" IsChecked="{Binding ViewFileInExplore, Mode=TwoWay}">
          <TextBlock Margin="0 -20 0 -20" VerticalAlignment="Center"
                     Text="{x:Static localprop:Resources.MainWindowViewFileText}"
                     Foreground="{DynamicResource TextBrushWhiteAndBlack}" FontSize="12" MaxWidth="250"
                     TextWrapping="Wrap"/>
        </CheckBox>
        <local:ButtonEx x:Name="mergeBtn" Grid.Column="4" Grid.Row="0" Grid.RowSpan="3" Width="160" Height="40"
                        BorderThickness="0" CornerRadius="4" Style="{StaticResource ButtonStyle1}" Background="#F3554B"
                        MouseOverBackground="#FFF1665E" MousePressedBackground="#FFE3483F" DisabledBackground="#AAAAAA"
                        Foreground="White" MouseOverForeground="White" MousePressedForeground="White"
                        DisabledForeground="White" VerticalAlignment="Bottom" FontSize="16"
                        Content="{x:Static localprop:Resources.MainWindowConvertBtnContent}"
                        IsEnabled="{Binding UIStatus, Converter={StaticResource TaskStatusToEnable}}"
                        Command="{Binding BeginWorks}"/>
      </Grid>
    </Grid>
  </Grid>
</UserControl>