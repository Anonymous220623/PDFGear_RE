<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:pdfconverter"
                    xmlns:Controls="clr-namespace:pdfconverter.Controls">
  <Style TargetType="{x:Type Controls:ButtonEx}">
    <Setter Property="Control.Background" Value="White"/>
    <Setter Property="Control.BorderBrush" Value="Gray"/>
    <Setter Property="Control.Foreground" Value="Black"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="Controls:ButtonEx.CornerRadius" Value="2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Controls:ButtonEx}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border"
                      Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding MouseOverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="border"
                      Value="{Binding MousePressedBackground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding MousePressedForeground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border"
                      Value="{Binding DisabledBackground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="border"
                      Value="{Binding DisabledBorderbrush, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding DisabledForeground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="TextBox.Static.Border" Color="#2D000000"/>
  <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#33000000"/>
  <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#40000000"/>
  <SolidColorBrush x:Key="TextBox.Error.Border" Color="#FFFF0000"/>
  <Style TargetType="{x:Type Controls:PageRangeTextBox}">
    <Setter Property="Control.Background" Value="{DynamicResource ThemesPageRangeTextbox}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrushWhiteAndBlack}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Controls:PageRangeTextBox}">
          <Grid>
            <Border x:Name="border" Tag="{TemplateBinding TextBox.Text}" Background="Transparent"
                    BorderBrush="{DynamicResource MainViewRectangle}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                    Panel.ZIndex="2">
              <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden"/>
            </Border>
            <TextBox Text="{TemplateBinding FrameworkElement.Tag}" FontSize="12"
                     Background="{TemplateBinding Control.Background}" IsHitTestVisible="false" Panel.ZIndex="1">
              <FrameworkElement.Style>
                <Style TargetType="{x:Type TextBox}">
                  <Setter Property="Control.Foreground" Value="Transparent"/>
                  <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding Tag, Source={x:Reference border}}" Value="">
                      <Setter Property="Control.Foreground" Value="{DynamicResource PageRangePlaceHoder}"/>
                      <Setter Property="TextBox.TextWrapping" Value="NoWrap"/>
                      <Setter Property="Control.Padding" Value="0,5,0,0"/>
                      <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
                      <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </FrameworkElement.Style>
            </TextBox>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Value="{StaticResource TextBox.Focus.Border}" Property="Border.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsFocused" Value="false"/>
                <Condition Property="Controls:PageRangeTextBox.HasError" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{StaticResource TextBox.Error.Border}" Property="Border.BorderBrush"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true"/>
          <Condition Property="TextBoxBase.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush"
                Value="{DynamicResource {x:Static JetSystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MListViewStyleForUC" TargetType="{x:Type Controls:MListViewItem}">
    <Style.Setters>
      <Setter Property="UIElement.SnapsToDevicePixels" Value="false"/>
      <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="FrameworkElement.Height" Value="40"/>
      <Setter Property="Control.Padding" Value="0"/>
      <Setter Property="FrameworkElement.Margin" Value="0"/>
      <Setter Property="Control.Foreground" Value="{DynamicResource TextBrushWhiteAndBlack}"/>
      <Setter Property="Control.BorderThickness" Value="0"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Controls:MListViewItem}">
            <Grid>
              <Border x:Name="bd" Background="{DynamicResource ListViewBackground2}" BorderThickness="0"
                      Height="{TemplateBinding FrameworkElement.Height}" SnapsToDevicePixels="true">
                <GridViewRowPresenter HorizontalAlignment="Stretch"/>
              </Border>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger Property="ListBoxItem.IsSelected" Value="true">
                <Trigger.Setters>
                  <Setter TargetName="bd" Value="{DynamicResource ListViewIsSelected}" Property="Border.Background"/>
                </Trigger.Setters>
              </Trigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="UIElement.IsMouseOver" Value="true"/>
                  <Condition Property="ListBoxItem.IsSelected" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="bd" Value="{DynamicResource ListViewMouseOver}" Property="Border.Background"/>
              </MultiTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style.Setters>
  </Style>
</ResourceDictionary>