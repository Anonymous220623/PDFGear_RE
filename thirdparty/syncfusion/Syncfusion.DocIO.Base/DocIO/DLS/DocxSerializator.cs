// Decompiled with JetBrains decompiler
// Type: Syncfusion.DocIO.DLS.DocxSerializator
// Assembly: Syncfusion.DocIO.Base, Version=19.3460.0.57, Culture=neutral, PublicKeyToken=3d67ed1f87d44c89
// MVID: 5B963185-A109-4004-8296-CCBE35E10BFD
// Assembly location: C:\Program Files\PDFgear\Syncfusion.DocIO.Base.dll

using Syncfusion.CompoundFile.DocIO;
using Syncfusion.Compression;
using Syncfusion.Compression.Zip;
using Syncfusion.DocIO.ReaderWriter.Biff_Records;
using Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher;
using Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject;
using Syncfusion.DocIO.ReaderWriter.Security;
using Syncfusion.Office;
using Syncfusion.OfficeChart;
using Syncfusion.OfficeChart.Implementation;
using Syncfusion.OfficeChart.Implementation.Charts;
using Syncfusion.OfficeChart.Implementation.XmlSerialization;
using Syncfusion.OfficeChart.Implementation.XmlSerialization.Charts;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Xml;

#nullable disable
namespace Syncfusion.DocIO.DLS;

internal class DocxSerializator : DocumentSerializer
{
  internal const char CarriageReturn = '\r';
  internal const char NewLine = '\n';
  internal readonly string SlashSymbol = '\\'.ToString();
  internal readonly string InvertedCommas = '"'.ToString();
  internal readonly string NullSymbol = char.MinValue.ToString();
  private ZipArchive m_archive;
  private WordDocument m_document;
  private XmlWriter m_writer;
  private int m_relationShipID;
  private byte m_bFlags;
  private int m_chartElementsRelationId;
  private int m_chartColorStyleID;
  private int m_chartStyleID;
  private int m_chartDrawingID;
  private int m_id = 2;
  private int m_bookmarkId = 1;
  private int m_docPrId;
  private int m_shapeID = 1024 /*0x0400*/;
  private int m_lstOverId;
  private bool m_hasImages;
  private bool m_hasNumbering;
  private bool m_isFallBack;
  private bool m_hasFontTable;
  private Dictionary<int, Dictionary<int, string>> m_lstStyleReferences;
  private Dictionary<string, ImageRecord> m_pictureBullets;
  private bool m_hasFootnote;
  private bool m_hasEndnote;
  private bool m_hasMetafiles;
  private bool m_hasOleObject;
  private bool m_hasComment;
  private Dictionary<string, ImageRecord> m_documentImages;
  private Dictionary<string, ImageRecord> m_footnoteImages;
  private Dictionary<string, ImageRecord> m_endnoteImages;
  private Dictionary<string, ImageRecord> m_commentImages;
  private Dictionary<string, Dictionary<string, ImageRecord>> m_headerFooterImages;
  private Dictionary<string, Dictionary<string, Stream>> m_headerFooterSvgImages;
  private int m_hfSvgImageIndex = -1;
  private Dictionary<string, string> m_externalLinkImages;
  private Dictionary<string, int> m_bookmarks = new Dictionary<string, int>();
  private Dictionary<string, int> m_FallBackbookmarks = new Dictionary<string, int>();
  private List<string> m_editableRanges = new List<string>();
  private Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>> m_headerFooterColl;
  private List<string> m_symbolFontNames;
  private List<Entity> m_bookMarkCollection;
  private List<Entity> m_editableRangeCollection;
  private Dictionary<string, string> m_oleIds;
  internal Dictionary<string, Stream> m_oleContainers;
  private Dictionary<string, Stream> m_svgDataCollections;
  private Dictionary<string, string> m_svgDataHash;
  internal Dictionary<string, Dictionary<string, Stream>> m_hfOleContainers;
  private List<string> m_oleTypes;
  private Dictionary<string, DictionaryEntry> m_xmlItemsRef;
  private Dictionary<string, string> m_commentsId;
  private Dictionary<string, WComment> m_commentsCollection;
  private Dictionary<int, WFootnote> m_footnoteColl;
  private Dictionary<int, WFootnote> m_endnoteColl;
  private bool IsParagraphContainsCnfStyle;
  private int m_footnoteId = 1;
  private int m_endnoteId = 1;
  private bool HasHyperlink;
  private Dictionary<string, string> m_hyperlinkTargets;
  private Dictionary<string, string> m_altChunkTargets;
  private Dictionary<string, string> m_altChunkContentTypes;
  private Dictionary<string, string> m_footnoteHyperlinks;
  private Dictionary<string, string> m_footnoteAlternateChunks;
  private Dictionary<string, string> m_endnoteHyperlinks;
  private Dictionary<string, string> m_endnoteAlternateChunks;
  private Dictionary<string, Dictionary<string, string>> m_headerFooterHyperlinks;
  private Dictionary<string, Dictionary<string, string>> m_headerFooterAlternateChunks;
  private Dictionary<string, string> m_commentHyperlinks;
  private Dictionary<string, string> m_commentAlternateChunks;
  private Dictionary<string, string> m_hfIncludePicFieldUrl;
  private Dictionary<string, string> m_inclPicFieldUrl;
  private Dictionary<string, WChart> m_hfChartCollection;
  private Dictionary<string, WChart> m_footnoteChartCollection;
  private Dictionary<string, WChart> m_endnoteChartCollection;
  private Dictionary<string, WChart> m_commentsChartCollection;
  private Dictionary<string, WChart> m_documentChartCollection;
  private bool m_hasChart;
  private Dictionary<string, WChart> m_chartRelationId;
  private Dictionary<string, DictionaryEntry> m_relations;
  private Dictionary<string, Dictionary<string, string>> m_headerFooterInclPicUrls;
  private bool m_hasDiagrams;
  private Dictionary<string, Dictionary<string, DictionaryEntry>> m_hfRelations;
  private List<string> m_chartsPathNames;
  private List<string> m_cntlPathNames;
  private int m_trackChangeId;
  private string m_watermarkId = string.Empty;
  private string[] m_splittedTextNode;
  private WTextRange m_splittedItem;
  private bool m_isAlternativeTableFormat;
  private bool m_isAlternativeRowFormat;
  private bool m_isAlternativeCellFormat;
  private bool m_isAlternativeCharFormat;
  private bool m_isAlternativeParaFormat;
  private bool m_isAlternativeSection;
  private HeaderFooterType m_HeaderFooterType;
  private bool m_IsAutoshapeTextboxInHeader;
  private Stack<WFieldMark> m_fieldMarkStack;
  private Stack<WField> m_fieldStack;
  private Dictionary<string, DictionaryEntry> m_settingsRelations;
  private bool m_hasEmbedFonts;
  private AutoShapeHelper m_autoShapeHelper;
  private bool m_isSkipBinExtension;
  private List<string> m_imagesPath;
  private List<Entity> altChunkAfterBookmarks = new List<Entity>();
  private Dictionary<int, Dictionary<ParagraphItem, RevisionType>> m_movingRevisionDetails;
  private List<Revision> m_movingRevisionCollection;
  private List<Entity> m_commentMarkCollection;

  private bool IsMacroEnabled
  {
    get
    {
      return this.m_document.SaveFormatType.ToString().EndsWith("Docm") || this.m_document.SaveFormatType.ToString().EndsWith("Dotm");
    }
  }

  private bool IsSkipFieldItem
  {
    get => ((int) this.m_bFlags & 1) != 0;
    set => this.m_bFlags = (byte) ((int) this.m_bFlags & 254 | (value ? 1 : 0));
  }

  private bool IsWord2003ML
  {
    get => ((int) this.m_bFlags & 16 /*0x10*/) >> 4 != 0;
    set => this.m_bFlags = (byte) ((int) this.m_bFlags & 239 | (value ? 1 : 0) << 4);
  }

  private bool IsSerializingChoiceContent
  {
    get => ((int) this.m_bFlags & 2) >> 1 != 0;
    set => this.m_bFlags = (byte) ((int) this.m_bFlags & 253 | (value ? 1 : 0) << 1);
  }

  private bool IsWord2007 => this.m_document.SaveFormatType.ToString().Contains("2007");

  private bool IsWord2010 => this.m_document.SaveFormatType.ToString().Contains("2010");

  private bool IsWord2013 => this.m_document.SaveFormatType.ToString().Contains("2013");

  private bool IsWordLatest
  {
    get
    {
      return this.m_document.SaveFormatType == FormatType.Docm || this.m_document.SaveFormatType == FormatType.Dotm || this.m_document.SaveFormatType == FormatType.Dotx || this.m_document.SaveFormatType == FormatType.Docx;
    }
  }

  private bool IsStrict => this.m_document.SaveFormatType == FormatType.StrictDocx;

  private Dictionary<string, DictionaryEntry> SettingsRelations
  {
    get
    {
      if (this.m_settingsRelations == null)
        this.m_settingsRelations = new Dictionary<string, DictionaryEntry>();
      return this.m_settingsRelations;
    }
  }

  private List<Entity> BookMarkCollection
  {
    get
    {
      if (this.m_bookMarkCollection == null)
        this.m_bookMarkCollection = new List<Entity>();
      return this.m_bookMarkCollection;
    }
  }

  private List<Entity> EditableRangeCollection
  {
    get
    {
      if (this.m_editableRangeCollection == null)
        this.m_editableRangeCollection = new List<Entity>();
      return this.m_editableRangeCollection;
    }
  }

  internal Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>> HeadersFooters
  {
    get
    {
      if (this.m_headerFooterColl == null)
        this.m_headerFooterColl = new Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>>();
      return this.m_headerFooterColl;
    }
  }

  internal List<string> ControlsPathNames
  {
    get
    {
      if (this.m_cntlPathNames == null)
        this.m_cntlPathNames = new List<string>();
      return this.m_cntlPathNames;
    }
  }

  internal List<string> ChartsPathNames
  {
    get
    {
      if (this.m_chartsPathNames == null)
        this.m_chartsPathNames = new List<string>();
      return this.m_chartsPathNames;
    }
  }

  internal Dictionary<string, Dictionary<string, DictionaryEntry>> HFRelations
  {
    get
    {
      if (this.m_hfRelations == null)
        this.m_hfRelations = new Dictionary<string, Dictionary<string, DictionaryEntry>>();
      return this.m_hfRelations;
    }
  }

  internal Dictionary<string, Dictionary<string, string>> HeaderFooterInclPicUrls
  {
    get
    {
      if (this.m_headerFooterInclPicUrls == null)
        this.m_headerFooterInclPicUrls = new Dictionary<string, Dictionary<string, string>>();
      return this.m_headerFooterInclPicUrls;
    }
  }

  internal Dictionary<string, string> InclPicFieldUrl
  {
    get
    {
      if (this.m_inclPicFieldUrl == null)
        this.m_inclPicFieldUrl = new Dictionary<string, string>();
      return this.m_inclPicFieldUrl;
    }
  }

  internal Dictionary<string, string> HeaderFooterInclPicFieldUrl
  {
    get
    {
      if (this.m_hfIncludePicFieldUrl == null)
        this.m_hfIncludePicFieldUrl = new Dictionary<string, string>();
      return this.m_hfIncludePicFieldUrl;
    }
  }

  internal Dictionary<string, string> ExternalLinkImages
  {
    get
    {
      if (this.m_externalLinkImages == null)
        this.m_externalLinkImages = new Dictionary<string, string>();
      return this.m_externalLinkImages;
    }
  }

  internal Dictionary<string, WChart> ChartRelationId
  {
    get
    {
      if (this.m_chartRelationId == null)
        this.m_chartRelationId = new Dictionary<string, WChart>();
      return this.m_chartRelationId;
    }
  }

  internal Dictionary<string, WChart> HFChartCollection
  {
    get
    {
      if (this.m_hfChartCollection == null)
        this.m_hfChartCollection = new Dictionary<string, WChart>();
      return this.m_hfChartCollection;
    }
  }

  internal Dictionary<string, WChart> FootnoteChartCollection
  {
    get
    {
      if (this.m_footnoteChartCollection == null)
        this.m_footnoteChartCollection = new Dictionary<string, WChart>();
      return this.m_footnoteChartCollection;
    }
  }

  internal Dictionary<string, WChart> EndnoteChartCollection
  {
    get
    {
      if (this.m_endnoteChartCollection == null)
        this.m_endnoteChartCollection = new Dictionary<string, WChart>();
      return this.m_endnoteChartCollection;
    }
  }

  internal Dictionary<string, WChart> CommentsChartCollection
  {
    get
    {
      if (this.m_commentsChartCollection == null)
        this.m_commentsChartCollection = new Dictionary<string, WChart>();
      return this.m_commentsChartCollection;
    }
  }

  internal Dictionary<string, WChart> DocumentChartCollection
  {
    get
    {
      if (this.m_documentChartCollection == null)
        this.m_documentChartCollection = new Dictionary<string, WChart>();
      return this.m_documentChartCollection;
    }
  }

  private Dictionary<string, DictionaryEntry> ChartRelations
  {
    get
    {
      if (this.m_relations == null)
        this.m_relations = new Dictionary<string, DictionaryEntry>();
      return this.m_relations;
    }
  }

  internal List<string> ImagesPath
  {
    get
    {
      if (this.m_imagesPath == null)
        this.m_imagesPath = new List<string>();
      return this.m_imagesPath;
    }
  }

  internal Dictionary<string, string> CommentHyperlinks
  {
    get
    {
      if (this.m_commentHyperlinks == null)
        this.m_commentHyperlinks = new Dictionary<string, string>();
      return this.m_commentHyperlinks;
    }
  }

  private Dictionary<string, string> CommentAlternateChunks
  {
    get
    {
      if (this.m_commentAlternateChunks == null)
        this.m_commentAlternateChunks = new Dictionary<string, string>();
      return this.m_commentAlternateChunks;
    }
  }

  internal Dictionary<string, string> HyperlinkTargets
  {
    get
    {
      if (this.m_hyperlinkTargets == null)
        this.m_hyperlinkTargets = new Dictionary<string, string>();
      return this.m_hyperlinkTargets;
    }
  }

  internal Dictionary<string, string> AltChunkTargets
  {
    get
    {
      if (this.m_altChunkTargets == null)
        this.m_altChunkTargets = new Dictionary<string, string>();
      return this.m_altChunkTargets;
    }
  }

  internal Dictionary<string, string> AltChunkContentTypes
  {
    get
    {
      if (this.m_altChunkContentTypes == null)
        this.m_altChunkContentTypes = new Dictionary<string, string>();
      return this.m_altChunkContentTypes;
    }
  }

  internal Dictionary<string, string> FootnoteHyperlinks
  {
    get
    {
      if (this.m_footnoteHyperlinks == null)
        this.m_footnoteHyperlinks = new Dictionary<string, string>();
      return this.m_footnoteHyperlinks;
    }
  }

  private Dictionary<string, string> FootnoteAlternateChunks
  {
    get
    {
      if (this.m_footnoteAlternateChunks == null)
        this.m_footnoteAlternateChunks = new Dictionary<string, string>();
      return this.m_footnoteAlternateChunks;
    }
  }

  internal Dictionary<string, string> EndnoteHyperlinks
  {
    get
    {
      if (this.m_endnoteHyperlinks == null)
        this.m_endnoteHyperlinks = new Dictionary<string, string>();
      return this.m_endnoteHyperlinks;
    }
  }

  private Dictionary<string, string> EndnoteAlternateChunks
  {
    get
    {
      if (this.m_endnoteAlternateChunks == null)
        this.m_endnoteAlternateChunks = new Dictionary<string, string>();
      return this.m_endnoteAlternateChunks;
    }
  }

  internal Dictionary<string, Dictionary<string, string>> HeaderFooterHyperlinks
  {
    get
    {
      if (this.m_headerFooterHyperlinks == null)
        this.m_headerFooterHyperlinks = new Dictionary<string, Dictionary<string, string>>();
      return this.m_headerFooterHyperlinks;
    }
  }

  private Dictionary<string, Dictionary<string, string>> HeaderFooterAlternateChunks
  {
    get
    {
      if (this.m_headerFooterAlternateChunks == null)
        this.m_headerFooterAlternateChunks = new Dictionary<string, Dictionary<string, string>>();
      return this.m_headerFooterAlternateChunks;
    }
  }

  internal Dictionary<string, WComment> CommentCollection
  {
    get
    {
      if (this.m_commentsCollection == null)
        this.m_commentsCollection = new Dictionary<string, WComment>();
      return this.m_commentsCollection;
    }
  }

  private Dictionary<string, string> CommentsId
  {
    get
    {
      if (this.m_commentsId == null)
        this.m_commentsId = new Dictionary<string, string>();
      return this.m_commentsId;
    }
  }

  internal Dictionary<string, Stream> OleContainers
  {
    get
    {
      if (this.m_oleContainers == null)
        this.m_oleContainers = new Dictionary<string, Stream>();
      return this.m_oleContainers;
    }
  }

  internal Dictionary<string, Stream> SvgDataCollection
  {
    get
    {
      if (this.m_svgDataCollections == null)
        this.m_svgDataCollections = new Dictionary<string, Stream>();
      return this.m_svgDataCollections;
    }
  }

  private Dictionary<string, string> SvgDataHash
  {
    get
    {
      if (this.m_svgDataHash == null)
        this.m_svgDataHash = new Dictionary<string, string>();
      return this.m_svgDataHash;
    }
  }

  internal Dictionary<string, Dictionary<string, Stream>> HFOleContainers
  {
    get
    {
      if (this.m_hfOleContainers == null)
        this.m_hfOleContainers = new Dictionary<string, Dictionary<string, Stream>>();
      return this.m_hfOleContainers;
    }
  }

  private Dictionary<string, string> OleIds
  {
    get
    {
      if (this.m_oleIds == null)
        this.m_oleIds = new Dictionary<string, string>();
      return this.m_oleIds;
    }
  }

  internal List<string> OleContentTypes
  {
    get
    {
      if (this.m_oleTypes == null)
        this.m_oleTypes = new List<string>();
      return this.m_oleTypes;
    }
  }

  internal Dictionary<string, DictionaryEntry> XmlItemsRelations
  {
    get
    {
      if (this.m_xmlItemsRef == null)
        this.m_xmlItemsRef = new Dictionary<string, DictionaryEntry>();
      return this.m_xmlItemsRef;
    }
  }

  private Dictionary<int, Dictionary<int, string>> ListStyleReferences
  {
    get
    {
      if (this.m_lstStyleReferences == null)
        this.m_lstStyleReferences = new Dictionary<int, Dictionary<int, string>>();
      return this.m_lstStyleReferences;
    }
  }

  private Dictionary<string, ImageRecord> PictureBullets
  {
    get
    {
      if (this.m_pictureBullets == null)
        this.m_pictureBullets = new Dictionary<string, ImageRecord>();
      return this.m_pictureBullets;
    }
  }

  public bool HasFontTable
  {
    get => this.m_hasFontTable;
    set => this.m_hasFontTable = value;
  }

  public bool HasFootnote
  {
    get => this.m_hasFootnote;
    set => this.m_hasFootnote = value;
  }

  public bool HasEndnote
  {
    get => this.m_hasEndnote;
    set => this.m_hasEndnote = value;
  }

  public bool HasNumbering
  {
    get => this.m_hasNumbering;
    set => this.m_hasNumbering = value;
  }

  private Dictionary<string, ImageRecord> DocumentImages
  {
    get
    {
      if (this.m_documentImages == null)
        this.m_documentImages = new Dictionary<string, ImageRecord>();
      return this.m_documentImages;
    }
  }

  private Dictionary<string, ImageRecord> FootnoteImages
  {
    get
    {
      if (this.m_footnoteImages == null)
        this.m_footnoteImages = new Dictionary<string, ImageRecord>();
      return this.m_footnoteImages;
    }
  }

  private Dictionary<string, ImageRecord> EndnoteImages
  {
    get
    {
      if (this.m_endnoteImages == null)
        this.m_endnoteImages = new Dictionary<string, ImageRecord>();
      return this.m_endnoteImages;
    }
  }

  private Dictionary<string, ImageRecord> CommentImages
  {
    get
    {
      if (this.m_commentImages == null)
        this.m_commentImages = new Dictionary<string, ImageRecord>();
      return this.m_commentImages;
    }
  }

  private Dictionary<int, WFootnote> FootnoteCollection
  {
    get
    {
      if (this.m_footnoteColl == null)
        this.m_footnoteColl = new Dictionary<int, WFootnote>();
      return this.m_footnoteColl;
    }
  }

  private Dictionary<int, WFootnote> EndnoteCollection
  {
    get
    {
      if (this.m_endnoteColl == null)
        this.m_endnoteColl = new Dictionary<int, WFootnote>();
      return this.m_endnoteColl;
    }
  }

  internal Dictionary<string, Dictionary<string, ImageRecord>> HeaderFooterImages
  {
    get
    {
      if (this.m_headerFooterImages == null)
        this.m_headerFooterImages = new Dictionary<string, Dictionary<string, ImageRecord>>();
      return this.m_headerFooterImages;
    }
  }

  internal Dictionary<string, Dictionary<string, Stream>> HeaderFooterSvgImages
  {
    get
    {
      if (this.m_headerFooterSvgImages == null)
        this.m_headerFooterSvgImages = new Dictionary<string, Dictionary<string, Stream>>();
      return this.m_headerFooterSvgImages;
    }
  }

  private Stack<WField> FieldStack
  {
    get
    {
      if (this.m_fieldStack == null)
        this.m_fieldStack = new Stack<WField>();
      return this.m_fieldStack;
    }
  }

  private Stack<WFieldMark> FieldMarkStack
  {
    get
    {
      if (this.m_fieldMarkStack == null)
        this.m_fieldMarkStack = new Stack<WFieldMark>();
      return this.m_fieldMarkStack;
    }
  }

  private WField CurrentField
  {
    get
    {
      return this.m_fieldStack == null || this.m_fieldStack.Count <= 0 ? (WField) null : this.m_fieldStack.Peek();
    }
  }

  private AutoShapeHelper AutoShapeHelper
  {
    get
    {
      if (this.m_autoShapeHelper == null)
        this.m_autoShapeHelper = new AutoShapeHelper();
      return this.m_autoShapeHelper;
    }
  }

  private Dictionary<int, Dictionary<ParagraphItem, RevisionType>> MovingRevisionDetails
  {
    get => this.m_movingRevisionDetails;
    set => this.m_movingRevisionDetails = value;
  }

  private List<Revision> MovingRevisionCollection
  {
    get
    {
      if (this.m_movingRevisionCollection == null)
        this.m_movingRevisionCollection = new List<Revision>();
      return this.m_movingRevisionCollection;
    }
  }

  private List<Entity> CommentMarkCollection
  {
    get
    {
      if (this.m_commentMarkCollection == null)
        this.m_commentMarkCollection = new List<Entity>();
      return this.m_commentMarkCollection;
    }
  }

  public DocxSerializator()
  {
    this.m_archive = new ZipArchive();
    this.m_archive.DefaultCompressionLevel = CompressionLevel.Normal;
  }

  internal void Serialize(string fileName, WordDocument document)
  {
    FileStream fileStream = new FileStream(fileName, FileMode.Create);
    this.Serialize((Stream) fileStream, document);
    fileStream.Close();
    this.Close();
  }

  internal void SerializeWordML(string fileName, WordDocument document)
  {
    this.m_document = document;
    using (this.m_writer = (XmlWriter) new XmlTextWriter(fileName, Encoding.UTF8))
      this.SerializeWordML(document);
  }

  internal void SerializeWordML(Stream stream, WordDocument document)
  {
    this.m_document = document;
    this.m_writer = (XmlWriter) new XmlTextWriter(stream, Encoding.UTF8);
    this.SerializeWordML(document);
    this.m_writer.Flush();
  }

  internal void SerializeWordML(WordDocument document)
  {
    this.IsWord2003ML = true;
    this.m_document = document;
    if (document.HasMacros && !this.IsMacroEnabled && this.m_document.ActualFormatType != FormatType.Doc && this.m_document.ActualFormatType != FormatType.Dot)
      throw new Exception("This document contains macros (VBA project) and it cannot be saved as Macro-Free format. Please save the document as Macro-Enabled format (.Docm or .Dotm) or remove macros before saving the document using WordDocument.RemoveMacros method.");
    if (document.Footnotes.ContinuationNotice.Count > 0)
      ++this.m_footnoteId;
    if (document.Endnotes.ContinuationNotice.Count > 0)
      ++this.m_endnoteId;
    this.SerializeWordMLDocument();
    this.IsWord2003ML = false;
  }

  internal void SerializeWordMLDocument()
  {
    this.m_writer.WriteRaw("<?xml version =\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n");
    this.m_writer.WriteRaw("<?mso-application progid=\"Word.Document\"?>\r\n");
    this.m_writer.WriteStartElement("pkg", "package", "http://schemas.microsoft.com/office/2006/xmlPackage");
    this.SerializeWordMLGeneralRelation();
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/document.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.m_writer.WriteStartElement("w", "document", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "wpc", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "wp14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpg", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("xmlns", "wpi", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wps", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15 wp14");
    this.SerializeBackground(this.m_document.Background);
    this.SerializeDocumentBody();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (this.DocumentChartCollection.Count > 0)
      this.SerializeWordMLChart(this.DocumentChartCollection);
    this.DocumentChartCollection.Clear();
    this.SerializeWordMLThemes();
    this.SerializeWordMLSettings();
    this.SerializeWordMLFontTable();
    this.SerializeWordMLAppProperties();
    this.SerializeWordMLCoreProperties();
    this.SerializeWordMLStyles();
    this.SerializeWordMLNumberings();
    this.SerializeHeaderFooters();
    if (this.HasEndnote)
    {
      this.SerializeFootEndnotes(true);
      if (this.EndnoteImages.Count > 0 || this.EndnoteHyperlinks.Count > 0 || this.EndnoteAlternateChunks.Count > 0 || this.EndnoteChartCollection.Count > 0)
      {
        this.SerializeEndnoteRelations();
        this.SerializeWordMLChart(this.EndnoteChartCollection);
        this.EndnoteChartCollection.Clear();
      }
    }
    if (this.HasFootnote)
    {
      this.SerializeFootEndnotes(false);
      if (this.FootnoteImages.Count > 0 || this.FootnoteHyperlinks.Count > 0 || this.FootnoteAlternateChunks.Count > 0 || this.FootnoteChartCollection.Count > 0)
      {
        this.SerializeFootnoteRelations();
        this.SerializeWordMLChart(this.FootnoteChartCollection);
        this.FootnoteChartCollection.Clear();
      }
    }
    if (this.m_hasComment)
    {
      this.SerializeComments();
      if (this.CommentImages.Count > 0 || this.CommentHyperlinks.Count > 0 || this.CommentAlternateChunks.Count > 0 || this.CommentsChartCollection.Count > 0)
      {
        this.SerializeCommentRelations();
        this.SerializeWordMLChart(this.CommentsChartCollection);
        this.CommentsChartCollection.Clear();
      }
    }
    if (this.m_document.CustomDocumentProperties != null && this.m_document.CustomDocumentProperties.Count > 0)
      this.SerializeWordMLCustomProperties();
    if (this.m_hasDiagrams)
      this.SerializeWordMLDiagrams(this.m_document.DocxPackage);
    this.SerializeWordMLDocumentRelation();
    if (this.ControlsPathNames.Count > 0)
      this.SerializeWordMLActiveXControl(this.m_document.DocxPackage);
    if (this.m_document.CustomUIPartContainer != null)
      this.AddPartContainerToArchive(this.m_document.CustomUIPartContainer);
    if (this.m_document.UserCustomizationPartContainer != null)
      this.AddPartContainerToArchive(this.m_document.UserCustomizationPartContainer);
    if (this.m_document.CustomXMLContainer != null)
      this.SerializeWordMLCustomXMLContainer(this.m_document.CustomXMLContainer);
    if (this.SettingsRelations.Count > 0)
      this.SerializeWordMLSettingsRelation();
    if (this.PictureBullets.Count > 0)
    {
      this.SerializeWordMLNumberingsRelation();
      this.SerializeWordMLImages(this.PictureBullets);
    }
    this.SerializeWordMLImages(this.DocumentImages);
    if (this.HeaderFooterImages.Count > 0)
    {
      foreach (KeyValuePair<string, Dictionary<string, ImageRecord>> headerFooterImage in this.HeaderFooterImages)
        this.SerializeWordMLImages(headerFooterImage.Value);
    }
    if (this.FootnoteImages.Count > 0)
      this.SerializeWordMLImages(this.FootnoteImages);
    if (this.EndnoteImages.Count > 0)
      this.SerializeWordMLImages(this.EndnoteImages);
    if (this.OleContainers.Count > 0)
      this.SerializeWordMLOleContainer(this.OleContainers);
    if (this.HFOleContainers.Count > 0)
    {
      foreach (KeyValuePair<string, Dictionary<string, Stream>> hfOleContainer in this.HFOleContainers)
        this.SerializeWordMLOleContainer(hfOleContainer.Value);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLDiagrams(Package wordPackage)
  {
    foreach (KeyValuePair<string, Part> xmlPart in wordPackage.FindPartContainer("word/diagrams/").XmlParts)
    {
      string key = xmlPart.Key;
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/diagrams/" + key);
      if (key.Contains("drawing"))
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.ms-office.drawingml.diagramDrawing+xml");
      else if (key.Contains("data"))
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml");
      else if (key.Contains("colors"))
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml");
      else if (key.Contains("quickStyle"))
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml");
      else if (key.Contains("layout"))
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      Stream dataStream = xmlPart.Value.DataStream;
      if (dataStream != null && dataStream.Length > 0L)
      {
        dataStream.Position = 0L;
        XmlReader reader = XmlReader.Create(dataStream);
        reader.Read();
        while (reader.NodeType == XmlNodeType.XmlDeclaration || reader.Name == "mso-contentType")
        {
          if (reader.Name == "mso-contentType")
            this.m_writer.WriteRaw($"<?{reader.Name} ?>");
          reader.Read();
        }
        this.SkipWhitespaces(reader);
        this.m_writer.WriteNode(reader, false);
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeWordMLActiveXControl(Package wordPackage)
  {
    PartContainer partContainer = wordPackage.FindPartContainer("word/activeX/");
    foreach (KeyValuePair<string, Relations> relation in partContainer.Relations)
    {
      int num = 1;
      string targetPath = relation.Key.Replace("word/activeX/_rels/", "").Replace(".xml.rels", "") + ".bin";
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/" + relation.Key);
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
      this.SerializeRelationShip(relation.Value.DataStream, "rId" + num.ToString(), "http://schemas.microsoft.com/office/2006/relationships/activeXControlBinary", targetPath);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    foreach (KeyValuePair<string, Part> xmlPart in partContainer.XmlParts)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/activeX/" + xmlPart.Key);
      if (xmlPart.Key.Contains("xml"))
      {
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.ms-office.activeX+xml");
        this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
        Stream dataStream = xmlPart.Value.DataStream;
        this.m_writer.WriteAttributeString("pkg", "originalXmlEncoding", (string) null, "no");
        if (dataStream != null && dataStream.Length > 0L)
        {
          dataStream.Position = 0L;
          XmlReader reader = XmlReader.Create(dataStream);
          reader.Read();
          while (reader.NodeType == XmlNodeType.XmlDeclaration || reader.Name == "mso-contentType")
          {
            if (reader.Name == "mso-contentType")
              this.m_writer.WriteRaw($"<?{reader.Name} ?>");
            reader.Read();
          }
          this.SkipWhitespaces(reader);
          this.m_writer.WriteNode(reader, false);
        }
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.ms-office.activeX");
        MemoryStream dataStream = (MemoryStream) xmlPart.Value.DataStream;
        this.m_writer.WriteStartElement("pkg", "binaryData", (string) null);
        this.m_writer.WriteRaw(Convert.ToBase64String(dataStream.ToArray()));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeWordMLCustomXMLContainer(PartContainer customXMLContainer)
  {
    foreach (KeyValuePair<string, Relations> relation in customXMLContainer.Relations)
    {
      int num = 1;
      string targetPath = relation.Key.Replace("customXml/_rels/", "").Replace(".rels", "").Insert(4, "Props");
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/" + relation.Key);
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
      this.SerializeRelationShip(relation.Value.DataStream, "rId" + num.ToString(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps", targetPath);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    foreach (KeyValuePair<string, Part> xmlPart in customXMLContainer.XmlParts)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/customXml/" + xmlPart.Key);
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, xmlPart.Key.Contains("itemProps") ? "application/vnd.openxmlformats-officedocument.customXmlProperties+xml" : "application/xml");
      this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "32");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      Stream dataStream = xmlPart.Value.DataStream;
      this.m_writer.WriteAttributeString("pkg", "originalXmlEncoding", (string) null, "no");
      if (dataStream != null && dataStream.Length > 0L)
      {
        dataStream.Position = 0L;
        XmlReader reader = XmlReader.Create(dataStream);
        reader.Read();
        while (reader.NodeType == XmlNodeType.XmlDeclaration || reader.Name == "mso-contentType")
        {
          if (reader.Name == "mso-contentType")
            this.m_writer.WriteRaw($"<?{reader.Name} ?>");
          reader.Read();
        }
        this.SkipWhitespaces(reader);
        this.m_writer.WriteNode(reader, false);
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeWordMLChart(Dictionary<string, WChart> Charts)
  {
    foreach (KeyValuePair<string, WChart> chart in Charts)
      this.SerializeWordMLChartElements(chart.Value, chart.Key);
  }

  private void SerializeWordMLChartElements(WChart chart, string id)
  {
    ChartSerializator chartSerializator = new ChartSerializator();
    MemoryStream output = new MemoryStream();
    string relationId = string.Empty;
    string empty1 = string.Empty;
    string str1 = $"/word/charts/chart{id.Replace("rId", "")}.xml";
    ChartImpl officeChart = chart.OfficeChart as ChartImpl;
    DictionaryEntry dictionaryEntry = new DictionaryEntry();
    Relation relation = (Relation) null;
    foreach (string key in chart.DocxProps.Keys)
    {
      if (key.Contains("/chartUserShapes"))
      {
        (chart.OfficeChart as ChartImpl).RelationPreservedStreamCollection.Add("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", (Stream) null);
        break;
      }
    }
    using (XmlWriter.Create((Stream) output))
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, str1);
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, str1.Contains("drawings") ? "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml" : "application/vnd.openxmlformats-officedocument.drawingml.chart+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      chartSerializator.SerializeChart(this.m_writer, chart.OfficeChart as ChartImpl, string.Empty, this.GetAppVersion());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    foreach (string key in chart.DocxProps.Keys)
    {
      if (key.Contains("chartUserContentType") && key.Contains("/chartStyle"))
      {
        this.m_writer.WriteStartElement("pkg", "part", (string) null);
        string str2 = "style" + (object) ++this.m_chartStyleID;
        this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/charts/{str2}.xml");
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.ms-office.chartstyle+xml");
        this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
        Stream docxProp = chart.DocxProps[key];
        if (docxProp != null && docxProp.Length > 0L)
          this.m_writer.WriteNode(this.CreateReader(docxProp), false);
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        dictionaryEntry.Key = (object) "http://schemas.microsoft.com/office/2011/relationships/chartStyle";
        dictionaryEntry.Value = (object) (str2 + ".xml");
        if (officeChart.Relations.Count > 0)
        {
          relationId = officeChart.Relations.GenerateRelationId();
          officeChart.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartStyle");
        }
        else
          relationId = this.NextChartElementsRelationId();
        this.ChartRelations.Add(relationId, dictionaryEntry);
      }
      if (key.Contains("/chartColorStyle"))
      {
        this.m_writer.WriteStartElement("pkg", "part", (string) null);
        string str3 = "colors" + (object) ++this.m_chartColorStyleID;
        this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/charts/{str3}.xml");
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.ms-office.chartcolorstyle+xml");
        this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
        Stream docxProp = chart.DocxProps[key];
        if (docxProp != null && docxProp.Length > 0L)
          this.m_writer.WriteNode(this.CreateReader(docxProp), false);
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        dictionaryEntry.Key = (object) "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle";
        dictionaryEntry.Value = (object) (str3 + ".xml");
        if (officeChart.Relations.Count > 0)
        {
          relationId = officeChart.Relations.GenerateRelationId();
          officeChart.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle");
        }
        else
          relationId = this.NextChartElementsRelationId();
        this.ChartRelations.Add(relationId, dictionaryEntry);
      }
      if (key.Contains("/chartUserShapes"))
      {
        key.LastIndexOf('/');
        this.m_writer.WriteStartElement("pkg", "part", (string) null);
        string str4 = "drawing" + (object) ++this.m_chartDrawingID;
        this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/drawings/{str4}.xml");
        this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml");
        this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
        Stream docxProp = chart.DocxProps[key];
        if (docxProp != null && docxProp.Length > 0L)
          this.m_writer.WriteNode(this.CreateReader(docxProp), false);
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes";
        dictionaryEntry.Value = (object) $"../drawings/{str4}.xml";
        if (officeChart.Relations.Count > 0)
          relation = officeChart.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", out relationId);
        if (relation == null)
          relationId = this.NextChartElementsRelationId();
        this.ChartRelations.Add(relationId, dictionaryEntry);
      }
    }
    foreach (string key in officeChart.RelationPreservedStreamCollection.Keys)
    {
      if (key.Contains("rId"))
      {
        byte[] numArray = new byte[officeChart.RelationPreservedStreamCollection[key].Length];
        officeChart.RelationPreservedStreamCollection[key].Position = 0L;
        officeChart.RelationPreservedStreamCollection[key].Read(numArray, 0, numArray.Length);
        ImageRecord image = new ImageRecord(chart.Document, numArray);
        image.Attach();
        string fileExtension = this.GetFileExtension(image);
        string str5 = $"/word/media/image{(object) image.ImageId}{fileExtension}";
        if (!this.ImagesPath.Contains(str5))
        {
          this.ImagesPath.Add(str5);
          this.m_writer.WriteStartElement("pkg", "part", (string) null);
          this.m_writer.WriteAttributeString("pkg", "name", (string) null, str5);
          this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "image/" + this.GetFileExtension(image));
          this.m_writer.WriteAttributeString("pkg", "compression", (string) null, "store");
          this.m_writer.WriteStartElement("pkg", "binaryData", (string) null);
          this.m_writer.WriteRaw(Convert.ToBase64String(image.ImageBytes));
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
        }
        dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
        dictionaryEntry.Value = (object) $"../media/image{(object) image.ImageId}{fileExtension}";
        this.m_hasImages = true;
        this.ChartRelations.Add(key, dictionaryEntry);
      }
    }
    string empty2 = string.Empty;
    Stream stream = string.IsNullOrEmpty(chart.InternalDataPath) || !chart.DocxProps.ContainsKey(chart.InternalDataPath) ? this.GetManifestResourceStream("ExcelTemplate.xlsx") : chart.DocxProps[chart.InternalDataPath];
    string str6 = "Microsoft_Excel_Worksheet" + id.Replace("rId", "");
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    string str7 = chart.Workbook.Version.ToString() == "Excel97to2003" ? ".xls" : ".xlsx";
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/embeddings/{str6}{str7}");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    this.m_writer.WriteAttributeString("pkg", "compression", (string) null, "store");
    this.m_writer.WriteStartElement("pkg", "binaryData", (string) null);
    byte[] numArray1 = new byte[stream.Length];
    stream.Position = 0L;
    stream.Read(numArray1, 0, numArray1.Length);
    this.m_writer.WriteRaw(Convert.ToBase64String(numArray1));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
    dictionaryEntry.Value = (object) $"../embeddings/{str6}.xlsx";
    if (officeChart.Relations.Count > 0)
      relation = officeChart.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package", out relationId);
    if (relation == null)
      relationId = this.NextChartElementsRelationId();
    this.ChartRelations.Add(relationId, dictionaryEntry);
    this.SerializeWordMLChartElementRelations(this.ChartRelations, id);
    this.ChartRelations.Clear();
    this.m_chartElementsRelationId = 0;
    officeChart.RelationPreservedStreamCollection.Clear();
  }

  private void SerializeWordMLChartElementRelations(
    Dictionary<string, DictionaryEntry> relations,
    string OccurrenceOfChart)
  {
    MemoryStream memoryStream = new MemoryStream();
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/charts/_rels/chart{OccurrenceOfChart.Replace("rId", "")}.xml.rels");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    foreach (string key in relations.Keys)
    {
      DictionaryEntry relation = relations[key];
      this.SerializeChartElementRelation(this.m_writer, key, relation.Key.ToString(), relation.Value.ToString());
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLOleContainer(Dictionary<string, Stream> oleContainers)
  {
    foreach (KeyValuePair<string, Stream> oleContainer in oleContainers)
    {
      MemoryStream memoryStream = (MemoryStream) oleContainer.Value;
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      string str = "/word/embeddings/" + oleContainer.Key;
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/embeddings/" + oleContainer.Key);
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.oleObject");
      this.m_writer.WriteStartElement("pkg", "binaryData", (string) null);
      this.m_writer.WriteRaw(Convert.ToBase64String(memoryStream.ToArray()));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeWordMLImages(Dictionary<string, ImageRecord> imageCollection)
  {
    foreach (KeyValuePair<string, ImageRecord> image1 in imageCollection)
    {
      ImageRecord image2 = imageCollection[image1.Key];
      string str1 = "";
      string str2 = "";
      if (image2 == null)
      {
        str1 = "/word/media/image0.jpeg";
        str2 = "jpeg";
      }
      else
      {
        string fileExtension = this.GetFileExtension(image1.Value);
        string str3 = $"/word/media/image{(object) image2.ImageId}{fileExtension}";
        if (!this.ImagesPath.Contains(str3))
        {
          this.ImagesPath.Add(str3);
          this.m_writer.WriteStartElement("pkg", "part", (string) null);
          this.m_writer.WriteAttributeString("pkg", "name", (string) null, str3);
          this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "image/" + fileExtension);
          this.m_writer.WriteAttributeString("pkg", "compression", (string) null, "store");
          this.m_writer.WriteStartElement("pkg", "binaryData", (string) null);
          this.m_writer.WriteRaw(Convert.ToBase64String(image2.ImageBytes));
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
        }
      }
    }
  }

  private void SerializeWordMLGeneralRelation()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/_rels/.rels");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
    this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "512");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeGeneralRelations();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLDocumentRelation()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/_rels/document.xml.rels");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
    this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeDocumentRelations();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLThemes()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/theme/theme1.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.theme+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    if (this.m_document.DocHasThemes && this.m_document.Themes != null)
      this.SerializeThemes();
    else
      this.SerializeDefaultThemes();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLSettings()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/settings.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeSettings();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLNumberingsRelation()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/_rels/numbering.xml.rels");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeNumberingsRelation();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLFontRelation(
    Stream fontRelStream,
    Dictionary<string, string> fontRelations)
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/_rels/fontTable.xml.rels");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    foreach (KeyValuePair<string, string> fontRelation in fontRelations)
    {
      string str = fontRelation.Value;
      this.SerializeRelationShip(fontRelStream, "rId" + str, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font", fontRelation.Key.ToString());
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (this.m_document.FFNStringTable == null)
      return;
    foreach (FontFamilyNameRecord familyNameRecord in this.m_document.FFNStringTable.FontFamilyNameRecords)
    {
      foreach (KeyValuePair<string, Dictionary<string, DictionaryEntry>> embedFont in familyNameRecord.EmbedFonts)
      {
        foreach (KeyValuePair<string, DictionaryEntry> keyValuePair in embedFont.Value)
        {
          DictionaryEntry dictionaryEntry = keyValuePair.Value;
          string str = "/word/" + keyValuePair.Key.ToString();
          this.m_writer.WriteStartElement("pkg", "part", (string) null);
          this.m_writer.WriteAttributeString("pkg", "name", (string) null, str);
          this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.obfuscatedFont");
          this.m_writer.WriteStartElement("pkg", "binaryData", (string) null);
          this.m_writer.WriteRaw(Convert.ToBase64String(((MemoryStream) dictionaryEntry.Value).ToArray()));
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
        }
      }
    }
  }

  private void SerializeWordMLSettingsRelation()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/_rels/settings.xml.rels");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeSettingsRelation();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLStyles()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/styles.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeStyles();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLCustomProperties()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/docProps/custom.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.custom-properties+xml");
    this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeCustomProperties();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLNumberings()
  {
    if (this.m_document.ListStyles.Count == 0 && this.m_document.ListOverrides.Count == 0)
      return;
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/numbering.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeNumberings();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLFontTable()
  {
    if (this.m_symbolFontNames == null && this.m_document.FontSubstitutionTable.Count == 0 && (this.m_document.FFNStringTable == null || this.m_document.FFNStringTable.RecordsCount == 0))
      return;
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/fontTable.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeFontTable(out string _);
  }

  private void SerializeWordMLAppProperties()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/docProps/app.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.extended-properties+xml");
    this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeAppProperties();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeWordMLCoreProperties()
  {
    this.m_writer.WriteStartElement("pkg", "part", (string) null);
    this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/docProps/core.xml");
    this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.core-properties+xml");
    this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
    this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    this.SerializeCoreProperties();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  internal void Serialize(Stream stream, WordDocument document)
  {
    this.m_document = document;
    if (document.HasMacros && !this.IsMacroEnabled && this.m_document.ActualFormatType != FormatType.Doc && this.m_document.ActualFormatType != FormatType.Dot)
      throw new Exception("This document contains macros (VBA project) and it cannot be saved as Macro-Free format. Please save the document as Macro-Enabled format (.Docm or .Dotm) or remove macros before saving the document using WordDocument.RemoveMacros method.");
    if (document.Footnotes.ContinuationNotice.Count > 0)
      ++this.m_footnoteId;
    if (document.Endnotes.ContinuationNotice.Count > 0)
      ++this.m_endnoteId;
    this.SerializeDocument();
    this.SerializeStyles();
    this.SerializeNumberings();
    if (this.m_document.DocHasThemes && this.m_document.Themes != null)
      this.SerializeThemes();
    else
      this.SerializeDefaultThemes();
    this.SerializeSettings();
    this.SerializeCoreProperties();
    this.SerializeAppProperties();
    string contentType;
    this.SerializeFontTable(out contentType);
    if (this.m_document.CustomDocumentProperties != null && this.m_document.CustomDocumentProperties.Count > 0)
      this.SerializeCustomProperties();
    if (this.m_document.HasMacros && this.IsMacroEnabled)
    {
      this.SerializeVbaProject();
      this.SerializeVbaData();
      this.SerializeVbaProjectSignatures();
    }
    this.SerializeSettingsRelation();
    if (this.PictureBullets.Count > 0)
      this.SerializeNumberingsRelation();
    this.SerializeHeaderFooters();
    if (this.m_hasComment)
    {
      this.SerializeComments();
      if (this.CommentImages.Count > 0 || this.CommentHyperlinks.Count > 0 || this.CommentAlternateChunks.Count > 0 || this.CommentsChartCollection.Count > 0)
      {
        this.SerializeCommentRelations();
        this.CommentsChartCollection.Clear();
      }
    }
    if (this.m_hasComment && this.m_document.CommentsEx.Count > 0)
      this.SerializeCommentsExtended();
    if (this.HasEndnote)
    {
      this.SerializeFootEndnotes(true);
      if (this.EndnoteImages.Count > 0 || this.EndnoteHyperlinks.Count > 0 || this.EndnoteAlternateChunks.Count > 0 || this.EndnoteChartCollection.Count > 0)
      {
        this.SerializeEndnoteRelations();
        this.EndnoteChartCollection.Clear();
      }
    }
    if (this.HasFootnote)
    {
      this.SerializeFootEndnotes(false);
      if (this.FootnoteImages.Count > 0 || this.FootnoteHyperlinks.Count > 0 || this.FootnoteAlternateChunks.Count > 0 || this.FootnoteChartCollection.Count > 0)
      {
        this.SerializeFootnoteRelations();
        this.FootnoteChartCollection.Clear();
      }
    }
    if (this.m_hasDiagrams)
      this.AddDiagramToZip(this.m_document.DocxPackage);
    if (this.m_document.CustomXmlParts.Count > 0)
      this.AddCustomXMLPartsToArchive();
    this.SerializeDocumentRelations();
    if (this.ChartsPathNames.Count > 0)
      this.AddChartsToZip(this.m_document.DocxPackage);
    if (this.ControlsPathNames.Count > 0)
      this.AddControlsToZip(this.m_document.DocxPackage);
    if (this.m_document.CustomUIPartContainer != null)
      this.AddPartContainerToArchive(this.m_document.CustomUIPartContainer);
    if (this.m_document.UserCustomizationPartContainer != null)
      this.AddPartContainerToArchive(this.m_document.UserCustomizationPartContainer);
    if (this.m_document.CustomXMLContainer != null)
      this.AddPartContainerToArchive(this.m_document.CustomXMLContainer);
    this.SerializeGeneralRelations();
    if (this.m_document.HasMacros && this.IsMacroEnabled)
      this.SerializeVbaProjectRelations();
    this.SerializeContentTypes(contentType);
    if (string.IsNullOrEmpty(document.Password))
    {
      this.m_archive.Save(stream, false);
    }
    else
    {
      MemoryStream data = new MemoryStream();
      this.m_archive.Save((Stream) data, false);
      using (ICompoundFile compoundFile = document.CreateCompoundFile())
      {
        string password = document.Password;
        if (this.IsWord2007)
        {
          StandardEncryptor standardEncryptor = new StandardEncryptor();
          data.Position = 0L;
          standardEncryptor.Encrypt((Stream) data, password, compoundFile.RootStorage);
          compoundFile.Save(stream);
        }
        else
        {
          AgileEncryptor agileEncryptor = !this.IsWord2010 ? new AgileEncryptor("SHA512", 256 /*0x0100*/, 64 /*0x40*/) : new AgileEncryptor();
          data.Position = 0L;
          agileEncryptor.Encrypt((Stream) data, password, compoundFile.RootStorage);
          compoundFile.Save(stream);
        }
      }
    }
    this.Close();
  }

  private void AddCustomXMLPartsToArchive()
  {
    int num = this.m_document.CustomXMLContainer == null ? 1 : this.m_document.CustomXMLContainer.XmlParts.Count + 1;
    foreach (string key1 in this.m_document.CustomXmlParts.Keys)
    {
      CustomXMLPart customXmlPart = this.m_document.CustomXmlParts[key1];
      XmlDocument xmlDocument = new XmlDocument();
      xmlDocument.LoadXml(customXmlPart.XML);
      MemoryStream memoryStream1 = new MemoryStream();
      xmlDocument.Save((Stream) memoryStream1);
      if (string.IsNullOrEmpty(this.m_document.CustomXmlPartContainer.Name))
        this.m_document.CustomXmlPartContainer.Name = "customXml/";
      Part xmlPart1 = new Part((Stream) memoryStream1);
      xmlPart1.Name = $"item{(object) num}.xml";
      if (this.m_document.CustomXMLContainer != null && this.m_document.CustomXMLContainer.XmlParts.ContainsKey(xmlPart1.Name))
      {
        string key2;
        for (key2 = xmlPart1.Name; this.m_document.CustomXMLContainer.XmlParts.ContainsKey(key2); key2 = $"item{(object) num}.xml")
          ++num;
        xmlPart1.Name = key2;
      }
      this.m_document.CustomXmlPartContainer.AddPart(xmlPart1);
      MemoryStream memoryStream2 = new MemoryStream();
      XmlWriter writer1 = this.CreateWriter((Stream) memoryStream2);
      writer1.WriteStartElement("ds", "datastoreItem", "http://schemas.openxmlformats.org/officeDocument/2006/customXml");
      writer1.WriteAttributeString("ds", "itemID", (string) null, customXmlPart.Id);
      writer1.WriteAttributeString("xmlns", "ds", (string) null, "http://schemas.openxmlformats.org/officeDocument/2006/customXml");
      writer1.WriteEndElement();
      writer1.Flush();
      Part xmlPart2 = new Part((Stream) memoryStream2);
      xmlPart2.Name = $"itemProps{(object) num}.xml";
      this.m_document.CustomXmlPartContainer.AddPart(xmlPart2);
      MemoryStream memoryStream3 = new MemoryStream();
      XmlWriter writer2 = this.CreateWriter((Stream) memoryStream3);
      writer2.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
      writer2.WriteStartElement("Relationship");
      writer2.WriteAttributeString("Id", "rId" + num.ToString());
      writer2.WriteAttributeString("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps");
      writer2.WriteAttributeString("Target", xmlPart2.Name);
      writer2.WriteEndElement();
      writer2.WriteEndElement();
      writer2.Flush();
      Relations relations = new Relations((Stream) memoryStream3, $"customXml/_rels/item{(object) num}.xml.rels");
      this.m_document.CustomXmlPartContainer.Relations.Add($"customXml/_rels/item{(object) num}.xml.rels", relations);
      ++num;
    }
    this.AddPartContainerToArchive(this.m_document.CustomXmlPartContainer);
  }

  private void AddPartContainerToArchive(PartContainer partContainer)
  {
    string name1 = partContainer.Name;
    string[] array1 = new string[partContainer.Relations.Count];
    partContainer.Relations.Keys.CopyTo(array1, 0);
    if (this.IsWord2003ML && array1.Length > 0)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/customXml/_rels/item1.xml.rels");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    }
    for (int index = 0; index < array1.Length; ++index)
    {
      string itemName = array1[index];
      if (this.IsWord2003ML)
      {
        int num = index + 1;
        this.SerializeRelationShip(partContainer.Relations[array1[index]].DataStream, "rId" + num.ToString(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps", $"itemProps{(object) num}.xml");
      }
      else
        this.m_archive.AddItem(itemName, partContainer.Relations[array1[index]].DataStream, false, FileAttributes.Archive);
    }
    if (this.IsWord2003ML && array1.Length > 0)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    string name2 = partContainer.Name;
    this.AddPartContainerXMLPartContainersToArchive(name2, partContainer.XmlPartContainers);
    string[] array2 = new string[partContainer.XmlParts.Count];
    foreach (string key in partContainer.XmlParts.Keys)
    {
      if (key == this.m_document.m_metaXmlItem)
      {
        XmlDocument schemaProperties = this.m_document.ContentTypeProperties.m_contentTypeSchemaProperties;
        Stream stream = (Stream) new MemoryStream();
        schemaProperties.Save(stream);
        partContainer.XmlParts.Remove(key);
        partContainer.XmlParts.Add(key, new Part(stream)
        {
          Name = key
        });
        break;
      }
    }
    partContainer.XmlParts.Keys.CopyTo(array2, 0);
    for (int index = 0; index < array2.Length; ++index)
    {
      string itemName = name2 + array2[index];
      if (this.IsWord2003ML)
      {
        this.m_writer.WriteStartElement("pkg", "part", (string) null);
        if (!itemName.Contains("Props"))
        {
          this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/customXml/item1.xml");
          this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/xml");
          this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "32");
          this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
          this.m_writer.WriteNode(this.CreateReader(partContainer.XmlParts[array2[index]].DataStream), false);
        }
        else
        {
          this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/customXml/itemProps1.xml");
          this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.customXmlProperties+xml");
          this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "32");
          this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
          this.m_writer.WriteAttributeString("pkg", "originalXmlStandalone", (string) null, "no");
          this.m_writer.WriteRaw(Convert.ToBase64String(((MemoryStream) partContainer.XmlParts[array2[index]].DataStream).ToArray()));
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      else
        this.m_archive.AddItem(itemName, partContainer.XmlParts[array2[index]].DataStream, false, FileAttributes.Archive);
    }
  }

  private void AddPartContainerXMLPartContainersToArchive(
    string itemName,
    Dictionary<string, PartContainer> xmlPartContainers)
  {
    string[] array1 = new string[xmlPartContainers.Count];
    xmlPartContainers.Keys.CopyTo(array1, 0);
    if (this.IsWord2003ML && array1.Length > 0)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/customXml/_rels/item1.xml.rels");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteAttributeString("pkg", "padding", (string) null, "256");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
      this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    }
    for (int index1 = 0; index1 < array1.Length; ++index1)
    {
      string str = itemName + array1[index1];
      string[] array2 = new string[xmlPartContainers[array1[index1]].Relations.Count];
      xmlPartContainers[array1[index1]].Relations.Keys.CopyTo(array2, 0);
      for (int index2 = 0; index2 < array2.Length; ++index2)
      {
        string itemName1 = str + array2[index2];
        if (this.IsWord2003ML)
        {
          int num = index1 + 1;
          this.SerializeRelationShip(xmlPartContainers[array1[index1]].Relations[array2[index2]].DataStream, num.ToString(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps", $"itemProps{(object) num}.xml");
        }
        else
          this.m_archive.AddItem(itemName1, xmlPartContainers[array1[index1]].Relations[array2[index2]].DataStream, false, FileAttributes.Archive);
      }
    }
    if (this.IsWord2003ML && array1.Length > 0)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    for (int index3 = 0; index3 < array1.Length; ++index3)
    {
      string str = itemName + array1[index3];
      string[] array3 = new string[xmlPartContainers[array1[index3]].XmlParts.Count];
      xmlPartContainers[array1[index3]].XmlParts.Keys.CopyTo(array3, 0);
      for (int index4 = 0; index4 < array3.Length; ++index4)
        this.m_archive.AddItem(str + array3[index4], xmlPartContainers[array1[index3]].XmlParts[array3[index4]].DataStream, false, FileAttributes.Archive);
    }
    for (int index5 = 0; index5 < array1.Length; ++index5)
    {
      string str = itemName + array1[index5];
      string[] array4 = new string[xmlPartContainers[array1[index5]].XmlPartContainers.Count];
      xmlPartContainers[array1[index5]].XmlPartContainers.Keys.CopyTo(array4, 0);
      for (int index6 = 0; index6 < array4.Length; ++index6)
        this.AddPartContainerXMLPartContainersToArchive(str + array4[index6], xmlPartContainers[array1[index5]].XmlPartContainers[array4[index6]].XmlPartContainers);
    }
  }

  private void SerializeFontTable(out string contentType)
  {
    contentType = string.Empty;
    if (this.m_symbolFontNames == null && this.m_document.FontSubstitutionTable.Count == 0 && (this.m_document.FFNStringTable == null || this.m_document.FFNStringTable.RecordsCount == 0))
    {
      if (this.m_document.UsedFontNames.Count == 0)
        return;
      this.m_document.FFNStringTable = new FontFamilyNameStringTable();
      this.m_document.FFNStringTable.RecordsCount = this.m_document.UsedFontNames.Count;
      int index = 0;
      foreach (Font usedFontName in this.m_document.UsedFontNames)
      {
        this.m_document.FFNStringTable.FontFamilyNameRecords[index] = new FontFamilyNameRecord()
        {
          FontName = usedFontName.Name
        };
        ++index;
      }
    }
    this.HasFontTable = true;
    bool flag = false;
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    MemoryStream memoryStream = (MemoryStream) null;
    XmlWriter xmlWriter = (XmlWriter) null;
    Dictionary<string, string> fontRelations = new Dictionary<string, string>();
    this.m_writer.WriteStartElement("w", "fonts", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "w", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15");
    List<string> stringList = new List<string>();
    if (this.m_symbolFontNames != null)
    {
      foreach (string symbolFontName in this.m_symbolFontNames)
      {
        this.m_writer.WriteStartElement("font", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", symbolFontName);
        if (this.m_document.FontSubstitutionTable.ContainsKey(symbolFontName) && this.m_document.FontSubstitutionTable[symbolFontName] != string.Empty)
        {
          stringList.Add(symbolFontName);
          this.m_writer.WriteStartElement("altName", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.FontSubstitutionTable[symbolFontName]);
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteStartElement("charset", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "02");
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
    }
    if (this.m_document.FFNStringTable != null)
    {
      foreach (FontFamilyNameRecord familyNameRecord in this.m_document.FFNStringTable.FontFamilyNameRecords)
      {
        this.m_writer.WriteStartElement("font", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        string[] strArray1 = familyNameRecord.FontName.Split(new char[1]);
        this.m_writer.WriteAttributeString("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", strArray1[0]);
        if (familyNameRecord.AlternativeFontName != string.Empty)
        {
          this.m_writer.WriteStartElement("altName", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", familyNameRecord.AlternativeFontName);
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteStartElement("charset", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", familyNameRecord.CharacterSetId.ToString());
        this.m_writer.WriteEndElement();
        this.m_writer.WriteStartElement("family", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((FontFamilyType) familyNameRecord.FontFamilyID).ToString().ToLower());
        this.m_writer.WriteEndElement();
        this.m_writer.WriteStartElement("pitch", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((FontPitchType) familyNameRecord.PitchRequest).ToString().ToLower());
        this.m_writer.WriteEndElement();
        this.m_writer.WriteStartElement("sig", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("usb0", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetFontSignature(familyNameRecord.SigUsb0));
        this.m_writer.WriteAttributeString("usb1", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetFontSignature(familyNameRecord.SigUsb1));
        this.m_writer.WriteAttributeString("usb2", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetFontSignature(familyNameRecord.SigUsb2));
        this.m_writer.WriteAttributeString("usb3", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetFontSignature(familyNameRecord.SigUsb3));
        this.m_writer.WriteAttributeString("csb0", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetFontSignature(familyNameRecord.SigCsb0));
        this.m_writer.WriteAttributeString("csb1", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetFontSignature(familyNameRecord.SigCsb1));
        this.m_writer.WriteEndElement();
        if (familyNameRecord.EmbedFonts.Count > 0)
        {
          string itemName = "word\\fonts\\";
          if (!flag && !this.IsWord2003ML)
          {
            this.m_hasEmbedFonts = true;
            memoryStream = new MemoryStream();
            xmlWriter = this.CreateWriter((Stream) memoryStream);
            xmlWriter.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
            flag = true;
          }
          foreach (KeyValuePair<string, Dictionary<string, DictionaryEntry>> embedFont in familyNameRecord.EmbedFonts)
          {
            foreach (KeyValuePair<string, DictionaryEntry> keyValuePair in embedFont.Value)
            {
              DictionaryEntry dictionaryEntry = keyValuePair.Value;
              if (fontRelations.ContainsKey(keyValuePair.Key.ToString()))
              {
                this.m_writer.WriteStartElement(embedFont.Key, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
                this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", "rId" + fontRelations[keyValuePair.Key.ToString()]);
                if (!familyNameRecord.IsSubsetted)
                  this.m_writer.WriteAttributeString("fontKey", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dictionaryEntry.Key.ToString());
                else
                  this.m_writer.WriteAttributeString("subsetted", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dictionaryEntry.Key.ToString());
                this.m_writer.WriteEndElement();
              }
              else
              {
                int num = fontRelations.Count + 1;
                fontRelations.Add(keyValuePair.Key.ToString(), num.ToString());
                if (!this.IsWord2003ML)
                {
                  xmlWriter.WriteStartElement("Relationship");
                  xmlWriter.WriteAttributeString("Id", "rId" + (object) num);
                  xmlWriter.WriteAttributeString("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font");
                  xmlWriter.WriteAttributeString("Target", keyValuePair.Key.ToString());
                  xmlWriter.WriteEndElement();
                  string[] strArray2 = keyValuePair.Key.ToString().Split('.');
                  contentType = strArray2[1];
                  itemName += keyValuePair.Key.ToString().Replace("fonts/", "");
                  if (this.m_archive.Find(itemName) == -1)
                  {
                    this.m_archive.AddItem(itemName, dictionaryEntry.Value as Stream, false, FileAttributes.Archive);
                    itemName = "word\\fonts\\";
                  }
                }
                this.m_writer.WriteStartElement(embedFont.Key, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
                this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", "rId" + (object) num);
                if (!familyNameRecord.IsSubsetted)
                  this.m_writer.WriteAttributeString("fontKey", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dictionaryEntry.Key.ToString());
                else
                  this.m_writer.WriteAttributeString("subsetted", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dictionaryEntry.Key.ToString());
                this.m_writer.WriteEndElement();
              }
            }
          }
        }
        this.m_writer.WriteEndElement();
      }
    }
    else
    {
      foreach (KeyValuePair<string, string> keyValuePair in this.m_document.FontSubstitutionTable)
      {
        if (!stringList.Contains(keyValuePair.Key) && keyValuePair.Value != string.Empty)
        {
          this.m_writer.WriteStartElement("font", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", keyValuePair.Key);
          this.m_writer.WriteStartElement("altName", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", keyValuePair.Value);
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
    if (!this.IsWord2003ML)
    {
      this.m_writer.Flush();
      this.m_archive.AddItem("word\\fontTable.xml", (Stream) data, false, FileAttributes.Archive);
    }
    if (memoryStream != null)
    {
      xmlWriter.WriteEndElement();
      if (fontRelations.Count > 0 && !this.IsWord2003ML)
      {
        fontRelations.Clear();
        xmlWriter.Flush();
        this.m_archive.AddItem("word\\_rels\\fontTable.xml.rels", (Stream) memoryStream, false, FileAttributes.Archive);
      }
    }
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (fontRelations.Count <= 0 || !this.IsWord2003ML)
      return;
    this.SerializeWordMLFontRelation((Stream) memoryStream, fontRelations);
  }

  private string GetFontSignature(byte[] sig)
  {
    char[] charArray = BitConverter.ToString(sig).ToCharArray();
    Array.Reverse((Array) charArray);
    return new string(charArray).Replace("-", string.Empty);
  }

  private void SerializeDocument()
  {
    MemoryStream data = new MemoryStream();
    this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "document", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "wpc", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "wp14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpg", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("xmlns", "wpi", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wps", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15 wp14");
    if (this.IsStrict)
      this.m_writer.WriteAttributeString("w", "conformance", (string) null, "strict");
    this.SerializeBackground(this.m_document.Background);
    this.SerializeDocumentBody();
    this.m_writer.WriteEndElement();
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\document.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeVbaProjectRelations()
  {
    MemoryStream data = new MemoryStream();
    this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/wordVbaData", "vbaData.xml");
    if (this.m_document.VbaProjectSignature != null)
      this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/vbaProjectSignature", "vbaProjectSignature.bin");
    if (this.m_document.VbaProjectSignatureAgile != null)
      this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/vbaProjectSignatureAgile", "vbaProjectSignatureAgile.bin");
    this.m_writer.WriteEndElement();
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\_rels\\vbaProject.bin.rels", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeVbaProject()
  {
    this.m_archive.AddItem("word\\vbaProject.bin", this.m_document.VbaProject, false, FileAttributes.Archive);
  }

  private void SerializeVbaProjectSignatures()
  {
    if (this.m_document.VbaProjectSignature != null)
      this.m_archive.AddItem("word\\vbaProjectSignature.bin", this.m_document.VbaProjectSignature, false, FileAttributes.Archive);
    if (this.m_document.VbaProjectSignatureAgile == null)
      return;
    this.m_archive.AddItem("word\\vbaProjectSignatureAgile.bin", this.m_document.VbaProjectSignatureAgile, false, FileAttributes.Archive);
  }

  private void SerializeVbaData()
  {
    MemoryStream data = new MemoryStream();
    this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("wne", "vbaSuppData", "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpc", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "wp14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "w", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpg", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("xmlns", "wpi", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wps", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15 wp14");
    if (this.m_document.DocEvents.Count > 0)
    {
      this.m_writer.WriteStartElement("wne", "docEvents", "http://schemas.microsoft.com/office/word/2006/wordml");
      foreach (string docEvent in this.m_document.DocEvents)
      {
        this.m_writer.WriteStartElement("wne", docEvent, "http://schemas.microsoft.com/office/word/2006/wordml");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.VbaData.Count > 0)
    {
      this.m_writer.WriteStartElement("wne", "mcds", "http://schemas.microsoft.com/office/word/2006/wordml");
      foreach (MacroData macroData in this.m_document.VbaData)
      {
        this.m_writer.WriteStartElement("wne", "mcd", "http://schemas.microsoft.com/office/word/2006/wordml");
        this.m_writer.WriteAttributeString("wne", "macroName", "http://schemas.microsoft.com/office/word/2006/wordml", macroData.Name.ToUpper());
        this.m_writer.WriteAttributeString("wne", "name", "http://schemas.microsoft.com/office/word/2006/wordml", macroData.Name);
        this.m_writer.WriteAttributeString("wne", "bEncrypt", "http://schemas.microsoft.com/office/word/2006/wordml", macroData.Encrypt);
        this.m_writer.WriteAttributeString("wne", "cmg", "http://schemas.microsoft.com/office/word/2006/wordml", macroData.Cmg);
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\vbaData.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeHeaderFooters()
  {
    this.SerializeHeaderFooter(HeaderFooterType.EvenFooter, this.m_document);
    this.SerializeHeaderFooter(HeaderFooterType.EvenHeader, this.m_document);
    this.SerializeHeaderFooter(HeaderFooterType.FirstPageFooter, this.m_document);
    this.SerializeHeaderFooter(HeaderFooterType.FirstPageHeader, this.m_document);
    this.SerializeHeaderFooter(HeaderFooterType.OddFooter, this.m_document);
    this.SerializeHeaderFooter(HeaderFooterType.OddHeader, this.m_document);
  }

  private void SerializeHeaderFooter(HeaderFooterType hfType, WordDocument doc)
  {
    if (this.HeadersFooters.Count == 0 || !this.HeadersFooters.ContainsKey(hfType))
      return;
    Dictionary<string, HeaderFooter> headersFooter = this.HeadersFooters[hfType];
    foreach (string key in headersFooter.Keys)
    {
      HeaderFooter headerFooter = headersFooter[key];
      if (hfType == HeaderFooterType.EvenHeader || hfType == HeaderFooterType.FirstPageHeader || hfType == HeaderFooterType.OddHeader)
      {
        string headerFooterPath = $"word\\header{key.Replace("rId", "")}.xml";
        string headerFooterRelsPath = $"word\\_rels\\header{key.Replace("rId", "")}.xml.rels";
        this.SerializeHeader(headerFooter, key, headerFooterPath, headerFooterRelsPath);
      }
      else
      {
        string headerFooterPath = $"word\\footer{key.Replace("rId", "")}.xml";
        string headerFooterRelsPath = $"word\\_rels\\footer{key.Replace("rId", "")}.xml.rels";
        this.SerializeFooter(headerFooter, key, headerFooterPath, headerFooterRelsPath);
      }
    }
  }

  private void SerializeHeader(
    HeaderFooter header,
    string id,
    string headerFooterPath,
    string headerFooterRelsPath)
  {
    MemoryStream data = new MemoryStream();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/header{id.Replace("rId", "")}.xml");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "hdr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "ve", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "pic", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "wpc", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
    this.m_writer.WriteAttributeString("xmlns", "wp14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpg", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("xmlns", "wpi", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
    this.m_writer.WriteAttributeString("xmlns", "wps", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("ve", "Ignorable", (string) null, "w14 w15 wp14");
    Watermark watermark = header.Watermark;
    if (watermark != null && watermark.Type != WatermarkType.NoWatermark && header.WriteWatermark && (!(watermark is PictureWatermark) || (watermark as PictureWatermark).Picture != null))
    {
      if (header.Paragraphs.Count == 0)
      {
        this.m_writer.WriteStartElement("p", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteStartElement("pStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Header");
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        this.SerializeWatermark(watermark);
        this.m_writer.WriteEndElement();
        this.SerializeBodyItems(header.Items, true);
      }
      else
      {
        for (int index = 0; index < header.Items.Count; ++index)
        {
          TextBodyItem textBodyItem = header.Items[index];
          if (!this.HasSinglePageField(textBodyItem))
            this.SerializeBodyItem(textBodyItem, true);
        }
      }
      if (header.Watermark != null && header.Watermark.Type == WatermarkType.PictureWatermark)
      {
        this.m_hasImages = true;
        string key1 = string.Empty;
        foreach (HeaderFooterType key2 in this.m_headerFooterColl.Keys)
        {
          Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key2];
          foreach (string key3 in dictionary.Keys)
          {
            if (dictionary[key3] == header)
              key1 = key3;
          }
        }
        this.UpdateImages((header.Watermark as PictureWatermark).WordPicture);
        if (this.HeaderFooterImages.ContainsKey(key1))
          this.m_headerFooterImages[key1].Add(this.m_watermarkId, (header.Watermark as PictureWatermark).WordPicture.ImageRecord);
        else
          this.HeaderFooterImages.Add(key1, new Dictionary<string, ImageRecord>()
          {
            {
              this.m_watermarkId,
              (header.Watermark as PictureWatermark).WordPicture.ImageRecord
            }
          });
      }
    }
    else
      this.SerializeBodyItems(header.Items, true);
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      this.m_archive.AddItem(headerFooterPath, (Stream) data, false, FileAttributes.Archive);
    }
    this.SerializeHFRelations(id, headerFooterRelsPath);
    if (this.HFChartCollection.Count > 0 && this.IsWord2003ML)
      this.SerializeWordMLChart(this.HFChartCollection);
    this.HFChartCollection.Clear();
  }

  private void SerializeFooter(
    HeaderFooter footer,
    string id,
    string headerFooterPath,
    string headerFooterRelsPath)
  {
    MemoryStream data = new MemoryStream();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, $"/word/footer{id.Replace("rId", "")}.xml");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "ftr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "ve", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "pic", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "wpc", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
    this.m_writer.WriteAttributeString("xmlns", "wp14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpg", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("xmlns", "wpi", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
    this.m_writer.WriteAttributeString("xmlns", "wps", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("ve", "Ignorable", (string) null, "w14 w15 wp14");
    this.SerializeBodyItems(footer.Items, true);
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      this.m_archive.AddItem(headerFooterPath, (Stream) data, false, FileAttributes.Archive);
    }
    this.SerializeHFRelations(id, headerFooterRelsPath);
    if (this.HFChartCollection.Count > 0 && this.IsWord2003ML)
      this.SerializeWordMLChart(this.HFChartCollection);
    this.HFChartCollection.Clear();
  }

  private void SerializeHFRelations(string hfId, string headerFooterRelsPath)
  {
    bool flag1 = this.HeaderFooterImages.ContainsKey(hfId);
    bool flag2 = this.HeaderFooterHyperlinks.ContainsKey(hfId);
    bool flag3 = this.HeaderFooterInclPicUrls.ContainsKey(hfId);
    bool flag4 = this.HeaderFooterAlternateChunks.ContainsKey(hfId);
    bool flag5 = this.HeaderFooterSvgImages.ContainsKey(hfId);
    bool flag6 = this.HFChartCollection.Count > 0;
    if (!flag1 && !flag5 && !flag2 && !flag4 && !flag6)
      return;
    MemoryStream memoryStream = new MemoryStream();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/" + headerFooterRelsPath.Replace("\\", "/"));
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    if (flag1)
      this.SerializeImagesRelations(memoryStream, this.HeaderFooterImages[hfId]);
    if (flag5)
      this.SerializeHFSvgImageRelation(this.HeaderFooterSvgImages[hfId]);
    if (flag2)
      this.SerializeHyperlinkRelations(memoryStream, this.HeaderFooterHyperlinks[hfId]);
    if (flag4)
      this.SerializeAltChunkRelations(memoryStream, this.HeaderFooterAlternateChunks[hfId]);
    if (flag6)
    {
      string empty = string.Empty;
      foreach (string key in this.HFChartCollection.Keys)
      {
        string targetPath = $"charts/chart{key.Replace("rId", "")}.xml";
        string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
        this.SerializeRelationShip((Stream) memoryStream, key, relationshipType, targetPath);
      }
    }
    if (flag3)
      this.SerializeIncludePictureUrlRelations(memoryStream, this.HeaderFooterInclPicUrls[hfId]);
    if (this.HFOleContainers.ContainsKey(hfId))
      this.AddOLEToZip(this.HFOleContainers[hfId]);
    if (this.HFRelations.ContainsKey(hfId))
      this.SerializeHFCommonRelations(memoryStream, this.HFRelations[hfId]);
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      this.m_archive.AddItem(headerFooterRelsPath, (Stream) memoryStream, false, FileAttributes.Archive);
    }
  }

  private void SerializeHFCommonRelations(
    MemoryStream stream,
    Dictionary<string, DictionaryEntry> xmlItemsRels)
  {
    foreach (KeyValuePair<string, DictionaryEntry> xmlItemsRel in xmlItemsRels)
    {
      string key1 = xmlItemsRel.Key;
      DictionaryEntry dictionaryEntry = xmlItemsRel.Value;
      string key2 = (string) dictionaryEntry.Key;
      string targetPath = (string) dictionaryEntry.Value;
      this.SerializeRelationShip((Stream) stream, key1, key2, targetPath);
    }
  }

  private bool HasSinglePageField(TextBodyItem item)
  {
    bool flag = false;
    if (item is WParagraph)
    {
      WParagraph wparagraph = item as WParagraph;
      if (wparagraph.Items.Count > 0 && wparagraph.Items.Count <= 4)
      {
        WField wfield = wparagraph.Items[0] as WField;
        WFieldMark wfieldMark = wparagraph.Items[wparagraph.Items.Count - 1] as WFieldMark;
        if (wfield != null && wfieldMark != null && wfield.FieldType == FieldType.FieldPage && wfieldMark.Type == FieldMarkType.FieldEnd)
          flag = true;
      }
    }
    return flag;
  }

  private void AddChartsToZip(Package wordPackage) => this.AddToZip(wordPackage, "word/charts/");

  private void AddDiagramToZip(Package wordPackage) => this.AddToZip(wordPackage, "word/diagrams/");

  private void AddControlsToZip(Package wordPackage) => this.AddToZip(wordPackage, "word/activeX/");

  private void AddToZip(Package wordPackage, string partPath)
  {
    if (wordPackage == null)
      return;
    PartContainer partContainer = wordPackage.FindPartContainer(partPath);
    if (partContainer == null)
      return;
    this.AddContainerToZip(partContainer, "word/");
    if (partContainer.Relations.Count <= 0)
      return;
    this.SerializeRelItems(wordPackage, partContainer);
  }

  private void SerializeRelItems(Package wordPackage, PartContainer partContainer)
  {
    foreach (string key in partContainer.Relations.Keys)
    {
      Relations relation = partContainer.Relations[key];
      if (relation.DataStream != null && relation.DataStream.Length > 0L)
      {
        relation.DataStream.Position = 0L;
        XmlReader relReader = XmlReader.Create(relation.DataStream);
        Dictionary<string, DictionaryEntry> relations = new Dictionary<string, DictionaryEntry>();
        this.ParseRelations(relReader, relations);
        if (relations.Count > 0)
          this.AddPartsToZip(wordPackage, relations);
      }
    }
  }

  private void AddPartsToZip(Package wordPackage, Dictionary<string, DictionaryEntry> relations)
  {
    foreach (DictionaryEntry dictionaryEntry in relations.Values)
    {
      string key = (string) dictionaryEntry.Key;
      string str1 = (string) dictionaryEntry.Value;
      if (str1.IndexOf("file") == -1)
      {
        string str2 = str1.Replace("..", "word");
        Part part = wordPackage.FindPart(str2);
        if (part != null && this.m_archive.Find(str2) == -1 && part.DataStream != null)
          this.m_archive.AddItem(str2, (Stream) (part.DataStream as MemoryStream), false, FileAttributes.Archive);
      }
    }
  }

  private void ParseRelations(XmlReader relReader, Dictionary<string, DictionaryEntry> relations)
  {
    int content = (int) relReader.MoveToContent();
    if (relReader.LocalName != "Relationships")
    {
      relReader.ReadInnerXml();
    }
    else
    {
      if (relReader.IsEmptyElement)
        return;
      string localName = relReader.LocalName;
      relReader.Read();
      bool flag = true;
      if (localName == relReader.LocalName && relReader.NodeType == XmlNodeType.EndElement)
        return;
      do
      {
        if (!flag)
          relReader.Read();
        string attribute1 = relReader.GetAttribute("Id");
        string attribute2 = relReader.GetAttribute("Target");
        string attribute3 = relReader.GetAttribute("Type");
        if (attribute1 != null && attribute2 != null && attribute3 != null)
        {
          DictionaryEntry dictionaryEntry = new DictionaryEntry((object) attribute3, (object) attribute2);
          relations.Add(attribute1, dictionaryEntry);
        }
        flag = false;
      }
      while (relReader.LocalName != "Relationships");
    }
  }

  private void AddXmlItemsToZip(Package wordPackage)
  {
    if (wordPackage == null)
      return;
    this.AddContainerToZip((PartContainer) wordPackage, (string) null);
  }

  private void AddContainerToZip(PartContainer cont, string dataPath)
  {
    dataPath += cont.Name;
    foreach (Part part in cont.XmlParts.Values)
    {
      string itemName = dataPath + part.Name;
      if (part.Name.StartsWithExt("activeX") && !this.ControlsPathNames.Contains(itemName))
        this.ControlsPathNames.Add(itemName);
      if (this.m_archive.Find(itemName) == -1 && part.DataStream != null)
        this.m_archive.AddItem(itemName, (Stream) (part.DataStream as MemoryStream), false, FileAttributes.Archive);
    }
    foreach (Relations relations in cont.Relations.Values)
    {
      if (this.m_archive.Find(relations.Name) == -1 && relations.DataStream != null && this.WriteRel(relations.Name))
        this.m_archive.AddItem(relations.Name, (Stream) (relations.DataStream as MemoryStream), false, FileAttributes.Archive);
    }
    foreach (PartContainer cont1 in cont.XmlPartContainers.Values)
    {
      if (this.ChartsPathNames.Count > 0 && (cont1.Name == "word/" || cont1.Name == "charts/" || cont1.Name == "embeddings/"))
        this.AddContainerToZip(cont1, dataPath);
    }
  }

  private bool WriteRel(string relPath) => !(relPath == "word/_rels/numbering.xml.rels");

  private void SerializeEndnoteRelations()
  {
    MemoryStream memoryStream = new MemoryStream();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/_rels/endnotes.xml.rels");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeImagesRelations(memoryStream, this.EndnoteImages);
    this.SerializeHyperlinkRelations(memoryStream, this.EndnoteHyperlinks);
    this.SerializeAltChunkRelations(memoryStream, this.EndnoteAlternateChunks);
    foreach (string key in this.EndnoteChartCollection.Keys)
    {
      string targetPath = $"charts/chart{key.Replace("rId", "")}.xml";
      string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
      this.SerializeRelationShip((Stream) memoryStream, key, relationshipType, targetPath);
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      this.m_archive.AddItem("word\\_rels\\endnotes.xml.rels", (Stream) memoryStream, false, FileAttributes.Archive);
    }
  }

  private void SerializeFootnoteRelations()
  {
    MemoryStream memoryStream = new MemoryStream();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/_rels/footnotes.xml.rels");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-package.relationships+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeImagesRelations(memoryStream, this.FootnoteImages);
    this.SerializeHyperlinkRelations(memoryStream, this.FootnoteHyperlinks);
    this.SerializeAltChunkRelations(memoryStream, this.FootnoteAlternateChunks);
    foreach (string key in this.FootnoteChartCollection.Keys)
    {
      string targetPath = $"charts/chart{key.Replace("rId", "")}.xml";
      string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
      this.SerializeRelationShip((Stream) memoryStream, key, relationshipType, targetPath);
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      this.m_archive.AddItem("word\\_rels\\footnotes.xml.rels", (Stream) memoryStream, false, FileAttributes.Archive);
    }
  }

  private void SerializeCommentRelations()
  {
    MemoryStream memoryStream = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeImagesRelations(memoryStream, this.CommentImages);
    this.SerializeHyperlinkRelations(memoryStream, this.CommentHyperlinks);
    this.SerializeAltChunkRelations(memoryStream, this.CommentAlternateChunks);
    foreach (string key in this.CommentsChartCollection.Keys)
    {
      string targetPath = $"charts/chart{key.Replace("rId", "")}.xml";
      string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
      this.SerializeRelationShip((Stream) memoryStream, key, relationshipType, targetPath);
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\_rels\\comments.xml.rels", (Stream) memoryStream, false, FileAttributes.Archive);
  }

  private void SerializeDocumentRelations()
  {
    MemoryStream memoryStream = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles", "styles.xml");
    this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings", "settings.xml");
    this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme", "theme/theme1.xml");
    if (this.HasNumbering)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering", "numbering.xml");
    if (this.m_hasComment)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments", "comments.xml");
    if (this.m_hasComment && this.m_document.CommentsEx.Count > 0)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.microsoft.com/office/2011/relationships/commentsExtended", "commentsExtended.xml");
    if (this.HasEndnote)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes", "endnotes.xml");
    if (this.HasFootnote)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes", "footnotes.xml");
    this.SerializeHeaderFooterRelations(memoryStream);
    this.SerializeChartRelation(memoryStream);
    if (this.HasFontTable)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable", "fontTable.xml");
    this.SerializeIncludePictureUrlRelations(memoryStream, this.InclPicFieldUrl);
    this.SerializeImagesRelations(memoryStream, this.DocumentImages);
    this.SerializeSvgImageRelation();
    this.SerializeExternalLinkImages();
    if (this.AltChunkTargets.Count > 0 && !this.IsWord2003ML)
      this.SerializeAltChunkRelations(memoryStream, this.AltChunkTargets);
    if (this.HasHyperlink && this.HyperlinkTargets.Count > 0)
      this.SerializeHyperlinkRelations(memoryStream, this.HyperlinkTargets);
    if (this.m_hasOleObject)
      this.AddOLEToZip(this.m_document.DocxPackage);
    this.SerilaizeXmlItemsRelations(memoryStream, this.XmlItemsRelations);
    if (this.m_document.CustomXMLContainer != null)
    {
      string[] array = new string[this.m_document.CustomXMLContainer.XmlParts.Count];
      this.m_document.CustomXMLContainer.XmlParts.Keys.CopyTo(array, 0);
      for (int index = 0; index < array.Length; ++index)
      {
        string name = this.m_document.CustomXMLContainer.XmlParts[array[index]].Name;
        if (!string.IsNullOrEmpty(name) && !name.Contains("Props"))
          this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml", "../customXml/" + name);
      }
    }
    if (this.m_document.CustomXmlPartContainer != null)
    {
      foreach (Part part in this.m_document.CustomXmlPartContainer.XmlParts.Values)
      {
        string name = part.Name;
        if (!string.IsNullOrEmpty(name) && !name.Contains("Props"))
          this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml", "../customXml/" + name);
      }
    }
    if (this.m_document.HasMacros && this.IsMacroEnabled)
      this.SerializeRelationShip((Stream) memoryStream, this.GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/vbaProject", "vbaProject.bin");
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\_rels\\document.xml.rels", (Stream) memoryStream, false, FileAttributes.Archive);
  }

  private void SerializeNumberingsRelation()
  {
    MemoryStream memoryStream = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeImagesRelations(memoryStream, this.PictureBullets);
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\_rels\\numbering.xml.rels", (Stream) memoryStream, false, FileAttributes.Archive);
  }

  private void SerializeAltChunkRelations(
    MemoryStream stream,
    Dictionary<string, string> altChunkCollection)
  {
    foreach (string key in altChunkCollection.Keys)
      this.SerializeRelationShip((Stream) stream, key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/aFChunk", "/" + altChunkCollection[key]);
  }

  private void SerializeHyperlinkRelations(
    MemoryStream stream,
    Dictionary<string, string> hyperlinkCollection)
  {
    if (hyperlinkCollection == null)
      return;
    string empty = string.Empty;
    foreach (string key in hyperlinkCollection.Keys)
    {
      string hyperlink = hyperlinkCollection[key];
      this.SerializeRelationShip(key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", hyperlink);
    }
  }

  private void SerializeSvgImageRelation()
  {
    if (this.SvgDataCollection.Count == 0)
      return;
    int num = 1;
    foreach (string key in this.SvgDataCollection.Keys)
    {
      string itemName = $"word\\media\\image{(object) num}.svg";
      this.SerializeRelationShip(this.SvgDataCollection[key], key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", itemName.Replace("word\\", ""));
      if (this.m_archive.Find(itemName.Replace("\\", "/")) == -1)
        this.m_archive.AddItem(itemName, this.SvgDataCollection[key], false, FileAttributes.Archive);
      ++num;
    }
  }

  private void SerializeHFSvgImageRelation(Dictionary<string, Stream> images)
  {
    if (images.Count == 0)
      return;
    if (this.m_hfSvgImageIndex == -1)
      this.m_hfSvgImageIndex = this.SvgDataCollection.Count + 1;
    foreach (string key in images.Keys)
    {
      string itemName = $"word\\media\\image{(object) this.m_hfSvgImageIndex}.svg";
      this.SerializeRelationShip(images[key], key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", itemName.Replace("word\\", ""));
      if (this.m_archive.Find(itemName.Replace("\\", "/")) == -1)
        this.m_archive.AddItem(itemName, images[key], false, FileAttributes.Archive);
      ++this.m_hfSvgImageIndex;
    }
  }

  private void SerializeImagesRelations(
    MemoryStream stream,
    Dictionary<string, ImageRecord> imageCollection)
  {
    if (imageCollection == null)
      return;
    string empty = string.Empty;
    foreach (string key in imageCollection.Keys)
    {
      ImageRecord image = imageCollection[key];
      if (image == null)
      {
        string str = "word\\media\\image0.jpeg";
        this.SerializeRelationShip((Stream) stream, key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", str.Replace("word\\", ""));
      }
      else if (image.ImageBytes.Length == 0)
      {
        this.SerializeRelationShip((Stream) stream, key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", "NULL");
      }
      else
      {
        string fileExtension = this.GetFileExtension(image);
        string itemName = $"word\\media\\image{(object) image.ImageId}{fileExtension}";
        this.SerializeRelationShip((Stream) stream, key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", itemName.Replace("word\\", ""));
        if (this.m_archive.Find(itemName.Replace("\\", "/")) == -1)
          this.m_archive.AddItem(itemName, (Stream) new MemoryStream(image.ImageBytes), false, FileAttributes.Archive);
      }
    }
  }

  private void SerializeImagesRelations(
    MemoryStream stream,
    Dictionary<string, ImageRecord> imageCollection,
    ParagraphItem item)
  {
    if (imageCollection == null)
      return;
    string empty = string.Empty;
    foreach (string key in imageCollection.Keys)
    {
      ImageRecord image = imageCollection[key];
      if (image == null)
      {
        string str = "word\\media\\image0.jpeg";
        this.SerializeRelationShip((Stream) stream, key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", str.Replace("word\\", ""));
      }
      else if (image.ImageBytes.Length == 0)
      {
        this.SerializeRelationShip((Stream) stream, key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", "NULL");
      }
      else
      {
        string fileExtension = this.GetFileExtension(image);
        string itemName = $"word\\media\\image{(object) image.ImageId}{fileExtension}";
        if (this.m_archive.Find(itemName.Replace("\\", "/")) == -1)
          this.m_archive.AddItem(itemName, (Stream) new MemoryStream(image.ImageBytes), false, FileAttributes.Archive);
      }
    }
  }

  private void SerializeExternalLinkImages()
  {
    string empty = string.Empty;
    foreach (string key in this.ExternalLinkImages.Keys)
      this.SerializeRelationShip(key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", this.ExternalLinkImages[key]);
  }

  private void SerializeHeaderFooterRelations(MemoryStream docRelStream)
  {
    this.SerializeHFRelation(HeaderFooterType.EvenFooter, docRelStream);
    this.SerializeHFRelation(HeaderFooterType.EvenHeader, docRelStream);
    this.SerializeHFRelation(HeaderFooterType.FirstPageFooter, docRelStream);
    this.SerializeHFRelation(HeaderFooterType.FirstPageHeader, docRelStream);
    this.SerializeHFRelation(HeaderFooterType.OddFooter, docRelStream);
    this.SerializeHFRelation(HeaderFooterType.OddHeader, docRelStream);
  }

  private void SerializeHFRelation(HeaderFooterType hfType, MemoryStream stream)
  {
    string empty = string.Empty;
    if (!this.HeadersFooters.ContainsKey(hfType))
      return;
    foreach (string key in this.HeadersFooters[hfType].Keys)
    {
      string targetPath;
      string relationshipType;
      if (hfType == HeaderFooterType.EvenHeader || hfType == HeaderFooterType.FirstPageHeader || hfType == HeaderFooterType.OddHeader)
      {
        targetPath = $"header{key.Replace("rId", "")}.xml";
        relationshipType = this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/header" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header";
      }
      else
      {
        targetPath = $"footer{key.Replace("rId", "")}.xml";
        relationshipType = this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/footer" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer";
      }
      this.SerializeRelationShip((Stream) stream, key, relationshipType, targetPath);
    }
  }

  private void SerializeIncludePictureUrlRelations(
    MemoryStream stream,
    Dictionary<string, string> InclPicFieldUrl)
  {
    if (InclPicFieldUrl == null || InclPicFieldUrl.Count <= 0)
      return;
    foreach (string key in InclPicFieldUrl.Keys)
    {
      string targetPath = InclPicFieldUrl[key];
      this.SerializeRelationShip((Stream) stream, key, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", targetPath);
    }
  }

  private void SerilaizeXmlItemsRelations(
    MemoryStream stream,
    Dictionary<string, DictionaryEntry> xmlItemsRels)
  {
    if (xmlItemsRels.Count == 0)
      return;
    string empty1 = string.Empty;
    string empty2 = string.Empty;
    foreach (string key1 in xmlItemsRels.Keys)
    {
      DictionaryEntry xmlItemsRel = xmlItemsRels[key1];
      string key2 = (string) xmlItemsRel.Key;
      string targetPath = (string) xmlItemsRel.Value;
      this.SerializeRelationShip((Stream) stream, key1, key2, targetPath);
    }
  }

  private void AddOLEToZip(Dictionary<string, Stream> OleContainers)
  {
    if (OleContainers.Count <= 0)
      return;
    foreach (KeyValuePair<string, Stream> oleContainer in OleContainers)
    {
      string itemName = "word\\embeddings\\" + oleContainer.Key;
      if (!this.IsWord2003ML)
        this.m_archive.AddItem(itemName, oleContainer.Value, false, FileAttributes.Archive);
    }
  }

  private void AddOLEToZip(Package wordPackage)
  {
    if (this.OleContainers.Count > 0)
    {
      foreach (KeyValuePair<string, Stream> oleContainer in this.OleContainers)
      {
        string itemName = "word\\embeddings\\" + oleContainer.Key;
        if (!this.IsWord2003ML)
          this.m_archive.AddItem(itemName, oleContainer.Value, false, FileAttributes.Archive);
      }
    }
    this.AddToZip(wordPackage, "word/embeddings/");
  }

  private void SerializeBackground(Background background)
  {
    if (background.Type == BackgroundType.NoBackground)
      return;
    this.m_writer.WriteStartElement(nameof (background), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (background.Type)
    {
      case BackgroundType.Gradient:
        BackgroundGradient gradient = background.Gradient;
        this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(gradient.Color1));
        this.SerializeGradient(gradient);
        break;
      case BackgroundType.Picture:
      case BackgroundType.Texture:
        if (background.ImageBytes != null)
        {
          this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(background.Color));
          this.m_writer.WriteStartElement(nameof (background), "urn:schemas-microsoft-com:vml");
          this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
          WPicture pic = new WPicture((IWordDocument) background.Document);
          pic.LoadImage(background.ImageBytes);
          this.UpdateImages(pic);
          string str = this.AddImageRelation(this.DocumentImages, pic.ImageRecord, this.IsNeedToSkipImageRelation(pic));
          this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
          this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", "");
          this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(background.Color));
          this.m_writer.WriteAttributeString("type", background.Type == BackgroundType.Picture ? "frame" : "tile");
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
          break;
        }
        break;
      case BackgroundType.Color:
        this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(background.Color));
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private bool IsNeedToSkipImageRelation(WPicture pic)
  {
    if (pic.ImageRecord == null && pic.OPictureHRef == null)
      return true;
    if (pic.OPictureHRef != null)
    {
      string opictureHref = pic.OPictureHRef;
      int num = opictureHref.LastIndexOf('/');
      if (opictureHref.Substring(num + 1, opictureHref.Length - (num + 1)).ToLower() == "null")
        return true;
    }
    return false;
  }

  private void SerializeGradient(BackgroundGradient gradient)
  {
    this.m_writer.WriteStartElement("background", "urn:schemas-microsoft-com:vml");
    if (gradient.Color1 != Color.White)
      this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(gradient.Color1));
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    this.SerializeGradientColor(gradient);
    this.SerializeGradientShadings(gradient);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeGradientShadings(BackgroundGradient gradient)
  {
    if (gradient.ShadingStyle != GradientShadingStyle.Horizontal)
    {
      switch (gradient.ShadingStyle)
      {
        case GradientShadingStyle.Vertical:
          this.m_writer.WriteAttributeString("angle", "-90");
          break;
        case GradientShadingStyle.DiagonalUp:
          this.m_writer.WriteAttributeString("angle", "-135");
          break;
        case GradientShadingStyle.DiagonalDown:
        case GradientShadingStyle.FromCorner:
        case GradientShadingStyle.FromCenter:
          this.m_writer.WriteAttributeString("angle", "-45");
          break;
      }
    }
    this.m_writer.WriteAttributeString("method", "linear sigma");
    if (gradient.ShadingStyle == GradientShadingStyle.FromCorner)
      this.m_writer.WriteAttributeString("focus", "100%");
    else if (gradient.ShadingVariant == GradientShadingVariant.ShadingMiddle)
      this.m_writer.WriteAttributeString("focus", "50%");
    else if (gradient.ShadingVariant == GradientShadingVariant.ShadingOut)
      this.m_writer.WriteAttributeString("focus", "-50%");
    else if (gradient.ShadingVariant == GradientShadingVariant.ShadingUp)
      this.m_writer.WriteAttributeString("focus", "100%");
    if (gradient.ShadingStyle == GradientShadingStyle.FromCenter)
      this.m_writer.WriteAttributeString("type", "gradientRadial");
    else
      this.m_writer.WriteAttributeString("type", nameof (gradient));
    if (gradient.ShadingStyle == GradientShadingStyle.FromCorner && gradient.ShadingVariant != GradientShadingVariant.ShadingUp || gradient.ShadingStyle == GradientShadingStyle.FromCenter)
    {
      if (gradient.ShadingStyle == GradientShadingStyle.FromCorner)
      {
        if (gradient.ShadingVariant == GradientShadingVariant.ShadingDown)
          this.m_writer.WriteAttributeString("focusposition", "1");
        else if (gradient.ShadingVariant == GradientShadingVariant.ShadingOut)
          this.m_writer.WriteAttributeString("focusposition", ",1");
        else if (gradient.ShadingVariant == GradientShadingVariant.ShadingMiddle)
          this.m_writer.WriteAttributeString("focusposition", "1,1");
      }
      else
        this.m_writer.WriteAttributeString("focusposition", ".5,.5");
      this.m_writer.WriteAttributeString("focussize", "");
    }
    if (gradient.ShadingStyle != GradientShadingStyle.FromCorner && (gradient.ShadingStyle != GradientShadingStyle.FromCenter || gradient.ShadingVariant != GradientShadingVariant.ShadingDown))
      return;
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("ext", "view");
    this.m_writer.WriteAttributeString("type", "gradientCenter");
    this.m_writer.WriteEndElement();
  }

  private void SerializeGradientColor(BackgroundGradient gradient)
  {
    if (!(gradient.Color2 != Color.White))
      return;
    if (gradient.Color2.Name[0] == 'e')
    {
      int num = int.Parse(gradient.Color2.Name.Substring(6), NumberStyles.HexNumber);
      if (gradient.Color2.Name[5] == '1')
        this.m_writer.WriteAttributeString("color2", $"fill darken({(object) num})");
      else
        this.m_writer.WriteAttributeString("color2", $"fill lighten({(object) num})");
    }
    else
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(gradient.Color2));
  }

  private void UpdateImages(WPicture pic)
  {
    if (pic.IsMetaFile)
      this.m_hasMetafiles = true;
    else
      this.m_hasImages = true;
  }

  private void SerializeDocumentBody()
  {
    if (this.m_document.Sections.Count == 0)
      throw new Exception("There are no sections present in the document");
    this.m_writer.WriteStartElement("body", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    foreach (WSection section in (CollectionImpl) this.m_document.Sections)
      this.SerializeSection(section);
    this.m_writer.WriteEndElement();
  }

  private void SerializeSection(WSection section)
  {
    bool isLastSection = false;
    if (section.NextSibling == null)
      isLastSection = true;
    section.AddEmptyParagraph();
    this.SerializeBodyItems(section.Body.Items, isLastSection);
    if (!isLastSection)
      return;
    this.SerializeSectionProperties(section, false);
  }

  private void SerializeBodyItems(BodyItemCollection bodyItemCollection, bool isLastSection)
  {
    for (int index = 0; index < bodyItemCollection.Count; ++index)
      this.SerializeBodyItem(bodyItemCollection[index], isLastSection);
  }

  private void SerializeBodyItem(TextBodyItem item, bool isLastSection)
  {
    if (item == null)
      throw new ArgumentException("BodyItem should not be null");
    switch (item.EntityType)
    {
      case EntityType.Paragraph:
        this.SerializeParagraph(item as WParagraph, isLastSection);
        break;
      case EntityType.AlternateChunk:
        this.SerializeAlternateChunk(item as AlternateChunk);
        if (!(item as AlternateChunk).IsParagraphItem)
          break;
        this.m_writer.WriteEndElement();
        break;
      case EntityType.BlockContentControl:
        this.SerializeStructureDocumentTagBlock(item as BlockContentControl);
        break;
      case EntityType.Table:
        WTable table = item as WTable;
        IEnumerator enumerator = table.Rows.GetEnumerator();
        try
        {
          while (enumerator.MoveNext())
          {
            if (((WTableRow) enumerator.Current).Cells.Count > 0)
            {
              this.SerializeTable(table);
              break;
            }
          }
          break;
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
    }
  }

  private void SerializeStructureDocumentTagInline(InlineContentControl sdTagInline)
  {
    if (sdTagInline == null)
      return;
    this.m_writer.WriteStartElement("sdt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeSDTProperties(sdTagInline.ContentControlProperties);
    if (sdTagInline.BreakCharacterFormat != null)
    {
      this.m_writer.WriteStartElement("sdtEndPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeCharacterFormat(sdTagInline.BreakCharacterFormat);
      this.m_writer.WriteEndElement();
    }
    if (sdTagInline != null)
      this.SerializeSDTContentInline(sdTagInline.ParagraphItems);
    this.m_writer.WriteEndElement();
  }

  private void SerializeSDTContentInline(ParagraphItemCollection paraItems)
  {
    this.m_writer.WriteStartElement("sdtContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    for (int index = 0; index < paraItems.Count; ++index)
      this.SerializeParagraphItem(paraItems[index], false);
    this.m_writer.WriteEndElement();
  }

  private void UpdateAlternateChunkRelation(Entity entity, AlternateChunk altChunk)
  {
    entity = altChunk.GetOwnerTextBody(entity);
    switch (entity)
    {
      case WComment _ when !this.CommentAlternateChunks.ContainsKey(altChunk.TargetId):
        this.CommentAlternateChunks.Add(altChunk.TargetId, altChunk.ContentPath);
        break;
      case WFootnote _:
        if ((entity as WFootnote).FootnoteType == FootnoteType.Footnote && !this.FootnoteAlternateChunks.ContainsKey(altChunk.TargetId))
        {
          this.FootnoteAlternateChunks.Add(altChunk.TargetId, altChunk.ContentPath);
          break;
        }
        if (this.EndnoteAlternateChunks.ContainsKey(altChunk.TargetId))
          break;
        this.EndnoteAlternateChunks.Add(altChunk.TargetId, altChunk.ContentPath);
        break;
      case HeaderFooter _:
        string key1 = string.Empty;
        foreach (HeaderFooterType key2 in this.m_headerFooterColl.Keys)
        {
          Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key2];
          foreach (string key3 in dictionary.Keys)
          {
            if (dictionary[key3] == entity as HeaderFooter)
              key1 = key3;
          }
        }
        if (this.HeaderFooterAlternateChunks.ContainsKey(key1))
        {
          Dictionary<string, string> footerAlternateChunk = this.m_headerFooterAlternateChunks[key1];
          if (footerAlternateChunk.ContainsKey(altChunk.TargetId))
            break;
          footerAlternateChunk.Add(altChunk.TargetId, altChunk.ContentPath);
          break;
        }
        this.HeaderFooterAlternateChunks.Add(key1, new Dictionary<string, string>()
        {
          {
            altChunk.TargetId,
            altChunk.ContentPath
          }
        });
        break;
      default:
        if (this.AltChunkTargets.ContainsKey(altChunk.TargetId))
          break;
        this.AltChunkTargets.Add(altChunk.TargetId, altChunk.ContentPath);
        break;
    }
  }

  private void SerializeAlternateChunk(AlternateChunk altChunk)
  {
    this.SerializeBeforeBookmarks(altChunk);
    this.UpdateAlternateChunkRelation((Entity) altChunk.OwnerTextBody, altChunk);
    if (!this.AltChunkContentTypes.ContainsKey(altChunk.ContentExtension))
      this.AltChunkContentTypes.Add(altChunk.ContentExtension, altChunk.ContentType);
    this.m_writer.WriteStartElement("w", nameof (altChunk), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("r", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", altChunk.TargetId);
    this.m_writer.WriteStartElement("w", "altChunkPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("w", "matchSrc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if ((altChunk.ImportOption & ImportOptions.KeepSourceFormatting) != (ImportOptions) 0)
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
    else
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.SerializeAfterBookmarks();
  }

  private void SerializeBeforeBookmarks(AlternateChunk altChunk)
  {
    if (altChunk.AltChunkBookmarks.Count <= 0)
      return;
    foreach (Entity altChunkBookmark in altChunk.AltChunkBookmarks)
    {
      switch (altChunkBookmark)
      {
        case BookmarkStart _:
          this.SerializeBookmarkStart(altChunkBookmark as BookmarkStart);
          continue;
        case BookmarkEnd _:
          if (!(altChunkBookmark as BookmarkEnd).IsAfterParagraphMark)
          {
            this.SerializeBookmarkEnd(altChunkBookmark as BookmarkEnd);
            continue;
          }
          break;
      }
      this.altChunkAfterBookmarks.Add(altChunkBookmark);
    }
  }

  private void SerializeAfterBookmarks()
  {
    if (this.altChunkAfterBookmarks.Count <= 0)
      return;
    foreach (Entity chunkAfterBookmark in this.altChunkAfterBookmarks)
    {
      if (chunkAfterBookmark is BookmarkEnd)
      {
        (chunkAfterBookmark as BookmarkEnd).IsAfterParagraphMark = false;
        this.SerializeBookmarkEnd(chunkAfterBookmark as BookmarkEnd);
      }
    }
    this.altChunkAfterBookmarks.Clear();
  }

  private void SerializeStructureDocumentTagBlock(BlockContentControl sdTagBlock)
  {
    if (sdTagBlock == null)
      return;
    this.m_writer.WriteStartElement("sdt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeSDTProperties(sdTagBlock.ContentControlProperties);
    if (sdTagBlock.BreakCharacterFormat != null)
    {
      this.m_writer.WriteStartElement("sdtEndPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeCharacterFormat(sdTagBlock.BreakCharacterFormat);
      this.m_writer.WriteEndElement();
    }
    if (sdTagBlock.TextBody != null)
      this.SerializeSDTContent(sdTagBlock.TextBody);
    this.m_writer.WriteEndElement();
  }

  private void SerializeSDTProperties(ContentControlProperties properties)
  {
    if (properties == null)
      return;
    this.m_writer.WriteStartElement("sdtPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (properties.CharacterFormat != null)
      this.SerializeCharacterFormat(properties.CharacterFormat);
    if (properties.HasKey(0))
    {
      this.m_writer.WriteStartElement("appearance", "http://schemas.microsoft.com/office/word/2012/wordml");
      this.m_writer.WriteAttributeString("w15", "val", "http://schemas.microsoft.com/office/word/2012/wordml", properties.Appearance.ToString().ToLower());
      this.m_writer.WriteEndElement();
    }
    if (properties.HasKey(1))
    {
      this.m_writer.WriteStartElement("color", "http://schemas.microsoft.com/office/word/2012/wordml");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(properties.Color));
      this.m_writer.WriteEndElement();
    }
    if (!string.IsNullOrEmpty(properties.Title))
    {
      this.m_writer.WriteStartElement("alias", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.Title);
      this.m_writer.WriteEndElement();
    }
    if (!string.IsNullOrEmpty(properties.Tag))
    {
      this.m_writer.WriteStartElement("tag", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.Tag);
      this.m_writer.WriteEndElement();
    }
    if (!string.IsNullOrEmpty(properties.ID))
    {
      this.m_writer.WriteStartElement("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.ID);
      this.m_writer.WriteEndElement();
    }
    if (properties.HasKey(7) || properties.HasKey(8))
      this.SerializeSDTLockSetting(properties);
    this.SerializeSDTType(properties);
    if (properties.HasKey(11) && properties.HasPlaceHolderText)
    {
      this.m_writer.WriteStartElement("showingPlcHdr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (properties.HasKey(9) && properties.IsTemporary)
    {
      this.m_writer.WriteStartElement("temporary", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (properties.Bibliograph)
    {
      this.m_writer.WriteStartElement("bibliography", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (properties.Citation)
    {
      this.m_writer.WriteStartElement("citation", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (properties.Type == ContentControlType.Date)
      this.SerializeSDTDate(properties);
    if (properties.XmlMapping.XPath != null && properties.Type != ContentControlType.RichText)
      this.SerializeSDTDataBinding(properties.XmlMapping);
    if (properties.DocPartObj != null)
    {
      this.m_writer.WriteStartElement("docPartObj", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeDocPartItem((DocPartItem) properties.DocPartObj);
      this.m_writer.WriteEndElement();
    }
    if (properties.DocPartList != null)
    {
      this.m_writer.WriteStartElement("docPartList", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeDocPartItem((DocPartItem) properties.DocPartList);
      this.m_writer.WriteEndElement();
    }
    switch (properties.ContentRepeatingType)
    {
      case ContentRepeatingType.RepeatingSection:
        this.m_writer.WriteStartElement("repeatingSection", "http://schemas.microsoft.com/office/word/2012/wordml");
        this.m_writer.WriteEndElement();
        break;
      case ContentRepeatingType.RepeatingSectionItem:
        this.m_writer.WriteStartElement("repeatingSectionItem", "http://schemas.microsoft.com/office/word/2012/wordml");
        this.m_writer.WriteEndElement();
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeDocPartItem(DocPartItem docPartItem)
  {
    if (docPartItem.DocPartGallery != null)
    {
      this.m_writer.WriteStartElement("docPartGallery", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", docPartItem.DocPartGallery);
      this.m_writer.WriteEndElement();
    }
    if (docPartItem.DocPartCategory != null)
    {
      this.m_writer.WriteStartElement("docPartCategory", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", docPartItem.DocPartCategory);
      this.m_writer.WriteEndElement();
    }
    if (!docPartItem.IsDocPartUnique)
      return;
    this.m_writer.WriteStartElement("docPartUnique", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
  }

  private void SerializeSDTDataBinding(XmlMapping dataBinding)
  {
    this.m_writer.WriteStartElement(nameof (dataBinding), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (dataBinding.PrefixMapping != null && dataBinding.PrefixMapping != string.Empty)
      this.m_writer.WriteAttributeString("w", "prefixMappings", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dataBinding.PrefixMapping);
    if (dataBinding.XPath != null)
      this.m_writer.WriteAttributeString("w", "xpath", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dataBinding.XPath);
    if (dataBinding.StoreItemID != null && dataBinding.StoreItemID != string.Empty)
      this.m_writer.WriteAttributeString("w", "storeItemID", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dataBinding.StoreItemID);
    this.m_writer.WriteEndElement();
  }

  private void SerializeSDTLockSetting(ContentControlProperties properties)
  {
    this.m_writer.WriteStartElement("lock", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (properties.HasKey(8) && properties.HasKey(7) && properties.LockContents && properties.LockContentControl)
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "sdtContentLocked");
    else if (properties.HasKey(7) && properties.LockContentControl)
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "sdtLocked");
    else if (properties.HasKey(8) && properties.LockContents)
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "contentLocked");
    this.m_writer.WriteEndElement();
  }

  private void SerializeSDTType(ContentControlProperties properties)
  {
    switch (properties.Type)
    {
      case ContentControlType.RichText:
        this.m_writer.WriteStartElement("richText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.Text:
        this.m_writer.WriteStartElement("text", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        if (properties.HasKey(10) && properties.Multiline)
          this.m_writer.WriteAttributeString("multiLine", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.Picture:
        this.m_writer.WriteStartElement("picture", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.ComboBox:
        this.m_writer.WriteStartElement("comboBox", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.SerializeSDTDropDownList(properties.ContentControlListItems);
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.DropDownList:
        this.m_writer.WriteStartElement("dropDownList", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.SerializeSDTDropDownList(properties.ContentControlListItems);
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.Group:
        this.m_writer.WriteStartElement("group", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.CheckBox:
        this.m_writer.WriteStartElement("checkbox", "http://schemas.microsoft.com/office/word/2010/wordml");
        this.SerializeSDTCheckBox(properties);
        this.m_writer.WriteEndElement();
        break;
      case ContentControlType.RepeatingSection:
        this.m_writer.WriteStartElement("repeatingSection", "http://schemas.microsoft.com/office/word/2012/wordml");
        this.m_writer.WriteEndElement();
        break;
    }
  }

  private void SerializeSDTCheckBox(ContentControlProperties properties)
  {
    if (properties == null || properties.Type != ContentControlType.CheckBox)
      return;
    if (properties.HasKey(2))
    {
      this.m_writer.WriteStartElement("checked", "http://schemas.microsoft.com/office/word/2010/wordml");
      if (properties.IsChecked)
        this.m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", "1");
      else
        this.m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", "0");
      this.m_writer.WriteEndElement();
    }
    if (properties.CheckedState != null && properties.CheckedState.Value != null && properties.CheckedState.Font != null)
    {
      this.m_writer.WriteStartElement("checkedState", "http://schemas.microsoft.com/office/word/2010/wordml");
      string empty = string.Empty;
      foreach (char ch in properties.CheckedState.Value)
        empty += ((int) ch).ToString("X");
      this.m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", empty);
      this.m_writer.WriteAttributeString("font", "http://schemas.microsoft.com/office/word/2010/wordml", properties.CheckedState.Font);
      this.m_writer.WriteEndElement();
    }
    if (properties.UncheckedState == null || properties.UncheckedState.Value == null || properties.UncheckedState.Font == null)
      return;
    this.m_writer.WriteStartElement("uncheckedState", "http://schemas.microsoft.com/office/word/2010/wordml");
    string empty1 = string.Empty;
    foreach (char ch in properties.UncheckedState.Value)
      empty1 += ((int) ch).ToString("X");
    this.m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", empty1);
    this.m_writer.WriteAttributeString("font", "http://schemas.microsoft.com/office/word/2010/wordml", properties.UncheckedState.Font);
    this.m_writer.WriteEndElement();
  }

  private void SerializeSDTDropDownList(ContentControlListItems dropDownList)
  {
    if (dropDownList.LastValue != null && dropDownList.LastValue != string.Empty)
      this.m_writer.WriteAttributeString("w", "lastValue", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownList.LastValue);
    foreach (ContentControlListItem dropDown in (IEnumerable) dropDownList)
    {
      this.m_writer.WriteStartElement("listItem", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (dropDown.DisplayText != null)
        this.m_writer.WriteAttributeString("w", "displayText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDown.DisplayText);
      if (dropDown.Value != null)
        this.m_writer.WriteAttributeString("w", "value", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDown.Value);
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeSDTDate(ContentControlProperties properties)
  {
    this.m_writer.WriteStartElement("date", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (properties.FullDate != null && properties.FullDate != string.Empty)
      this.m_writer.WriteAttributeString("w", "fullDate", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.FullDate);
    if (properties.DateDisplayFormat != null && properties.DateDisplayFormat != string.Empty)
    {
      this.m_writer.WriteStartElement("dateFormat", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.DateDisplayFormat);
      this.m_writer.WriteEndElement();
    }
    if (properties.HasKey(5))
    {
      this.m_writer.WriteStartElement("lid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) properties.DateDisplayLocale))
      {
        string str = properties.DateDisplayLocale.ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      this.m_writer.WriteEndElement();
    }
    if (properties.HasKey(3))
    {
      this.m_writer.WriteStartElement("calendar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetCalenderType(properties.DateCalendarType));
      this.m_writer.WriteEndElement();
    }
    if (properties.HasKey(6))
    {
      this.m_writer.WriteStartElement("storeMappedDataAs", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetDateStorageType(properties.DateStorageFormat));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private string GetDateStorageType(ContentControlDateStorageFormat type)
  {
    switch (type)
    {
      case ContentControlDateStorageFormat.DateStorageDate:
        return "date";
      case ContentControlDateStorageFormat.DateStorageText:
        return "text";
      default:
        return "dateTime";
    }
  }

  private string GetCalenderType(CalendarType type)
  {
    switch (type)
    {
      case CalendarType.Gregorian:
        return "gregorian";
      case CalendarType.GregorianArabic:
        return "gregorianArabic";
      case CalendarType.GregorianMiddleEastFrench:
        return "gregorianMeFrench";
      case CalendarType.GregorianEnglish:
        return "gregorianUs";
      case CalendarType.GregorianTransliteratedEnglish:
        return "gregorianXlitEnglish";
      case CalendarType.GregorianTransliteratedFrench:
        return "gregorianXlitFrench";
      case CalendarType.Hebrew:
        return "hebrew";
      case CalendarType.Hijri:
        return "hijri";
      case CalendarType.Japan:
        return "japan";
      case CalendarType.Korean:
        return "korea";
      case CalendarType.Taiwan:
        return "taiwan";
      case CalendarType.Thai:
        return "thai";
      case CalendarType.Saka:
        return "saka";
      default:
        return (string) null;
    }
  }

  private void SerializeSDTContent(WTextBody body)
  {
    this.m_writer.WriteStartElement("sdtContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    for (int index = 0; index < body.Items.Count; ++index)
      this.SerializeBodyItem(body.Items[index], false);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTable(WTable table)
  {
    if (table.Rows.Count <= 0)
      return;
    table.UpdateGridSpan();
    this.m_writer.WriteStartElement("tbl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (table.Rows.Count != 0)
      this.SerializeTableFormat(table.DocxTableFormat.HasFormat ? table.DocxTableFormat.Format : table.Rows[0].RowFormat, table);
    else
      this.SerializeTableFormat(table.DocxTableFormat.Format, table);
    this.SerializeTableGrid(table);
    this.SerializeTableRows(table.Rows);
    this.m_writer.WriteEndElement();
    while (this.BookMarkCollection.Count > 0 && this.BookMarkCollection[0] is BookmarkEnd && (this.BookMarkCollection[0] as BookmarkEnd).IsAfterTableMark)
    {
      BookmarkEnd bookMark = this.BookMarkCollection[0] as BookmarkEnd;
      bookMark.IsAfterTableMark = false;
      this.SerializeBookmarkEnd(bookMark);
      bookMark.IsAfterTableMark = true;
      this.BookMarkCollection.Remove((Entity) bookMark);
    }
    while (this.EditableRangeCollection.Count > 0 && this.EditableRangeCollection[0] is EditableRangeEnd && (this.EditableRangeCollection[0] as EditableRangeEnd).IsAfterTableMark)
    {
      EditableRangeEnd editableRange = this.EditableRangeCollection[0] as EditableRangeEnd;
      editableRange.IsAfterTableMark = false;
      this.SerializeEditableRangeEnd(editableRange);
      editableRange.IsAfterTableMark = true;
      this.EditableRangeCollection.Remove((Entity) editableRange);
    }
    while (this.MovingRevisionCollection.Count > 0 && this.MovingRevisionDetails != null && this.MovingRevisionCollection[0].IsAfterTableMark)
      this.SerializeMoveRangeEnd();
  }

  private void SerializeTableRows(WRowCollection rows)
  {
    if (rows.Count <= 0)
      return;
    foreach (WTableRow row in (CollectionImpl) rows)
    {
      if (row.Cells.Count > 0)
      {
        if (row.ContentControl != null)
        {
          this.m_writer.WriteStartElement("sdt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.SerializeSDTProperties(row.ContentControl.ContentControlProperties);
          if (row.ContentControl.BreakCharacterFormat != null)
          {
            this.m_writer.WriteStartElement("sdtEndPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.SerializeCharacterFormat(row.ContentControl.BreakCharacterFormat);
            this.m_writer.WriteEndElement();
          }
          this.m_writer.WriteStartElement("sdtContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.SerializeRow(row);
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
        }
        else
          this.SerializeRow(row);
      }
    }
  }

  private void SerializeRow(WTableRow row)
  {
    this.m_writer.WriteStartElement("tr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeRowFormat(row);
    this.SerializeCells(row.Cells);
    this.m_writer.WriteEndElement();
    while (this.BookMarkCollection.Count > 0 && this.BookMarkCollection[0] is BookmarkEnd && (this.BookMarkCollection[0] as BookmarkEnd).IsAfterRowMark)
    {
      BookmarkEnd bookMark = this.BookMarkCollection[0] as BookmarkEnd;
      bookMark.IsAfterRowMark = false;
      this.SerializeBookmarkEnd(bookMark);
      bookMark.IsAfterRowMark = true;
      this.BookMarkCollection.Remove((Entity) bookMark);
    }
    while (this.EditableRangeCollection.Count > 0 && this.EditableRangeCollection[0] is EditableRangeEnd && (this.EditableRangeCollection[0] as EditableRangeEnd).IsAfterRowMark)
    {
      EditableRangeEnd editableRange = this.EditableRangeCollection[0] as EditableRangeEnd;
      editableRange.IsAfterRowMark = false;
      this.SerializeEditableRangeEnd(editableRange);
      editableRange.IsAfterRowMark = true;
      this.EditableRangeCollection.Remove((Entity) editableRange);
    }
    while (this.MovingRevisionCollection.Count > 0 && this.MovingRevisionDetails != null && this.MovingRevisionCollection[0].IsAfterRowMark)
      this.SerializeMoveRangeEnd();
  }

  private void SerializeCells(WCellCollection cells)
  {
    foreach (WTableCell cell in (CollectionImpl) cells)
    {
      if (cell.ContentControl != null)
      {
        this.m_writer.WriteStartElement("sdt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.SerializeSDTProperties(cell.ContentControl.ContentControlProperties);
        if (cell.ContentControl.BreakCharacterFormat != null)
        {
          this.m_writer.WriteStartElement("sdtEndPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.SerializeCharacterFormat(cell.ContentControl.BreakCharacterFormat);
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteStartElement("sdtContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.SerializeCell(cell);
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      else
        this.SerializeCell(cell);
    }
  }

  private void SerializeCell(WTableCell cell)
  {
    this.m_writer.WriteStartElement("tc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCellFormat(cell.CellFormat);
    if (cell.Items.Count > 0)
    {
      int index = 0;
      for (; index < cell.Items.Count; ++index)
      {
        TextBodyItem textBodyItem = cell.Items[index];
        if (textBodyItem is WParagraph && index == cell.Items.Count - 1)
        {
          WParagraph wparagraph = textBodyItem as WParagraph;
          if (wparagraph.BreakCharacterFormat.PropertiesHash.Count > 0)
            this.MergeCharProps(wparagraph.BreakCharacterFormat, cell.CharacterFormat);
        }
        this.SerializeBodyItem(textBodyItem, false);
      }
      if (cell.Items.LastItem.EntityType == EntityType.Table)
      {
        this.m_writer.WriteStartElement("p", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
      }
    }
    else
    {
      this.m_writer.WriteStartElement("p", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("pStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal");
      this.m_writer.WriteEndElement();
      this.SerializeCharacterFormat(cell.CharacterFormat);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    while (this.BookMarkCollection.Count > 0 && this.BookMarkCollection[0] is BookmarkEnd && (this.BookMarkCollection[0] as BookmarkEnd).IsAfterCellMark)
    {
      BookmarkEnd bookMark = this.BookMarkCollection[0] as BookmarkEnd;
      bookMark.IsAfterCellMark = false;
      this.SerializeBookmarkEnd(bookMark);
      bookMark.IsAfterCellMark = true;
      this.BookMarkCollection.Remove((Entity) bookMark);
    }
    while (this.EditableRangeCollection.Count > 0 && this.EditableRangeCollection[0] is EditableRangeEnd && (this.EditableRangeCollection[0] as EditableRangeEnd).IsAfterCellMark)
    {
      EditableRangeEnd editableRange = this.EditableRangeCollection[0] as EditableRangeEnd;
      editableRange.IsAfterCellMark = false;
      this.SerializeEditableRangeEnd(editableRange);
      editableRange.IsAfterCellMark = true;
      this.EditableRangeCollection.Remove((Entity) editableRange);
    }
    while (this.MovingRevisionCollection.Count > 0 && this.MovingRevisionDetails != null && this.MovingRevisionCollection[0].IsAfterCellMark)
      this.SerializeMoveRangeEnd();
    while (this.CommentMarkCollection.Count > 0 && this.CommentMarkCollection[0] is WCommentMark && (this.CommentMarkCollection[0] as WCommentMark).IsAfterCellMark && (this.CommentMarkCollection[0] as WCommentMark).Type == CommentMarkType.CommentEnd)
    {
      WCommentMark commentMark = this.CommentMarkCollection[0] as WCommentMark;
      commentMark.IsAfterCellMark = false;
      this.SerializeCommentRangeEnd(this.m_commentsId[commentMark.CommentId], commentMark);
      commentMark.IsAfterCellMark = true;
      this.CommentMarkCollection.Remove((Entity) commentMark);
    }
  }

  private void MergeCharProps(
    WCharacterFormat ParaBreakCharFormat,
    WCharacterFormat cellCharacterFormat)
  {
    Dictionary<int, object> propertiesHash1 = ParaBreakCharFormat.PropertiesHash;
    Dictionary<int, object> propertiesHash2 = cellCharacterFormat.PropertiesHash;
    if (propertiesHash2.Count == 0 || propertiesHash1.Count == 0)
      return;
    foreach (KeyValuePair<int, object> keyValuePair in propertiesHash2)
    {
      if (!propertiesHash1.ContainsKey(keyValuePair.Key))
        propertiesHash1.Add(keyValuePair.Key, keyValuePair.Value);
    }
  }

  private void SerializeCellFormat(CellFormat cellFormat)
  {
    List<Stream> tempDocxProps = new List<Stream>();
    int index = 0;
    for (int count = cellFormat.XmlProps.Count; index < count; ++index)
      tempDocxProps.Add(cellFormat.XmlProps[index]);
    WTableCell ownerBase = cellFormat.OwnerBase as WTableCell;
    RowFormat tableFormat = ownerBase.OwnerRow.OwnerTable.TableFormat;
    RowFormat rowFormat = ownerBase.OwnerRow.RowFormat;
    this.m_writer.WriteStartElement("tcPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCnfStyleElement(ownerBase);
    this.SerializeCellWidth(ownerBase);
    this.SerializeGridSpan(ownerBase);
    this.SerializeCellMerge(cellFormat);
    this.m_writer.WriteStartElement("tcBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeBorders(cellFormat.Borders, 8);
    this.m_writer.WriteEndElement();
    this.SerializeCellShading(ownerBase, tableFormat, rowFormat);
    if (cellFormat.HasValue(9))
    {
      this.m_writer.WriteStartElement("noWrap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (cellFormat.TextWrap)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (!cellFormat.SamePaddingsAsTable)
    {
      this.m_writer.WriteStartElement("tcMar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializePaddings(cellFormat.Paddings);
      this.m_writer.WriteEndElement();
    }
    this.SerializeTableCellDirection(cellFormat);
    if (cellFormat.FitText)
    {
      this.m_writer.WriteStartElement("tcFitText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (cellFormat.HideMark)
    {
      this.m_writer.WriteStartElement("hideMark", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (cellFormat.HasValue(2))
      this.SerializeCellVerticalAlign(cellFormat.VerticalAlignment);
    this.SerializeDocxProps(tempDocxProps, "hideMark");
    this.SerializeDocxProps(tempDocxProps, "cellIns");
    this.SerializeDocxProps(tempDocxProps, "cellDel");
    this.SerializeDocxProps(tempDocxProps, "cellMerge");
    if (cellFormat.Revisions.Count > 0 && !this.m_isAlternativeCellFormat)
    {
      foreach (Revision revision in cellFormat.Revisions)
      {
        if (revision.RevisionType == RevisionType.Formatting)
        {
          this.SerializeTrackChangeProps("tcPrChange", revision.Author, revision.Date);
          if (cellFormat.OldPropertiesHash.Count > 0)
          {
            this.m_isAlternativeCellFormat = true;
            Dictionary<int, object> dictionary1 = new Dictionary<int, object>((IDictionary<int, object>) cellFormat.OldPropertiesHash);
            Dictionary<int, object> dictionary2 = new Dictionary<int, object>((IDictionary<int, object>) cellFormat.PropertiesHash);
            cellFormat.PropertiesHash.Clear();
            cellFormat.OldPropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              cellFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.SerializeCellFormat(cellFormat);
            cellFormat.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary2)
              cellFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              cellFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.m_isAlternativeCellFormat = false;
          }
          else
          {
            this.m_writer.WriteStartElement("tcPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteEndElement();
          }
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeCellVerticalAlign(VerticalAlignment alignment)
  {
    this.m_writer.WriteStartElement("vAlign", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (alignment)
    {
      case VerticalAlignment.Top:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "top");
        break;
      case VerticalAlignment.Middle:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
        break;
      case VerticalAlignment.Bottom:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "bottom");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableCellDirection(CellFormat cellFormat)
  {
    if (cellFormat.TextDirection == TextDirection.Horizontal)
      return;
    this.m_writer.WriteStartElement("textDirection", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (cellFormat.TextDirection)
    {
      case TextDirection.Horizontal:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTb");
        break;
      case TextDirection.VerticalFarEast:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRlV");
        break;
      case TextDirection.VerticalBottomToTop:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "btLr");
        break;
      case TextDirection.VerticalTopToBottom:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRl");
        break;
      case TextDirection.HorizontalFarEast:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTbV");
        break;
      case TextDirection.Vertical:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbLrV");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeCellShading(WTableCell cell, RowFormat tf, RowFormat rf)
  {
    CellFormat cellFormat = cell.CellFormat;
    if (!cellFormat.HasValue(4) && !cellFormat.HasValue(7))
      return;
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (cellFormat.BackColor == Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(cellFormat.BackColor));
    if (cell.ForeColor == Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(cell.ForeColor));
    string textureStyle = this.GetTextureStyle(cell.TextureStyle);
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
    this.m_writer.WriteEndElement();
  }

  private void SerializeCellMerge(CellFormat cellFormat)
  {
    if (cellFormat.HorizontalMerge != CellMerge.None)
    {
      this.m_writer.WriteStartElement("hMerge", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (cellFormat.HorizontalMerge)
      {
        case CellMerge.Start:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "restart");
          break;
        case CellMerge.Continue:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continue");
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (cellFormat.VerticalMerge == CellMerge.None)
      return;
    this.m_writer.WriteStartElement("vMerge", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (cellFormat.VerticalMerge)
    {
      case CellMerge.Start:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "restart");
        break;
      case CellMerge.Continue:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continue");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeGridSpan(WTableCell cell)
  {
    int gridSpan = (int) cell.GridSpan;
    if (gridSpan <= 1)
      return;
    this.m_writer.WriteStartElement("gridSpan", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", gridSpan.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeCellWidth(WTableCell cell)
  {
    CellFormat cellFormat = cell.CellFormat;
    if (cellFormat.PreferredWidth.WidthType == FtsWidth.None)
      return;
    this.m_writer.WriteStartElement("tcW", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (cellFormat.PreferredWidth.WidthType == FtsWidth.Auto)
    {
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    }
    else if (cellFormat.PreferredWidth.WidthType == FtsWidth.Percentage)
    {
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
      int num = (int) Math.Round((double) cellFormat.PreferredWidth.Width * 50.0);
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
    }
    else if (cellFormat.PreferredWidth.WidthType == FtsWidth.Point)
    {
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      float num1 = 0.0f;
      int num2 = 0;
      if (this.IsStrict)
        num1 = cellFormat.PreferredWidth.Width;
      else
        num2 = (int) Math.Round((double) cellFormat.PreferredWidth.Width * 20.0);
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? num1.ToString() + "pt" : num2.ToString());
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeRowFormat(WTableRow row)
  {
    if (row.OwnerTable.Owner != null && !this.m_isAlternativeRowFormat && (row.OwnerTable.Owner.EntityType == EntityType.Table || row.OwnerTable.Owner.EntityType == EntityType.TableRow || row.HasTblPrEx))
    {
      this.m_writer.WriteStartElement("tblPrEx", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeTableFormat(row.RowFormat, (WTable) null);
      this.m_writer.WriteEndElement();
    }
    RowFormat rowFormat = row.RowFormat;
    List<Stream> tempDocxProps = new List<Stream>();
    int index = 0;
    for (int count = rowFormat.XmlProps.Count; index < count; ++index)
      tempDocxProps.Add(rowFormat.XmlProps[index]);
    this.m_writer.WriteStartElement("trPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCnfStyleElement(row);
    this.SerializeDocxProps(tempDocxProps, "divId");
    short gridBefore = rowFormat.GridBefore;
    if (gridBefore > (short) 0)
    {
      this.m_writer.WriteStartElement("gridBefore", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", gridBefore.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    short gridAfter = rowFormat.GridAfter;
    if (gridAfter > (short) 0)
    {
      this.m_writer.WriteStartElement("gridAfter", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", gridAfter.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (gridBefore > (short) 0)
    {
      this.m_writer.WriteStartElement("wBefore", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (rowFormat.GridBeforeWidth.WidthType)
      {
        case FtsWidth.Percentage:
          this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
          this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridBeforeWidth.Width * 50f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          break;
        case FtsWidth.Point:
          this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
          this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridBeforeWidth.Width * 20f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (gridAfter > (short) 0)
    {
      this.m_writer.WriteStartElement("wAfter", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (rowFormat.GridAfterWidth.WidthType)
      {
        case FtsWidth.Percentage:
          this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
          this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridAfterWidth.Width * 50f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          break;
        case FtsWidth.Point:
          this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
          this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridAfterWidth.Width * 20f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (rowFormat.HasValue(121) && rowFormat.Hidden)
    {
      this.m_writer.WriteStartElement("hidden", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (rowFormat.HasValue(106) && !rowFormat.IsBreakAcrossPages)
    {
      this.m_writer.WriteStartElement("cantSplit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if ((double) row.Height != 0.0)
    {
      this.m_writer.WriteStartElement("trHeight", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(Math.Abs(row.Height) * 20f));
      switch (row.HeightType)
      {
        case TableRowHeightType.AtLeast:
          this.m_writer.WriteAttributeString("hRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "atLeast");
          break;
        case TableRowHeightType.Exactly:
          this.m_writer.WriteAttributeString("hRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "exact");
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (row.IsHeader)
    {
      this.m_writer.WriteStartElement("tblHeader", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeCellSpacing(rowFormat);
    this.SerializeTableAlignment(rowFormat);
    this.SerializeDocxProps(tempDocxProps, "hidden");
    if (row.RowFormat.Revisions.Count > 0 && !this.m_isAlternativeRowFormat)
      this.SerializeRevisionsInFormatting(row.RowFormat.Revisions);
    if (rowFormat.HasKey(122) && rowFormat.Revisions.Count > 0 && !this.m_isAlternativeRowFormat)
    {
      foreach (Revision revision in rowFormat.Revisions)
      {
        if (revision.RevisionType == RevisionType.Formatting)
        {
          this.SerializeTrackChangeProps("trPrChange", revision.Author, revision.Date);
          if (rowFormat.OldPropertiesHash.Count > 0)
          {
            this.m_isAlternativeRowFormat = true;
            Dictionary<int, object> dictionary1 = new Dictionary<int, object>((IDictionary<int, object>) rowFormat.OldPropertiesHash);
            Dictionary<int, object> dictionary2 = new Dictionary<int, object>((IDictionary<int, object>) rowFormat.PropertiesHash);
            rowFormat.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              rowFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            rowFormat.OldPropertiesHash.Clear();
            this.SerializeRowFormat(row);
            rowFormat.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary2)
              rowFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              rowFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.m_isAlternativeRowFormat = false;
          }
          else
          {
            this.m_writer.WriteStartElement("trPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteEndElement();
          }
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeCnfStyleElement(WTableRow row)
  {
    IStyle byName = this.m_document.Styles.FindByName(row.OwnerTable.StyleName, StyleType.TableStyle);
    if (byName == null || (byName as WTableStyle).ConditionalFormattingStyles.Count <= 0)
      return;
    int rowIndex = row.GetRowIndex();
    WTable ownerTable = row.OwnerTable;
    string str1 = "0";
    string str2 = "0";
    string str3 = "0";
    string str4 = "0";
    string str5 = "0";
    string str6 = "0";
    string str7 = "0";
    string str8 = "0";
    string str9 = "0";
    string str10 = "0";
    string str11 = "0";
    string str12 = "0";
    foreach (ConditionalFormattingStyle conditionalFormattingStyle in (CollectionImpl) (byName as WTableStyle).ConditionalFormattingStyles)
    {
      switch (conditionalFormattingStyle.ConditionalFormattingType)
      {
        case ConditionalFormattingType.FirstRow:
          if (rowIndex == 0 && ownerTable.ApplyStyleForHeaderRow)
          {
            str1 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.LastRow:
          if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && ownerTable.ApplyStyleForLastRow)
          {
            str2 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.OddRowBanding:
          if (rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 1 && ownerTable.ApplyStyleForBandedRows)
          {
            str7 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.EvenRowBanding:
          if (rowIndex != 0 && rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 0 && ownerTable.ApplyStyleForBandedRows)
          {
            str8 = "1";
            continue;
          }
          continue;
        default:
          continue;
      }
    }
    string str13 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str10 + str9 + str12 + str11;
    if (!(str13 != "000000000000"))
      return;
    this.m_writer.WriteStartElement("cnfStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str13);
    this.m_writer.WriteAttributeString("w", "firstRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str1);
    this.m_writer.WriteAttributeString("w", "lastRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str2);
    this.m_writer.WriteAttributeString("w", "firstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str3);
    this.m_writer.WriteAttributeString("w", "lastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str4);
    this.m_writer.WriteAttributeString("w", "oddVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str5);
    this.m_writer.WriteAttributeString("w", "evenVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str6);
    this.m_writer.WriteAttributeString("w", "oddHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str7);
    this.m_writer.WriteAttributeString("w", "evenHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str8);
    this.m_writer.WriteAttributeString("w", "firstRowFirstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str9);
    this.m_writer.WriteAttributeString("w", "firstRowLastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str10);
    this.m_writer.WriteAttributeString("w", "lastRowFirstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str11);
    this.m_writer.WriteAttributeString("w", "lastRowLastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str12);
    this.m_writer.WriteEndElement();
  }

  private void SerializeCnfStyleElement(WTableCell cell)
  {
    IStyle byName = this.m_document.Styles.FindByName(cell.OwnerRow.OwnerTable.StyleName, StyleType.TableStyle);
    if (byName == null || (byName as WTableStyle).ConditionalFormattingStyles.Count <= 0)
      return;
    int cellIndex = cell.GetCellIndex();
    int rowIndex = cell.OwnerRow.GetRowIndex();
    WTable ownerTable = cell.OwnerRow.OwnerTable;
    string str1 = "0";
    string str2 = "0";
    string str3 = "0";
    string str4 = "0";
    string str5 = "0";
    string str6 = "0";
    string str7 = "0";
    string str8 = "0";
    string str9 = "0";
    string str10 = "0";
    string str11 = "0";
    string str12 = "0";
    foreach (ConditionalFormattingStyle conditionalFormattingStyle in (CollectionImpl) (byName as WTableStyle).ConditionalFormattingStyles)
    {
      switch (conditionalFormattingStyle.ConditionalFormattingType)
      {
        case ConditionalFormattingType.FirstColumn:
          if (cellIndex == 0 && ownerTable.ApplyStyleForFirstColumn)
          {
            str3 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.LastColumn:
          if (cellIndex != 0 && cellIndex == cell.OwnerRow.Cells.Count - 1 && ownerTable.ApplyStyleForLastColumn)
          {
            str4 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.OddColumnBanding:
          if (cellIndex != cell.OwnerRow.Cells.Count - 1 && cellIndex % 2 == 1 && ownerTable.ApplyStyleForBandedColumns)
          {
            str5 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.EvenColumnBanding:
          if (cellIndex != 0 && cellIndex != cell.OwnerRow.Cells.Count - 1 && cellIndex % 2 == 0 && ownerTable.ApplyStyleForBandedColumns)
          {
            str6 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.FirstRowLastCell:
          if (rowIndex == 0 && cellIndex != 0 && cellIndex == cell.OwnerRow.Cells.Count - 1 && ownerTable.ApplyStyleForHeaderRow && ownerTable.ApplyStyleForLastColumn)
          {
            str10 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.FirstRowFirstCell:
          if (rowIndex == 0 && cellIndex == 0 && ownerTable.ApplyStyleForHeaderRow && ownerTable.ApplyStyleForFirstColumn)
          {
            str9 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.LastRowLastCell:
          if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && cellIndex != 0 && cellIndex == cell.OwnerRow.Cells.Count - 1 && ownerTable.ApplyStyleForLastRow && ownerTable.ApplyStyleForLastColumn)
          {
            str12 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.LastRowFirstCell:
          if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && cellIndex == 0 && ownerTable.ApplyStyleForLastRow && ownerTable.ApplyStyleForFirstColumn)
          {
            str11 = "1";
            continue;
          }
          continue;
        default:
          continue;
      }
    }
    string str13 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str10 + str9 + str12 + str11;
    if (str13 != "000000000000")
    {
      this.m_writer.WriteStartElement("cnfStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str13);
      this.m_writer.WriteAttributeString("w", "firstRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str1);
      this.m_writer.WriteAttributeString("w", "lastRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str2);
      this.m_writer.WriteAttributeString("w", "firstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str3);
      this.m_writer.WriteAttributeString("w", "lastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str4);
      this.m_writer.WriteAttributeString("w", "oddVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str5);
      this.m_writer.WriteAttributeString("w", "evenVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str6);
      this.m_writer.WriteAttributeString("w", "oddHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str7);
      this.m_writer.WriteAttributeString("w", "evenHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str8);
      this.m_writer.WriteAttributeString("w", "firstRowFirstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str9);
      this.m_writer.WriteAttributeString("w", "firstRowLastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str10);
      this.m_writer.WriteAttributeString("w", "lastRowFirstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str11);
      this.m_writer.WriteAttributeString("w", "lastRowLastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str12);
      this.m_writer.WriteEndElement();
    }
    else
      this.IsParagraphContainsCnfStyle = true;
  }

  private void SerializeCnfStyleElement(WParagraph paragraph)
  {
    WTableCell ownerTableCell = paragraph.GetOwnerTableCell(paragraph.OwnerTextBody);
    IStyle byName = this.m_document.Styles.FindByName(ownerTableCell.OwnerRow.OwnerTable.StyleName, StyleType.TableStyle);
    if (byName == null || (byName as WTableStyle).ConditionalFormattingStyles.Count <= 0)
      return;
    ownerTableCell.GetCellIndex();
    int rowIndex = ownerTableCell.OwnerRow.GetRowIndex();
    WTable ownerTable = ownerTableCell.OwnerRow.OwnerTable;
    if (!this.IsParagraphHasCnfStyle(byName, rowIndex, ownerTable))
      return;
    string str1 = "0";
    string str2 = "0";
    string str3 = "0";
    string str4 = "0";
    string str5 = "0";
    string str6 = "0";
    string str7 = "0";
    string str8 = "0";
    string str9 = "0";
    string str10 = "0";
    string str11 = "0";
    string str12 = "0";
    foreach (ConditionalFormattingStyle conditionalFormattingStyle in (CollectionImpl) (byName as WTableStyle).ConditionalFormattingStyles)
    {
      switch (conditionalFormattingStyle.ConditionalFormattingType)
      {
        case ConditionalFormattingType.FirstRow:
          if (rowIndex == 0 && ownerTable.ApplyStyleForHeaderRow)
          {
            str1 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.LastRow:
          if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && ownerTable.ApplyStyleForLastRow)
          {
            str2 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.OddRowBanding:
          if (rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 1 && ownerTable.ApplyStyleForBandedRows)
          {
            str7 = "1";
            continue;
          }
          continue;
        case ConditionalFormattingType.EvenRowBanding:
          if (rowIndex != 0 && rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 0 && ownerTable.ApplyStyleForBandedRows)
          {
            str8 = "1";
            continue;
          }
          continue;
        default:
          continue;
      }
    }
    string str13 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str10 + str9 + str12 + str11;
    this.m_writer.WriteStartElement("cnfStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str13);
    this.m_writer.WriteAttributeString("w", "firstRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str1);
    this.m_writer.WriteAttributeString("w", "lastRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str2);
    this.m_writer.WriteAttributeString("w", "firstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str3);
    this.m_writer.WriteAttributeString("w", "lastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str4);
    this.m_writer.WriteAttributeString("w", "oddVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str5);
    this.m_writer.WriteAttributeString("w", "evenVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str6);
    this.m_writer.WriteAttributeString("w", "oddHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str7);
    this.m_writer.WriteAttributeString("w", "evenHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str8);
    this.m_writer.WriteAttributeString("w", "firstRowFirstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str9);
    this.m_writer.WriteAttributeString("w", "firstRowLastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str10);
    this.m_writer.WriteAttributeString("w", "lastRowFirstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str11);
    this.m_writer.WriteAttributeString("w", "lastRowLastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str12);
    this.m_writer.WriteEndElement();
  }

  private bool IsParagraphHasCnfStyle(IStyle style, int rowIndex, WTable table)
  {
    bool flag = false;
    foreach (ConditionalFormattingStyle conditionalFormattingStyle in (CollectionImpl) (style as WTableStyle).ConditionalFormattingStyles)
    {
      if (conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.FirstColumn && table.ApplyStyleForFirstColumn || conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.LastColumn && table.ApplyStyleForLastColumn || conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.OddColumnBanding && table.ApplyStyleForBandedColumns || conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.EvenColumnBanding && table.ApplyStyleForBandedColumns || rowIndex == 0 && conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.FirstRowFirstCell && table.ApplyStyleForHeaderRow && table.ApplyStyleForFirstColumn || rowIndex != 0 && rowIndex == table.Rows.Count - 1 && conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.LastRowFirstCell && table.ApplyStyleForLastRow && table.ApplyStyleForFirstColumn)
      {
        flag = true;
        break;
      }
      flag = false;
    }
    return flag;
  }

  private void SerializeTableFormat(RowFormat format, WTable table)
  {
    if (table != null)
    {
      List<Stream> tempDocxProps = new List<Stream>();
      int index = 0;
      for (int count = table.DocxTableFormat.NodeArray.Count; index < count; ++index)
        tempDocxProps.Add(table.DocxTableFormat.NodeArray[index]);
      this.m_writer.WriteStartElement("tblPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeTableStlye(format);
      if (format.WrapTextAround && !(table.OwnerTextBody.Owner is WTextBox) && !(table.OwnerTextBody.Owner is WComment) && !(table.OwnerTextBody.Owner is WFootnote))
      {
        this.SerializeTablePositioning(format.Positioning);
        if (!format.Positioning.AllowOverlap)
        {
          this.m_writer.WriteStartElement("tblOverlap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "never");
          this.m_writer.WriteEndElement();
        }
      }
      if (format.PropertiesHash.ContainsKey(104))
      {
        if (format.Bidi)
        {
          this.m_writer.WriteStartElement("bidiVisual", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        }
        else
        {
          this.m_writer.WriteStartElement("bidiVisual", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
        }
        this.m_writer.WriteEndElement();
      }
      this.SerializeDocxProps(tempDocxProps, "tblStyleRowBandSize");
      this.SerializeDocxProps(tempDocxProps, "tblStyleColBandSize");
      this.SerializeTableWidth(table);
      this.SerializeTableAlignment(format);
      this.SerializeCellSpacing(format);
      this.SerializeTableIndentation(format);
      this.SerializeTableBorders(format);
      this.SerializeTableShading(format);
      this.SerializeTblLayout(format);
      this.SerializeTableCellMargin(format);
      this.SerializeTableLook(table);
      if (table.Title != null)
        this.SerializeTableTitle(table);
      if (table.Description != null)
        this.SerializeTableDescription(table);
    }
    else
    {
      this.SerializeCellSpacing(format);
      this.SerializeTableIndentation(format);
      this.SerializeTableBorders(format);
      this.SerializeTableShading(format);
      this.SerializeTblLayout(format);
      this.SerializeTableCellMargin(format);
    }
    if (format.OwnerBase != null && format.OwnerBase is WTable && format.OldPropertiesHash.Count > 0 && !this.m_isAlternativeTableFormat && format.Revisions.Count > 0)
    {
      foreach (Revision revision in format.Revisions)
      {
        if (revision.RevisionType == RevisionType.Formatting)
        {
          this.m_isAlternativeTableFormat = true;
          this.SerializeTrackChangeProps("tblPrChange", revision.Author, revision.Date);
          this.SerializeTableTrackChanges(format, format.OwnerBase as WTable);
          this.m_writer.WriteEndElement();
          this.m_isAlternativeTableFormat = false;
        }
      }
    }
    if (format.OwnerRow != null && format.OldPropertiesHash.Count > 0 && format.Revisions.Count > 0)
    {
      foreach (Revision revision in format.Revisions)
      {
        if (revision.RevisionType == RevisionType.Formatting)
        {
          this.SerializeTrackChangeProps("tblPrExChange", revision.Author, revision.Date);
          this.m_writer.WriteStartElement("tblPrEx", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.SerializeTableTrackChanges(format, (WTable) null);
          this.m_writer.WriteEndElement();
          this.m_writer.WriteEndElement();
        }
      }
    }
    if (table == null)
      return;
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableTrackChanges(RowFormat format, WTable table)
  {
    Dictionary<int, object> dictionary1 = new Dictionary<int, object>((IDictionary<int, object>) format.OldPropertiesHash);
    Dictionary<int, object> dictionary2 = new Dictionary<int, object>((IDictionary<int, object>) format.PropertiesHash);
    format.PropertiesHash.Clear();
    foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
      format.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
    format.OldPropertiesHash.Clear();
    this.SerializeTableFormat(format, table);
    foreach (KeyValuePair<int, object> keyValuePair in dictionary2)
      format.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
    foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
      format.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
  }

  private void SerializeTableTitle(WTable table)
  {
    this.m_writer.WriteStartElement("tblCaption", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", table.Title);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableDescription(WTable table)
  {
    this.m_writer.WriteStartElement("tblDescription", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", table.Description);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableCellMargin(RowFormat format)
  {
    if (format.Paddings.IsDefault && !format.HasValue(3))
      return;
    this.m_writer.WriteStartElement("tblCellMar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializePaddings(format.Paddings);
    this.m_writer.WriteEndElement();
  }

  private void SerializePaddings(Paddings paddings)
  {
    if ((double) paddings.Top >= 0.0 && paddings.HasKey(2))
    {
      this.m_writer.WriteStartElement("top", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paddings.Top.ToString() : this.ToString(paddings.Top * 20f)) + (this.IsStrict ? "pt" : ""));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      this.m_writer.WriteEndElement();
    }
    if ((double) paddings.Left >= 0.0 && paddings.HasKey(1))
    {
      this.m_writer.WriteStartElement(this.IsStrict ? "start" : "left", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paddings.Left.ToString() : this.ToString(paddings.Left * 20f)) + (this.IsStrict ? "pt" : ""));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      this.m_writer.WriteEndElement();
    }
    if ((double) paddings.Bottom >= 0.0 && paddings.HasKey(3))
    {
      this.m_writer.WriteStartElement("bottom", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paddings.Bottom.ToString() : this.ToString(paddings.Bottom * 20f)) + (this.IsStrict ? "pt" : ""));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      this.m_writer.WriteEndElement();
    }
    if ((double) paddings.Right < 0.0 || !paddings.HasKey(4))
      return;
    this.m_writer.WriteStartElement(this.IsStrict ? "end" : "right", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paddings.Right.ToString() : this.ToString(paddings.Right * 20f)) + (this.IsStrict ? "pt" : ""));
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
  }

  private void SerializeTblLayout(RowFormat format)
  {
    if (format.IsAutoResized)
      return;
    this.m_writer.WriteStartElement("tblLayout", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fixed");
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableShading(RowFormat format)
  {
    if (!format.HasValue(108) && !format.HasValue(110))
      return;
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (format.BackColor == Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(format.BackColor));
    string textureStyle = this.GetTextureStyle(format.TextureStyle);
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableBorders(RowFormat format)
  {
    if (this.IsNoneBorder(format.Borders))
      return;
    this.m_writer.WriteStartElement("tblBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeBorders(format.Borders, 8);
    this.m_writer.WriteEndElement();
  }

  private bool IsNoneBorder(Borders borders)
  {
    return this.IsNoneBorder(borders.Bottom) && this.IsNoneBorder(borders.Right) && this.IsNoneBorder(borders.Top) && this.IsNoneBorder(borders.Left) && this.IsNoneBorder(borders.DiagonalDown) && this.IsNoneBorder(borders.DiagonalUp) && this.IsNoneBorder(borders.Horizontal) && this.IsNoneBorder(borders.Vertical);
  }

  private void SerializeTableIndentation(RowFormat format)
  {
    if (!format.HasValue(53))
      return;
    this.m_writer.WriteStartElement("tblInd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    int num = this.IsStrict ? (int) Math.Round((double) format.LeftIndent * 20.0) : (int) Math.Round((double) format.LeftIndent * 20.0);
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
  }

  private void SerializeCellSpacing(RowFormat format)
  {
    if ((double) format.CellSpacing < 0.0)
      return;
    this.m_writer.WriteStartElement("tblCellSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? format.CellSpacing.ToString() : this.ToString(format.CellSpacing * 20f)) + (this.IsStrict ? "pt" : ""));
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableWidth(WTable table)
  {
    if (table.PreferredTableWidth.WidthType == FtsWidth.None || table.PreferredTableWidth.WidthType >= FtsWidth.Percentage && (double) table.PreferredTableWidth.Width == 0.0)
      return;
    this.m_writer.WriteStartElement("tblW", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (table.PreferredTableWidth.WidthType == FtsWidth.Auto)
    {
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    }
    else if (table.PreferredTableWidth.WidthType == FtsWidth.Percentage)
    {
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(table.PreferredTableWidth.Width * 50f));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
    }
    else if (table.PreferredTableWidth.WidthType == FtsWidth.Point)
    {
      float num = this.IsStrict ? table.PreferredTableWidth.Width : (float) Math.Round((double) table.PreferredTableWidth.Width * 20.0);
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableAlignment(RowFormat format)
  {
    if (!format.PropertiesHash.ContainsKey(105))
      return;
    this.m_writer.WriteStartElement("jc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (format.HorizontalAlignment)
    {
      case RowAlignment.Center:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
        break;
      case RowAlignment.Right:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? "end" : "right");
        break;
      default:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? "start" : "left");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTablePositioning(RowFormat.TablePositioning positioning)
  {
    this.m_writer.WriteStartElement("tblpPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if ((double) positioning.DistanceFromLeft != 0.0)
    {
      string str = (this.IsStrict ? positioning.DistanceFromLeft.ToString() : this.ToString(positioning.DistanceFromLeft * 20f)) + (this.IsStrict ? "pt" : "");
      this.m_writer.WriteAttributeString("leftFromText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    if ((double) positioning.DistanceFromRight != 0.0)
    {
      string str = (this.IsStrict ? positioning.DistanceFromRight.ToString() : this.ToString(positioning.DistanceFromRight * 20f)) + (this.IsStrict ? "pt" : "");
      this.m_writer.WriteAttributeString("rightFromText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    if ((double) positioning.DistanceFromTop != 0.0)
    {
      string str = (this.IsStrict ? positioning.DistanceFromTop.ToString() : this.ToString(positioning.DistanceFromTop * 20f)) + (this.IsStrict ? "pt" : "");
      this.m_writer.WriteAttributeString("topFromText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    if ((double) positioning.DistanceFromBottom != 0.0)
    {
      string str = (this.IsStrict ? positioning.DistanceFromBottom.ToString() : this.ToString(positioning.DistanceFromBottom * 20f)) + (this.IsStrict ? "pt" : "");
      this.m_writer.WriteAttributeString("bottomFromText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    this.SerializeTableVertRelation(positioning.VertRelationTo);
    if (positioning.HorizRelationTo != HorizontalRelation.Column)
      this.SerializeTableHorizRelation(positioning.HorizRelationTo);
    if (positioning.HorizPositionAbs != HorizontalPosition.Left)
      this.SerializeTableHorizPosition(positioning.HorizPositionAbs);
    else if ((double) positioning.HorizPosition != 0.0)
    {
      string str = (this.IsStrict ? positioning.HorizPosition.ToString() : this.ToString(positioning.HorizPosition * 20f)) + (this.IsStrict ? "pt" : "");
      this.m_writer.WriteAttributeString("tblpX", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    if (positioning.VertPositionAbs != VerticalPosition.None)
      this.SerializeTableVertPosition(positioning.VertPositionAbs);
    else if ((double) positioning.VertPosition != 0.0)
    {
      string str = (this.IsStrict ? positioning.VertPosition.ToString() : this.ToString(positioning.VertPosition * 20f)) + (this.IsStrict ? "pt" : "");
      this.m_writer.WriteAttributeString("tblpY", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableHorizPosition(HorizontalPosition position)
  {
    string str = (string) null;
    switch (position)
    {
      case HorizontalPosition.Outside:
        str = "outside";
        break;
      case HorizontalPosition.Inside:
        str = "inside";
        break;
      case HorizontalPosition.Right:
        str = "right";
        break;
      case HorizontalPosition.Center:
        str = "center";
        break;
    }
    this.m_writer.WriteAttributeString("tblpXSpec", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
  }

  private void SerializeTableVertPosition(VerticalPosition position)
  {
    string str = (string) null;
    switch (position)
    {
      case VerticalPosition.Outside:
        str = "outside";
        break;
      case VerticalPosition.Inside:
        str = "inside";
        break;
      case VerticalPosition.Bottom:
        str = "bottom";
        break;
      case VerticalPosition.Center:
        str = "center";
        break;
      case VerticalPosition.Top:
        str = "top";
        break;
    }
    this.m_writer.WriteAttributeString("tblpYSpec", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
  }

  private void SerializeTableVertRelation(VerticalRelation relation)
  {
    string str = (string) null;
    switch (relation)
    {
      case VerticalRelation.Margin:
        str = "margin";
        break;
      case VerticalRelation.Page:
        str = "page";
        break;
      case VerticalRelation.Paragraph:
        str = "text";
        break;
    }
    this.m_writer.WriteAttributeString("vertAnchor", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
  }

  private void SerializeTableHorizRelation(HorizontalRelation relation)
  {
    string str = (string) null;
    switch (relation)
    {
      case HorizontalRelation.Column:
        str = "text";
        break;
      case HorizontalRelation.Margin:
        str = "margin";
        break;
      case HorizontalRelation.Page:
        str = "page";
        break;
    }
    this.m_writer.WriteAttributeString("horzAnchor", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
  }

  private void SerializeTableStlye(RowFormat format)
  {
    WTable wtable = (WTable) null;
    if (format.OwnerBase != null && format.OwnerBase is WTable)
    {
      wtable = format.OwnerBase as WTable;
      if (wtable.DocxTableFormat.HasFormat && !wtable.DocxTableFormat.Format.IsDefault && string.IsNullOrEmpty(wtable.DocxTableFormat.StyleName))
        return;
    }
    string str1 = "TableGrid";
    if (wtable != null)
    {
      if (!string.IsNullOrEmpty(wtable.DocxTableFormat.StyleName))
        str1 = (format.OwnerBase as WTable).DocxTableFormat.StyleName;
      if (wtable.StyleName != null)
        str1 = this.GetStyleId(wtable.StyleName) ?? wtable.StyleName.Replace(" ", string.Empty);
    }
    else if (format.OwnerBase is WTableRow && (format.OwnerBase as WTableRow).OwnerTable != null)
    {
      string str2 = (format.OwnerBase as WTableRow).OwnerTable.DocxTableFormat.StyleName;
      if ((format.OwnerBase as WTableRow).OwnerTable.StyleName != null)
        str2 = this.GetStyleId((format.OwnerBase as WTableRow).OwnerTable.StyleName) ?? (format.OwnerBase as WTableRow).OwnerTable.StyleName.Replace(" ", string.Empty);
      if (str2 != null)
        str1 = str2;
    }
    this.m_writer.WriteStartElement("tblStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str1);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableLook(WTable table)
  {
    string str1 = "0";
    string str2 = "0";
    string str3 = "0";
    string str4 = "0";
    string str5 = "0";
    string str6 = "0";
    if (table.ApplyStyleForHeaderRow)
      str1 = "1";
    if (table.ApplyStyleForLastRow)
      str2 = "1";
    if (table.ApplyStyleForFirstColumn)
      str3 = "1";
    if (table.ApplyStyleForLastColumn)
      str4 = "1";
    if (!table.ApplyStyleForBandedRows)
      str5 = "1";
    if (!table.ApplyStyleForBandedColumns)
      str6 = "1";
    string str7 = $"{Convert.ToInt64($"{str6}{str5}{str4}{str3}{str2}{str1}00000", 2):X}".PadLeft(4, '0');
    this.m_writer.WriteStartElement("tblLook", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str7);
    this.m_writer.WriteAttributeString("w", "firstRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str1);
    this.m_writer.WriteAttributeString("w", "lastRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str2);
    this.m_writer.WriteAttributeString("w", "firstColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str3);
    this.m_writer.WriteAttributeString("w", "lastColumn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str4);
    this.m_writer.WriteAttributeString("w", "noHBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str5);
    this.m_writer.WriteAttributeString("w", "noVBand", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str6);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableGrid(WTable table)
  {
    this.m_writer.WriteStartElement("tblGrid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (table.TableGrid.Count != 0)
      this.SerializeGridColumns(table.TableGrid);
    if (table.m_trackTableGrid != null && table.TrackTableGrid.Count != 0)
    {
      this.m_writer.WriteStartElement("tblGridChange", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetNextTChangeId());
      this.m_writer.WriteStartElement("tblGrid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeGridColumns(table.TrackTableGrid);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeGridColumns(WTableColumnCollection grid)
  {
    float num = 0.0f;
    int index = 0;
    for (int count = grid.Count; index < count; ++index)
    {
      float endOffset = grid[index].EndOffset;
      this.SerializeGridColumn(endOffset - num);
      num = endOffset;
    }
  }

  private void SerializeGridColumn(float colWidth)
  {
    int num = (int) Math.Round((double) colWidth);
    this.m_writer.WriteStartElement("gridCol", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraph(WParagraph paragraph, bool isLastSection)
  {
    if (paragraph == null)
      throw new ArgumentException("Paragraph should not be null");
    if (paragraph.RemoveEmpty && (paragraph.Text == string.Empty || paragraph.IsOnlyHasSpaces()))
    {
      if (isLastSection || !paragraph.IsEndOfSection)
        return;
      this.m_writer.WriteStartElement("w", "p", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraph.OwnerTextBody.Owner is WSection owner && owner.NextSibling != null)
        this.SerializeSectionProperties(owner, false);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      if (paragraph.ParagraphFormat.PageBreakAfter && !this.IsPageBreakNeedToBeSkipped((Entity) paragraph))
        paragraph.InsertBreak(BreakType.PageBreak);
      if (paragraph.ParagraphFormat.ColumnBreakAfter && !this.IsPageBreakNeedToBeSkipped((Entity) paragraph))
        paragraph.InsertBreak(BreakType.ColumnBreak);
      if ((paragraph.Owner.Owner is BlockContentControl ? ((paragraph.Owner.Owner as BlockContentControl).ContentControlProperties.Type != ContentControlType.Text ? 1 : (!(paragraph.Owner.Owner as BlockContentControl).ContentControlProperties.XmlMapping.IsMapped ? 1 : 0)) : 1) != 0)
        paragraph.SplitTextRange();
      this.m_writer.WriteStartElement("w", "p", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!string.IsNullOrEmpty(paragraph.ParaId))
        this.m_writer.WriteAttributeString("w14", "paraId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2010/wordml", paragraph.ParaId);
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeParagraphFormat(paragraph.ParagraphFormat, paragraph);
      this.m_writer.WriteEndElement();
      this.EnsureWatermark(paragraph);
      this.SerializeParagraphItems(paragraph.Items);
      if (!(paragraph.NextSibling is AlternateChunk) || !(paragraph.NextSibling as AlternateChunk).IsParagraphItem)
        this.m_writer.WriteEndElement();
      while (this.BookMarkCollection.Count > 0 && this.BookMarkCollection[0] is BookmarkEnd && (this.BookMarkCollection[0] as BookmarkEnd).IsAfterParagraphMark)
      {
        BookmarkEnd bookMark = this.BookMarkCollection[0] as BookmarkEnd;
        bookMark.IsAfterParagraphMark = false;
        this.SerializeBookmarkEnd(bookMark);
        bookMark.IsAfterParagraphMark = true;
        this.BookMarkCollection.Remove((Entity) bookMark);
      }
      while (this.EditableRangeCollection.Count > 0 && this.EditableRangeCollection[0] is EditableRangeEnd && (this.EditableRangeCollection[0] as EditableRangeEnd).IsAfterParagraphMark)
      {
        EditableRangeEnd editableRange = this.EditableRangeCollection[0] as EditableRangeEnd;
        editableRange.IsAfterParagraphMark = false;
        this.SerializeEditableRangeEnd(editableRange);
        editableRange.IsAfterParagraphMark = true;
        this.EditableRangeCollection.Remove((Entity) editableRange);
      }
      while (this.MovingRevisionCollection.Count > 0 && this.MovingRevisionDetails != null && this.MovingRevisionCollection[0].IsAfterParagraphMark)
        this.SerializeMoveRangeEnd();
    }
  }

  private void EnsureWatermark(WParagraph paragraph)
  {
    HeaderFooter headerFooter = paragraph.OwnerTextBody is HeaderFooter ? paragraph.OwnerTextBody as HeaderFooter : paragraph.GetBaseEntity((Entity) paragraph) as HeaderFooter;
    if (headerFooter == null || headerFooter.Paragraphs.Count <= 0 || headerFooter.Paragraphs[0] != paragraph || paragraph.OwnerTextBody.Owner.Owner != null && paragraph.OwnerTextBody.Owner is BlockContentControl || headerFooter.Type != HeaderFooterType.FirstPageHeader && headerFooter.Type != HeaderFooterType.OddHeader && headerFooter.Type != HeaderFooterType.EvenHeader || !headerFooter.WriteWatermark)
      return;
    this.SerializeWatermark(headerFooter.Watermark);
  }

  private void SerializeParagraphItems(ParagraphItemCollection paraItems)
  {
    bool flag1 = false;
    for (int index = 0; index < paraItems.Count; ++index)
    {
      ParagraphItem paraItem = paraItems[index];
      bool flag2 = flag1 ? paraItem.GetCharFormat().BiDirectionalOverride != BiDirectionalOverride.None : this.SerializeDirectionalOverride(paraItem);
      if (!flag1 && flag2)
        flag1 = flag2;
      if (flag1 && !flag2)
      {
        this.m_writer.WriteEndElement();
        flag1 = false;
      }
      this.SerializeParagraphItem(paraItem, false);
    }
    if (!flag1)
      return;
    this.m_writer.WriteEndElement();
  }

  private bool SkipFieldItem(ParagraphItem item)
  {
    if (!this.IsSkipFieldItem)
      return false;
    if (item is WFieldMark)
    {
      if ((item as WFieldMark).Type == FieldMarkType.FieldSeparator)
      {
        if (this.CurrentField.FieldSeparator == item && this.CurrentField.FieldType == FieldType.FieldHyperlink)
          this.IsSkipFieldItem = false;
      }
      else if (this.CurrentField.FieldEnd == item)
      {
        this.FieldStack.Pop();
        this.IsSkipFieldItem = false;
      }
    }
    return true;
  }

  private void SerializeParagraphItem(ParagraphItem item, bool isFromCompression)
  {
    if (item.SkipDocxItem || this.SkipFieldItem(item))
      return;
    this.SerializeRevisionStart(item);
    switch (item.EntityType)
    {
      case EntityType.InlineContentControl:
        this.SerializeStructureDocumentTagInline(item as InlineContentControl);
        break;
      case EntityType.Picture:
        if (item.IsNotFieldShape())
        {
          this.SerializePicture(item as WPicture);
          break;
        }
        break;
      case EntityType.Field:
      case EntityType.MergeField:
      case EntityType.SeqField:
      case EntityType.EmbededField:
      case EntityType.ControlField:
        this.SerializeFieldBegin(item as WField);
        break;
      case EntityType.FieldMark:
        this.SerializeFieldMark(item as WFieldMark);
        break;
      case EntityType.TextFormField:
        this.SerializeTextFormField(item as WTextFormField);
        break;
      case EntityType.DropDownFormField:
        this.SerializeDropDownFormField(item as WDropDownFormField);
        break;
      case EntityType.CheckBox:
        this.SerializeCheckBoxField(item as WCheckBox);
        break;
      case EntityType.BookmarkStart:
        this.SerializeBookmarkStart(item as BookmarkStart);
        break;
      case EntityType.BookmarkEnd:
        this.SerializeBookmarkEnd(item as BookmarkEnd);
        break;
      case EntityType.Shape:
        if (item.IsNotFieldShape())
        {
          Entity ownerParagraph = (Entity) item.OwnerParagraph;
          if (ownerParagraph != null && ownerParagraph.GetBaseEntity(ownerParagraph) is HeaderFooter)
          {
            this.m_HeaderFooterType = (ownerParagraph.GetBaseEntity(ownerParagraph) as HeaderFooter).Type;
            this.m_IsAutoshapeTextboxInHeader = true;
          }
          this.SerializeTextboxes((item as ShapeObject).AutoShapeTextCollection);
          this.m_IsAutoshapeTextboxInHeader = false;
          break;
        }
        break;
      case EntityType.Comment:
        this.SerializeCommentReference(item as WComment);
        break;
      case EntityType.Footnote:
        this.SerializeFootEndnote(item as WFootnote, isFromCompression);
        break;
      case EntityType.TextBox:
        this.SerializeTextBox(item as WTextBox);
        break;
      case EntityType.Break:
        Break brk = item as Break;
        if (brk.BreakType != BreakType.PageBreak || !this.IsPageBreakNeedToBeSkipped((Entity) item))
        {
          if (brk.BreakType == BreakType.LineBreak && brk.TextRange.Text == ControlChar.CarriegeReturn)
          {
            this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteStartElement("cr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteEndElement();
            this.m_writer.WriteEndElement();
            break;
          }
          this.SerializeBreak(brk);
          break;
        }
        break;
      case EntityType.Symbol:
        this.SerializeSymbol(item as WSymbol);
        break;
      case EntityType.TOC:
        this.SerializeTableOfContents(item as TableOfContent);
        break;
      case EntityType.XmlParaItem:
        this.SerializeXmlParagraphItem(item as XmlParagraphItem, false);
        break;
      case EntityType.Chart:
        if ((item as WChart).ChartType != OfficeChartType.WaterFall)
        {
          this.m_hasChart = true;
          this.SerializeChart(item as WChart);
          break;
        }
        break;
      case EntityType.CommentMark:
        this.SerializeCommentMark(item as WCommentMark);
        break;
      case EntityType.OleObject:
        this.SerializeOleObject(item as WOleObject);
        break;
      case EntityType.AbsoluteTab:
        this.SerializeAbsoluteTab(item as WAbsoluteTab);
        break;
      case EntityType.AutoShape:
        this.SerializeAutoShape(item as Shape);
        break;
      case EntityType.EditableRangeStart:
        this.SerializeEditableRangeStart(item as EditableRangeStart);
        break;
      case EntityType.EditableRangeEnd:
        this.SerializeEditableRangeEnd(item as EditableRangeEnd);
        break;
      case EntityType.GroupShape:
        this.SerializeGroupShape(item as GroupShape);
        break;
      case EntityType.Math:
        this.SerializeMathMLElement(item as WMath);
        break;
      default:
        this.SerializeTextRange(item);
        break;
    }
    this.SerializeRevisionEnd(item);
  }

  private void SerializeMathMLElement(WMath math)
  {
    MathMLSerializer mathMlSerializer = new MathMLSerializer();
    if (math.IsInline)
    {
      for (int index = 0; index < math.MathParagraph.Maths.Count; ++index)
      {
        this.m_writer.WriteStartElement("oMath", "http://schemas.openxmlformats.org/officeDocument/2006/math");
        mathMlSerializer.SerializeMath(this.m_writer, math.MathParagraph.Maths[index], (DocumentSerializer) this);
        this.m_writer.WriteEndElement();
      }
    }
    else
      mathMlSerializer.SerializeMathPara(this.m_writer, math.MathParagraph, (DocumentSerializer) this);
  }

  internal override void SerializeRunCharacterFormat(IOfficeMathRunElement paraItem)
  {
    if (!(paraItem.Item is WTextRange wtextRange))
      return;
    this.SerializeCharacterFormat(wtextRange.CharacterFormat);
  }

  internal override void SerializeControlProperties(IOfficeRunFormat mathControlFormat)
  {
    this.SerializeCharacterFormat(mathControlFormat as WCharacterFormat);
  }

  internal override void SerializeMathRun(IOfficeMathRunElement officeMathParaItem)
  {
    MathMLSerializer mathMlSerializer = new MathMLSerializer();
    if (officeMathParaItem.Item is WTextRange)
    {
      WTextRange wtextRange = officeMathParaItem.Item as WTextRange;
      mathMlSerializer.SerializeMathRunFormat(this.m_writer, officeMathParaItem.MathFormat as OfficeMathFormat);
      this.SerializeRunCharacterFormat(officeMathParaItem);
      this.m_writer.WriteStartElement("t", "http://schemas.openxmlformats.org/officeDocument/2006/math");
      this.m_writer.WriteString(wtextRange.Text);
      this.m_writer.WriteEndElement();
    }
    else
    {
      if (officeMathParaItem.Item == null)
        return;
      this.SerializeParagraphItem(officeMathParaItem.Item as ParagraphItem, true);
    }
  }

  private void SerializeChart(WChart chart)
  {
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(chart.ParaItemCharFormat);
    this.m_writer.WriteStartElement("drawing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (chart.WrapFormat.TextWrappingStyle != TextWrappingStyle.Inline)
      this.SerializeAbsolutePicture((ParagraphItem) chart);
    else
      this.SerializeInlinePicture((ParagraphItem) chart);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeChartGraphicData(WChart chart)
  {
    this.m_writer.WriteStartElement("wp", "docPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("id", this.GetNextDocPrID().ToString());
    this.m_writer.WriteAttributeString("name", chart.Name == null || chart.Name.Length <= 0 ? chart.EntityType.ToString() : chart.Name);
    if (!string.IsNullOrEmpty(chart.Title))
      this.m_writer.WriteAttributeString("title", chart.Title);
    else
      this.m_writer.WriteAttributeString("title", string.Empty);
    if (chart.AlternativeText != null)
      this.m_writer.WriteAttributeString("descr", chart.AlternativeText);
    if (!chart.Visible)
      this.m_writer.WriteAttributeString("hidden", "1");
    this.m_writer.WriteEndElement();
    string nextRelationShipId = this.GetNextRelationShipID();
    Entity chartBaseEntity = this.GetChartBaseEntity((Entity) chart);
    if (chartBaseEntity is HeaderFooter && !this.HFChartCollection.ContainsKey(nextRelationShipId))
      this.HFChartCollection.Add(nextRelationShipId, chart);
    if (chartBaseEntity is WFootnote)
    {
      if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Footnote && !this.FootnoteChartCollection.ContainsKey(nextRelationShipId))
        this.FootnoteChartCollection.Add(nextRelationShipId, chart);
      else if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Endnote && !this.EndnoteChartCollection.ContainsKey(nextRelationShipId))
        this.EndnoteChartCollection.Add(nextRelationShipId, chart);
    }
    if (chartBaseEntity is WComment && !this.CommentsChartCollection.ContainsKey(nextRelationShipId))
      this.CommentsChartCollection.Add(nextRelationShipId, chart);
    if (!(chartBaseEntity is HeaderFooter) && !(chartBaseEntity is WFootnote) && !(chartBaseEntity is WComment))
      this.DocumentChartCollection.Add(nextRelationShipId, chart);
    if (!this.IsWord2003ML)
      this.SerializeChartElements(chart, nextRelationShipId);
    this.m_writer.WriteStartElement("a", "graphic", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "graphicData", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("uri", "http://schemas.openxmlformats.org/drawingml/2006/chart");
    this.m_writer.WriteStartElement("c", nameof (chart), "http://schemas.openxmlformats.org/drawingml/2006/chart");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (this.ChartRelationId.ContainsKey(nextRelationShipId))
      return;
    this.ChartRelationId.Add(nextRelationShipId, chart);
  }

  private void SerializeChartRelation(MemoryStream docRelStream)
  {
    string empty = string.Empty;
    foreach (string key in this.ChartRelationId.Keys)
    {
      if (!this.HFChartCollection.ContainsKey(key) && !this.FootnoteChartCollection.ContainsKey(key) && !this.EndnoteChartCollection.ContainsKey(key) && !this.CommentsChartCollection.ContainsKey(key))
      {
        string targetPath = $"charts/chart{key.Replace("rId", "")}.xml";
        string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
        this.SerializeRelationShip((Stream) docRelStream, key, relationshipType, targetPath);
      }
    }
  }

  private void SerializeChartElements(WChart chart, string id)
  {
    ChartSerializator chartSerializator = new ChartSerializator();
    MemoryStream memoryStream1 = new MemoryStream();
    this.m_archive.AddItem($"word/charts/chart{id.Replace("rId", "")}.xml", (Stream) memoryStream1, false, FileAttributes.Archive);
    DictionaryEntry dictionaryEntry = new DictionaryEntry();
    string empty = string.Empty;
    ChartImpl officeChart = chart.OfficeChart as ChartImpl;
    string relationId = string.Empty;
    foreach (string key in chart.DocxProps.Keys)
    {
      if (key.Contains("/chartUserShapes"))
      {
        officeChart.RelationPreservedStreamCollection.Add("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", (Stream) null);
        break;
      }
    }
    using (XmlWriter writer = XmlWriter.Create((Stream) memoryStream1))
      chartSerializator.SerializeChart(writer, officeChart, string.Empty, this.GetAppVersion());
    foreach (string key in chart.DocxProps.Keys)
    {
      if (key.Contains("/chartStyle"))
      {
        string str = "style" + (object) ++this.m_chartStyleID;
        this.m_archive.AddItem($"word/charts/{str}.xml", chart.DocxProps[key], false, FileAttributes.Archive);
        dictionaryEntry.Key = (object) "http://schemas.microsoft.com/office/2011/relationships/chartStyle";
        dictionaryEntry.Value = (object) (str + ".xml");
        if (officeChart.Relations.Count > 0)
        {
          relationId = officeChart.Relations.GenerateRelationId();
          officeChart.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartStyle");
        }
        else
          relationId = this.NextChartElementsRelationId();
        this.ChartRelations.Add(relationId, dictionaryEntry);
      }
      if (key.Contains("/chartColorStyle"))
      {
        string str = "colors" + (object) ++this.m_chartColorStyleID;
        this.m_archive.AddItem($"word/charts/{str}.xml", chart.DocxProps[key], false, FileAttributes.Archive);
        dictionaryEntry.Key = (object) "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle";
        dictionaryEntry.Value = (object) (str + ".xml");
        if (officeChart.Relations.Count > 0)
        {
          relationId = officeChart.Relations.GenerateRelationId();
          officeChart.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle");
        }
        else
          relationId = this.NextChartElementsRelationId();
        this.ChartRelations.Add(relationId, dictionaryEntry);
      }
      if (key.Contains("/chartUserShapes"))
      {
        key.LastIndexOf('/');
        string str = "drawing" + (object) ++this.m_chartDrawingID;
        this.m_archive.AddItem($"word/drawings/{str}.xml", chart.DocxProps[key], false, FileAttributes.Archive);
        dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes";
        dictionaryEntry.Value = (object) $"../drawings/{str}.xml";
        Relation relation = (Relation) null;
        if (officeChart.Relations.Count > 0)
          relation = officeChart.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", out relationId);
        if (relation == null)
          relationId = this.NextChartElementsRelationId();
        this.ChartRelations.Add(relationId, dictionaryEntry);
      }
      if (key.Contains("/relation") && key.Contains("drawing"))
        this.m_archive.AddItem($"word/drawings/_rels/{"drawing" + (object) this.m_chartDrawingID}.xml.rels", chart.DocxProps[key], false, FileAttributes.Archive);
    }
    foreach (string key in officeChart.RelationPreservedStreamCollection.Keys)
    {
      if (key.Contains("rId"))
      {
        byte[] numArray = new byte[officeChart.RelationPreservedStreamCollection[key].Length];
        officeChart.RelationPreservedStreamCollection[key].Position = 0L;
        officeChart.RelationPreservedStreamCollection[key].Read(numArray, 0, numArray.Length);
        ImageRecord image = new ImageRecord(chart.Document, numArray);
        image.Attach();
        string str = $"media/image{(object) image.ImageId}{this.GetFileExtension(image)}";
        if (this.m_archive.Find(str.Replace("\\", "/")) == -1)
          this.m_archive.AddItem("word/" + str, (Stream) new MemoryStream(image.ImageBytes), false, FileAttributes.Archive);
        dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
        dictionaryEntry.Value = (object) ("../" + str);
        this.m_hasImages = true;
        this.ChartRelations.Add(key, dictionaryEntry);
      }
    }
    if (chart.IsExternalRelation && !string.IsNullOrEmpty(chart.ExternalDataPath))
    {
      Relation relation = (Relation) null;
      if (officeChart.Relations.Count > 0)
        relation = officeChart.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package", out relationId);
      if (relation == null)
        relationId = this.NextChartElementsRelationId();
      dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject";
      dictionaryEntry.Value = (object) chart.ExternalDataPath;
      this.ChartRelations.Add(relationId, dictionaryEntry);
    }
    else
    {
      bool defaultExcelFile = true;
      Stream stream1;
      if (!string.IsNullOrEmpty(chart.InternalDataPath) && chart.DocxProps.ContainsKey(chart.InternalDataPath))
      {
        stream1 = chart.DocxProps[chart.InternalDataPath];
        defaultExcelFile = false;
      }
      else
        stream1 = this.GetManifestResourceStream("ExcelTemplate.xlsx");
      string str = "Microsoft_Excel_Worksheet" + id.Replace("rId", "");
      ZipArchive archive = new ZipArchive();
      archive.Open(stream1, true);
      archive.RemoveItem("xl/sharedStrings.xml");
      archive.RemoveItem("xl/styles.xml");
      MemoryStream stream2 = new MemoryStream();
      Dictionary<int, int> styleIndex = chart.Workbook.DataHolder.SaveStyles(archive, stream2);
      int activeSheetIndex = chart.Workbook.Worksheets.Count > 0 ? (chart.Workbook.Worksheets.Count > chart.Workbook.ActiveSheetIndex ? chart.Workbook.ActiveSheetIndex : 0) : 0;
      chart.Workbook.DataHolder.Serializator.SerializeWorksheets(archive, (IWorkbook) chart.Workbook, chart.OfficeChart as ChartImpl, activeSheetIndex, styleIndex, defaultExcelFile);
      MemoryStream memoryStream2 = new MemoryStream();
      using (XmlWriter writer = XmlWriter.Create((Stream) memoryStream2))
        chart.Workbook.DataHolder.Serializator.SerializeSST(writer);
      archive.AddItem("xl/sharedStrings.xml", (Stream) memoryStream2, true, FileAttributes.Archive);
      MemoryStream data = new MemoryStream();
      archive.Save((Stream) data, false);
      this.m_archive.AddItem($"word/embeddings/{str}.xlsx", (Stream) data, false, FileAttributes.Archive);
      dictionaryEntry.Key = (object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
      dictionaryEntry.Value = (object) $"../embeddings/{str}.xlsx";
      Relation relation = (Relation) null;
      if (officeChart.Relations.Count > 0)
        relation = officeChart.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package", out relationId);
      if (relation == null)
        relationId = this.NextChartElementsRelationId();
      this.ChartRelations.Add(relationId, dictionaryEntry);
    }
    this.SerializeChartElementRelations(this.ChartRelations, id);
    this.ChartRelations.Clear();
    this.m_chartElementsRelationId = 0;
    officeChart.RelationPreservedStreamCollection.Clear();
  }

  private double GetAppVersion()
  {
    string str = this.m_document.ActualFormatType.ToString();
    if (str.Contains("Word2007"))
      return 12.0;
    return str.Contains("Word2010") ? 14.0 : 15.0;
  }

  private string NextChartElementsRelationId() => $"rId{++this.m_chartElementsRelationId}";

  private void SerializeChartElementRelations(
    Dictionary<string, DictionaryEntry> relations,
    string OccurrenceOfChart)
  {
    MemoryStream data = new MemoryStream();
    XmlWriter writer = this.CreateWriter((Stream) data);
    writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    foreach (string key in relations.Keys)
    {
      DictionaryEntry relation = relations[key];
      this.SerializeChartElementRelation(writer, key, relation.Key.ToString(), relation.Value.ToString());
    }
    writer.WriteEndElement();
    writer.Flush();
    this.m_archive.AddItem($"word/charts/_rels/chart{OccurrenceOfChart.Replace("rId", "")}.xml.rels", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeChartElementRelation(
    XmlWriter XmlWriter,
    string relationshipID,
    string relationshipType,
    string targetPath)
  {
    XmlWriter.WriteStartElement("Relationship");
    XmlWriter.WriteAttributeString("Id", relationshipID);
    XmlWriter.WriteAttributeString("Type", relationshipType);
    if ((targetPath.EndsWith(".xltx") || targetPath.EndsWith(".xlsx") || targetPath.EndsWith(".xlsm")) && string.Equals(relationshipType, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject"))
    {
      XmlWriter.WriteAttributeString("Target", targetPath.Replace(ControlChar.LineBreak, string.Empty));
      XmlWriter.WriteAttributeString("TargetMode", "External");
    }
    else
      XmlWriter.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
    XmlWriter.WriteEndElement();
  }

  private void SerializeRow(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row)
  {
    if (writer == null)
      throw new ArgumentNullException(nameof (writer));
    writer.WriteStartElement(nameof (row));
    writer.WriteAttributeString("r", row.ToString());
    string str = $"{sheet.FirstColumn.ToString()}:{sheet.LastColumn.ToString()}";
    writer.WriteAttributeString("spans", str);
    this.SerializeCells(writer, sheet, cellTag, row);
    writer.WriteEndElement();
  }

  private void SerializeCells(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row)
  {
    if (writer == null)
      throw new ArgumentNullException(nameof (writer));
    for (int firstColumn = sheet.FirstColumn; firstColumn <= sheet.LastColumn; ++firstColumn)
      this.SerializeCell(writer, sheet, cellTag, row, firstColumn);
  }

  private void SerializeCell(
    XmlWriter writer,
    WorksheetImpl sheet,
    string cellTag,
    int row,
    int column)
  {
    if (writer == null)
      throw new ArgumentNullException(nameof (writer));
    writer.WriteStartElement(cellTag);
    string addressLocal = sheet.Range[row, column].AddressLocal;
    writer.WriteAttributeString("r", addressLocal);
    object obj = sheet[row, column].Value2;
    switch (obj.GetType().Name)
    {
      case "String":
        int num = sheet.ParentWorkbook.InnerSST.AddIncrease((object) obj.ToString());
        writer.WriteAttributeString("t", "s");
        writer.WriteElementString("v", num.ToString());
        break;
      default:
        writer.WriteElementString("v", sheet[row, column].Value2.ToString());
        break;
    }
    writer.WriteEndElement();
  }

  private void SerializeSST(XmlWriter writer, WorksheetImpl sheet)
  {
    SSTDictionary innerSst = sheet.ParentWorkbook.InnerSST;
    writer.WriteStartElement("sst", "http://schemas.openxmlformats.org/spreadsheetml/2006/main");
    int count = innerSst.Count;
    int labelSstCount = innerSst.GetLabelSSTCount();
    writer.WriteAttributeString("uniqueCount", count.ToString());
    writer.WriteAttributeString("count", labelSstCount.ToString());
    for (int index = 0; index < count; ++index)
    {
      object sstContentByIndex = innerSst.GetSSTContentByIndex(index);
      this.SerializeStringItem(writer, sstContentByIndex);
    }
  }

  private void SerializeStringItem(XmlWriter writer, object objTextOrString)
  {
    if (writer == null)
      throw new ArgumentNullException(nameof (writer));
    if (objTextOrString == null)
      throw new ArgumentNullException("text");
    writer.WriteStartElement("si");
    string text = objTextOrString.ToString();
    writer.WriteStartElement("t");
    writer.WriteString(DocxSerializator.ReplaceInvalidSurrogateCharacters(text));
    writer.WriteEndElement();
    writer.WriteEndElement();
  }

  private string GetFileExtension(ImageRecord image)
  {
    string fileExtension = image.IsMetafile ? ".wmf" : ".jpeg";
    if (image.ImageFormat.Equals((object) ImageFormat.Bmp))
      fileExtension = ".bmp";
    else if (image.ImageFormat.Equals((object) ImageFormat.Emf))
      fileExtension = ".emf";
    else if (image.ImageFormat.Equals((object) ImageFormat.Exif))
      fileExtension = ".exif";
    else if (image.ImageFormat.Equals((object) ImageFormat.Gif))
      fileExtension = ".gif";
    else if (image.ImageFormat.Equals((object) ImageFormat.Icon))
      fileExtension = ".ico";
    else if (image.ImageFormat.Equals((object) ImageFormat.Jpeg))
      fileExtension = ".jpeg";
    else if (image.ImageFormat.Equals((object) ImageFormat.MemoryBmp))
      fileExtension = ".bmp";
    else if (image.ImageFormat.Equals((object) ImageFormat.Png))
      fileExtension = ".png";
    else if (image.ImageFormat.Equals((object) ImageFormat.Tiff))
      fileExtension = ".tif";
    else if (image.ImageFormat.Equals((object) ImageFormat.Wmf))
      fileExtension = ".wmf";
    return fileExtension;
  }

  private void SerializeGroupShape(GroupShape shape)
  {
    this.m_writer.WriteStartElement("r", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(shape.ParaItemCharFormat);
    if (!shape.Is2007Shape && this.m_document.SaveFormatType != FormatType.Word2007)
    {
      this.m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteAttributeString("Requires", "wps");
      this.m_writer.WriteStartElement("drawing", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (shape.WrapFormat.TextWrappingStyle == TextWrappingStyle.Behind)
        shape.IsBelowText = true;
      if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Inline)
      {
        this.SerializeAbsolutePicture((ParagraphItem) shape);
        this.m_writer.WriteEndElement();
      }
      else
        this.SerializeInlinePicture((ParagraphItem) shape);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
    }
    this.SerializeFallbackShape(shape);
    if (!shape.Is2007Shape && this.m_document.SaveFormatType != FormatType.Word2007)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeFallbackShape(GroupShape shape)
  {
    XmlReader reader = (XmlReader) null;
    string empty = string.Empty;
    this.m_writer.WriteStartElement("pict", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("group", "urn:schemas-microsoft-com:vml");
    string name = shape.Name;
    this.m_writer.WriteAttributeString("id", name);
    this.SerializeTextBoxFormat(shape, shape.Docx2007Props);
    string coordinateSize = shape.CoordinateSize;
    if (!string.IsNullOrEmpty(coordinateSize))
      this.m_writer.WriteAttributeString("coordsize", coordinateSize);
    float coordinateXorigin = shape.CoordinateXOrigin;
    float coordinateYorigin = shape.CoordinateYOrigin;
    string str = $"{Math.Round((double) coordinateXorigin, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture)},{Math.Round((double) coordinateYorigin, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (!string.IsNullOrEmpty(str))
      this.m_writer.WriteAttributeString("coordorigin", str);
    int shapeId = 1;
    foreach (ParagraphItem childShape1 in (CollectionImpl) shape.ChildShapes)
    {
      if (childShape1 is ChildGroupShape)
        this.SerializeFallbackNestedGroupShape(childShape1 as ChildGroupShape);
      else if (childShape1 is ChildShape)
      {
        ChildShape childShape2 = childShape1 as ChildShape;
        this.SerializeFallbackChildShape(reader, childShape2, name, empty, shapeId);
        ++shapeId;
      }
    }
    if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.InFrontOfText && shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Behind)
    {
      this.m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
      this.m_writer.WriteAttributeString("type", this.GetTextWrappingStyleAsString(shape.WrapFormat.TextWrappingStyle));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeFallbackNestedGroupShape(ChildGroupShape shape)
  {
    XmlReader reader = (XmlReader) null;
    string empty = string.Empty;
    this.m_writer.WriteStartElement("group", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("id", shape.Name);
    string coordinateSize = shape.CoordinateSize;
    if (!string.IsNullOrEmpty(coordinateSize))
      this.m_writer.WriteAttributeString("coordsize", coordinateSize);
    string str = $"{shape.CoordinateXOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)},{shape.CoordinateYOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (!string.IsNullOrEmpty(str))
      this.m_writer.WriteAttributeString("coordorigin", str);
    this.SerializeTextBoxFormat(shape, shape.Docx2007Props);
    int shapeId = 1;
    foreach (ChildShape childShape in (CollectionImpl) shape.ChildShapes)
    {
      if (childShape is ChildGroupShape)
        this.SerializeFallbackNestedGroupShape(childShape as ChildGroupShape);
      else if (childShape != null)
        this.SerializeFallbackChildShape(reader, childShape, shape.Name, empty, shapeId);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeFallbackChildShape(
    XmlReader reader,
    ChildShape childShape,
    string value,
    string shapeType,
    int shapeId)
  {
    if (childShape.AutoShapeType != ~AutoShapeType.Unknown && childShape.AutoShapeType != AutoShapeType.Unknown && childShape.AutoShapeType != AutoShapeType.Rectangle && childShape.AutoShapeType != AutoShapeType.RoundedRectangle && childShape.AutoShapeType != AutoShapeType.Line && childShape.AutoShapeType != AutoShapeType.Oval)
      this.SerializeShapeType(this.m_writer, childShape, ref shapeType, ref reader);
    if (childShape.AutoShapeType == AutoShapeType.Rectangle)
    {
      this.m_writer.WriteStartElement("rect", "urn:schemas-microsoft-com:vml");
      if (!string.IsNullOrEmpty(childShape.Name))
      {
        this.m_writer.WriteAttributeString("id", childShape.Name);
      }
      else
      {
        value = childShape.AutoShapeType.ToString();
        this.m_writer.WriteAttributeString("id", $"{value} {shapeId++.ToString()}");
      }
      if (!string.IsNullOrEmpty(shapeType))
        this.m_writer.WriteAttributeString("type", shapeType);
    }
    else if (childShape.AutoShapeType == AutoShapeType.RoundedRectangle)
    {
      this.m_writer.WriteStartElement("roundrect", "urn:schemas-microsoft-com:vml");
      if (!string.IsNullOrEmpty(childShape.Name))
      {
        this.m_writer.WriteAttributeString("id", childShape.Name);
      }
      else
      {
        value = childShape.AutoShapeType.ToString();
        this.m_writer.WriteAttributeString("id", $"{value} {shapeId++.ToString()}");
      }
      if (!string.IsNullOrEmpty(shapeType))
        this.m_writer.WriteAttributeString("type", shapeType);
    }
    else if (childShape.AutoShapeType == AutoShapeType.Oval)
    {
      this.m_writer.WriteStartElement("oval", "urn:schemas-microsoft-com:vml");
      if (!string.IsNullOrEmpty(childShape.Name))
      {
        this.m_writer.WriteAttributeString("id", childShape.Name);
      }
      else
      {
        value = childShape.AutoShapeType.ToString();
        this.m_writer.WriteAttributeString("id", $"{value} {shapeId++.ToString()}");
      }
      if (!string.IsNullOrEmpty(shapeType))
        this.m_writer.WriteAttributeString("type", shapeType);
    }
    else if (childShape.AutoShapeType == AutoShapeType.Line)
    {
      this.m_writer.WriteStartElement("line", "urn:schemas-microsoft-com:vml");
      if (!string.IsNullOrEmpty(childShape.Name))
      {
        this.m_writer.WriteAttributeString("id", childShape.Name);
      }
      else
      {
        value = childShape.AutoShapeType.ToString();
        this.m_writer.WriteAttributeString("id", $"{value} {shapeId++.ToString()}");
      }
      if (!string.IsNullOrEmpty(shapeType))
        this.m_writer.WriteAttributeString("type", shapeType);
    }
    else if (reader != null)
    {
      this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
      value = reader.GetAttribute("coordsize");
      this.m_writer.WriteAttributeString("coordsize", value);
      value = reader.GetAttribute("spt", "urn:schemas-microsoft-com:office:office");
      this.m_writer.WriteAttributeString("spt", "urn:schemas-microsoft-com:office:office", value);
      value = reader.GetAttribute("adj");
      this.m_writer.WriteAttributeString("adj", value);
      value = reader.GetAttribute("path");
      this.m_writer.WriteAttributeString("path", value);
    }
    else
    {
      this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
      if (!string.IsNullOrEmpty(childShape.Name))
      {
        this.m_writer.WriteAttributeString("id", childShape.Name);
      }
      else
      {
        value = childShape.AutoShapeType.ToString();
        this.m_writer.WriteAttributeString("id", $"{value} {childShape.ShapeID.ToString()}");
      }
      if (!string.IsNullOrEmpty(childShape.Type))
        this.m_writer.WriteAttributeString("type", childShape.Type);
      if (!string.IsNullOrEmpty(childShape.CoordinateSize))
        this.m_writer.WriteAttributeString("coordsize", childShape.CoordinateSize);
      if ((double) childShape.CoordinateXOrigin != 0.0 && (double) childShape.CoordinateYOrigin != 0.0)
      {
        string str = $"{childShape.CoordinateXOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)},{childShape.CoordinateYOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
        if (!string.IsNullOrEmpty(str))
          this.m_writer.WriteAttributeString("coordorigin", str);
      }
    }
    if (childShape.IsHorizontalRule)
      this.SerializeHorizontalRule(childShape, childShape.Docx2007Props);
    else
      this.SerializeTextBoxFormat(childShape, childShape.Docx2007Props);
    this.SerializeFillEffects(childShape, childShape.Docx2007Props);
    this.SerializeDocxStream(childShape.Docx2007Props, "callout");
    this.SerializeDocxStream(childShape.Docx2007Props, "wrap");
    if (childShape.IsPicture && childShape.ImageBytes != null || childShape.FillFormat.ImageRecord != null && childShape.FillFormat.FillType != FillType.FillTextured && childShape.FillFormat.FillType != FillType.FillPicture && childShape.FillFormat.FillType != FillType.FillPatterned)
    {
      this.m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
      byte[] imageBytes = (byte[]) null;
      if (childShape.IsPicture)
        imageBytes = childShape.ImageBytes;
      if (childShape.FillFormat.ImageRecord != null)
        imageBytes = childShape.FillFormat.ImageRecord.ImageBytes;
      if (childShape.FillFormat.FillType == FillType.FillPatterned && childShape.FillFormat.Pattern != PatternType.Mixed)
        imageBytes = this.GetPatternImageBytes(childShape.FillFormat.Pattern.ToString());
      if (imageBytes != null)
      {
        Entity baseEntity = this.GetBaseEntity((Entity) childShape);
        string str = string.Empty;
        WPicture wpicture = new WPicture((IWordDocument) this.m_document);
        wpicture.LoadImage(imageBytes);
        this.UpdateImages(wpicture);
        switch (baseEntity)
        {
          case WSection _:
            str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
            break;
          case HeaderFooter _:
            str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
            break;
        }
        this.m_writer.WriteAttributeString("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str.ToString());
        if (childShape.IsPicture && childShape.Title != null)
          this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", childShape.Title);
        if (!childShape.IsPicture && (double) childShape.FillFormat.Contrast != -3.4028234663852886E+38)
          this.m_writer.WriteAttributeString("gain", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) childShape.FillFormat.Contrast / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
        if (!childShape.FillFormat.ReColorTarget.IsEmpty)
          this.m_writer.WriteAttributeString("recolortarget", "#" + this.GetRGBCode(childShape.FillFormat.ReColorTarget));
        if (childShape.IsPicture)
        {
          if ((double) childShape.FillFormat.SourceRectangle.TopOffset != 0.0)
            this.m_writer.WriteAttributeString("croptop", Math.Round((double) this.SetCroppingValue(childShape.FillFormat.SourceRectangle.TopOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
          if ((double) childShape.FillFormat.SourceRectangle.BottomOffset != 0.0)
            this.m_writer.WriteAttributeString("cropbottom", Math.Round((double) this.SetCroppingValue(childShape.FillFormat.SourceRectangle.BottomOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
          if ((double) childShape.FillFormat.SourceRectangle.LeftOffset != 0.0)
            this.m_writer.WriteAttributeString("cropleft", Math.Round((double) this.SetCroppingValue(childShape.FillFormat.SourceRectangle.LeftOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
          if ((double) childShape.FillFormat.SourceRectangle.RightOffset != 0.0)
            this.m_writer.WriteAttributeString("cropright", Math.Round((double) this.SetCroppingValue(childShape.FillFormat.SourceRectangle.RightOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
        }
        this.m_writer.WriteEndElement();
      }
    }
    if (childShape.Docx2007Props.ContainsKey("textpath"))
      this.SerializeDocxStream(childShape.Docx2007Props, "textpath");
    if (childShape.Docx2007Props.ContainsKey("path"))
      this.SerializeDocxStream(childShape.Docx2007Props, "path");
    if (childShape.Docx2007Props.ContainsKey("shadow"))
      this.SerializeDocxStream(childShape.Docx2007Props, "shadow");
    if (childShape.Docx2007Props.ContainsKey("shadow1"))
      this.SerializeDocx2007ShadowFormat(childShape);
    if (!childShape.IsPicture && (childShape.TextBody.Items.Count > 0 || childShape.TextFrame.HasInternalMargin))
      this.SerializeChildShapeTextBoxContent(childShape.TextBody, childShape.TextFrame);
    this.m_writer.WriteEndElement();
    ++shapeId;
  }

  private void SerializeAutoShape(Shape shape)
  {
    if (shape.AutoShapeType == AutoShapeType.Unknown && shape.Path2DList == null && shape.Path == null)
      return;
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(shape.ParaItemCharFormat);
    if (!shape.Is2007Shape)
    {
      this.m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteAttributeString("Requires", "wps");
      this.m_writer.WriteStartElement("drawing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.IsSerializingChoiceContent = true;
      if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Inline)
        this.SerializeAbsolutePicture((ParagraphItem) shape);
      else
        this.SerializeInlinePicture((ParagraphItem) shape);
      this.IsSerializingChoiceContent = false;
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_isFallBack = true;
    }
    this.SerializeFallbackShape(shape);
    if (!shape.Is2007Shape)
    {
      this.m_writer.WriteEndElement();
      this.m_isFallBack = false;
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeFallbackShape(Shape shape)
  {
    if (shape.AutoShapeType == AutoShapeType.Unknown && shape.Path2DList == null && shape.Path == null)
      return;
    XmlReader reader = (XmlReader) null;
    string empty = string.Empty;
    this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (shape.AutoShapeType != AutoShapeType.Unknown && shape.AutoShapeType != AutoShapeType.Rectangle && shape.AutoShapeType != AutoShapeType.RoundedRectangle && shape.AutoShapeType != AutoShapeType.Line && shape.AutoShapeType != AutoShapeType.Oval)
      this.SerializeShapeType(this.m_writer, shape, ref empty, ref reader);
    if (shape.AutoShapeType == AutoShapeType.Rectangle)
      this.m_writer.WriteStartElement("rect", "urn:schemas-microsoft-com:vml");
    else if (shape.AutoShapeType == AutoShapeType.RoundedRectangle)
      this.m_writer.WriteStartElement("roundrect", "urn:schemas-microsoft-com:vml");
    else if (shape.AutoShapeType == AutoShapeType.Oval)
      this.m_writer.WriteStartElement("oval", "urn:schemas-microsoft-com:vml");
    else if (shape.AutoShapeType == AutoShapeType.Line)
      this.m_writer.WriteStartElement("line", "urn:schemas-microsoft-com:vml");
    else if (reader != null)
    {
      this.m_writer.WriteStartElement(nameof (shape), "urn:schemas-microsoft-com:vml");
      this.m_writer.WriteAttributeString("id", $"{reader.GetAttribute("id")} {(this.m_document.AutoShapeCollection.Count + 1).ToString()}");
      this.m_writer.WriteAttributeString("coordsize", reader.GetAttribute("coordsize"));
      this.m_writer.WriteAttributeString("spt", "urn:schemas-microsoft-com:office:office", reader.GetAttribute("spt", "urn:schemas-microsoft-com:office:office"));
      this.m_writer.WriteAttributeString("adj", reader.GetAttribute("adj"));
      this.m_writer.WriteAttributeString("path", reader.GetAttribute("path"));
    }
    else
    {
      this.m_writer.WriteStartElement(nameof (shape), "urn:schemas-microsoft-com:vml");
      this.m_writer.WriteAttributeString("type", "#" + empty);
    }
    if (shape.IsHorizontalRule)
      this.SerializeHorizontalRule(shape, shape.Docx2007Props);
    else
      this.SerializeTextBoxFormat(shape, shape.Docx2007Props);
    this.SerializeFillEffects(shape, shape.Docx2007Props);
    this.SerializeDocxStream(shape.Docx2007Props, "callout");
    this.SerializeDocxStream(shape.Docx2007Props, "wrap");
    if (shape.Docx2007Props.ContainsKey("shadow1"))
      this.SerializeDocx2007ShadowFormat(shape);
    if (shape.Docx2007Props.ContainsKey("extrusion"))
    {
      for (int index = 0; index < shape.EffectList.Count; ++index)
      {
        if (shape.EffectList[index].IsShapeProperties)
          this.SerializeDocx2007Extrusion(shape.EffectList[index].ThreeDFormat);
      }
    }
    if (shape.TextBody.Items.Count > 0)
    {
      this.m_writer.WriteStartElement("textbox", "urn:schemas-microsoft-com:vml");
      if (shape.TextFrame.HasInternalMargin && shape.TextFrame.InternalMargin.PropertiesHash.Count > 0)
        this.SerializeInsetAttribute(shape.TextFrame);
      this.SerializeTextBoxStyle(shape.TextFrame);
      this.m_writer.WriteStartElement("txbxContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      int index = 0;
      for (int count = shape.TextBody.Items.Count; index < count; ++index)
        this.SerializeBodyItem(shape.TextBody.Items[index], false);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeDocx2007Extrusion(ThreeDFormat threeDFormat)
  {
    this.m_writer.WriteStartElement("extrusion", "urn:schemas-microsoft-com:office:office");
    if (threeDFormat.PropertiesHash.ContainsKey(73))
      this.m_writer.WriteAttributeString("ext", "urn:schemas-microsoft-com:vml", threeDFormat.Extension.ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(12))
      this.m_writer.WriteAttributeString("color", "#" + this.GetRGBCode(threeDFormat.ExtrusionColor));
    if (threeDFormat.PropertiesHash.ContainsKey(36))
      this.m_writer.WriteAttributeString("ext", "urn:schemas-microsoft-com:vml", threeDFormat.ColorMode.ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(67))
      this.m_writer.WriteAttributeString("on", threeDFormat.Visible ? "t" : "f");
    if (threeDFormat.PropertiesHash.ContainsKey(72))
      this.m_writer.WriteAttributeString("metal", threeDFormat.Metal ? "t" : "f");
    string str1 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(53))
      str1 = threeDFormat.RotationAngleX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    if (threeDFormat.PropertiesHash.ContainsKey(54))
      str1 = $"{str1},{threeDFormat.RotationAngleY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (str1 != null)
      this.m_writer.WriteAttributeString("rotationangle", str1.ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(49))
      this.m_writer.WriteAttributeString("orientationangle", threeDFormat.OrientationAngle.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    string str2 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(62))
      str2 = threeDFormat.ViewPointX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
    if (threeDFormat.PropertiesHash.ContainsKey(63 /*0x3F*/))
      str2 = $"{str2},{threeDFormat.ViewPointY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
    if (threeDFormat.PropertiesHash.ContainsKey(64 /*0x40*/))
      str2 = $"{str2},{threeDFormat.ViewPointZ.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
    if (str2 != null)
      this.m_writer.WriteAttributeString("viewpoint", str2.ToString());
    string str3 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(65))
      str3 = threeDFormat.ViewPointOriginX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    if (threeDFormat.PropertiesHash.ContainsKey(66))
      str3 = $"{str3},{threeDFormat.ViewPointOriginY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (str3 != null)
      this.m_writer.WriteAttributeString("viewpointorigin", str3.ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(60))
      this.m_writer.WriteAttributeString("skewangle", ((int) threeDFormat.SkewAngle).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (threeDFormat.PropertiesHash.ContainsKey(59))
      this.m_writer.WriteAttributeString("skewamt", ((int) threeDFormat.SkewAmount).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    string str4 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(31 /*0x1F*/))
      str4 = threeDFormat.LightRigRotationX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    if (threeDFormat.PropertiesHash.ContainsKey(32 /*0x20*/))
      str4 = $"{str4},{threeDFormat.LightRigRotationY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (threeDFormat.PropertiesHash.ContainsKey(33))
      str4 = $"{str4},{threeDFormat.LightRigRotationZ.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (str4 != null)
      this.m_writer.WriteAttributeString("lightposition", str4.ToString());
    string str5 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(43))
      str5 = threeDFormat.LightRigRotation2X.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    if (threeDFormat.PropertiesHash.ContainsKey(44))
      str5 = $"{str5},{threeDFormat.LightRigRotation2Y.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (threeDFormat.PropertiesHash.ContainsKey(45))
      str5 = $"{str5},{threeDFormat.LightRigRotation2Z.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (str5 != null)
      this.m_writer.WriteAttributeString("lightposition2", str5.ToString());
    string str6 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(55))
      str6 = threeDFormat.RotationCenterX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    if (threeDFormat.PropertiesHash.ContainsKey(56))
      str6 = $"{str6},{threeDFormat.RotationCenterY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (threeDFormat.PropertiesHash.ContainsKey(57))
      str6 = $"{str6},{threeDFormat.RotationCenterZ.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (str6 != null)
      this.m_writer.WriteAttributeString("rotationcenter", str6.ToString());
    string str7 = (string) null;
    if (threeDFormat.PropertiesHash.ContainsKey(46))
      str7 = threeDFormat.RotationX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
    if (threeDFormat.PropertiesHash.ContainsKey(47))
      str7 = $"{str7},{threeDFormat.RotationY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (threeDFormat.PropertiesHash.ContainsKey(48 /*0x30*/))
      str7 = $"{str7},{threeDFormat.RotationZ.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
    if (str7 != null)
      this.m_writer.WriteAttributeString("orientation", str7.ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(51))
      this.m_writer.WriteAttributeString("type", threeDFormat.ExtrusionType.ToString().ToLower());
    if (threeDFormat.PropertiesHash.ContainsKey(61))
    {
      if ((double) threeDFormat.Specularity >= 0.0 && (double) threeDFormat.Specularity <= 1.0)
        this.m_writer.WriteAttributeString("specularity", ((int) threeDFormat.Specularity).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      else
        this.m_writer.WriteAttributeString("specularity", Math.Round((double) threeDFormat.Specularity * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    }
    if (threeDFormat.PropertiesHash.ContainsKey(58))
      this.m_writer.WriteAttributeString("shininess", ((int) threeDFormat.Shininess).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (threeDFormat.PropertiesHash.ContainsKey(52))
      this.m_writer.WriteAttributeString("render", threeDFormat.ExtrusionRenderMode.ToString().ToLower());
    if (threeDFormat.PropertiesHash.ContainsKey(50))
      this.m_writer.WriteAttributeString("plane", threeDFormat.ExtrusionPlane.ToString().ToLower());
    if (threeDFormat.PropertiesHash.ContainsKey(41))
    {
      if ((double) threeDFormat.LightLevel >= 0.0 && (double) threeDFormat.LightLevel <= 1.0)
        this.m_writer.WriteAttributeString("lightlevel", threeDFormat.LightLevel.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      else
        this.m_writer.WriteAttributeString("lightlevel", Math.Round((double) threeDFormat.LightLevel * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    }
    if (threeDFormat.PropertiesHash.ContainsKey(42))
    {
      if ((double) threeDFormat.Specularity >= 0.0 && (double) threeDFormat.Specularity <= 1.0)
        this.m_writer.WriteAttributeString("lightlevel2", threeDFormat.LightLevel2.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      else
        this.m_writer.WriteAttributeString("lightlevel2", Math.Round((double) threeDFormat.LightLevel2 * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    }
    if (threeDFormat.PropertiesHash.ContainsKey(34))
    {
      if ((double) threeDFormat.Brightness >= 0.0 && (double) threeDFormat.Brightness <= 1.0)
        this.m_writer.WriteAttributeString("brightness", threeDFormat.Brightness.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      else
        this.m_writer.WriteAttributeString("brightness", Math.Round((double) threeDFormat.Brightness * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    }
    if (threeDFormat.PropertiesHash.ContainsKey(69))
      this.m_writer.WriteAttributeString("lightharsh", threeDFormat.LightHarsh ? "t" : "f");
    if (threeDFormat.PropertiesHash.ContainsKey(70))
      this.m_writer.WriteAttributeString("lightharsh2", threeDFormat.LightHarsh2 ? "t" : "f");
    if (threeDFormat.PropertiesHash.ContainsKey(68))
      this.m_writer.WriteAttributeString("lightface", threeDFormat.LightFace ? "t" : "f");
    if (threeDFormat.PropertiesHash.ContainsKey(71))
      this.m_writer.WriteAttributeString("lockrotationcenter", threeDFormat.LockRotationCenter ? "t" : "f");
    if (threeDFormat.PropertiesHash.ContainsKey(75))
      this.m_writer.WriteAttributeString("autorotationcenter", threeDFormat.AutoRotationCenter ? "t" : "f");
    if (threeDFormat.PropertiesHash.ContainsKey(39))
    {
      if ((double) threeDFormat.Facet >= 0.0 && (double) threeDFormat.Facet <= 1.0)
        this.m_writer.WriteAttributeString("facet", threeDFormat.Facet.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      else
        this.m_writer.WriteAttributeString("facet", Math.Round((double) threeDFormat.Facet * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if (threeDFormat.PropertiesHash.ContainsKey(37))
    {
      if ((double) threeDFormat.Diffusity >= 0.0 && (double) threeDFormat.Diffusity <= 1.0)
        this.m_writer.WriteAttributeString("diffusity", threeDFormat.Diffusity.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      else
        this.m_writer.WriteAttributeString("diffusity", Math.Round((double) threeDFormat.Diffusity * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if (threeDFormat.PropertiesHash.ContainsKey(40))
      this.m_writer.WriteAttributeString("foredepth", ((int) threeDFormat.ForeDepth).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
    if (threeDFormat.PropertiesHash.ContainsKey(74))
      this.m_writer.WriteAttributeString("backdepth", ((int) threeDFormat.BackDepth).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
    if (threeDFormat.PropertiesHash.ContainsKey(38))
      this.m_writer.WriteAttributeString("edge", ((int) threeDFormat.Edge).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
    this.m_writer.WriteEndElement();
  }

  private void SerializeDocx2007ShadowFormat(Shape shape)
  {
    for (int index = 0; index < shape.EffectList.Count; ++index)
    {
      if (shape.EffectList[index].IsShadowEffect)
      {
        this.m_writer.WriteStartElement("shadow", "urn:schemas-microsoft-com:vml");
        if (shape.EffectList[index].ShadowFormat.HasKey(20))
          this.m_writer.WriteAttributeString("on", shape.EffectList[index].ShadowFormat.Visible ? "t" : "f");
        if (shape.EffectList[index].ShadowFormat.HasKey(19))
          this.m_writer.WriteAttributeString("type", shape.EffectList[index].ShadowFormat.ShadowType.ToString().ToLower().ToString());
        if (shape.EffectList[index].ShadowFormat.HasKey(21))
        {
          if ((double) shape.EffectList[index].ShadowFormat.Transparency >= 0.0 && (double) shape.EffectList[index].ShadowFormat.Transparency <= 1.0)
            this.m_writer.WriteAttributeString("opacity", shape.EffectList[index].ShadowFormat.Transparency.ToString((IFormatProvider) CultureInfo.InvariantCulture));
          else
            this.m_writer.WriteAttributeString("opacity", Math.Round((double) shape.EffectList[index].ShadowFormat.Transparency * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
        }
        if (shape.EffectList[index].ShadowFormat.HasKey(16 /*0x10*/))
          this.m_writer.WriteAttributeString("color", "#" + this.GetRGBCode(shape.EffectList[index].ShadowFormat.Color));
        if (shape.EffectList[index].ShadowFormat.HasKey(17))
          this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.EffectList[index].ShadowFormat.Color2));
        if (shape.EffectList[index].ShadowFormat.ShadowPerspectiveMatrix != null)
          this.m_writer.WriteAttributeString("matrix", shape.EffectList[index].ShadowFormat.ShadowPerspectiveMatrix.ToString());
        string str1 = (string) null;
        if (shape.EffectList[index].ShadowFormat.HasKey(0))
          str1 = shape.EffectList[index].ShadowFormat.ShadowOffsetX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
        if (shape.EffectList[index].ShadowFormat.HasKey(1))
          str1 = $"{str1},{shape.EffectList[index].ShadowFormat.ShadowOffsetY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
        if (str1 != null)
          this.m_writer.WriteAttributeString("offset", str1.ToString());
        string str2 = (string) null;
        if (shape.EffectList[index].ShadowFormat.HasKey(2))
          str2 = shape.EffectList[index].ShadowFormat.ShadowOffset2X.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
        if (shape.EffectList[index].ShadowFormat.HasKey(3))
          str2 = $"{str2},{shape.EffectList[index].ShadowFormat.ShadowOffset2Y.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
        if (str2 != null)
          this.m_writer.WriteAttributeString("offset2", str2.ToString());
        string str3 = (string) null;
        if (shape.EffectList[index].ShadowFormat.HasKey(4))
          str3 = shape.EffectList[index].ShadowFormat.OriginX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
        if (shape.EffectList[index].ShadowFormat.HasKey(5))
          str3 = $"{str3},{shape.EffectList[index].ShadowFormat.OriginY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
        if (str3 != null)
          this.m_writer.WriteAttributeString("origin", str3.ToString());
        this.m_writer.WriteEndElement();
      }
    }
  }

  private void SerializeDocx2007ShadowFormat(ChildShape shape)
  {
    for (int index = 0; index < shape.EffectList.Count; ++index)
    {
      if (shape.EffectList[index].IsShadowEffect)
      {
        this.m_writer.WriteStartElement("shadow", "urn:schemas-microsoft-com:vml");
        if (shape.EffectList[index].ShadowFormat.HasKey(20))
          this.m_writer.WriteAttributeString("on", shape.EffectList[index].ShadowFormat.Visible ? "t" : "f");
        if (shape.EffectList[index].ShadowFormat.HasKey(19))
          this.m_writer.WriteAttributeString("type", shape.EffectList[index].ShadowFormat.ShadowType.ToString().ToLower().ToString());
        if (shape.EffectList[index].ShadowFormat.HasKey(21))
        {
          if ((double) shape.EffectList[index].ShadowFormat.Transparency >= 0.0 && (double) shape.EffectList[index].ShadowFormat.Transparency <= 1.0)
            this.m_writer.WriteAttributeString("opacity", shape.EffectList[index].ShadowFormat.Transparency.ToString((IFormatProvider) CultureInfo.InvariantCulture));
          else
            this.m_writer.WriteAttributeString("opacity", Math.Round((double) shape.EffectList[index].ShadowFormat.Transparency * 65536.0).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
        }
        if (shape.EffectList[index].ShadowFormat.HasKey(16 /*0x10*/))
          this.m_writer.WriteAttributeString("color", "#" + this.GetRGBCode(shape.EffectList[index].ShadowFormat.Color));
        if (shape.EffectList[index].ShadowFormat.HasKey(17))
          this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.EffectList[index].ShadowFormat.Color2));
        if (shape.EffectList[index].ShadowFormat.ShadowPerspectiveMatrix != null)
          this.m_writer.WriteAttributeString("matrix", shape.EffectList[index].ShadowFormat.ShadowPerspectiveMatrix.ToString());
        string str1 = (string) null;
        if (shape.EffectList[index].ShadowFormat.HasKey(0))
          str1 = shape.EffectList[index].ShadowFormat.ShadowOffsetX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
        if (shape.EffectList[index].ShadowFormat.HasKey(1))
          str1 = $"{str1},{shape.EffectList[index].ShadowFormat.ShadowOffsetY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
        if (str1 != null)
          this.m_writer.WriteAttributeString("offset", str1.ToString());
        string str2 = (string) null;
        if (shape.EffectList[index].ShadowFormat.HasKey(2))
          str2 = shape.EffectList[index].ShadowFormat.ShadowOffset2X.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
        if (shape.EffectList[index].ShadowFormat.HasKey(3))
          str2 = $"{str2},{shape.EffectList[index].ShadowFormat.ShadowOffset2Y.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
        if (str2 != null)
          this.m_writer.WriteAttributeString("offset2", str2.ToString());
        string str3 = (string) null;
        if (shape.EffectList[index].ShadowFormat.HasKey(4))
          str3 = shape.EffectList[index].ShadowFormat.OriginX.ToString((IFormatProvider) CultureInfo.InvariantCulture);
        if (shape.EffectList[index].ShadowFormat.HasKey(5))
          str3 = $"{str3},{shape.EffectList[index].ShadowFormat.OriginY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
        if (str3 != null)
          this.m_writer.WriteAttributeString("origin", str3.ToString());
        this.m_writer.WriteEndElement();
      }
    }
  }

  private void SerializeHorizontalRule(Shape shape, Dictionary<string, Stream> dictionary)
  {
    StringBuilder textBoxStyle = new StringBuilder();
    textBoxStyle.Append("width:");
    textBoxStyle.Append(shape.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;height:");
    textBoxStyle.Append(shape.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;");
    this.SerializeFlip(shape, textBoxStyle);
    if (shape.DocxStyleProps.Count > 0)
    {
      foreach (string docxStyleProp in shape.DocxStyleProps)
        textBoxStyle.Append(";" + docxStyleProp);
    }
    this.m_writer.WriteAttributeString("style", textBoxStyle.ToString());
    this.SerializeHorizontalRule(shape);
    if (!string.IsNullOrEmpty(shape.Adjustments))
      this.m_writer.WriteAttributeString("adj", shape.Adjustments);
    if (shape.FillFormat.Fill)
    {
      this.m_writer.WriteAttributeString("filled", "t");
      if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
      else if (!shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.ForeColor));
    }
    else
      this.m_writer.WriteAttributeString("filled", "f");
    if (!shape.LayoutInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (!shape.LineFormat.Line)
    {
      this.m_writer.WriteAttributeString("stroked", "f");
      if (shape.LineFormat.Color != Color.Empty)
        this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
    }
    else
    {
      string dashStyle = this.GetDashStyle(shape.LineFormat.DashStyle, true);
      string lineStyle = this.GetLineStyle(shape.LineFormat.Style, true);
      if (dashStyle != null || lineStyle != null)
      {
        this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
        this.m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
        this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
        if (dashStyle != null)
          this.m_writer.WriteAttributeString("dashstyle", dashStyle);
        if (lineStyle != null)
          this.m_writer.WriteAttributeString("linestyle", lineStyle);
        this.m_writer.WriteAttributeString("joinstyle", this.GetLineJoinStyle(shape.LineFormat.LineJoin));
        this.m_writer.WriteAttributeString("endcap", this.GetLineCapStyle(shape.LineFormat.LineCap, true));
        this.m_writer.WriteEndElement();
      }
    }
    if (shape.WrapFormat.TextWrappingStyle == TextWrappingStyle.InFrontOfText || shape.WrapFormat.TextWrappingStyle == TextWrappingStyle.Behind)
      return;
    this.m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("type", this.GetTextWrappingStyleAsString(shape.WrapFormat.TextWrappingStyle));
    this.m_writer.WriteEndElement();
  }

  private void SerializeHorizontalRule(ChildShape shape, Dictionary<string, Stream> dictionary)
  {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.Append("width:");
    stringBuilder.Append(shape.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;height:");
    stringBuilder.Append(shape.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;");
    if (shape.DocxStyleProps.Count > 0)
    {
      foreach (string docxStyleProp in shape.DocxStyleProps)
        stringBuilder.Append(";" + docxStyleProp);
    }
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
    if (!string.IsNullOrEmpty(shape.Adjustments))
      this.m_writer.WriteAttributeString("adj", shape.Adjustments);
    if (shape.FillFormat.Fill && shape.FillFormat.Color != Color.Empty)
    {
      this.m_writer.WriteAttributeString("filled", "t");
      if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
      else if (!shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.ForeColor));
    }
    else
      this.m_writer.WriteAttributeString("filled", "f");
    if (!shape.LayoutInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (!shape.LineFormat.Line)
    {
      this.m_writer.WriteAttributeString("stroked", "f");
    }
    else
    {
      string dashStyle = this.GetDashStyle(shape.LineFormat.DashStyle, true);
      string lineStyle = this.GetLineStyle(shape.LineFormat.Style, true);
      if (dashStyle == null && lineStyle == null)
        return;
      if (shape.LineFormat.Is2007StrokeDefined)
        this.m_writer.WriteAttributeString("stroked", "t");
      this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
      this.m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
      this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
      if (dashStyle != null)
        this.m_writer.WriteAttributeString("dashstyle", dashStyle);
      if (lineStyle != null)
        this.m_writer.WriteAttributeString("linestyle", lineStyle);
      this.m_writer.WriteAttributeString("joinstyle", this.GetLineJoinStyle(shape.LineFormat.LineJoin));
      this.m_writer.WriteAttributeString("endcap", this.GetLineCapStyle(shape.LineFormat.LineCap, true));
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeHorizontalRule(Shape shape)
  {
    if (shape.PropertiesHash.ContainsKey(0))
      this.m_writer.WriteAttributeString("hrpct", "urn:schemas-microsoft-com:office:office", (shape.WidthScale * 10f).ToString());
    string str = "left";
    if (shape.HorizontalAlignment == ShapeHorizontalAlignment.Center)
      str = "center";
    else if (shape.HorizontalAlignment == ShapeHorizontalAlignment.Right)
      str = "right";
    this.m_writer.WriteAttributeString("hralign", "urn:schemas-microsoft-com:office:office", str);
    this.m_writer.WriteAttributeString("hr", "urn:schemas-microsoft-com:office:office", "t");
    if (shape.UseStandardColorHR)
      this.m_writer.WriteAttributeString("hrstd", "urn:schemas-microsoft-com:office:office", "t");
    if (!shape.UseNoShadeHR)
      return;
    this.m_writer.WriteAttributeString("hrnoshade", "urn:schemas-microsoft-com:office:office", "t");
  }

  private void SerializeShapeType(
    XmlWriter m_writer,
    GroupShape shape,
    ref string shapeType,
    ref XmlReader reader)
  {
    string[] strArray = new StreamReader(this.GetManifestResourceStream(".ShapeTypes.txt")).ReadToEnd().Split(new char[1]
    {
      ControlChar.LineFeedChar
    }, StringSplitOptions.RemoveEmptyEntries);
    string attributeToCheck = this.AutoShapeHelper.GetShapeTypeIDorAttributeToCheck(shape.AutoShapeType);
    for (int index = 0; index < strArray.Length; ++index)
    {
      if (strArray[index].Contains(attributeToCheck))
      {
        if (strArray[index].StartsWith("<v:shapetype"))
        {
          shapeType = strArray[index].Substring(17, strArray[index].IndexOfAny(new char[1]
          {
            '"'
          }, 17) - 17);
          m_writer.WriteRaw(strArray[index]);
          break;
        }
        MemoryStream memoryStream = new MemoryStream();
        StreamWriter streamWriter = new StreamWriter((Stream) memoryStream);
        streamWriter.WriteLine("<ShapeTypes xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"            xmlns:o=\"urn:schemas-microsoft-com:office:office\"             xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"             xmlns:v=\"urn:schemas-microsoft-com:vml\"             xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"             xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"             xmlns:w10=\"urn:schemas-microsoft-com:office:word\"             xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"             xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\"             xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\"             xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"             xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"             xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\"             xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"             mc:Ignorable=\"w14 w15 wp14\">  ");
        streamWriter.WriteLine(strArray[index]);
        streamWriter.WriteLine("</ShapeTypes>");
        streamWriter.Flush();
        memoryStream.Position = 0L;
        reader = this.CreateReader((Stream) memoryStream);
        memoryStream.Dispose();
        reader.ReadToFollowing(nameof (shape), "urn:schemas-microsoft-com:vml");
        break;
      }
    }
  }

  private void SerializeShapeType(
    XmlWriter m_writer,
    ChildShape shape,
    ref string shapeType,
    ref XmlReader reader)
  {
    string[] strArray = new StreamReader(this.GetManifestResourceStream("ShapeTypes.txt")).ReadToEnd().Split(new char[1]
    {
      ControlChar.LineFeedChar
    }, StringSplitOptions.RemoveEmptyEntries);
    string attributeToCheck = this.AutoShapeHelper.GetShapeTypeIDorAttributeToCheck(shape.AutoShapeType);
    for (int index = 0; index < strArray.Length; ++index)
    {
      if (strArray[index].Contains(attributeToCheck))
      {
        if (strArray[index].StartsWith("<v:shapetype"))
        {
          shapeType = strArray[index].Substring(17, strArray[index].IndexOfAny(new char[1]
          {
            '"'
          }, 17) - 17);
          m_writer.WriteRaw(strArray[index]);
          break;
        }
        MemoryStream memoryStream = new MemoryStream();
        StreamWriter streamWriter = new StreamWriter((Stream) memoryStream);
        streamWriter.WriteLine("<ShapeTypes xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"            xmlns:o=\"urn:schemas-microsoft-com:office:office\"             xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"             xmlns:v=\"urn:schemas-microsoft-com:vml\"             xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"             xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"             xmlns:w10=\"urn:schemas-microsoft-com:office:word\"             xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"             xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\"             xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\"             xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"             xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"             xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\"             xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"             mc:Ignorable=\"w14 w15 wp14\">  ");
        streamWriter.WriteLine(strArray[index]);
        streamWriter.WriteLine("</ShapeTypes>");
        streamWriter.Flush();
        memoryStream.Position = 0L;
        reader = this.CreateReader((Stream) memoryStream);
        memoryStream.Dispose();
        reader.ReadToFollowing(nameof (shape), "urn:schemas-microsoft-com:vml");
        break;
      }
    }
  }

  private void SerializeShapeType(
    XmlWriter m_writer,
    Shape shape,
    ref string shapeType,
    ref XmlReader reader)
  {
    string[] strArray = new StreamReader(this.GetManifestResourceStream("ShapeTypes.txt")).ReadToEnd().Split(new char[1]
    {
      ControlChar.LineFeedChar
    }, StringSplitOptions.RemoveEmptyEntries);
    string attributeToCheck = this.AutoShapeHelper.GetShapeTypeIDorAttributeToCheck(shape.AutoShapeType);
    for (int index = 0; index < strArray.Length; ++index)
    {
      if (strArray[index].Contains(attributeToCheck))
      {
        if (strArray[index].StartsWithExt("<v:shapetype"))
        {
          shapeType = strArray[index].Substring(17, strArray[index].IndexOfAny(new char[1]
          {
            '"'
          }, 17) - 17);
          m_writer.WriteRaw(strArray[index]);
          break;
        }
        MemoryStream memoryStream = new MemoryStream();
        StreamWriter streamWriter = new StreamWriter((Stream) memoryStream);
        streamWriter.WriteLine("<ShapeTypes xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"            xmlns:o=\"urn:schemas-microsoft-com:office:office\"             xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"             xmlns:v=\"urn:schemas-microsoft-com:vml\"             xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"             xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"             xmlns:w10=\"urn:schemas-microsoft-com:office:word\"             xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"             xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\"             xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\"             xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"             xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"             xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\"             xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"             mc:Ignorable=\"w14 w15 wp14\">  ");
        streamWriter.WriteLine(strArray[index]);
        streamWriter.WriteLine("</ShapeTypes>");
        streamWriter.Flush();
        memoryStream.Position = 0L;
        reader = this.CreateReader((Stream) memoryStream);
        memoryStream.Dispose();
        reader.ReadToFollowing(nameof (shape), "urn:schemas-microsoft-com:vml");
        break;
      }
    }
  }

  private MemoryStream ReadSingleNodeIntoStream(XmlReader reader)
  {
    MemoryStream data = new MemoryStream();
    XmlWriter writer = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateWriter((Stream) data, Encoding.UTF8);
    writer.WriteNode(reader, false);
    writer.Flush();
    return data;
  }

  private void SerializeTextBoxFormat(GroupShape shape, Dictionary<string, Stream> docxProps)
  {
    string str1 = string.Empty;
    string str2 = string.Empty;
    string str3 = string.Empty;
    string str4 = string.Empty;
    string empty = string.Empty;
    StringBuilder stringBuilder = new StringBuilder();
    if (shape.HorizontalOrigin != HorizontalOrigin.Column)
      str1 = this.GetHorizOriginAsString(shape.HorizontalOrigin);
    if (shape.VerticalOrigin != VerticalOrigin.Paragraph)
      str3 = this.GetVerticalOrginAsString(shape.VerticalOrigin, true);
    if (shape.HorizontalAlignment != ShapeHorizontalAlignment.None)
      str2 = shape.HorizontalAlignment.ToString().ToLower();
    if (shape.VerticalAlignment != ShapeVerticalAlignment.None)
      str4 = shape.VerticalAlignment.ToString().ToLower();
    if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Inline)
      stringBuilder.Append("position:absolute;");
    if ((double) shape.LeftMargin != 0.0)
    {
      stringBuilder.Append("left:");
      stringBuilder.Append(shape.LeftMargin.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if ((double) shape.TopMargin != 0.0)
    {
      stringBuilder.Append(";top:");
      stringBuilder.Append(shape.TopMargin.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    stringBuilder.Append(";margin-left:");
    stringBuilder.Append(shape.HorizontalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;margin-top:");
    stringBuilder.Append(shape.VerticalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;width:");
    stringBuilder.Append(shape.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;height:");
    stringBuilder.Append(shape.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;");
    if (shape.ZOrderPosition != 0)
      stringBuilder.Append($"z-index:{shape.ZOrderPosition.ToString()};");
    else if (shape.IsBelowText)
      stringBuilder.Append("z-index:-251658752;");
    if (str1.Length != 0)
    {
      stringBuilder.Append("mso-position-horizontal-relative:");
      stringBuilder.Append(str1);
    }
    if (str3.Length != 0)
    {
      stringBuilder.Append(";mso-position-vertical-relative:");
      stringBuilder.Append(str3);
    }
    if (str2.Length != 0)
    {
      stringBuilder.Append(";mso-position-horizontal:");
      stringBuilder.Append(str2);
    }
    if (str4.Length != 0)
    {
      stringBuilder.Append(";mso-position-vertical:");
      stringBuilder.Append(str4);
    }
    if ((double) shape.Rotation != 0.0)
    {
      stringBuilder.Append(";rotation:");
      long rotationAngle = (long) this.GetRotationAngle(shape.Rotation);
      stringBuilder.Append(rotationAngle.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if (shape.FlipHorizontal && shape.FlipVertical)
      stringBuilder.Append(";flip:x y");
    else if (shape.FlipHorizontal)
      stringBuilder.Append(";flip:x");
    else if (shape.FlipVertical)
      stringBuilder.Append(";flip:y");
    if (empty.Length != 0)
    {
      stringBuilder.Append(";v-text-anchor:");
      stringBuilder.Append(empty);
    }
    stringBuilder.Append(";mso-wrap-distance-left:");
    stringBuilder.Append(shape.WrapFormat.DistanceLeft.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;mso-wrap-distance-top:");
    stringBuilder.Append(shape.WrapFormat.DistanceTop.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;mso-wrap-distance-right:");
    stringBuilder.Append(shape.WrapFormat.DistanceRight.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;mso-wrap-distance-bottom:");
    stringBuilder.Append(shape.WrapFormat.DistanceBottom.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;");
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
  }

  private void SerializeTextBoxFormat(ChildShape shape, Dictionary<string, Stream> docxProps)
  {
    string empty = string.Empty;
    StringBuilder stringBuilder = new StringBuilder();
    string lower = shape.TextFrame.TextVerticalAlignment.ToString().ToLower();
    stringBuilder.Append("position:absolute;");
    if ((double) shape.LeftMargin != 0.0)
    {
      stringBuilder.Append("left:");
      double num = Math.Round((double) shape.LeftMargin, 2);
      stringBuilder.Append(num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if ((double) shape.TopMargin != 0.0)
    {
      stringBuilder.Append(";top:");
      double num = Math.Round((double) shape.TopMargin, 2);
      stringBuilder.Append(num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if ((double) shape.Width > 0.0)
    {
      stringBuilder.Append(";width:");
      stringBuilder.Append(shape.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if ((double) shape.Height > 0.0)
    {
      stringBuilder.Append(";height:");
      stringBuilder.Append(shape.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    stringBuilder.Append(";");
    if ((double) shape.Rotation != 0.0)
    {
      stringBuilder.Append(";rotation:");
      long rotationAngle = (long) this.GetRotationAngle(shape.Rotation);
      stringBuilder.Append(rotationAngle.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if (lower.Length != 0)
    {
      stringBuilder.Append(";v-text-anchor:");
      stringBuilder.Append(lower);
    }
    if ((double) shape.TextFrame.HorizontalRelativePercent != -3.4028234663852886E+38)
    {
      stringBuilder.Append(";mso-left-percent:");
      stringBuilder.Append(shape.TextFrame.HorizontalRelativePercent * 10f);
    }
    if ((double) shape.TextFrame.VerticalRelativePercent != -3.4028234663852886E+38)
    {
      stringBuilder.Append(";mso-top-percent:");
      stringBuilder.Append(shape.TextFrame.VerticalRelativePercent * 10f);
    }
    if (shape.FlipHorizantal && shape.FlipVertical)
      stringBuilder.Append(";flip:x y");
    else if (shape.FlipHorizantal)
      stringBuilder.Append(";flip:x");
    else if (shape.FlipVertical)
      stringBuilder.Append(";flip:y");
    if (shape.DocxStyleProps.Count > 0)
    {
      foreach (string docxStyleProp in shape.DocxStyleProps)
        stringBuilder.Append(";" + docxStyleProp);
    }
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
    if (shape.AutoShapeType == AutoShapeType.Line && (double) shape.LineFromXPosition != 0.0 && (double) shape.LineFromYPosition != 0.0 && (double) shape.LineToYPosition != 0.0 && (double) shape.LineToXPosition != 0.0)
    {
      float lineFromXposition = shape.LineFromXPosition;
      float lineFromYposition = shape.LineFromYPosition;
      string str1 = $"{Math.Round((double) lineFromXposition, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture)},{Math.Round((double) lineFromYposition, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
      if (!string.IsNullOrEmpty(str1))
        this.m_writer.WriteAttributeString("from", str1);
      float lineToXposition = shape.LineToXPosition;
      float lineToYposition = shape.LineToYPosition;
      string str2 = $"{Math.Round((double) lineToXposition, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture)},{Math.Round((double) lineToYposition, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
      if (!string.IsNullOrEmpty(str2))
        this.m_writer.WriteAttributeString("to", str2);
    }
    if (!string.IsNullOrEmpty(shape.Adjustments))
      this.m_writer.WriteAttributeString("adj", shape.Adjustments);
    if (!string.IsNullOrEmpty(shape.Path))
      this.m_writer.WriteAttributeString("path", shape.Path);
    if (shape.ArcSize > 0.0)
      this.m_writer.WriteAttributeString("arcsize", shape.ArcSize.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (shape.FillFormat.Fill && !shape.FillFormat.IsDefaultFill)
    {
      this.m_writer.WriteAttributeString("filled", "t");
      if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty && shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
      else if (!shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.ForeColor));
      else if (shape.FillFormat.FillType == FillType.FillGradient && shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
    }
    else if (!shape.FillFormat.IsDefaultFill)
      this.m_writer.WriteAttributeString("filled", "f");
    if (!shape.LayoutInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (!shape.LineFormat.Line)
    {
      this.m_writer.WriteAttributeString("stroked", "f");
      if (!(shape.LineFormat.Color != Color.Empty))
        return;
      this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
    }
    else
    {
      string dashStyle = this.GetDashStyle(shape.LineFormat.DashStyle, true);
      string lineStyle = this.GetLineStyle(shape.LineFormat.Style, true);
      if (dashStyle == null && lineStyle == null)
        return;
      if (shape.LineFormat.Is2007StrokeDefined)
        this.m_writer.WriteAttributeString("stroked", "t");
      this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
      this.m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
      this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
      if (dashStyle != null)
        this.m_writer.WriteAttributeString("dashstyle", dashStyle);
      if (lineStyle != null)
        this.m_writer.WriteAttributeString("linestyle", lineStyle);
      this.m_writer.WriteAttributeString("joinstyle", this.GetLineJoinStyle(shape.LineFormat.LineJoin));
      this.m_writer.WriteAttributeString("endcap", this.GetLineCapStyle(shape.LineFormat.LineCap, true));
      this.SerializePatternLine(shape);
      if (this.IsConnectorShape(shape.AutoShapeType))
        this.SerializeConnectorLine2007Properties(shape.LineFormat);
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeTextBoxFormat(ChildGroupShape shape, Dictionary<string, Stream> docxProps)
  {
    string empty = string.Empty;
    StringBuilder stringBuilder = new StringBuilder();
    string lower = shape.TextFrame.TextVerticalAlignment.ToString().ToLower();
    stringBuilder.Append("position:absolute;");
    if ((double) shape.LeftMargin != 0.0)
    {
      stringBuilder.Append("left:");
      stringBuilder.Append(shape.LeftMargin.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if ((double) shape.TopMargin != 0.0)
    {
      stringBuilder.Append(";top:");
      stringBuilder.Append(shape.TopMargin.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    stringBuilder.Append(";width:");
    stringBuilder.Append(shape.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append(";height:");
    stringBuilder.Append(shape.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append(";");
    if ((double) shape.Rotation != 0.0)
    {
      stringBuilder.Append(";rotation:");
      long rotationAngle = (long) this.GetRotationAngle(shape.Rotation);
      stringBuilder.Append(rotationAngle.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if (lower.Length != 0)
    {
      stringBuilder.Append(";v-text-anchor:");
      stringBuilder.Append(lower);
    }
    if ((double) shape.TextFrame.HorizontalRelativePercent != -3.4028234663852886E+38)
    {
      stringBuilder.Append(";mso-left-percent:");
      stringBuilder.Append(shape.TextFrame.HorizontalRelativePercent * 10f);
    }
    if ((double) shape.TextFrame.VerticalRelativePercent != -3.4028234663852886E+38)
    {
      stringBuilder.Append(";mso-top-percent:");
      stringBuilder.Append(shape.TextFrame.VerticalRelativePercent * 10f);
    }
    if (shape.FlipHorizantal && shape.FlipVertical)
      stringBuilder.Append(";flip:x y");
    else if (shape.FlipHorizantal)
      stringBuilder.Append(";flip:x");
    else if (shape.FlipVertical)
      stringBuilder.Append(";flip:y");
    if (shape.DocxStyleProps.Count > 0)
    {
      foreach (string docxStyleProp in shape.DocxStyleProps)
        stringBuilder.Append(";" + docxStyleProp);
    }
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
    if (!string.IsNullOrEmpty(shape.Adjustments))
      this.m_writer.WriteAttributeString("adj", shape.Adjustments);
    if (shape.ArcSize > 0.0)
      this.m_writer.WriteAttributeString("arcsize", shape.ArcSize.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (shape.FillFormat.Fill && !shape.FillFormat.IsDefaultFill)
    {
      this.m_writer.WriteAttributeString("filled", "t");
      if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty && shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
      else if (!shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.ForeColor));
      else if (shape.FillFormat.FillType == FillType.FillGradient && shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
    }
    else if (!shape.FillFormat.IsDefaultFill)
      this.m_writer.WriteAttributeString("filled", "f");
    if (!shape.LayoutInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (!shape.LineFormat.Line)
    {
      this.m_writer.WriteAttributeString("stroked", "f");
    }
    else
    {
      string dashStyle = this.GetDashStyle(shape.LineFormat.DashStyle, true);
      string lineStyle = this.GetLineStyle(shape.LineFormat.Style, true);
      if (dashStyle == null && lineStyle == null)
        return;
      if (shape.LineFormat.Is2007StrokeDefined)
        this.m_writer.WriteAttributeString("stroked", "t");
      this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
      this.m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
      this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
      if (dashStyle != null)
        this.m_writer.WriteAttributeString("dashstyle", dashStyle);
      if (lineStyle != null)
        this.m_writer.WriteAttributeString("linestyle", lineStyle);
      this.m_writer.WriteAttributeString("joinstyle", this.GetLineJoinStyle(shape.LineFormat.LineJoin));
      this.m_writer.WriteAttributeString("endcap", this.GetLineCapStyle(shape.LineFormat.LineCap, true));
      this.SerializePatternLine((ChildShape) shape);
      if (this.IsConnectorShape(shape.AutoShapeType))
        this.SerializeConnectorLine2007Properties(shape.LineFormat);
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeTextBoxFormat(Shape shape, Dictionary<string, Stream> docxProps)
  {
    string str1 = string.Empty;
    string str2 = string.Empty;
    string str3 = string.Empty;
    string str4 = string.Empty;
    string empty = string.Empty;
    StringBuilder textBoxStyle = new StringBuilder();
    if (shape.HorizontalOrigin != HorizontalOrigin.Column)
      str1 = this.GetHorizOriginAsString(shape.HorizontalOrigin);
    if (shape.VerticalOrigin != VerticalOrigin.Paragraph)
      str3 = this.GetVerticalOrginAsString(shape.VerticalOrigin, true);
    if (shape.HorizontalAlignment != ShapeHorizontalAlignment.None)
      str2 = shape.HorizontalAlignment.ToString().ToLower();
    if (shape.VerticalAlignment != ShapeVerticalAlignment.None)
      str4 = shape.VerticalAlignment.ToString().ToLower();
    string lower = shape.TextFrame.TextVerticalAlignment.ToString().ToLower();
    if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Inline)
      textBoxStyle.Append("position:absolute;");
    textBoxStyle.Append("margin-left:");
    textBoxStyle.Append(shape.HorizontalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;margin-top:");
    textBoxStyle.Append(shape.VerticalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;width:");
    textBoxStyle.Append(shape.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;height:");
    textBoxStyle.Append(shape.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;");
    if (shape.ZOrderPosition != 0)
      textBoxStyle.Append($"z-index:{shape.ZOrderPosition.ToString()};");
    else if (shape.IsBelowText)
      textBoxStyle.Append("z-index:-251658752;");
    if (str1.Length != 0)
    {
      textBoxStyle.Append("mso-position-horizontal-relative:");
      textBoxStyle.Append(str1);
    }
    if (str3.Length != 0)
    {
      textBoxStyle.Append(";mso-position-vertical-relative:");
      textBoxStyle.Append(str3);
    }
    if (str2.Length != 0)
    {
      textBoxStyle.Append(";mso-position-horizontal:");
      textBoxStyle.Append(str2);
    }
    if (str4.Length != 0)
    {
      textBoxStyle.Append(";mso-position-vertical:");
      textBoxStyle.Append(str4);
    }
    if ((double) shape.Rotation != 0.0)
    {
      textBoxStyle.Append(";rotation:");
      long rotationAngle = (long) this.GetRotationAngle(shape.Rotation);
      textBoxStyle.Append(rotationAngle.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    }
    if (lower.Length != 0)
    {
      textBoxStyle.Append(";v-text-anchor:");
      textBoxStyle.Append(lower);
    }
    if ((double) shape.TextFrame.WidthRelativePercent != 0.0)
    {
      textBoxStyle.Append(";mso-width-percent:" + (shape.TextFrame.WidthRelativePercent * 10f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      textBoxStyle.Append(";mso-width-relative:" + this.GetWidthOrigin(shape.TextFrame.WidthOrigin));
    }
    if ((double) shape.TextFrame.HeightRelativePercent != 0.0)
    {
      textBoxStyle.Append(";mso-height-percent:" + (shape.TextFrame.HeightRelativePercent * 10f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      textBoxStyle.Append(";mso-height-relative:" + this.GetHeightOrigin(shape.TextFrame.HeightOrigin));
    }
    if ((double) shape.TextFrame.HorizontalRelativePercent != -3.4028234663852886E+38)
    {
      textBoxStyle.Append(";mso-left-percent:");
      textBoxStyle.Append(shape.TextFrame.HorizontalRelativePercent * 10f);
    }
    if ((double) shape.TextFrame.VerticalRelativePercent != -3.4028234663852886E+38)
    {
      textBoxStyle.Append(";mso-top-percent:");
      textBoxStyle.Append(shape.TextFrame.VerticalRelativePercent * 10f);
    }
    textBoxStyle.Append(";mso-wrap-distance-left:");
    textBoxStyle.Append(shape.WrapFormat.DistanceLeft.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;mso-wrap-distance-top:");
    textBoxStyle.Append(shape.WrapFormat.DistanceTop.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;mso-wrap-distance-right:");
    textBoxStyle.Append(shape.WrapFormat.DistanceRight.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;mso-wrap-distance-bottom:");
    textBoxStyle.Append(shape.WrapFormat.DistanceBottom.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    textBoxStyle.Append("pt;");
    this.SerializeFlip(shape, textBoxStyle);
    if (shape.DocxStyleProps.Count > 0)
    {
      foreach (string docxStyleProp in shape.DocxStyleProps)
        textBoxStyle.Append(";" + docxStyleProp);
    }
    this.m_writer.WriteAttributeString("style", textBoxStyle.ToString());
    if (!string.IsNullOrEmpty(shape.Adjustments))
      this.m_writer.WriteAttributeString("adj", shape.Adjustments);
    if ((double) shape.CoordinateXOrigin != 0.0 && (double) shape.CoordinateYOrigin != 0.0)
    {
      string str5 = $"{shape.CoordinateXOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)},{shape.CoordinateYOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
      if (!string.IsNullOrEmpty(str5))
        this.m_writer.WriteAttributeString("coordorigin", str5);
    }
    if (!string.IsNullOrEmpty(shape.CoordinateSize))
      this.m_writer.WriteAttributeString("coordsize", shape.CoordinateSize);
    if (!string.IsNullOrEmpty(shape.Path))
      this.m_writer.WriteAttributeString("path", shape.Path);
    if (shape.ArcSize > 0.0)
      this.m_writer.WriteAttributeString("arcsize", shape.ArcSize.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (shape.FillFormat.Fill && !shape.FillFormat.IsDefaultFill)
    {
      this.m_writer.WriteAttributeString("filled", "t");
      if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty && shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
      else if (!shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.ForeColor));
      else if (shape.FillFormat.FillType == FillType.FillGradient && shape.FillFormat.ForeColor.IsEmpty)
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(shape.FillFormat.Color));
    }
    else if (!shape.FillFormat.IsDefaultFill)
      this.m_writer.WriteAttributeString("filled", "f");
    if (!shape.LayoutInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (!shape.LineFormat.Line)
    {
      this.m_writer.WriteAttributeString("stroked", "f");
    }
    else
    {
      string dashStyle = this.GetDashStyle(shape.LineFormat.DashStyle, true);
      string lineStyle = this.GetLineStyle(shape.LineFormat.Style, true);
      if (dashStyle != null || lineStyle != null)
      {
        this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(shape.LineFormat.Color));
        this.m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
        this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
        if (dashStyle != null)
          this.m_writer.WriteAttributeString("dashstyle", dashStyle);
        if (lineStyle != null)
          this.m_writer.WriteAttributeString("linestyle", lineStyle);
        this.m_writer.WriteAttributeString("joinstyle", this.GetLineJoinStyle(shape.LineFormat.LineJoin));
        this.m_writer.WriteAttributeString("endcap", this.GetLineCapStyle(shape.LineFormat.LineCap, true));
        this.SerializePatternLine(shape);
        if (this.IsConnectorShape(shape.AutoShapeType))
          this.SerializeConnectorLine2007Properties(shape.LineFormat);
        this.m_writer.WriteEndElement();
      }
    }
    if (shape.WrapFormat.TextWrappingStyle == TextWrappingStyle.InFrontOfText || shape.WrapFormat.TextWrappingStyle == TextWrappingStyle.Behind)
      return;
    this.m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("type", this.GetTextWrappingStyleAsString(shape.WrapFormat.TextWrappingStyle));
    this.m_writer.WriteEndElement();
  }

  private void SerializeFlip(Shape shape, StringBuilder textBoxStyle)
  {
    if (!shape.FlipHorizontal && !shape.FlipVertical)
      return;
    if (shape.FlipHorizontal && shape.FlipVertical)
      textBoxStyle.Append("flip:x y;");
    else if (shape.FlipHorizontal)
      textBoxStyle.Append("flip:x;");
    else
      textBoxStyle.Append("flip:y;");
  }

  private void SerializeConnectorLine2007Properties(LineFormat lineFormat)
  {
    this.m_writer.WriteAttributeString("startarrow", this.GetLineEnd(lineFormat.BeginArrowheadStyle, true));
    this.m_writer.WriteAttributeString("startarrowwidth", this.GetLineEndWidth(lineFormat.BeginArrowheadWidth, true));
    this.m_writer.WriteAttributeString("startarrowlength", this.GetLineEndLength(lineFormat.BeginArrowheadLength, true));
    this.m_writer.WriteAttributeString("endarrow", this.GetLineEnd(lineFormat.EndArrowheadStyle, true));
    this.m_writer.WriteAttributeString("endarrowwidth", this.GetLineEndWidth(lineFormat.EndArrowheadWidth, true));
    this.m_writer.WriteAttributeString("endarrowlength", this.GetLineEndLength(lineFormat.EndArrowheadLength, true));
  }

  private void SerializePatternLine(Shape shape)
  {
    byte[] imageBytes = (byte[]) null;
    if (shape.LineFormat.ImageRecord != null)
      imageBytes = shape.LineFormat.ImageRecord.ImageBytes;
    if (shape.LineFormat.LineFormatType == LineFormatType.Patterned && shape.LineFormat.Pattern != PatternType.Mixed)
      imageBytes = this.GetPatternImageBytes(shape.LineFormat.Pattern.ToString());
    if (imageBytes != null)
    {
      Entity baseEntity = ((Entity) shape).GetBaseEntity((Entity) shape);
      string str = string.Empty;
      WPicture wpicture = new WPicture((IWordDocument) this.m_document);
      wpicture.LoadImage(imageBytes);
      this.UpdateImages(wpicture);
      switch (baseEntity)
      {
        case WSection _:
          str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
          break;
        case HeaderFooter _:
          str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
          break;
      }
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str.ToString());
      this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", string.Empty);
    }
    if ((double) shape.LineFormat.Transparency > 0.0)
      this.m_writer.WriteAttributeString("opacity", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.LineFormat.Transparency / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (!shape.LineFormat.Color.IsEmpty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.LineFormat.Color));
    if (shape.LineFormat.LineFormatType != LineFormatType.Patterned)
      return;
    this.m_writer.WriteAttributeString("filltype", "pattern");
  }

  private void SerializePatternLine(ChildShape shape)
  {
    byte[] imageBytes = (byte[]) null;
    if (shape.LineFormat.ImageRecord != null)
      imageBytes = shape.LineFormat.ImageRecord.ImageBytes;
    if (shape.LineFormat.LineFormatType == LineFormatType.Patterned && shape.LineFormat.Pattern != PatternType.Mixed)
      imageBytes = this.GetPatternImageBytes(shape.LineFormat.Pattern.ToString());
    if (imageBytes != null)
    {
      Entity baseEntity = this.GetBaseEntity((Entity) shape);
      string str = string.Empty;
      WPicture wpicture = new WPicture((IWordDocument) this.m_document);
      wpicture.LoadImage(imageBytes);
      this.UpdateImages(wpicture);
      switch (baseEntity)
      {
        case WSection _:
          str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
          break;
        case HeaderFooter _:
          str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
          break;
      }
      this.m_writer.WriteAttributeString("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str.ToString());
      this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", string.Empty);
    }
    if ((double) shape.LineFormat.Transparency > 0.0)
      this.m_writer.WriteAttributeString("opacity", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.LineFormat.Transparency / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (!shape.LineFormat.Color.IsEmpty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.LineFormat.Color));
    if (shape.LineFormat.LineFormatType != LineFormatType.Patterned)
      return;
    this.m_writer.WriteAttributeString("filltype", "pattern");
  }

  private void SerializeDocxStream(Dictionary<string, Stream> docxProps, string localName)
  {
    Stream stream = (Stream) new MemoryStream();
    if (!docxProps.TryGetValue(localName, out stream) || stream == null || stream.Length <= 0L)
      return;
    stream.Position = 0L;
    this.m_writer.WriteNode(this.CreateReader(stream), false);
  }

  private void SerializeDocxStream(
    Dictionary<string, Stream> docxProps,
    string localName,
    Shape shapeItem)
  {
    Stream stream = (Stream) new MemoryStream();
    if (!docxProps.TryGetValue(localName, out stream) || stream == null || stream.Length <= 0L)
      return;
    stream.Position = 0L;
    this.m_writer.WriteNode(this.CreateReader(this.UpdateXMLRelation(shapeItem, stream)), false);
  }

  private void SerializeDocxStream(
    Dictionary<string, Stream> docxProps,
    string localName,
    ChildShape shapeItem)
  {
    Stream stream = (Stream) new MemoryStream();
    if (!docxProps.TryGetValue(localName, out stream) || stream == null || stream.Length <= 0L)
      return;
    stream.Position = 0L;
    this.m_writer.WriteNode(this.CreateReader(this.UpdateXMLRelation(shapeItem, stream)), false);
  }

  private void SerializeFillEffects(Shape shape, Dictionary<string, Stream> docxProps)
  {
    if (!shape.FillFormat.Fill)
      return;
    switch (shape.FillFormat.FillType)
    {
      case FillType.FillSolid:
        this.SerializeSolidFill2007(shape);
        break;
      case FillType.FillPatterned:
      case FillType.FillTextured:
      case FillType.FillPicture:
        this.SerializeBlipFill2007(shape);
        break;
      case FillType.FillGradient:
        this.SerializeGridFill2007(shape);
        break;
      default:
        this.SerializeDocxStream(docxProps, "fill", shape);
        break;
    }
  }

  private void SerializeFillEffects(ChildShape shape, Dictionary<string, Stream> docxProps)
  {
    if (!shape.FillFormat.Fill)
      return;
    switch (shape.FillFormat.FillType)
    {
      case FillType.FillSolid:
        this.SerializeSolidFill2007(shape);
        break;
      case FillType.FillPatterned:
      case FillType.FillTextured:
      case FillType.FillPicture:
        this.SerializeBlipFill2007(shape);
        break;
      case FillType.FillGradient:
        this.SerializeGridFill2007(shape);
        break;
      default:
        this.SerializeDocxStream(docxProps, "fill", shape);
        break;
    }
  }

  private void SerializeSolidFill2007(Shape shape)
  {
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("opacity", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.FillFormat.Transparency / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (!shape.FillFormat.Color.IsEmpty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.FillFormat.Color));
    this.m_writer.WriteEndElement();
  }

  private void SerializeSolidFill2007(ChildShape shape)
  {
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("opacity", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.FillFormat.Transparency / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (!shape.FillFormat.Color.IsEmpty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.FillFormat.Color));
    this.m_writer.WriteEndElement();
  }

  private void SerializeGridFill2007(Shape shape)
  {
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    uint uint32 = Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.FillFormat.Transparency / 100.0)));
    string str1 = "gradientRadial";
    this.m_writer.WriteAttributeString("opacity", uint32.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (shape.FillFormat.ForeColor != Color.Empty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.FillFormat.Color != Color.Empty ? shape.FillFormat.Color : (shape.FillFormat.GradientFill.GradientStops.Count > 0 ? shape.FillFormat.GradientFill.GradientStops[shape.FillFormat.GradientFill.GradientStops.Count - 1].Color : shape.FillFormat.Color)));
    this.m_writer.WriteAttributeString("rotate", shape.FillFormat.GradientFill.RotateWithShape ? "t" : "f");
    if (shape.FillFormat.GradientFill.LinearGradient != null)
    {
      this.m_writer.WriteAttributeString("angle", this.GetAngle(shape.FillFormat.GradientFill.LinearGradient.Angle, shape.FillFormat.GradientFill.LinearGradient.AnglePositive));
      str1 = "gradient";
    }
    this.m_writer.WriteAttributeString("colors", this.GetGradientStopAsColors(shape.FillFormat.GradientFill));
    if (!string.IsNullOrEmpty(shape.FillFormat.GradientFill.Focus))
      this.m_writer.WriteAttributeString("focus", shape.FillFormat.GradientFill.Focus);
    string str2 = (string) null;
    if ((double) shape.FillFormat.FocusSizeX != 0.0)
      str2 = shape.FillFormat.FocusSizeX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
    if ((double) shape.FillFormat.FocusSizeY != 0.0)
      str2 = $",{shape.FillFormat.FocusSizeY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
    if (!string.IsNullOrEmpty(str2))
      this.m_writer.WriteAttributeString("focussize", str2);
    string str3 = (string) null;
    if ((double) shape.FillFormat.PositionX != 0.0)
      str3 = shape.FillFormat.FocusPositionX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
    if ((double) shape.FillFormat.PositionY != 0.0)
      str3 = $",{shape.FillFormat.PositionY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
    if (!string.IsNullOrEmpty(str3))
      this.m_writer.WriteAttributeString("position", str3);
    this.m_writer.WriteAttributeString("type", str1);
    if (shape.FillFormat.GradientFill.PathGradient != null)
    {
      string focusPosition = this.GetFocusPosition(shape);
      if (!string.IsNullOrEmpty(focusPosition))
        this.m_writer.WriteAttributeString("focusposition", focusPosition);
      if (shape.FillFormat.GradientFill.PathGradient.PathShade == GradientShadeType.Rectangle)
      {
        this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:office:office");
        this.m_writer.WriteAttributeString("ext", "view");
        this.m_writer.WriteAttributeString("type", "gradientCenter");
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeGridFill2007(ChildShape shape)
  {
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    uint uint32 = Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.FillFormat.Transparency / 100.0)));
    string str1 = "gradientRadial";
    this.m_writer.WriteAttributeString("opacity", uint32.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (shape.FillFormat.ForeColor != Color.Empty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.FillFormat.Color != Color.Empty ? shape.FillFormat.Color : (shape.FillFormat.GradientFill.GradientStops.Count > 0 ? shape.FillFormat.GradientFill.GradientStops[shape.FillFormat.GradientFill.GradientStops.Count - 1].Color : shape.FillFormat.Color)));
    this.m_writer.WriteAttributeString("rotate", shape.FillFormat.GradientFill.RotateWithShape ? "t" : "f");
    if (shape.FillFormat.GradientFill.LinearGradient != null)
    {
      if (shape.FillFormat.GradientFill.LinearGradient.IsAngleDefined)
        this.m_writer.WriteAttributeString("angle", this.GetAngle(shape.FillFormat.GradientFill.LinearGradient.Angle, shape.FillFormat.GradientFill.LinearGradient.AnglePositive));
      str1 = "gradient";
    }
    this.m_writer.WriteAttributeString("colors", this.GetGradientStopAsColors(shape.FillFormat.GradientFill));
    if (!string.IsNullOrEmpty(shape.FillFormat.GradientFill.Focus))
      this.m_writer.WriteAttributeString("focus", shape.FillFormat.GradientFill.Focus);
    string str2 = (string) null;
    if ((double) shape.FillFormat.FocusSizeX != 0.0)
      str2 = shape.FillFormat.FocusSizeX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
    if ((double) shape.FillFormat.FocusSizeY != 0.0)
      str2 = $",{shape.FillFormat.FocusSizeY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
    if (!string.IsNullOrEmpty(str2))
      this.m_writer.WriteAttributeString("focussize", str2);
    string str3 = (string) null;
    if ((double) shape.FillFormat.PositionX != 0.0)
      str3 = shape.FillFormat.FocusPositionX.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt";
    if ((double) shape.FillFormat.PositionY != 0.0)
      str3 = $",{shape.FillFormat.PositionY.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt";
    if (!string.IsNullOrEmpty(str3))
      this.m_writer.WriteAttributeString("position", str3);
    this.m_writer.WriteAttributeString("type", str1);
    if (shape.FillFormat.GradientFill.PathGradient != null)
    {
      string focusPosition = this.GetFocusPosition(shape);
      if (!string.IsNullOrEmpty(focusPosition))
        this.m_writer.WriteAttributeString("focusposition", focusPosition);
      if (shape.FillFormat.GradientFill.PathGradient.PathShade == GradientShadeType.Rectangle)
      {
        this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:office:office");
        this.m_writer.WriteAttributeString("ext", "view");
        this.m_writer.WriteAttributeString("type", "gradientCenter");
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
  }

  private string GetFocusPosition(Shape shape)
  {
    GradientFill gradientFill = shape.FillFormat.GradientFill;
    string focusPosition = string.Empty;
    if ((double) gradientFill.TileRectangle.TopOffset == -100.0 && (double) gradientFill.TileRectangle.LeftOffset == -100.0 && gradientFill.PathGradient.RightOffset == (short) 100 && gradientFill.PathGradient.BottomOffset == (short) 100)
      return (string) null;
    if ((double) gradientFill.TileRectangle.TopOffset == -100.0 && (double) gradientFill.TileRectangle.LeftOffset == 100.0 && gradientFill.PathGradient.RightOffset == (short) -100 && gradientFill.PathGradient.BottomOffset == (short) 100)
      focusPosition = "1";
    else if ((double) gradientFill.TileRectangle.TopOffset == 100.0 && (double) gradientFill.TileRectangle.LeftOffset == 100.0 && gradientFill.PathGradient.RightOffset == (short) -100 && gradientFill.PathGradient.BottomOffset == (short) -100)
      focusPosition = "1,1";
    else if ((double) gradientFill.TileRectangle.TopOffset == 100.0 && (double) gradientFill.TileRectangle.LeftOffset == -100.0 && gradientFill.PathGradient.RightOffset == (short) 100 && gradientFill.PathGradient.BottomOffset == (short) -100)
      focusPosition = ",1";
    else if ((double) gradientFill.TileRectangle.TopOffset == 50.0 && (double) gradientFill.TileRectangle.LeftOffset == 50.0 && gradientFill.PathGradient.RightOffset == (short) 50 && gradientFill.PathGradient.BottomOffset == (short) 50)
      focusPosition = ".5,.5";
    return focusPosition;
  }

  private string GetFocusPosition(ChildShape shape)
  {
    GradientFill gradientFill = shape.FillFormat.GradientFill;
    string focusPosition = string.Empty;
    if ((double) gradientFill.TileRectangle.TopOffset == -100.0 && (double) gradientFill.TileRectangle.LeftOffset == -100.0 && gradientFill.PathGradient.RightOffset == (short) 100 && gradientFill.PathGradient.BottomOffset == (short) 100)
      return (string) null;
    if ((double) gradientFill.TileRectangle.TopOffset == -100.0 && (double) gradientFill.TileRectangle.LeftOffset == 100.0 && gradientFill.PathGradient.RightOffset == (short) -100 && gradientFill.PathGradient.BottomOffset == (short) 100)
      focusPosition = "1";
    else if ((double) gradientFill.TileRectangle.TopOffset == 100.0 && (double) gradientFill.TileRectangle.LeftOffset == 100.0 && gradientFill.PathGradient.RightOffset == (short) -100 && gradientFill.PathGradient.BottomOffset == (short) -100)
      focusPosition = "1,1";
    else if ((double) gradientFill.TileRectangle.TopOffset == 100.0 && (double) gradientFill.TileRectangle.LeftOffset == -100.0 && gradientFill.PathGradient.RightOffset == (short) 100 && gradientFill.PathGradient.BottomOffset == (short) -100)
      focusPosition = ",1";
    else if ((double) gradientFill.TileRectangle.TopOffset == 50.0 && (double) gradientFill.TileRectangle.LeftOffset == 50.0 && gradientFill.PathGradient.RightOffset == (short) 50 && gradientFill.PathGradient.BottomOffset == (short) 50)
      focusPosition = ".5,.5";
    return focusPosition;
  }

  private string GetShadingVariant(GradientShadingVariant gradientShadingVariant)
  {
    string shadingVariant = string.Empty;
    switch (gradientShadingVariant)
    {
      case GradientShadingVariant.ShadingUp:
        shadingVariant = "100%";
        break;
      case GradientShadingVariant.ShadingDown:
        shadingVariant = "0%";
        break;
      case GradientShadingVariant.ShadingOut:
        shadingVariant = "25%";
        break;
      case GradientShadingVariant.ShadingMiddle:
        shadingVariant = "50%";
        break;
    }
    return shadingVariant;
  }

  private string GetGradientStopAsColors(GradientFill gradientFill)
  {
    string gradientStopAsColors = string.Empty;
    this.SortGradientStops(gradientFill);
    for (int index = 0; index < gradientFill.GradientStops.Count; ++index)
    {
      gradientStopAsColors = $"{$"{gradientStopAsColors}{(object) ((int) gradientFill.GradientStops[index].Position * 65536 /*0x010000*/ / 100)}f"} #{this.GetRGBCode(gradientFill.GradientStops[index].Color)}";
      if (index != gradientFill.GradientStops.Count - 1)
        gradientStopAsColors += ";";
    }
    return gradientStopAsColors;
  }

  private void SortGradientStops(GradientFill gradientFill)
  {
    for (int index1 = 0; index1 < gradientFill.GradientStops.Count - 1; ++index1)
    {
      for (int index2 = index1 + 1; index2 < gradientFill.GradientStops.Count - 1; ++index2)
      {
        if ((int) gradientFill.GradientStops[index1].Position > (int) gradientFill.GradientStops[index2].Position)
        {
          GradientStop gradientStop = gradientFill.GradientStops[index1];
          gradientFill.GradientStops[index1] = gradientFill.GradientStops[index2];
          gradientFill.GradientStops[index2] = gradientStop;
        }
      }
    }
  }

  private string GetAngle(short angle, bool isAnglePositive)
  {
    int int32 = Convert.ToInt32(angle);
    int num1 = int.MaxValue;
    int num2;
    if (isAnglePositive)
    {
      if (int32 >= 0 && int32 <= 90)
        num1 = 90 - int32;
      else if (int32 > 90 && int32 <= 180)
        num1 = 270 + (180 - int32);
      else if (int32 > 180 && int32 <= 270)
        num1 = 180 + (270 - int32);
      else if (int32 > 270 && int32 <= 360)
        num1 = 90 + (360 - int32);
      num2 = num1 == 360 ? 0 : num1;
    }
    else
    {
      if (int32 >= 0 && int32 <= 90)
        num1 = 90 + int32;
      else if (int32 > 90 && int32 <= 180)
        num1 = 180 + (int32 - 90);
      else if (int32 > 180 && int32 <= 270)
        num1 = 270 + (int32 - 180);
      else if (int32 > 270 && int32 <= 360)
        num1 = int32 - 270;
      num2 = num1 == 360 ? 0 : -num1;
    }
    return num2.ToString();
  }

  private void SerializeBlipFill2007(Shape shape)
  {
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    byte[] imageBytes = (byte[]) null;
    if (shape.FillFormat.ImageRecord != null)
      imageBytes = shape.FillFormat.ImageRecord.ImageBytes;
    if (shape.FillFormat.FillType == FillType.FillPatterned && shape.FillFormat.Pattern != PatternType.Mixed)
      imageBytes = this.GetPatternImageBytes(shape.FillFormat.Pattern.ToString());
    if (imageBytes != null)
    {
      Entity baseEntity = ((Entity) shape).GetBaseEntity((Entity) shape);
      string str = string.Empty;
      WPicture wpicture = new WPicture((IWordDocument) this.m_document);
      wpicture.LoadImage(imageBytes);
      this.UpdateImages(wpicture);
      switch (baseEntity)
      {
        case WSection _:
          str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
          break;
        case HeaderFooter _:
          str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
          break;
        case ChildShape _:
          str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
          break;
      }
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str.ToString());
    }
    this.m_writer.WriteAttributeString("opacity", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.FillFormat.Transparency / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (!shape.FillFormat.Color.IsEmpty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.FillFormat.Color));
    this.m_writer.WriteAttributeString("rotate", shape.FillFormat.RotateWithObject ? "t" : "f");
    if (shape.FillFormat.FillType == FillType.FillPatterned)
      this.m_writer.WriteAttributeString("type", "pattern");
    else if (shape.FillFormat.FillType == FillType.FillPicture)
      this.m_writer.WriteAttributeString("type", "frame");
    else
      this.m_writer.WriteAttributeString("type", "tile");
    this.m_writer.WriteEndElement();
  }

  private void SerializeBlipFill2007(ChildShape shape)
  {
    this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
    byte[] imageBytes = (byte[]) null;
    if (shape.FillFormat.ImageRecord != null)
      imageBytes = shape.FillFormat.ImageRecord.ImageBytes;
    if (shape.FillFormat.FillType == FillType.FillPatterned && shape.FillFormat.Pattern != PatternType.Mixed)
      imageBytes = this.GetPatternImageBytes(shape.FillFormat.Pattern.ToString());
    if (imageBytes != null)
    {
      Entity baseEntity = this.GetBaseEntity((Entity) shape);
      string str = string.Empty;
      WPicture wpicture = new WPicture((IWordDocument) this.m_document);
      wpicture.LoadImage(imageBytes);
      this.UpdateImages(wpicture);
      switch (baseEntity)
      {
        case WSection _:
          str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
          break;
        case HeaderFooter _:
          str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
          break;
      }
      this.m_writer.WriteAttributeString("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str.ToString());
    }
    this.m_writer.WriteAttributeString("opacity", Convert.ToUInt32((float) (65536.0 * (1.0 - (double) shape.FillFormat.Transparency / 100.0))).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (!shape.FillFormat.Color.IsEmpty)
      this.m_writer.WriteAttributeString("color2", "#" + this.GetRGBCode(shape.FillFormat.Color));
    this.m_writer.WriteAttributeString("rotate", shape.FillFormat.RotateWithObject ? "t" : "f");
    if (shape.FillFormat.FillType == FillType.FillPatterned)
      this.m_writer.WriteAttributeString("type", "pattern");
    else if (shape.FillFormat.FillType == FillType.FillPicture)
      this.m_writer.WriteAttributeString("type", "frame");
    else
      this.m_writer.WriteAttributeString("type", "tile");
    this.m_writer.WriteEndElement();
  }

  private Stream GetManifestResourceStream(string fileName)
  {
    Assembly executingAssembly = Assembly.GetExecutingAssembly();
    foreach (string manifestResourceName in executingAssembly.GetManifestResourceNames())
    {
      if (manifestResourceName.EndsWith("." + fileName))
      {
        fileName = manifestResourceName;
        break;
      }
    }
    return executingAssembly.GetManifestResourceStream(fileName);
  }

  private byte[] GetPatternImageBytes(string patternType)
  {
    XmlReader reader = XmlReader.Create(this.GetManifestResourceStream("PatternFillResources.xml"));
    byte[] patternImageBytes = (byte[]) null;
    while (!reader.EOF)
    {
      reader.ReadToFollowing("name");
      if (!reader.EOF)
      {
        reader.Read();
        this.SkipWhitespaces(reader);
        if (reader.Value == patternType)
        {
          reader.ReadToFollowing("patternBytes");
          if (!reader.EOF)
          {
            reader.Read();
            this.SkipWhitespaces(reader);
            return Convert.FromBase64String(reader.Value);
          }
        }
      }
      this.SkipWhitespaces(reader);
    }
    return patternImageBytes;
  }

  private void SkipWhitespaces(XmlReader reader)
  {
    if (reader.NodeType == XmlNodeType.Element)
      return;
    while (reader.NodeType == XmlNodeType.Whitespace)
      reader.Read();
  }

  private string GetEmuFromPoint(double pointValue)
  {
    return Math.Round(pointValue * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture);
  }

  private void SerializeAbsolutePicture(ParagraphItem item)
  {
    ShapeBase shapeBase1;
    ShapeBase shapeBase2;
    switch (item)
    {
      case WChart _:
        shapeBase1 = (ShapeBase) (item as WChart);
        goto label_5;
      case WTextBox _:
        shapeBase2 = (ShapeBase) (item as WTextBox).Shape;
        break;
      default:
        shapeBase2 = item as ShapeBase;
        break;
    }
    shapeBase1 = shapeBase2;
label_5:
    this.m_writer.WriteStartElement("anchor", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("distT", this.GetEmuFromPoint((double) shapeBase1.WrapFormat.DistanceTop));
    this.m_writer.WriteAttributeString("distB", this.GetEmuFromPoint((double) shapeBase1.WrapFormat.DistanceBottom));
    this.m_writer.WriteAttributeString("distL", this.GetEmuFromPoint((double) shapeBase1.WrapFormat.DistanceLeft));
    this.m_writer.WriteAttributeString("distR", this.GetEmuFromPoint((double) shapeBase1.WrapFormat.DistanceRight));
    this.m_writer.WriteAttributeString("simplePos", "0");
    this.m_writer.WriteAttributeString("relativeHeight", shapeBase1.ZOrderPosition.ToString());
    this.m_writer.WriteAttributeString("behindDoc", shapeBase1.IsBelowText ? "1" : "0");
    this.m_writer.WriteAttributeString("locked", shapeBase1.LockAnchor ? "1" : "0");
    if (shapeBase1.LayoutInCell)
      this.m_writer.WriteAttributeString("layoutInCell", "1");
    else
      this.m_writer.WriteAttributeString("layoutInCell", "0");
    this.m_writer.WriteAttributeString("allowOverlap", shapeBase1.WrapFormat.AllowOverlap ? "1" : "0");
    this.m_writer.WriteStartElement("simplePos", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("x", "0");
    this.m_writer.WriteAttributeString("y", "0");
    this.m_writer.WriteEndElement();
    if (shapeBase1.IsRelativeHorizontalPosition)
    {
      this.m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteAttributeString("Requires", "wp14");
      this.m_writer.WriteStartElement("positionH", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetShapeHorzOrigin(shapeBase1.RelativeHorizontalOrigin));
      this.m_writer.WriteStartElement("pctPosHOffset", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.RelativeHorizontalPosition * 1000.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("positionH", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetShapeHorzOrigin(shapeBase1.HorizontalOrigin));
      if (shapeBase1.HorizontalAlignment == ShapeHorizontalAlignment.None)
      {
        this.m_writer.WriteStartElement("posOffset", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.HorizontalPosition * 12700.0)).ToString());
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("align", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(shapeBase1.HorizontalAlignment.ToString().ToLower());
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("positionH", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetShapeHorzOrigin(shapeBase1.HorizontalOrigin));
      if (shapeBase1.HorizontalAlignment == ShapeHorizontalAlignment.None)
      {
        this.m_writer.WriteStartElement("posOffset", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.HorizontalPosition * 12700.0)).ToString());
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("align", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(shapeBase1.HorizontalAlignment.ToString().ToLower());
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    if (shapeBase1.IsRelativeVerticalPosition)
    {
      this.m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteAttributeString("Requires", "wp14");
      this.m_writer.WriteStartElement("positionV", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetVerticalOrginAsString(shapeBase1.RelativeVerticalOrigin, false));
      this.m_writer.WriteStartElement("pctPosVOffset", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.RelativeVerticalPosition * 1000.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("positionV", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetVerticalOrginAsString(shapeBase1.VerticalOrigin, false));
      if (shapeBase1.VerticalAlignment == ShapeVerticalAlignment.None)
      {
        this.m_writer.WriteStartElement("posOffset", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.VerticalPosition * 12700.0)).ToString());
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("align", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(shapeBase1.VerticalAlignment.ToString().ToLower());
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("positionV", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetVerticalOrginAsString(shapeBase1.VerticalOrigin, false));
      if (shapeBase1.VerticalAlignment == ShapeVerticalAlignment.None)
      {
        this.m_writer.WriteStartElement("posOffset", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.VerticalPosition * 12700.0)).ToString());
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("align", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteString(shapeBase1.VerticalAlignment.ToString().ToLower());
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("extent", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) shapeBase1.Width * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) shapeBase1.Height * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    if (item is ShapeBase)
    {
      ShapeBase shapeBase3 = item as ShapeBase;
      if (shapeBase3.DocxProps.ContainsKey("effectExtent"))
        this.SerializeDocxProps(shapeBase3.DocxProps, "effectExtent");
    }
    switch (shapeBase1.WrapFormat.TextWrappingStyle)
    {
      case TextWrappingStyle.TopAndBottom:
        this.m_writer.WriteStartElement("wrapTopAndBottom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteEndElement();
        break;
      case TextWrappingStyle.Square:
        this.m_writer.WriteStartElement("wrapSquare", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteAttributeString("wrapText", this.GetPictureWrappingTypeAsString(shapeBase1.WrapFormat.TextWrappingType));
        this.m_writer.WriteEndElement();
        break;
      case TextWrappingStyle.Tight:
        this.m_writer.WriteStartElement("wrapTight", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteAttributeString("wrapText", this.GetPictureWrappingTypeAsString(shapeBase1.WrapFormat.TextWrappingType));
        this.SerializeWrapPolygon((Entity) shapeBase1, shapeBase1.WrapFormat.WrapPolygon);
        this.m_writer.WriteEndElement();
        break;
      case TextWrappingStyle.Through:
        this.m_writer.WriteStartElement("wrapThrough", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteAttributeString("wrapText", this.GetPictureWrappingTypeAsString(shapeBase1.WrapFormat.TextWrappingType));
        this.SerializeWrapPolygon((Entity) shapeBase1, shapeBase1.WrapFormat.WrapPolygon);
        this.m_writer.WriteEndElement();
        break;
      default:
        this.m_writer.WriteStartElement("wrapNone", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteEndElement();
        break;
    }
    if (item is WChart)
      this.SerializeChartGraphicData(item as WChart);
    else
      this.SerializeShapeDrawingGraphics(item);
    if (shapeBase1.IsRelativeWidth)
    {
      this.m_writer.WriteStartElement("sizeRelH", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetShapeHorzOrigin(shapeBase1.RelativeWidthHorizontalOrigin));
      this.m_writer.WriteStartElement("pctWidth", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.RelativeWidth * 1000.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shapeBase1.IsRelativeHeight)
    {
      this.m_writer.WriteStartElement("sizeRelV", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("relativeFrom", this.GetVerticalOrginAsString(shapeBase1.RelativeHeightVerticalOrigin, false));
      this.m_writer.WriteStartElement("pctHeight", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
      this.m_writer.WriteString(((int) Math.Round((double) shapeBase1.RelativeHeight * 1000.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (item is GroupShape)
      return;
    this.m_writer.WriteEndElement();
  }

  private string GetShapeHorzOrigin(HorizontalOrigin horzOrigin)
  {
    switch (horzOrigin)
    {
      case HorizontalOrigin.LeftMargin:
        return "leftMargin";
      case HorizontalOrigin.RightMargin:
        return "rightMargin";
      case HorizontalOrigin.InsideMargin:
        return "insideMargin";
      case HorizontalOrigin.OutsideMargin:
        return "outsideMargin";
      default:
        return horzOrigin.ToString().ToLower();
    }
  }

  private string GetHorizOriginAsString(HorizontalOrigin horzOrigin)
  {
    switch (horzOrigin)
    {
      case HorizontalOrigin.Character:
        return "char";
      case HorizontalOrigin.LeftMargin:
        return "left-margin-area";
      case HorizontalOrigin.RightMargin:
        return "right-margin-area";
      case HorizontalOrigin.InsideMargin:
        return "inner-margin-area";
      case HorizontalOrigin.OutsideMargin:
        return "outer-margin-area";
      default:
        return horzOrigin.ToString().ToLower();
    }
  }

  private void SerializeInlinePicture(ParagraphItem item)
  {
    ShapeCommon shapeCommon1;
    ShapeCommon shapeCommon2;
    switch (item)
    {
      case WChart _:
        shapeCommon1 = (ShapeCommon) (item as WChart);
        goto label_5;
      case WTextBox _:
        shapeCommon2 = (ShapeCommon) (item as WTextBox).Shape;
        break;
      default:
        shapeCommon2 = item as ShapeCommon;
        break;
    }
    shapeCommon1 = shapeCommon2;
label_5:
    this.m_writer.WriteStartElement("inline", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteStartElement("extent", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) shapeCommon1.Width * (double) shapeCommon1.WidthScale / 100.0 * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) shapeCommon1.Height * (double) shapeCommon1.HeightScale / 100.0 * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    if (item is ShapeBase)
    {
      ShapeBase shapeBase = item as ShapeBase;
      if (shapeBase.DocxProps.ContainsKey("effectExtent"))
        this.SerializeDocxProps(shapeBase.DocxProps, "effectExtent");
    }
    if (item is WChart)
      this.SerializeChartGraphicData(item as WChart);
    else
      this.SerializeShapeDrawingGraphics(item);
    this.m_writer.WriteEndElement();
  }

  private void SerializeShapeDrawingGraphics(ParagraphItem item)
  {
    ShapeBase shapeBase = item is WTextBox ? (ShapeBase) (item as WTextBox).Shape : item as ShapeBase;
    this.m_writer.WriteStartElement("wp", "docPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    int nextDocPrId = this.GetNextDocPrID();
    this.m_writer.WriteAttributeString("id", nextDocPrId.ToString());
    string str = "";
    if (shapeBase.Name != null && shapeBase.Name.Length > 0)
    {
      str = shapeBase.Name;
    }
    else
    {
      switch (shapeBase)
      {
        case Shape _:
          str = (shapeBase as Shape).AutoShapeType.ToString();
          break;
        case GroupShape _:
          str = shapeBase.Name = "Group " + nextDocPrId.ToString();
          break;
      }
    }
    this.m_writer.WriteAttributeString("name", str);
    this.m_writer.WriteAttributeString("title", shapeBase.Title);
    if (shapeBase.AlternativeText != null)
      this.m_writer.WriteAttributeString("descr", shapeBase.AlternativeText);
    if (item is WTextBox && !(item as WTextBox).Visible || !shapeBase.Visible)
      this.m_writer.WriteAttributeString("hidden", "1");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "graphic", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "graphicData", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (item is GroupShape)
    {
      this.m_writer.WriteAttributeString("uri", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      this.m_writer.WriteStartElement("wpg", "wgp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      this.m_writer.WriteStartElement("wpg", "cNvGrpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("wpg", "grpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
      this.m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((shapeBase as GroupShape).FlipHorizontal)
        this.m_writer.WriteAttributeString("flipH", "1");
      if ((shapeBase as GroupShape).FlipVertical)
        this.m_writer.WriteAttributeString("flipV", "1");
      if ((double) (shapeBase as GroupShape).Rotation != 0.0)
        this.m_writer.WriteAttributeString("rot", ((long) ((double) this.GetRotationAngle((shapeBase as GroupShape).Rotation) * 60000.0)).ToString());
      this.m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("x", "0");
      this.m_writer.WriteAttributeString("y", "0");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) shapeBase.Width * (double) shapeBase.WidthScale / 100.0 * 12700.0)).ToString());
      this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) shapeBase.Height * (double) shapeBase.HeightScale / 100.0 * 12700.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("a", "chOff", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("x", ((int) Math.Round((double) (shapeBase as GroupShape).X * 12700.0)).ToString());
      this.m_writer.WriteAttributeString("y", ((int) Math.Round((double) (shapeBase as GroupShape).Y * 12700.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("a", "chExt", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) (shapeBase as GroupShape).ExtentXValue * 12700.0)).ToString());
      this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) (shapeBase as GroupShape).ExtentYValue * 12700.0)).ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      if (shapeBase is GroupShape)
      {
        GroupShape groupShape = shapeBase as GroupShape;
        if (groupShape.IsFillStyleInline)
        {
          if (groupShape.FillFormat.Fill)
          {
            switch (groupShape.FillFormat.FillType)
            {
              case FillType.FillPatterned:
                this.SerializePatternFill(groupShape.FillFormat);
                break;
              case FillType.FillGradient:
                this.SerializeGradientFill(groupShape.FillFormat.GradientFill);
                break;
              case FillType.FillTextured:
              case FillType.FillPicture:
                Entity baseEntity = this.GetBaseEntity((Entity) groupShape);
                this.SerializeBlipFill(groupShape.FillFormat, baseEntity);
                break;
              default:
                this.SerializeSolidFill(groupShape.FillFormat.Color, groupShape.FillFormat.Transparency);
                break;
            }
          }
          else
          {
            this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
            this.m_writer.WriteEndElement();
          }
        }
        if (groupShape.IsLineStyleInline)
        {
          this.m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
          if (groupShape.LineFormat.InsetPen)
            this.m_writer.WriteAttributeString("algn", "in");
          this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle(groupShape.LineFormat.LineCap, false));
          this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle(groupShape.LineFormat.Style, false));
          this.m_writer.WriteAttributeString("w", (groupShape.LineFormat.Weight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          if (groupShape.LineFormat.HasKey(12))
          {
            if (groupShape.LineFormat.Line)
            {
              if (groupShape.LineFormat.LineFormatType == LineFormatType.Gradient)
                this.SerializeGradientFill(groupShape.LineFormat.GradientFill);
              else if (groupShape.LineFormat.LineFormatType == LineFormatType.Patterned)
                this.SerializePatternFill(groupShape.LineFormat);
              else if (!groupShape.LineFormat.Color.IsEmpty)
                this.SerializeSolidFill(groupShape.LineFormat.Color, groupShape.LineFormat.Transparency);
            }
            else
            {
              this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
              this.m_writer.WriteEndElement();
            }
          }
          this.m_writer.WriteEndElement();
        }
        if (groupShape.EffectList.Count > 0)
        {
          bool flag = true;
          for (int index = 0; index < groupShape.EffectList.Count; ++index)
          {
            if (groupShape.EffectList[index] != null)
            {
              if (flag && groupShape.EffectList[index].IsEffectListItem)
              {
                this.SerializeEffectList(groupShape.EffectList);
                flag = false;
              }
              if (groupShape.EffectList[index].IsSceneProperties && groupShape.IsScenePropertiesInline)
                this.SerializeThreeDSceneEffects(groupShape.EffectList[index].ThreeDFormat);
              if (groupShape.EffectList[index].IsShapeProperties && groupShape.IsShapePropertiesInline)
                this.SerializeThreeDShapeEffects(groupShape.EffectList[index].ThreeDFormat);
            }
          }
        }
      }
      this.m_writer.WriteEndElement();
    }
    switch (shapeBase)
    {
      case Shape _:
        this.SerializeShape((ShapeCommon) shapeBase, item);
        break;
      case GroupShape _:
        foreach (ParagraphItem childShape1 in (CollectionImpl) (shapeBase as GroupShape).ChildShapes)
        {
          if (childShape1 is ChildGroupShape)
          {
            this.m_writer.WriteStartElement("wpg", "grpSp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
            this.SerializeNestedGroupShape(childShape1 as ChildGroupShape);
            if ((childShape1 as ChildGroupShape).ChildShapes.Count > 0)
            {
              foreach (ChildShape childShape2 in (CollectionImpl) (childShape1 as ChildGroupShape).ChildShapes)
              {
                if (childShape2 is ChildGroupShape)
                {
                  this.m_writer.WriteStartElement("wpg", "grpSp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
                  this.SerializeNestedGroupShape(childShape2 as ChildGroupShape);
                  this.SerializeChildGroupShape(childShape2 as ChildGroupShape, item);
                  this.m_writer.WriteEndElement();
                }
                else if (childShape2 != null)
                  this.SerializeChildShape(childShape2, item);
              }
            }
            this.m_writer.WriteEndElement();
          }
          else if (childShape1 is ChildShape)
            this.SerializeChildShape(childShape1 as ChildShape, item);
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        break;
    }
  }

  private void SerializeChildGroupShape(ChildGroupShape innerChildShape, ParagraphItem item)
  {
    foreach (ChildShape childShape in (CollectionImpl) innerChildShape.ChildShapes)
    {
      if (childShape.IsPicture)
        this.SerializeChildGroupPicture(childShape);
      else if (childShape.Chart != null)
      {
        this.m_hasChart = true;
        this.SerializeChildGroupChart(childShape.Chart, childShape);
      }
      else if (childShape.XmlParagraphItem != null)
        this.SerializeXmlParagraphItem(childShape.XmlParagraphItem, true);
      else if (childShape is ChildGroupShape)
      {
        this.m_writer.WriteStartElement("wpg", "grpSp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
        this.SerializeNestedGroupShape(childShape as ChildGroupShape);
        this.SerializeChildGroupShape(childShape as ChildGroupShape, item);
        this.m_writer.WriteEndElement();
      }
      else
        this.SerializeChildShape(childShape, item);
    }
  }

  private void SerializeChildShape(ChildShape childShape, ParagraphItem item)
  {
    if (childShape.IsPicture)
      this.SerializeChildGroupPicture(childShape);
    else if (childShape.Chart != null)
    {
      this.m_hasChart = true;
      this.SerializeChildGroupChart(childShape.Chart, childShape);
    }
    else if (childShape.XmlParagraphItem != null)
      this.SerializeXmlParagraphItem(childShape.XmlParagraphItem, true);
    else
      this.SerializeShape(childShape, item);
  }

  private void SerializeChildGroupChart(WChart chart, ChildShape childShape)
  {
    this.m_writer.WriteStartElement("wpg", "graphicFrame", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteStartElement("wpg", "cNvPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.GetNextDocPrID();
    this.m_writer.WriteAttributeString("id", childShape.ShapeID.ToString());
    this.m_writer.WriteAttributeString("name", childShape.Name == null || childShape.Name.Length <= 0 ? childShape.EntityType.ToString() : childShape.Name);
    if (!string.IsNullOrEmpty(childShape.Title))
      this.m_writer.WriteAttributeString("title", childShape.Title);
    else
      this.m_writer.WriteAttributeString("title", string.Empty);
    if (childShape.AlternativeText != null)
      this.m_writer.WriteAttributeString("descr", childShape.AlternativeText);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wpg", "cNvFrPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wpg", "xfrm", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", (childShape.X * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("y", (childShape.Y * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) childShape.Width * (double) childShape.WidthScale / 100.0 * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) childShape.Height * (double) childShape.HeightScale / 100.0 * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    string nextRelationShipId = this.GetNextRelationShipID();
    Entity chartBaseEntity = this.GetChartBaseEntity((Entity) chart);
    if (chartBaseEntity is HeaderFooter && !this.HFChartCollection.ContainsKey(nextRelationShipId))
      this.HFChartCollection.Add(nextRelationShipId, chart);
    if (chartBaseEntity is WFootnote)
    {
      if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Footnote && !this.FootnoteChartCollection.ContainsKey(nextRelationShipId))
        this.FootnoteChartCollection.Add(nextRelationShipId, chart);
      else if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Endnote && !this.EndnoteChartCollection.ContainsKey(nextRelationShipId))
        this.EndnoteChartCollection.Add(nextRelationShipId, chart);
    }
    if (chartBaseEntity is WComment && !this.CommentsChartCollection.ContainsKey(nextRelationShipId))
      this.CommentsChartCollection.Add(nextRelationShipId, chart);
    if (!(chartBaseEntity is HeaderFooter) && !(chartBaseEntity is WFootnote) && !(chartBaseEntity is WComment))
      this.DocumentChartCollection.Add(nextRelationShipId, chart);
    if (!this.IsWord2003ML)
      this.SerializeChartElements(chart, nextRelationShipId);
    this.m_writer.WriteStartElement("a", "graphic", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "graphicData", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("uri", "http://schemas.openxmlformats.org/drawingml/2006/chart");
    this.m_writer.WriteStartElement("c", nameof (chart), "http://schemas.openxmlformats.org/drawingml/2006/chart");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (this.ChartRelationId.ContainsKey(nextRelationShipId))
      return;
    this.ChartRelationId.Add(nextRelationShipId, chart);
  }

  private void SerializeChildGroupPicture(ChildShape picture)
  {
    string empty = string.Empty;
    string str = this.UpdateShapeId(picture);
    picture.ShapeID = (long) this.GetNextDocPrID();
    this.m_writer.WriteStartElement("pic", "pic", "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("pic", "nvPicPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("pic", "cNvPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("id", picture.ShapeID.ToString());
    this.m_writer.WriteAttributeString("name", picture.Name.ToString());
    this.m_writer.WriteAttributeString("descr", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pic", "cNvPicPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("a", "picLocks", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("noChangeAspect", "1");
    this.m_writer.WriteAttributeString("noChangeArrowheads", "1");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pic", "blipFill", "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("a", "blip", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("r", "embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
    if (picture.FillFormat.FillType == FillType.FillPicture)
    {
      Entity baseEntity = ((Entity) picture).GetBaseEntity((Entity) picture);
      this.SerializeBlipFill(picture.FillFormat, baseEntity, (WPicture) null, true);
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "srcRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (picture.FillFormat.SourceRectangle != null)
      this.SerializeTileRectange(picture.FillFormat.SourceRectangle);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "stretch", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "fillRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pic", "spPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("bwMode", "auto");
    this.m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
    if ((double) picture.Rotation != 0.0)
      this.m_writer.WriteAttributeString("rot", ((long) ((double) this.GetRotationAngle(picture.Rotation) * 60000.0)).ToString());
    this.m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", Math.Round((double) picture.X * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("y", Math.Round((double) picture.Y * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) picture.Width * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) picture.Height * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "prstGeom", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", "rect");
    this.m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (picture.DocxPictureVisualProps.Count > 0)
    {
      this.SerializeDocxProps(picture.DocxPictureVisualProps, "ln");
      this.SerializeDocxProps(picture.DocxPictureVisualProps, "effectLst");
      this.SerializeDocxProps(picture.DocxPictureVisualProps, "scene3d");
      this.SerializeDocxProps(picture.DocxPictureVisualProps, "sp3d");
      this.SerializeDocxProps(picture.DocxPictureVisualProps, "extLst");
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeNestedGroupShape(ChildGroupShape childGroupShape)
  {
    this.m_writer.WriteStartElement("wpg", "cNvPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("id", childGroupShape.ShapeID.ToString());
    if (childGroupShape.Name != null)
    {
      this.m_writer.WriteAttributeString("name", childGroupShape.Name.ToString());
    }
    else
    {
      childGroupShape.Name = "Group " + this.GetNextDocPrID().ToString();
      this.m_writer.WriteAttributeString("name", childGroupShape.Name.ToString());
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wpg", "cNvGrpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wpg", "grpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (childGroupShape.FlipHorizantal)
      this.m_writer.WriteAttributeString("flipH", "1");
    if (childGroupShape.FlipVertical)
      this.m_writer.WriteAttributeString("flipV", "1");
    if ((double) childGroupShape.Rotation != 0.0)
      this.m_writer.WriteAttributeString("rot", ((long) ((double) this.GetRotationAngle(childGroupShape.Rotation) * 60000.0)).ToString());
    this.m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", ((int) Math.Round((double) childGroupShape.OffsetXValue * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("y", ((int) Math.Round((double) childGroupShape.OffsetYValue * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) childGroupShape.Width * (double) childGroupShape.WidthScale / 100.0 * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) childGroupShape.Height * (double) childGroupShape.HeightScale / 100.0 * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "chOff", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", ((int) Math.Round((double) childGroupShape.X * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("y", ((int) Math.Round((double) childGroupShape.Y * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "chExt", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) childGroupShape.ExtentXValue * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) childGroupShape.ExtentYValue * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (childGroupShape != null)
    {
      ChildGroupShape childGroupShape1 = childGroupShape;
      if (childGroupShape1.IsFillStyleInline)
      {
        if (childGroupShape1.FillFormat.Fill)
        {
          switch (childGroupShape1.FillFormat.FillType)
          {
            case FillType.FillPatterned:
              this.SerializePatternFill(childGroupShape1.FillFormat);
              break;
            case FillType.FillGradient:
              this.SerializeGradientFill(childGroupShape1.FillFormat.GradientFill);
              break;
            case FillType.FillTextured:
            case FillType.FillPicture:
              Entity baseEntity = this.GetBaseEntity((Entity) childGroupShape1);
              this.SerializeBlipFill(childGroupShape1.FillFormat, baseEntity);
              break;
            default:
              this.SerializeSolidFill(childGroupShape1.FillFormat.Color, childGroupShape1.FillFormat.Transparency);
              break;
          }
        }
        else
        {
          this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteEndElement();
        }
      }
      if (childGroupShape1.DocxProps.ContainsKey("grpFill"))
        this.SerializeDocxStream(childGroupShape1.DocxProps, "grpFill");
      if (childGroupShape1.IsLineStyleInline)
      {
        this.m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
        if (childGroupShape1.LineFormat.InsetPen)
          this.m_writer.WriteAttributeString("algn", "in");
        this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle(childGroupShape1.LineFormat.LineCap, false));
        this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle(childGroupShape1.LineFormat.Style, false));
        this.m_writer.WriteAttributeString("w", (childGroupShape1.LineFormat.Weight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        if (childGroupShape1.LineFormat.HasKey(12))
        {
          if (childGroupShape1.LineFormat.Line)
          {
            if (childGroupShape1.LineFormat.LineFormatType == LineFormatType.Gradient)
              this.SerializeGradientFill(childGroupShape1.LineFormat.GradientFill);
            else if (childGroupShape1.LineFormat.LineFormatType == LineFormatType.Patterned)
              this.SerializePatternFill(childGroupShape1.LineFormat);
            else if (!childGroupShape1.LineFormat.Color.IsEmpty)
              this.SerializeSolidFill(childGroupShape1.LineFormat.Color, childGroupShape1.LineFormat.Transparency);
          }
          else
          {
            this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
            this.m_writer.WriteEndElement();
          }
        }
        this.m_writer.WriteEndElement();
      }
      if (childGroupShape1.EffectList.Count > 0)
      {
        bool flag = true;
        for (int index = 0; index < childGroupShape1.EffectList.Count; ++index)
        {
          if (childGroupShape1.EffectList[index] != null)
          {
            if (flag && childGroupShape1.EffectList[index].IsEffectListItem)
            {
              this.SerializeEffectList(childGroupShape1.EffectList);
              flag = false;
            }
            if (childGroupShape1.EffectList[index].IsSceneProperties && childGroupShape1.IsScenePropertiesInline)
              this.SerializeThreeDSceneEffects(childGroupShape1.EffectList[index].ThreeDFormat);
            if (childGroupShape1.EffectList[index].IsShapeProperties && childGroupShape1.IsShapePropertiesInline)
              this.SerializeThreeDShapeEffects(childGroupShape1.EffectList[index].ThreeDFormat);
          }
        }
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeShape(ShapeCommon shapeBase, ParagraphItem item)
  {
    this.m_writer.WriteAttributeString("uri", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("wps", "wsp", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    if (shapeBase is Shape && (shapeBase as Shape).TextFrame.TextDirection == TextDirection.HorizontalFarEast)
      this.m_writer.WriteAttributeString("normalEastAsianFlow", "1");
    this.m_writer.WriteStartElement("wps", "cNvSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wps", "spPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("a", "xfrm", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    switch (shapeBase)
    {
      case Shape _:
        if ((shapeBase as Shape).FlipHorizontal)
          this.m_writer.WriteAttributeString("flipH", "1");
        if ((shapeBase as Shape).FlipVertical)
          this.m_writer.WriteAttributeString("flipV", "1");
        if ((double) (shapeBase as Shape).Rotation != 0.0)
        {
          this.m_writer.WriteAttributeString("rot", ((long) ((double) this.GetRotationAngle((shapeBase as Shape).Rotation) * 60000.0)).ToString());
          break;
        }
        break;
      case GroupShape _:
        if ((shapeBase as GroupShape).FlipHorizontal)
          this.m_writer.WriteAttributeString("flipH", "1");
        if ((shapeBase as GroupShape).FlipVertical)
          this.m_writer.WriteAttributeString("flipV", "1");
        if ((double) (shapeBase as GroupShape).Rotation != 0.0)
        {
          this.m_writer.WriteAttributeString("rot", ((long) ((double) this.GetRotationAngle((shapeBase as GroupShape).Rotation) * 60000.0)).ToString());
          break;
        }
        break;
    }
    this.m_writer.WriteStartElement("a", "off", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    int num1 = (int) Math.Round((double) shapeBase.Width * (double) shapeBase.WidthScale / 100.0 * 12700.0);
    int num2 = (int) Math.Round((double) shapeBase.Height * (double) shapeBase.HeightScale / 100.0 * 12700.0);
    this.m_writer.WriteAttributeString("x", "0");
    this.m_writer.WriteAttributeString("y", "0");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "ext", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("cx", num1.ToString());
    this.m_writer.WriteAttributeString("cy", num2.ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if ((shapeBase as Shape).Path2DList == null)
    {
      this.m_writer.WriteStartElement("a", "prstGeom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (shapeBase is Shape)
      {
        this.m_writer.WriteAttributeString("prst", this.AutoShapeHelper.GetAutoShapeString(this.AutoShapeHelper.GetAutoShapeConstant((shapeBase as Shape).AutoShapeType)));
        this.m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
        foreach (KeyValuePair<string, string> keyValuePair in (shapeBase as Shape).ShapeGuide)
        {
          this.m_writer.WriteStartElement("a", "gd", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("name", keyValuePair.Key);
          this.m_writer.WriteAttributeString("fmla", keyValuePair.Value);
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    else
      this.SerializeCustomGeometry((ShapeCommon) (shapeBase as Shape));
    if (shapeBase is Shape && (shapeBase as Shape).DocxProps.ContainsKey("grpFill"))
      this.SerializeDocxStream((shapeBase as Shape).DocxProps, "grpFill");
    if (shapeBase is Shape && (shapeBase as Shape).IsFillStyleInline)
    {
      Shape shape = shapeBase as Shape;
      if (shape.FillFormat.Fill)
      {
        switch (shape.FillFormat.FillType)
        {
          case FillType.FillPatterned:
            this.SerializePatternFill(shape.FillFormat);
            break;
          case FillType.FillGradient:
            this.SerializeGradientFill(shape.FillFormat.GradientFill);
            break;
          case FillType.FillTextured:
          case FillType.FillPicture:
            Entity baseEntity = this.GetBaseEntity((Entity) shape);
            this.SerializeBlipFill(shape.FillFormat, baseEntity);
            break;
          default:
            this.SerializeSolidFill(shape.FillFormat.Color, shape.FillFormat.Transparency);
            break;
        }
      }
      else
      {
        this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
    }
    else if (shapeBase is GroupShape && (shapeBase as GroupShape).IsFillStyleInline)
    {
      GroupShape groupShape = shapeBase as GroupShape;
      if ((shapeBase as GroupShape).FillFormat.Fill)
      {
        switch ((shapeBase as GroupShape).FillFormat.FillType)
        {
          case FillType.FillPatterned:
            this.SerializePatternFill(groupShape.FillFormat);
            break;
          case FillType.FillGradient:
            this.SerializeGradientFill(groupShape.FillFormat.GradientFill);
            break;
          case FillType.FillTextured:
          case FillType.FillPicture:
            Entity baseEntity = this.GetBaseEntity((Entity) groupShape);
            this.SerializeBlipFill(groupShape.FillFormat, baseEntity);
            break;
          default:
            this.SerializeSolidFill(groupShape.FillFormat.Color, groupShape.FillFormat.Transparency);
            break;
        }
      }
      else
      {
        this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
    }
    if (shapeBase is Shape && (shapeBase as Shape).DocxProps.ContainsKey("grpFill"))
      this.SerializeDocxStream((shapeBase as Shape).DocxProps, "grpFill");
    if (shapeBase is Shape && (shapeBase as Shape).IsLineStyleInline)
    {
      this.m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((shapeBase as Shape).LineFormat.InsetPen)
        this.m_writer.WriteAttributeString("algn", "in");
      this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle((shapeBase as Shape).LineFormat.LineCap, false));
      this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle((shapeBase as Shape).LineFormat.Style, false));
      this.m_writer.WriteAttributeString("w", ((shapeBase as Shape).LineFormat.Weight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((shapeBase as Shape).LineFormat.HasKey(12))
      {
        if ((shapeBase as Shape).LineFormat.Line)
        {
          if ((shapeBase as Shape).LineFormat.LineFormatType == LineFormatType.Gradient)
            this.SerializeGradientFill((shapeBase as Shape).LineFormat.GradientFill);
          else if ((shapeBase as Shape).LineFormat.LineFormatType == LineFormatType.Patterned)
            this.SerializePatternFill((shapeBase as Shape).LineFormat);
          else if (!(shapeBase as Shape).LineFormat.Color.IsEmpty)
            this.SerializeSolidFill((shapeBase as Shape).LineFormat.Color, (shapeBase as Shape).LineFormat.Transparency);
        }
        else
        {
          this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteEndElement();
        }
      }
      if ((shapeBase as Shape).LineFormat.DocxProps.ContainsKey("custDash"))
      {
        this.SerializeDocxStream((shapeBase as Shape).LineFormat.DocxProps, "custDash");
      }
      else
      {
        this.m_writer.WriteStartElement("prstDash", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetDashStyle((shapeBase as Shape).LineFormat.DashStyle, false));
        this.m_writer.WriteEndElement();
      }
      if ((shapeBase as Shape).LineFormat.LineJoin == LineJoin.Miter && !string.IsNullOrEmpty((shapeBase as Shape).LineFormat.MiterJoinLimit))
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle((shapeBase as Shape).LineFormat.LineJoin));
        this.m_writer.WriteAttributeString("lim", (shapeBase as Shape).LineFormat.MiterJoinLimit);
        this.m_writer.WriteEndElement();
      }
      else if ((shapeBase as Shape).LineFormat.LineJoin != LineJoin.Miter)
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle((shapeBase as Shape).LineFormat.LineJoin));
        this.m_writer.WriteEndElement();
      }
      if (this.IsConnectorShape((shapeBase as Shape).AutoShapeType))
        this.SerializeConnectorLineProperties((shapeBase as Shape).LineFormat);
      if ((shapeBase as Shape).LineFormat.DocxProps.ContainsKey("extLst"))
        this.SerializeDocxStream((shapeBase as Shape).LineFormat.DocxProps, "extLst");
      this.m_writer.WriteEndElement();
    }
    else if (shapeBase is GroupShape && (shapeBase as GroupShape).IsLineStyleInline)
    {
      this.m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((shapeBase as GroupShape).LineFormat.InsetPen)
        this.m_writer.WriteAttributeString("algn", "in");
      this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle((shapeBase as GroupShape).LineFormat.LineCap, false));
      this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle((shapeBase as GroupShape).LineFormat.Style, false));
      this.m_writer.WriteAttributeString("w", ((shapeBase as GroupShape).LineFormat.Weight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((shapeBase as GroupShape).LineFormat.HasKey(12))
      {
        if ((shapeBase as GroupShape).LineFormat.Line)
        {
          if ((shapeBase as GroupShape).LineFormat.LineFormatType == LineFormatType.Gradient)
            this.SerializeGradientFill((shapeBase as GroupShape).LineFormat.GradientFill);
          else if ((shapeBase as GroupShape).LineFormat.LineFormatType == LineFormatType.Patterned)
            this.SerializePatternFill((shapeBase as GroupShape).LineFormat);
          else if (!(shapeBase as GroupShape).LineFormat.Color.IsEmpty)
            this.SerializeSolidFill((shapeBase as GroupShape).LineFormat.Color, (shapeBase as GroupShape).LineFormat.Transparency);
        }
        else
        {
          this.m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteEndElement();
        }
      }
      if ((shapeBase as GroupShape).LineFormat.DocxProps.ContainsKey("custDash"))
      {
        this.SerializeDocxStream((shapeBase as GroupShape).LineFormat.DocxProps, "custDash");
      }
      else
      {
        this.m_writer.WriteStartElement("prstDash", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetDashStyle((shapeBase as GroupShape).LineFormat.DashStyle, false));
        this.m_writer.WriteEndElement();
      }
      if ((shapeBase as GroupShape).LineFormat.LineJoin == LineJoin.Miter && !string.IsNullOrEmpty((shapeBase as GroupShape).LineFormat.MiterJoinLimit))
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle((shapeBase as GroupShape).LineFormat.LineJoin));
        this.m_writer.WriteAttributeString("lim", (shapeBase as GroupShape).LineFormat.MiterJoinLimit);
        this.m_writer.WriteEndElement();
      }
      else if ((shapeBase as GroupShape).LineFormat.LineJoin != LineJoin.Miter)
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle((shapeBase as GroupShape).LineFormat.LineJoin));
        this.m_writer.WriteEndElement();
      }
      if ((shapeBase as GroupShape).LineFormat.DocxProps.ContainsKey("extLst"))
        this.SerializeDocxStream((shapeBase as GroupShape).LineFormat.DocxProps, "extLst");
      this.m_writer.WriteEndElement();
    }
    if (shapeBase is Shape && (shapeBase as Shape).EffectList.Count > 0)
    {
      bool flag = true;
      for (int index = 0; index < (shapeBase as Shape).EffectList.Count; ++index)
      {
        if ((shapeBase as Shape).EffectList[index] != null)
        {
          if (flag && (shapeBase as Shape).EffectList[index].IsEffectListItem)
          {
            this.SerializeEffectList((shapeBase as Shape).EffectList);
            flag = false;
          }
          if ((shapeBase as Shape).EffectList[index].IsSceneProperties && (shapeBase as Shape).IsScenePropertiesInline)
            this.SerializeThreeDSceneEffects((shapeBase as Shape).EffectList[index].ThreeDFormat);
          if ((shapeBase as Shape).EffectList[index].IsShapeProperties && (shapeBase as Shape).IsShapePropertiesInline)
            this.SerializeThreeDShapeEffects((shapeBase as Shape).EffectList[index].ThreeDFormat);
        }
      }
    }
    else if (shapeBase is GroupShape && (shapeBase as GroupShape).EffectList.Count > 0)
    {
      bool flag = true;
      for (int index = 0; index < (shapeBase as GroupShape).EffectList.Count; ++index)
      {
        if ((shapeBase as GroupShape).EffectList[index] != null)
        {
          if (flag && (shapeBase as GroupShape).EffectList[index].IsEffectListItem)
          {
            this.SerializeEffectList((shapeBase as GroupShape).EffectList);
            flag = false;
          }
          if ((shapeBase as GroupShape).EffectList[index].IsSceneProperties && (shapeBase as GroupShape).IsScenePropertiesInline)
            this.SerializeThreeDSceneEffects((shapeBase as GroupShape).EffectList[index].ThreeDFormat);
          if ((shapeBase as GroupShape).EffectList[index].IsShapeProperties && (shapeBase as GroupShape).IsShapePropertiesInline)
            this.SerializeThreeDShapeEffects((shapeBase as GroupShape).EffectList[index].ThreeDFormat);
        }
      }
    }
    if (shapeBase.DocxProps.ContainsKey("extLst"))
      this.SerializeDocxStream(shapeBase.DocxProps, "extLst");
    this.m_writer.WriteEndElement();
    switch (shapeBase)
    {
      case Shape _ when (shapeBase as Shape).ShapeStyleReferences != null && (shapeBase as Shape).ShapeStyleReferences.Count > 0:
        this.SerializeAutoShapeStyles(shapeBase as Shape);
        break;
      case GroupShape _ when (shapeBase as GroupShape).ShapeStyleReferences != null && (shapeBase as GroupShape).ShapeStyleReferences.Count > 0:
        this.SerializeAutoShapeStyles(shapeBase as GroupShape);
        break;
    }
    WTextBody textBody = item is WTextBox ? (item as WTextBox).TextBoxBody : (item as Shape).TextBody;
    if (textBody.Items.Count > 0)
      this.SerializeTextBoxContent(textBody);
    this.SerializeBodyProperties(shapeBase as Shape);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeCustomGeometry(ShapeCommon shapeCommon)
  {
    this.m_writer.WriteStartElement("a", "custGeom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "avLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAVList(shapeCommon);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "gdLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeGuideList(shapeCommon);
    this.m_writer.WriteEndElement();
    if (shapeCommon.DocxProps != null && shapeCommon.DocxProps.Count != 0)
    {
      if (shapeCommon.DocxProps.ContainsKey("ahLst"))
        this.SerializeDocxStream(shapeCommon.DocxProps, "ahLst");
      if (shapeCommon.DocxProps.ContainsKey("cxnLst"))
        this.SerializeDocxStream(shapeCommon.DocxProps, "cxnLst");
      if (shapeCommon.DocxProps.ContainsKey("rect"))
        this.SerializeDocxStream(shapeCommon.DocxProps, "rect");
    }
    this.m_writer.WriteStartElement("a", "pathLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    foreach (Path2D path2D in shapeCommon is Shape ? (shapeCommon as Shape).Path2DList : (shapeCommon as ChildShape).Path2DList)
    {
      this.m_writer.WriteStartElement("a", "path", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("w", path2D.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("h", path2D.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.SerializePathElements(path2D.PathElements);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializePathElements(List<string> pathElements)
  {
    for (int index1 = 0; index1 < pathElements.Count; ++index1)
    {
      switch (int.Parse(pathElements[index1]))
      {
        case 1:
          this.m_writer.WriteStartElement("a", "close", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteEndElement();
          ++index1;
          break;
        case 2:
          this.m_writer.WriteStartElement("a", "moveTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.SerializePoint(pathElements, index1 + 2);
          this.m_writer.WriteEndElement();
          index1 += 3;
          break;
        case 3:
          this.m_writer.WriteStartElement("a", "lnTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.SerializePoint(pathElements, index1 + 2);
          this.m_writer.WriteEndElement();
          index1 += 3;
          break;
        case 4:
          this.m_writer.WriteStartElement("a", "arcTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          int index2 = index1 + 2;
          this.m_writer.WriteAttributeString("wR", pathElements[index2]);
          this.m_writer.WriteAttributeString("hR", pathElements[index2 + 1]);
          this.m_writer.WriteAttributeString("stAng", pathElements[index2 + 2]);
          this.m_writer.WriteAttributeString("swAng", pathElements[index2 + 3]);
          this.m_writer.WriteEndElement();
          index1 = index2 + 3;
          break;
        case 5:
          this.m_writer.WriteStartElement("a", "quadBezTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.SerializePoint(pathElements, index1 + 2);
          this.SerializePoint(pathElements, index1 + 4);
          this.SerializePoint(pathElements, index1 + 6);
          this.m_writer.WriteEndElement();
          index1 += 5;
          break;
        case 6:
          this.m_writer.WriteStartElement("a", "cubicBezTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.SerializePoint(pathElements, index1 + 2);
          this.SerializePoint(pathElements, index1 + 4);
          this.SerializePoint(pathElements, index1 + 6);
          this.m_writer.WriteEndElement();
          index1 += 7;
          break;
      }
    }
  }

  private void SerializeAVList(ShapeCommon shapeCommon)
  {
    foreach (KeyValuePair<string, string> keyValuePair in shapeCommon is Shape ? (shapeCommon as Shape).GetAvList() : (shapeCommon as ChildShape).GetAvList())
    {
      this.m_writer.WriteStartElement("a", "gd", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("name", keyValuePair.Key);
      this.m_writer.WriteAttributeString("fmla", keyValuePair.Value);
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeGuideList(ShapeCommon shapeCommon)
  {
    foreach (KeyValuePair<string, string> keyValuePair in shapeCommon is Shape ? (shapeCommon as Shape).GetGuideList() : (shapeCommon as ChildShape).GetGuideList())
    {
      this.m_writer.WriteStartElement("a", "gd", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("name", keyValuePair.Key);
      this.m_writer.WriteAttributeString("fmla", keyValuePair.Value);
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializePoint(List<string> pathElements, int k)
  {
    this.m_writer.WriteStartElement("a", "pt", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", pathElements[k]);
    this.m_writer.WriteAttributeString("y", pathElements[k + 1]);
    this.m_writer.WriteEndElement();
  }

  private void SerializeShape(ChildShape shape, ParagraphItem item)
  {
    this.m_writer.WriteStartElement("wps", "wsp", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    if (shape.TextFrame.TextDirection == TextDirection.HorizontalFarEast)
      this.m_writer.WriteAttributeString("normalEastAsianFlow", "1");
    this.m_writer.WriteStartElement("wps", "cNvPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    shape.ShapeID = (long) this.GetNextShapeID();
    this.m_writer.WriteAttributeString("id", shape.ShapeID.ToString());
    string str = string.Empty;
    if (shape.Name != null && shape.Name.Length > 0)
      str = shape.Name;
    else if (shape != null)
      str = $"{shape.AutoShapeType.ToString()} {shape.ShapeID.ToString()}";
    this.m_writer.WriteAttributeString("name", str);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wps", "cNvCnPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("wps", "spPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (shape.FlipHorizantal)
      this.m_writer.WriteAttributeString("flipH", "1");
    if (shape.FlipVertical)
      this.m_writer.WriteAttributeString("flipV", "1");
    if ((double) shape.Rotation != 0.0)
      this.m_writer.WriteAttributeString("rot", ((long) ((double) this.GetRotationAngle(shape.Rotation) * 60000.0)).ToString());
    int num1 = (int) Math.Round((double) shape.Width * (double) shape.WidthScale / 100.0 * 12700.0);
    int num2 = (int) Math.Round((double) shape.Height * (double) shape.HeightScale / 100.0 * 12700.0);
    this.m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", ((int) Math.Round((double) shape.X * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("y", ((int) Math.Round((double) shape.Y * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("cx", num1.ToString());
    this.m_writer.WriteAttributeString("cy", num2.ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (shape.Path2DList == null)
    {
      this.m_writer.WriteStartElement("a", "prstGeom", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (shape != null)
      {
        this.m_writer.WriteAttributeString("prst", this.AutoShapeHelper.GetAutoShapeString(this.AutoShapeHelper.GetAutoShapeConstant(shape.AutoShapeType)));
        this.m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
        foreach (KeyValuePair<string, string> keyValuePair in shape.ShapeGuide)
        {
          this.m_writer.WriteStartElement("a", "gd", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("name", keyValuePair.Key);
          this.m_writer.WriteAttributeString("fmla", keyValuePair.Value);
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    else
      this.SerializeCustomGeometry((ShapeCommon) shape);
    if (shape.DocxProps.ContainsKey("grpFill"))
      this.SerializeDocxStream(shape.DocxProps, "grpFill");
    if (shape.IsFillStyleInline)
    {
      if (shape.FillFormat.Fill)
      {
        switch (shape.FillFormat.FillType)
        {
          case FillType.FillPatterned:
            this.SerializePatternFill(shape.FillFormat);
            break;
          case FillType.FillGradient:
            this.SerializeGradientFill(shape.FillFormat.GradientFill);
            break;
          case FillType.FillTextured:
          case FillType.FillPicture:
            Entity baseEntity = this.GetBaseEntity((Entity) shape);
            this.SerializeBlipFill(shape.FillFormat, baseEntity);
            break;
          default:
            this.SerializeSolidFill(shape.FillFormat.Color, shape.FillFormat.Transparency);
            break;
        }
      }
      else
      {
        this.m_writer.WriteStartElement("noFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
    }
    if (shape.IsLineStyleInline)
    {
      this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (shape.LineFormat.InsetPen)
        this.m_writer.WriteAttributeString("algn", "in");
      this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle(shape.LineFormat.LineCap, false));
      this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle(shape.LineFormat.Style, false));
      this.m_writer.WriteAttributeString("w", (shape.LineFormat.Weight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.LineFormat.HasKey(12) && shape.LineFormat.LineFormatType != LineFormatType.None)
      {
        if (shape.LineFormat.Line)
        {
          if (shape.LineFormat.LineFormatType == LineFormatType.Gradient)
            this.SerializeGradientFill(shape.LineFormat.GradientFill);
          else if (shape.LineFormat.LineFormatType == LineFormatType.Patterned)
            this.SerializePatternFill(shape.LineFormat);
          else if (!shape.LineFormat.Color.IsEmpty)
            this.SerializeSolidFill(shape.LineFormat.Color, shape.LineFormat.Transparency);
        }
        else
        {
          this.m_writer.WriteStartElement("noFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteEndElement();
        }
      }
      if (shape.LineFormat.DocxProps.ContainsKey("custDash"))
      {
        this.SerializeDocxStream(shape.LineFormat.DocxProps, "custDash");
      }
      else
      {
        this.m_writer.WriteStartElement("prstDash", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetDashStyle(shape.LineFormat.DashStyle, false));
        this.m_writer.WriteEndElement();
      }
      if (shape.LineFormat.LineJoin == LineJoin.Miter && !string.IsNullOrEmpty(shape.LineFormat.MiterJoinLimit))
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle(shape.LineFormat.LineJoin));
        this.m_writer.WriteAttributeString("lim", shape.LineFormat.MiterJoinLimit);
        this.m_writer.WriteEndElement();
      }
      else if (shape.LineFormat.LineJoin != LineJoin.Miter)
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle(shape.LineFormat.LineJoin));
        this.m_writer.WriteEndElement();
      }
      if (this.IsConnectorShape(shape.AutoShapeType) || shape.AutoShapeType == ~AutoShapeType.Unknown && (shape.LineFormat.EndArrowheadStyle != ArrowheadStyle.ArrowheadNone || shape.LineFormat.BeginArrowheadStyle != ArrowheadStyle.ArrowheadNone))
        this.SerializeConnectorLineProperties(shape.LineFormat);
      if (shape.LineFormat.DocxProps.ContainsKey("extLst"))
        this.SerializeDocxStream(shape.LineFormat.DocxProps, "extLst");
      this.m_writer.WriteEndElement();
    }
    if (shape.EffectList.Count > 0)
    {
      bool flag = true;
      for (int index = 0; index < shape.EffectList.Count; ++index)
      {
        if (shape.EffectList[index] != null)
        {
          if (flag && shape.EffectList[index].IsEffectListItem)
          {
            this.SerializeEffectList(shape.EffectList);
            flag = false;
          }
          if (shape.EffectList[index].IsSceneProperties && shape.IsScenePropertiesInline)
            this.SerializeThreeDSceneEffects(shape.EffectList[index].ThreeDFormat);
          if (shape.EffectList[index].IsShapeProperties && shape.IsShapePropertiesInline)
            this.SerializeThreeDShapeEffects(shape.EffectList[index].ThreeDFormat);
        }
      }
    }
    if (shape.DocxProps.ContainsKey("extLst"))
      this.SerializeDocxStream(shape.DocxProps, "extLst");
    this.m_writer.WriteEndElement();
    if (shape.ShapeStyleReferences != null && shape.ShapeStyleReferences.Count > 0)
      this.SerializeAutoShapeStyles(shape);
    WTextBody textBody = shape != null ? shape.TextBody : (item as Shape).TextBody;
    if (textBody != null && textBody.Items.Count > 0)
      this.SerializeTextBoxContent(textBody);
    this.SerializeBodyProperties(shape);
    this.m_writer.WriteEndElement();
  }

  private void SerializeEffectList(List<EffectFormat> effectList)
  {
    this.m_writer.WriteStartElement("a", "effectLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < effectList.Count; ++index)
    {
      if (effectList[index].IsShadowEffect)
        this.SerializeShadowEffect(effectList[index].ShadowFormat);
      if (effectList[index].IsReflection)
        this.SerializeReflectionEffect(effectList[index].ReflectionFormat);
      if (effectList[index].IsGlowEffect)
      {
        this.m_writer.WriteStartElement("a", "glow", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        if (effectList[index].GlowFormat.IsInlineRadius)
          this.m_writer.WriteAttributeString("rad", ((int) Math.Round((double) effectList[index].GlowFormat.Radius * 12700.0)).ToString());
        if (effectList[index].GlowFormat.IsInlineColor)
        {
          this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.GetRGBCode(effectList[index].GlowFormat.Color));
          if (effectList[index].GlowFormat.IsInlineTransparency)
          {
            this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
            this.m_writer.WriteAttributeString("val", Math.Round((double) effectList[index].GlowFormat.Transparency * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
            this.m_writer.WriteEndElement();
          }
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
      if (effectList[index].IsSoftEdge)
      {
        this.m_writer.WriteStartElement("a", "softEdge", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        if (!effectList[index].NoSoftEdges)
          this.m_writer.WriteAttributeString("rad", ((int) Math.Round((double) effectList[index].SoftEdgeRadius * 12700.0)).ToString());
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeThreeDSceneEffects(ThreeDFormat threeDFormat)
  {
    this.m_writer.WriteStartElement("a", "scene3d", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (threeDFormat.HasBackdropEffect)
      this.SerializeBackdropEffect(threeDFormat);
    if (threeDFormat.HasCameraEffect)
      this.SerializeCameraEffect(threeDFormat);
    if (threeDFormat.HasLightRigEffect)
      this.SerializeLightRig(threeDFormat);
    if (threeDFormat.DocxProps.ContainsKey("extLst"))
      this.SerializeDocxStream(this.m_document.Themes.DocxProps, "extLst");
    this.m_writer.WriteEndElement();
  }

  private void SerializeBackdropEffect(ThreeDFormat threeDFormat)
  {
    this.m_writer.WriteStartElement("a", "backdrop", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (threeDFormat.PropertiesHash.ContainsKey(14) || threeDFormat.PropertiesHash.ContainsKey(15) || threeDFormat.PropertiesHash.ContainsKey(16 /*0x10*/))
    {
      this.m_writer.WriteStartElement("a", "anchor", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(14))
        this.m_writer.WriteAttributeString("x", ((int) Math.Round((double) threeDFormat.BackdropAnchorX * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(15))
        this.m_writer.WriteAttributeString("y", ((int) Math.Round((double) threeDFormat.BackdropAnchorY * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(16 /*0x10*/))
        this.m_writer.WriteAttributeString("z", ((int) Math.Round((double) threeDFormat.BackdropAnchorZ * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (threeDFormat.PropertiesHash.ContainsKey(17) || threeDFormat.PropertiesHash.ContainsKey(18) || threeDFormat.PropertiesHash.ContainsKey(19))
    {
      this.m_writer.WriteStartElement("a", "norm", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(17))
        this.m_writer.WriteAttributeString("dx", ((int) Math.Round((double) threeDFormat.BackdropNormalX * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(18))
        this.m_writer.WriteAttributeString("dy", ((int) Math.Round((double) threeDFormat.BackdropNormalY * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(19))
        this.m_writer.WriteAttributeString("dz", ((int) Math.Round((double) threeDFormat.BackdropNormalZ * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (threeDFormat.PropertiesHash.ContainsKey(20) || threeDFormat.PropertiesHash.ContainsKey(21) || threeDFormat.PropertiesHash.ContainsKey(22))
    {
      this.m_writer.WriteStartElement("a", "up", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(20))
        this.m_writer.WriteAttributeString("dx", ((int) Math.Round((double) threeDFormat.BackdropUpX * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(21))
        this.m_writer.WriteAttributeString("dy", ((int) Math.Round((double) threeDFormat.BackdropUpY * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(22))
        this.m_writer.WriteAttributeString("dz", ((int) Math.Round((double) threeDFormat.BackdropUpZ * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeCameraEffect(ThreeDFormat threeDFormat)
  {
    this.m_writer.WriteStartElement("a", "camera", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (threeDFormat.PropertiesHash.ContainsKey(24))
      this.m_writer.WriteAttributeString("prst", (char.ToLower(threeDFormat.CameraPresetType.ToString()[0]).ToString() + threeDFormat.CameraPresetType.ToString().Substring(1)).ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(23))
      this.m_writer.WriteAttributeString("fov", ((int) Math.Round((double) threeDFormat.FieldOfView * 12700.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (threeDFormat.PropertiesHash.ContainsKey(25))
      this.m_writer.WriteAttributeString("zoom", ((int) Math.Round((double) threeDFormat.Zoom)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (threeDFormat.PropertiesHash.ContainsKey(26) || threeDFormat.PropertiesHash.ContainsKey(27) || threeDFormat.PropertiesHash.ContainsKey(28))
    {
      this.m_writer.WriteStartElement("a", "rot", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(26))
      {
        double cameraRotationX = (double) threeDFormat.CameraRotationX;
        this.m_writer.WriteAttributeString("lat", ((int) ((double) threeDFormat.CameraRotationX * 60000.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      }
      if (threeDFormat.PropertiesHash.ContainsKey(27))
        this.m_writer.WriteAttributeString("lon", ((int) ((double) threeDFormat.CameraRotationY * 60000.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(28))
        this.m_writer.WriteAttributeString("rev", ((int) ((double) threeDFormat.CameraRotationZ * 60000.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeLightRig(ThreeDFormat threeDFormat)
  {
    this.m_writer.WriteStartElement("a", "lightRig", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (threeDFormat.PropertiesHash.ContainsKey(29))
      this.m_writer.WriteAttributeString("rig", (char.ToLower(threeDFormat.LightRigType.ToString()[0]).ToString() + threeDFormat.LightRigType.ToString().Substring(1)).ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(30))
      this.m_writer.WriteAttributeString("dir", threeDFormat.LightRigDirection.ToString().ToLower());
    if (threeDFormat.PropertiesHash.ContainsKey(31 /*0x1F*/) || threeDFormat.PropertiesHash.ContainsKey(32 /*0x20*/) || threeDFormat.PropertiesHash.ContainsKey(33))
    {
      this.m_writer.WriteStartElement("a", "rot", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(31 /*0x1F*/))
        this.m_writer.WriteAttributeString("lat", ((int) ((double) threeDFormat.LightRigRotationX * 60000.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(32 /*0x20*/))
        this.m_writer.WriteAttributeString("lon", ((int) ((double) threeDFormat.LightRigRotationY * 60000.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (threeDFormat.PropertiesHash.ContainsKey(33))
        this.m_writer.WriteAttributeString("rev", ((int) ((double) threeDFormat.LightRigRotationZ * 60000.0)).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeThreeDShapeEffects(ThreeDFormat threeDFormat)
  {
    this.m_writer.WriteStartElement("a", "sp3d", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (threeDFormat.PropertiesHash.ContainsKey(1))
      this.m_writer.WriteAttributeString("extrusionH", ((int) Math.Round((double) threeDFormat.ExtrusionHeight * 12700.0)).ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(0))
      this.m_writer.WriteAttributeString("contourW", ((int) Math.Round((double) threeDFormat.ContourWidth * 12700.0)).ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(3))
      this.m_writer.WriteAttributeString("z", ((int) Math.Round((double) threeDFormat.DistanceFromGround * 12700.0)).ToString());
    if (threeDFormat.PropertiesHash.ContainsKey(2))
      this.SerializePresetMaterialType(threeDFormat);
    if (threeDFormat.HasBevelTop)
    {
      this.m_writer.WriteStartElement("a", "bevelT", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(7))
        this.m_writer.WriteAttributeString("h", ((int) Math.Round((double) threeDFormat.BevelTopHeight * 12700.0)).ToString());
      if (threeDFormat.PropertiesHash.ContainsKey(8))
        this.m_writer.WriteAttributeString("w", ((int) Math.Round((double) threeDFormat.BevelTopWidth * 12700.0)).ToString());
      if (threeDFormat.PropertiesHash.ContainsKey(9))
        this.m_writer.WriteAttributeString("prst", (char.ToLower(threeDFormat.BevelTPresetType.ToString()[0]).ToString() + threeDFormat.BevelTPresetType.ToString().Substring(1)).ToString());
      this.m_writer.WriteEndElement();
    }
    if (threeDFormat.HasBevelBottom)
    {
      this.m_writer.WriteStartElement("a", "bevelB", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(4))
        this.m_writer.WriteAttributeString("h", ((int) Math.Round((double) threeDFormat.BevelBottomHeight * 12700.0)).ToString());
      if (threeDFormat.PropertiesHash.ContainsKey(5))
        this.m_writer.WriteAttributeString("w", ((int) Math.Round((double) threeDFormat.BevelBottomWidth * 12700.0)).ToString());
      if (threeDFormat.PropertiesHash.ContainsKey(6))
        this.m_writer.WriteAttributeString("prst", (char.ToLower(threeDFormat.BevelBPresetType.ToString()[0]).ToString() + threeDFormat.BevelBPresetType.ToString().Substring(1)).ToString());
      this.m_writer.WriteEndElement();
    }
    if (threeDFormat.HasContourColor)
    {
      this.m_writer.WriteStartElement("a", "contourClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(10))
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(threeDFormat.ContourColor));
        if (threeDFormat.PropertiesHash.ContainsKey(11))
        {
          this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) threeDFormat.ContourOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
      if (threeDFormat.DocxProps.ContainsKey("extLst"))
        this.SerializeDocxStream(this.m_document.Themes.DocxProps, "extLst");
      this.m_writer.WriteEndElement();
    }
    if (threeDFormat.HasExtrusionColor)
    {
      this.m_writer.WriteStartElement("a", "extrusionClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (threeDFormat.PropertiesHash.ContainsKey(12))
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(threeDFormat.ExtrusionColor));
        if (threeDFormat.PropertiesHash.ContainsKey(13))
        {
          this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) threeDFormat.ExtrusionOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializePresetMaterialType(ThreeDFormat threeDFormat)
  {
    string str = char.ToLower(threeDFormat.PresetMaterialType.ToString()[0]).ToString() + threeDFormat.PresetMaterialType.ToString().Substring(1);
    switch (str)
    {
      case "darkEdge":
        str = "dkEdge";
        break;
      case "softMetal":
        str = "softmetal";
        break;
    }
    this.m_writer.WriteAttributeString("prstMaterial", str.ToString());
  }

  private void SerializeReflectionEffect(Syncfusion.DocIO.DLS.Reflection reflection)
  {
    this.m_writer.WriteStartElement(nameof (reflection), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (reflection.HasKey(0))
      this.m_writer.WriteAttributeString("blurRad", this.GetEmuFromPoint((double) reflection.Blur));
    if (reflection.HasKey(1))
      this.m_writer.WriteAttributeString("dir", (reflection.Direction * 60000).ToString());
    if (reflection.HasKey(2))
      this.m_writer.WriteAttributeString("dist", this.GetEmuFromPoint((double) reflection.Offset));
    if (reflection.HasKey(3))
      this.m_writer.WriteAttributeString("stA", ((float) ((100.0 - (double) reflection.Transparency) * 1000.0)).ToString());
    if (reflection.HasKey(4))
      this.m_writer.WriteAttributeString("stPos", (reflection.StartPosition * 1000f).ToString());
    if (reflection.HasKey(5))
      this.m_writer.WriteAttributeString("endA", (reflection.EndOpacity * 1000f).ToString());
    if (reflection.HasKey(6))
      this.m_writer.WriteAttributeString("endPos", (reflection.Size * 1000f).ToString());
    if (reflection.HasKey(7))
      this.m_writer.WriteAttributeString("fadeDir", (reflection.FadeDirection * 60000).ToString());
    if (reflection.HasKey(8))
      this.m_writer.WriteAttributeString("kx", (reflection.HorizontalSkew * 60000).ToString());
    if (reflection.HasKey(9))
      this.m_writer.WriteAttributeString("ky", (reflection.VerticalSkew * 60000).ToString());
    if (reflection.HasKey(10))
      this.m_writer.WriteAttributeString("sx", (reflection.HorizontalRatio * 100000f).ToString());
    if (reflection.HasKey(11))
      this.m_writer.WriteAttributeString("sy", (reflection.VerticalRatio * 100000f).ToString());
    if (reflection.HasKey(12))
      this.m_writer.WriteAttributeString("rotWithShape", (reflection.RotateWithShape ? 1 : 0).ToString());
    if (reflection.HasKey(13))
      this.m_writer.WriteAttributeString("algn", this.GetBlipAlignment(reflection.Alignment));
    this.m_writer.WriteEndElement();
  }

  private void SerializeShadowEffect(ShadowFormat shadowFormat)
  {
    this.m_writer.WriteStartElement("a", shadowFormat.m_type, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (shadowFormat.HasKey(14))
      this.m_writer.WriteAttributeString("blurRad", ((int) Math.Round(shadowFormat.Blur * 12700.0)).ToString());
    if (shadowFormat.HasKey(13))
      this.m_writer.WriteAttributeString("dist", ((int) Math.Round(shadowFormat.Distance * 12700.0)).ToString());
    if (shadowFormat.HasKey(15))
      this.m_writer.WriteAttributeString("algn", shadowFormat.Alignment.ToString());
    if (shadowFormat.HasKey(12))
      this.m_writer.WriteAttributeString("dir", (shadowFormat.Direction * 60000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (shadowFormat.HasKey(7))
      this.m_writer.WriteAttributeString("kx", ((int) shadowFormat.HorizontalSkewAngle * 60000).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (shadowFormat.HasKey(8))
      this.m_writer.WriteAttributeString("ky", ((int) shadowFormat.VerticalSkewAngle * 60000).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (shadowFormat.HasKey(9))
      this.m_writer.WriteAttributeString("sx", (shadowFormat.HorizontalScalingFactor * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (shadowFormat.HasKey(10))
      this.m_writer.WriteAttributeString("sy", (shadowFormat.VerticalScalingFactor * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if (shadowFormat.HasKey(11))
      this.m_writer.WriteAttributeString("rotWithShape", shadowFormat.RotateWithShape ? "1" : "0");
    if (shadowFormat.HasKey(16 /*0x10*/))
    {
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(shadowFormat.Color));
      if (shadowFormat.HasKey(21))
      {
        this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) shadowFormat.Transparency * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeConnectorLineProperties(LineFormat lineFormat)
  {
    this.m_writer.WriteStartElement("headEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.GetLineEnd(lineFormat.BeginArrowheadStyle, false));
    this.m_writer.WriteAttributeString("w", this.GetLineEndWidth(lineFormat.BeginArrowheadWidth, false));
    this.m_writer.WriteAttributeString("len", this.GetLineEndLength(lineFormat.BeginArrowheadLength, false));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("tailEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.GetLineEnd(lineFormat.EndArrowheadStyle, false));
    this.m_writer.WriteAttributeString("w", this.GetLineEndWidth(lineFormat.EndArrowheadWidth, false));
    this.m_writer.WriteAttributeString("len", this.GetLineEndLength(lineFormat.EndArrowheadLength, false));
    this.m_writer.WriteEndElement();
  }

  private void SerializePatternFill(LineFormat lineFormat)
  {
    this.m_writer.WriteStartElement("pattFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", this.GetPatternFillType(lineFormat.Pattern));
    this.m_writer.WriteStartElement("fgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(lineFormat.ForeColor));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("bgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(lineFormat.Color));
    uint num = (uint) Math.Round((1.0 - (double) lineFormat.Transparency / 100.0) * 100.0) * 1000U;
    this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private bool IsConnectorShape(AutoShapeType autoShapeType)
  {
    switch (autoShapeType)
    {
      case AutoShapeType.Line:
      case AutoShapeType.ElbowConnector:
      case AutoShapeType.CurvedConnector:
      case AutoShapeType.StraightConnector:
      case AutoShapeType.BentConnector2:
      case AutoShapeType.BentConnector4:
      case AutoShapeType.BentConnector5:
      case AutoShapeType.CurvedConnector2:
      case AutoShapeType.CurvedConnector4:
      case AutoShapeType.CurvedConnector5:
        return true;
      default:
        return false;
    }
  }

  private void SerializeBlipFill(Shape shape)
  {
    FillFormat fillFormat = shape.FillFormat;
    this.m_writer.WriteStartElement("blipFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("rotWithShape", fillFormat.RotateWithObject ? "1" : "0");
    this.m_writer.WriteAttributeString("dpi", "0");
    this.m_writer.WriteStartElement("blip", "http://schemas.openxmlformats.org/drawingml/2006/main");
    Entity baseEntity = this.GetBaseEntity((Entity) shape);
    string str = string.Empty;
    WPicture wpicture = new WPicture((IWordDocument) this.m_document);
    if (shape.FillFormat.ImageRecord != null && shape.FillFormat.ImageRecord.ImageBytes != null)
      wpicture.LoadImage(shape.FillFormat.ImageRecord.ImageBytes);
    this.UpdateImages(wpicture);
    switch (baseEntity)
    {
      case WSection _:
        str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
        break;
      case HeaderFooter _:
        str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
        break;
    }
    this.m_writer.WriteAttributeString("embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
    if (fillFormat.BlipCompressionMode != BlipCompressionType.None)
      this.m_writer.WriteAttributeString("cstate", char.ToLower(fillFormat.BlipCompressionMode.ToString()[0]).ToString() + fillFormat.BlipCompressionMode.ToString().Substring(1));
    if ((double) fillFormat.BlipFormat.Threshold != 0.0)
    {
      this.m_writer.WriteStartElement("alphaBiLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("thresh", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Threshold))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.InverseColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("alphaInv", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.InverseColor));
      if ((double) fillFormat.BlipFormat.InverseOpacity != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.InverseOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.AlphaReplaceAmount > 0.0)
    {
      this.m_writer.WriteStartElement("alphaRepl", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("a", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.AlphaReplaceAmount))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.BilevelThreshold > 0.0)
    {
      this.m_writer.WriteStartElement("biLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("thresh", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.BilevelThreshold))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.BlurRadius > 0.0 || fillFormat.BlipFormat.Grow)
    {
      this.m_writer.WriteStartElement("blur", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("grow", fillFormat.BlipFormat.Grow ? "1" : "0");
      this.m_writer.WriteAttributeString("rad", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.BlurRadius))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.ColorFrom != Color.Empty || fillFormat.BlipFormat.ColorTo != Color.Empty)
    {
      this.m_writer.WriteStartElement("clrChange", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("useA", fillFormat.BlipFormat.HasAlpha ? "1" : "0");
      if (fillFormat.BlipFormat.ColorFrom != Color.Empty)
      {
        this.m_writer.WriteStartElement("clrFrom", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.ColorFrom));
        if ((double) fillFormat.BlipFormat.ColorFromOpacity != 0.0)
        {
          this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.ColorFromOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      if (fillFormat.BlipFormat.ColorTo != Color.Empty)
      {
        this.m_writer.WriteStartElement("clrTo", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.ColorTo));
        if ((double) fillFormat.BlipFormat.ColorToOpacity != 0.0)
        {
          this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.ColorToOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.Hue > 0.0 || (double) fillFormat.BlipFormat.Saturation > 0.0 || (double) fillFormat.BlipFormat.Luminance > 0.0)
    {
      this.m_writer.WriteStartElement("hsl", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) fillFormat.BlipFormat.Hue > 0.0)
        this.m_writer.WriteAttributeString("hue", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Hue))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.Saturation > 0.0)
        this.m_writer.WriteAttributeString("sat", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Saturation))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.Luminance > 0.0)
        this.m_writer.WriteAttributeString("lum", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Luminance))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.Brightness > 0.0 || (double) fillFormat.BlipFormat.Contrast > 0.0)
    {
      this.m_writer.WriteStartElement("lum", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) fillFormat.BlipFormat.Brightness > 0.0)
        this.m_writer.WriteAttributeString("bright", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Brightness))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.Contrast > 0.0)
        this.m_writer.WriteAttributeString("contrast", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Contrast))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.TintAmount > 0.0 || (double) fillFormat.BlipFormat.TintHue > 0.0)
    {
      this.m_writer.WriteStartElement("tint", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) fillFormat.BlipFormat.TintAmount > 0.0)
        this.m_writer.WriteAttributeString("amt", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.TintAmount))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.TintHue > 0.0)
        this.m_writer.WriteAttributeString("hue", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.TintHue))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.DuotoneColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("duotone", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.BlipFormat.DuotonePresetColor != Color.Empty)
      {
        this.m_writer.WriteStartElement("prstClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", char.ToLower(fillFormat.BlipFormat.DuotonePresetColor.Name.ToString()[0]).ToString() + fillFormat.BlipFormat.DuotonePresetColor.Name.ToString().Substring(1));
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("prstClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", "black");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.DuotoneColor));
      if ((double) fillFormat.BlipFormat.DuotoneOpacity != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.DuotoneOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      else if ((double) fillFormat.BlipFormat.Transparency != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((100.0 - (double) fillFormat.BlipFormat.Transparency) * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaCeiling"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaCeiling");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaFloor"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaFloor");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("grayScl"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "grayScl");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("fillOverlay"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "fillOverlay");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaMod"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaMod");
    if ((double) fillFormat.BlipFormat.Transparency != 0.0)
    {
      this.m_writer.WriteStartElement("alphaModFix", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("amt", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Transparency))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.ExtensionURI.Count > 0)
      this.SerializeBlipExtensions(shape);
    this.m_writer.WriteEndElement();
    if (fillFormat.SourceRectangle != null && ((double) fillFormat.SourceRectangle.BottomOffset != 0.0 || (double) fillFormat.SourceRectangle.LeftOffset != 0.0 || (double) fillFormat.SourceRectangle.RightOffset != 0.0 || (double) fillFormat.SourceRectangle.TopOffset != 0.0))
    {
      this.m_writer.WriteStartElement("srcRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.SourceRectangle != null)
        this.SerializeTileRectange(fillFormat.SourceRectangle);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBlipExtensions(FillFormat fillFormat, Entity baseEntity)
  {
    this.m_writer.WriteStartElement("extLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < fillFormat.BlipFormat.ExtensionURI.Count; index += 2)
    {
      this.m_writer.WriteStartElement("ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("uri", fillFormat.BlipFormat.ExtensionURI[index].ToString());
      if (fillFormat.BlipFormat.ExtensionURI[index + 1] == "imgProps")
      {
        this.SerializeImageProperties(fillFormat, baseEntity);
      }
      else
      {
        this.m_writer.WriteStartElement("a14", "useLocalDpi", "http://schemas.microsoft.com/office/drawing/2010/main");
        this.m_writer.WriteAttributeString("val", fillFormat.BlipFormat.HasCompression ? "1" : "0");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBlipFill(
    FillFormat fillFormat,
    Entity baseEntity,
    WPicture picture,
    bool isChildShape)
  {
    BlipFormat blipFormat = fillFormat.BlipFormat;
    bool flag = picture == null;
    if (flag && !isChildShape)
    {
      this.m_writer.WriteStartElement("blipFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("rotWithShape", fillFormat.RotateWithObject ? "1" : "0");
      this.m_writer.WriteAttributeString("dpi", "0");
      this.m_writer.WriteStartElement("blip", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      string str = string.Empty;
      WPicture wpicture = new WPicture((IWordDocument) this.m_document);
      if (fillFormat.ImageRecord != null && fillFormat.ImageRecord.ImageBytes != null)
        wpicture.LoadImage(fillFormat.ImageRecord.ImageBytes);
      this.UpdateImages(wpicture);
      switch (baseEntity)
      {
        case WSection _:
          str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
          break;
        case HeaderFooter _:
          str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
          break;
      }
      this.m_writer.WriteAttributeString("embed", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
    }
    if (fillFormat.BlipCompressionMode != BlipCompressionType.None)
      this.m_writer.WriteAttributeString("cstate", char.ToLower(fillFormat.BlipCompressionMode.ToString()[0]).ToString() + fillFormat.BlipCompressionMode.ToString().Substring(1));
    if ((double) blipFormat.Threshold != 0.0)
    {
      this.m_writer.WriteStartElement("alphaBiLevel", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("thresh", ((float) (1000.0 * (100.0 - (double) blipFormat.Threshold))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (blipFormat.InverseColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("alphaInv", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(blipFormat.InverseColor));
      if ((double) blipFormat.InverseOpacity != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) blipFormat.InverseOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.AlphaReplaceAmount > 0.0)
    {
      this.m_writer.WriteStartElement("alphaRepl", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("a", ((float) (1000.0 * (100.0 - (double) blipFormat.AlphaReplaceAmount))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.BilevelThreshold > 0.0)
    {
      this.m_writer.WriteStartElement("biLevel", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("thresh", ((float) (1000.0 * (100.0 - (double) blipFormat.BilevelThreshold))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.BlurRadius > 0.0 || blipFormat.Grow)
    {
      this.m_writer.WriteStartElement("blur", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("grow", blipFormat.Grow ? "1" : "0");
      this.m_writer.WriteAttributeString("rad", ((float) (1000.0 * (100.0 - (double) blipFormat.BlurRadius))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (blipFormat.ColorFrom != Color.Empty || blipFormat.ColorTo != Color.Empty)
    {
      this.m_writer.WriteStartElement("clrChange", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (blipFormat.HasKey(1))
        this.m_writer.WriteAttributeString("useA", blipFormat.HasAlpha ? "1" : "0");
      if (blipFormat.ColorFrom != Color.Empty)
      {
        this.m_writer.WriteStartElement("clrFrom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(blipFormat.ColorFrom));
        if (blipFormat.HasKey(5))
        {
          this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) blipFormat.ColorFromOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      if (blipFormat.ColorTo != Color.Empty)
      {
        this.m_writer.WriteStartElement("clrTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(blipFormat.ColorTo));
        if (blipFormat.HasKey(6))
        {
          this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) blipFormat.ColorToOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.Hue > 0.0 || (double) blipFormat.Saturation > 0.0 || (double) blipFormat.Luminance > 0.0)
    {
      this.m_writer.WriteStartElement("hsl", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) blipFormat.Hue > 0.0)
        this.m_writer.WriteAttributeString("hue", ((float) (1000.0 * (100.0 - (double) blipFormat.Hue))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) blipFormat.Saturation > 0.0)
        this.m_writer.WriteAttributeString("sat", ((float) (1000.0 * (100.0 - (double) blipFormat.Saturation))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) blipFormat.Luminance > 0.0)
        this.m_writer.WriteAttributeString("lum", ((float) (1000.0 * (100.0 - (double) blipFormat.Luminance))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.Brightness > 0.0 || (double) blipFormat.Contrast > 0.0)
    {
      this.m_writer.WriteStartElement("lum", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) blipFormat.Brightness > 0.0)
        this.m_writer.WriteAttributeString("bright", ((float) (1000.0 * (100.0 - (double) blipFormat.Brightness))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) blipFormat.Contrast > 0.0)
        this.m_writer.WriteAttributeString("contrast", ((float) (1000.0 * (100.0 - (double) blipFormat.Contrast))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.TintAmount > 0.0 || (double) blipFormat.TintHue > 0.0)
    {
      this.m_writer.WriteStartElement("tint", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) blipFormat.TintAmount > 0.0)
        this.m_writer.WriteAttributeString("amt", ((float) (1000.0 * (100.0 - (double) blipFormat.TintAmount))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) blipFormat.TintHue > 0.0)
        this.m_writer.WriteAttributeString("hue", ((float) (1000.0 * (100.0 - (double) blipFormat.TintHue))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (blipFormat.DuotoneColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("duotone", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (blipFormat.DuotonePresetColor != Color.Empty)
      {
        this.m_writer.WriteStartElement("prstClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", char.ToLower(blipFormat.DuotonePresetColor.Name.ToString()[0]).ToString() + blipFormat.DuotonePresetColor.Name.ToString().Substring(1));
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("prstClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", "black");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(blipFormat.DuotoneColor));
      if ((double) blipFormat.DuotoneOpacity != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) blipFormat.DuotoneOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      else if ((double) blipFormat.Transparency != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((100.0 - (double) blipFormat.Transparency) * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (blipFormat.BlipTransparency == BlipTransparency.AlphaCeiling)
    {
      this.m_writer.WriteStartElement("alphaCeiling", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    else if (blipFormat.BlipTransparency == BlipTransparency.AlphaFloor)
    {
      this.m_writer.WriteStartElement("alphaFloor", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    else if (blipFormat.BlipTransparency == BlipTransparency.GrayScale)
    {
      this.m_writer.WriteStartElement("grayscl", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    else if (blipFormat.BlipTransparency == BlipTransparency.FillOverlay)
    {
      this.m_writer.WriteStartElement("fillOverlay", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    else if (blipFormat.BlipTransparency == BlipTransparency.AlphaMod)
    {
      this.m_writer.WriteStartElement("alphaMod", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if ((double) blipFormat.Transparency != 0.0)
    {
      this.m_writer.WriteStartElement("alphaModFix", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("amt", ((float) (1000.0 * (100.0 - (double) blipFormat.Transparency))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (blipFormat.ExtensionURI.Count > 0)
      this.SerializeBlipExtensions(fillFormat, baseEntity, picture);
    if (!flag || isChildShape)
      return;
    this.m_writer.WriteEndElement();
    if (fillFormat.SourceRectangle != null && ((double) fillFormat.SourceRectangle.BottomOffset != 0.0 || (double) fillFormat.SourceRectangle.LeftOffset != 0.0 || (double) fillFormat.SourceRectangle.RightOffset != 0.0 || (double) fillFormat.SourceRectangle.TopOffset != 0.0))
    {
      this.m_writer.WriteStartElement("srcRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.SourceRectangle != null)
        this.SerializeTileRectange(fillFormat.SourceRectangle);
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.TextureTile)
    {
      this.m_writer.WriteStartElement("tile", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("tx", (fillFormat.TextureOffsetX * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("ty", (fillFormat.TextureOffsetY * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("sx", (fillFormat.TextureHorizontalScale * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("sy", (fillFormat.TextureVerticalScale * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("flip", this.GetFlipOrientation(fillFormat.FlipOrientation));
      this.m_writer.WriteAttributeString("algn", this.GetBlipAlignment(fillFormat.TextureAlignment));
      this.m_writer.WriteEndElement();
    }
    else if (fillFormat.FillRectangle != null && !fillFormat.FillRectangle.HasAttributes)
    {
      this.m_writer.WriteStartElement("stretch", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("fillRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else if (fillFormat.FillRectangle != null && ((double) fillFormat.FillRectangle.BottomOffset != 0.0 || (double) fillFormat.FillRectangle.LeftOffset != 0.0 || (double) fillFormat.FillRectangle.RightOffset != 0.0 || (double) fillFormat.FillRectangle.TopOffset != 0.0))
    {
      this.m_writer.WriteStartElement("stretch", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("fillRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.SerializeTileRectange(fillFormat.FillRectangle);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBlipExtensions(FillFormat fillFormat, Entity baseEntity, WPicture picture)
  {
    this.m_writer.WriteStartElement("extLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < fillFormat.BlipFormat.ExtensionURI.Count; index += 2)
    {
      this.m_writer.WriteStartElement("ext", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("uri", fillFormat.BlipFormat.ExtensionURI[index].ToString());
      if (index + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[index + 1] == "imgProps")
        this.SerializeImageProperties(fillFormat, baseEntity);
      else if (index + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[index + 1] == "svgBlip" && picture != null && picture.SvgData != null)
      {
        this.m_writer.WriteStartElement("asvg", "svgBlip", "http://schemas.microsoft.com/office/drawing/2016/SVG/main");
        string nextRelationShipId;
        if (picture.OPictureHRef != null && this.SvgDataHash.ContainsKey(picture.OPictureHRef))
        {
          nextRelationShipId = this.SvgDataHash[picture.OPictureHRef];
        }
        else
        {
          nextRelationShipId = this.GetNextRelationShipID();
          if (picture.OPictureHRef != null)
            this.SvgDataHash.Add(picture.OPictureHRef, nextRelationShipId);
        }
        if (string.IsNullOrEmpty(picture.SvgExternalLink))
        {
          this.m_writer.WriteAttributeString("r", "embed", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
          Stream stream = (Stream) new MemoryStream(picture.SvgData);
          if (baseEntity is HeaderFooter)
            this.UpdateHFSvgImageRels(nextRelationShipId, baseEntity as HeaderFooter, stream);
          else if (!this.SvgDataCollection.ContainsKey(nextRelationShipId))
            this.SvgDataCollection.Add(nextRelationShipId, stream);
        }
        else
        {
          this.m_writer.WriteAttributeString("link", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
          this.ExternalLinkImages.Add(nextRelationShipId, picture.SvgExternalLink);
        }
        this.m_writer.WriteEndElement();
      }
      else if (index + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[index + 1] == "useLocalDpi")
      {
        this.m_writer.WriteStartElement("a14", "useLocalDpi", "http://schemas.microsoft.com/office/drawing/2010/main");
        this.m_writer.WriteAttributeString("val", fillFormat.BlipFormat.HasCompression ? "1" : "0");
        this.m_writer.WriteEndElement();
      }
      else if (index + 1 < fillFormat.BlipFormat.ExtensionURI.Count)
      {
        MemoryStream memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(fillFormat.BlipFormat.ExtensionURI[index + 1]));
        XmlReader reader = this.CreateReader((Stream) memoryStream);
        this.m_writer.WriteNode(reader, false);
        memoryStream.Dispose();
        reader.Close();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBlipFill(FillFormat fillFormat, Entity baseEntity)
  {
    this.m_writer.WriteStartElement("blipFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("rotWithShape", fillFormat.RotateWithObject ? "1" : "0");
    this.m_writer.WriteAttributeString("dpi", "0");
    this.m_writer.WriteStartElement("blip", "http://schemas.openxmlformats.org/drawingml/2006/main");
    string str = string.Empty;
    WPicture wpicture = new WPicture((IWordDocument) this.m_document);
    if (fillFormat.ImageRecord != null && fillFormat.ImageRecord.ImageBytes != null)
      wpicture.LoadImage(fillFormat.ImageRecord.ImageBytes);
    this.UpdateImages(wpicture);
    switch (baseEntity)
    {
      case WSection _:
        str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
        break;
      case HeaderFooter _:
        str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
        break;
    }
    this.m_writer.WriteAttributeString("embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
    if (fillFormat.BlipCompressionMode != BlipCompressionType.None)
      this.m_writer.WriteAttributeString("cstate", char.ToLower(fillFormat.BlipCompressionMode.ToString()[0]).ToString() + fillFormat.BlipCompressionMode.ToString().Substring(1));
    if ((double) fillFormat.BlipFormat.Threshold != 0.0)
    {
      this.m_writer.WriteStartElement("alphaBiLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("thresh", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Threshold))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.InverseColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("alphaInv", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.InverseColor));
      if ((double) fillFormat.BlipFormat.InverseOpacity != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.InverseOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.AlphaReplaceAmount > 0.0)
    {
      this.m_writer.WriteStartElement("alphaRepl", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("a", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.AlphaReplaceAmount))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.BilevelThreshold > 0.0)
    {
      this.m_writer.WriteStartElement("biLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("thresh", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.BilevelThreshold))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.BlurRadius > 0.0 || fillFormat.BlipFormat.Grow)
    {
      this.m_writer.WriteStartElement("blur", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("grow", fillFormat.BlipFormat.Grow ? "1" : "0");
      this.m_writer.WriteAttributeString("rad", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.BlurRadius))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.ColorFrom != Color.Empty || fillFormat.BlipFormat.ColorTo != Color.Empty)
    {
      this.m_writer.WriteStartElement("clrChange", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("useA", fillFormat.BlipFormat.HasAlpha ? "1" : "0");
      if (fillFormat.BlipFormat.ColorFrom != Color.Empty)
      {
        this.m_writer.WriteStartElement("clrFrom", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.ColorFrom));
        if ((double) fillFormat.BlipFormat.ColorFromOpacity != 0.0)
        {
          this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.ColorFromOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      if (fillFormat.BlipFormat.ColorTo != Color.Empty)
      {
        this.m_writer.WriteStartElement("clrTo", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.ColorTo));
        if ((double) fillFormat.BlipFormat.ColorToOpacity != 0.0)
        {
          this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.ColorToOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.Hue > 0.0 || (double) fillFormat.BlipFormat.Saturation > 0.0 || (double) fillFormat.BlipFormat.Luminance > 0.0)
    {
      this.m_writer.WriteStartElement("hsl", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) fillFormat.BlipFormat.Hue > 0.0)
        this.m_writer.WriteAttributeString("hue", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Hue))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.Saturation > 0.0)
        this.m_writer.WriteAttributeString("sat", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Saturation))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.Luminance > 0.0)
        this.m_writer.WriteAttributeString("lum", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Luminance))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.Brightness > 0.0 || (double) fillFormat.BlipFormat.Contrast > 0.0)
    {
      this.m_writer.WriteStartElement("lum", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) fillFormat.BlipFormat.Brightness > 0.0)
        this.m_writer.WriteAttributeString("bright", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Brightness))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.Contrast > 0.0)
        this.m_writer.WriteAttributeString("contrast", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.Contrast))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if ((double) fillFormat.BlipFormat.TintAmount > 0.0 || (double) fillFormat.BlipFormat.TintHue > 0.0)
    {
      this.m_writer.WriteStartElement("tint", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) fillFormat.BlipFormat.TintAmount > 0.0)
        this.m_writer.WriteAttributeString("amt", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.TintAmount))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) fillFormat.BlipFormat.TintHue > 0.0)
        this.m_writer.WriteAttributeString("hue", ((float) (1000.0 * (100.0 - (double) fillFormat.BlipFormat.TintHue))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.DuotoneColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("duotone", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.BlipFormat.DuotonePresetColor != Color.Empty)
      {
        this.m_writer.WriteStartElement("prstClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", char.ToLower(fillFormat.BlipFormat.DuotonePresetColor.Name.ToString()[0]).ToString() + fillFormat.BlipFormat.DuotonePresetColor.Name.ToString().Substring(1));
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("prstClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", "black");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.BlipFormat.DuotoneColor));
      if ((double) fillFormat.BlipFormat.DuotoneOpacity != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((double) fillFormat.BlipFormat.DuotoneOpacity * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      else if ((double) fillFormat.Transparency != 0.0)
      {
        this.m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", Math.Round((100.0 - (double) fillFormat.Transparency) * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaCeiling"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaCeiling");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaFloor"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaFloor");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("grayScl"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "grayScl");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("fillOverlay"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "fillOverlay");
    if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaMod"))
      this.SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaMod");
    if ((double) fillFormat.Transparency != 0.0)
    {
      this.m_writer.WriteStartElement("alphaModFix", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("amt", ((float) (1000.0 * (100.0 - (double) fillFormat.Transparency))).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.BlipFormat.ExtensionURI.Count > 0)
      this.SerializeBlipExtensions(fillFormat, baseEntity);
    this.m_writer.WriteEndElement();
    if (fillFormat.SourceRectangle != null && ((double) fillFormat.SourceRectangle.BottomOffset != 0.0 || (double) fillFormat.SourceRectangle.LeftOffset != 0.0 || (double) fillFormat.SourceRectangle.RightOffset != 0.0 || (double) fillFormat.SourceRectangle.TopOffset != 0.0))
    {
      this.m_writer.WriteStartElement("srcRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.SourceRectangle != null)
        this.SerializeTileRectange(fillFormat.SourceRectangle);
      this.m_writer.WriteEndElement();
    }
    if (fillFormat.TextureTile)
    {
      this.m_writer.WriteStartElement("tile", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("tx", (fillFormat.TextureOffsetX * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("ty", (fillFormat.TextureOffsetY * 12700.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("sx", (fillFormat.TextureHorizontalScale * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("sy", (fillFormat.TextureVerticalScale * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("flip", this.GetFlipOrientation(fillFormat.FlipOrientation));
      this.m_writer.WriteAttributeString("algn", this.GetBlipAlignment(fillFormat.TextureAlignment));
      this.m_writer.WriteEndElement();
    }
    else if (fillFormat.FillRectangle != null && !fillFormat.FillRectangle.HasAttributes)
    {
      this.m_writer.WriteStartElement("stretch", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("fillRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else if (fillFormat.FillRectangle != null && ((double) fillFormat.FillRectangle.BottomOffset != 0.0 || (double) fillFormat.FillRectangle.LeftOffset != 0.0 || (double) fillFormat.FillRectangle.RightOffset != 0.0 || (double) fillFormat.FillRectangle.TopOffset != 0.0))
    {
      this.m_writer.WriteStartElement("stretch", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("fillRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.SerializeTileRectange(fillFormat.FillRectangle);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBlipExtensions(Shape shape)
  {
    this.m_writer.WriteStartElement("extLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < shape.FillFormat.BlipFormat.ExtensionURI.Count; index += 2)
    {
      this.m_writer.WriteStartElement("ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("uri", shape.FillFormat.BlipFormat.ExtensionURI[index].ToString());
      if (shape.FillFormat.BlipFormat.ExtensionURI[index + 1] == "imgProps")
      {
        Entity baseEntity = this.GetBaseEntity((Entity) shape);
        this.SerializeImageProperties(shape.FillFormat, baseEntity);
      }
      else
      {
        this.m_writer.WriteStartElement("a14", "useLocalDpi", "http://schemas.microsoft.com/office/drawing/2010/main");
        this.m_writer.WriteAttributeString("val", shape.FillFormat.BlipFormat.HasCompression ? "1" : "0");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeImageProperties(FillFormat fillFormat, Entity baseEntity)
  {
    ImageEffect imageEffect = fillFormat.BlipFormat.ImageEffect;
    this.m_writer.WriteStartElement("a14", "imgProps", "http://schemas.microsoft.com/office/drawing/2010/main");
    this.m_writer.WriteStartElement("imgLayer", "http://schemas.microsoft.com/office/drawing/2010/main");
    string str1 = string.Empty;
    WPicture wpicture = new WPicture((IWordDocument) this.m_document);
    if (fillFormat.ImageRecord.ImageBytes != null)
      wpicture.LoadImage(fillFormat.ImageRecord.ImageBytes);
    this.UpdateImages(wpicture);
    switch (baseEntity)
    {
      case WSection _:
        str1 = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
        break;
      case HeaderFooter _:
        str1 = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
        break;
    }
    this.m_writer.WriteAttributeString("embed", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str1);
    if (imageEffect.PropertiesHash.ContainsKey(0))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("sharpenSoften", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("amount", ((int) imageEffect.SharpenAmount).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(1))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("colorTemperature", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("colorTemp", ((int) imageEffect.ColorTemprature).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(2))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("saturation", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("sat", ((int) imageEffect.Saturation).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(3) || imageEffect.PropertiesHash.ContainsKey(4))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("brightnessContrast", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(3) && (double) (float) imageEffect.PropertiesHash[3] != 0.0)
        this.m_writer.WriteAttributeString("bright", ((int) imageEffect.Brightness).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(4) && (double) (float) imageEffect.PropertiesHash[4] != 0.0)
        this.m_writer.WriteAttributeString("contrast", ((int) imageEffect.Contrast).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(7))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticBlur", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("radius", ((int) imageEffect.BlurRadius).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(9) || imageEffect.PropertiesHash.ContainsKey(8))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticCement", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(8))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.CementTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(9))
        this.m_writer.WriteAttributeString("crackSpacing", ((int) imageEffect.CementCracking).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(13) || imageEffect.PropertiesHash.ContainsKey(12))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticCrisscrossEtching", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(12))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.CrisscrossEtchingTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(13))
        this.m_writer.WriteAttributeString("pressure", ((int) imageEffect.CrisscrossEtchingPressure).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(14) || imageEffect.PropertiesHash.ContainsKey(15))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticCutout", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(15))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.CutoutTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(14))
        this.m_writer.WriteAttributeString("numberOfShades", ((int) imageEffect.CutoutShades).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(17) || imageEffect.PropertiesHash.ContainsKey(16 /*0x10*/))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticFilmGrain", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(16 /*0x10*/))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.GrainTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(17))
        this.m_writer.WriteAttributeString("grainSize", ((int) imageEffect.GrainSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(18) || imageEffect.PropertiesHash.ContainsKey(19))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticGlass", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(18))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.GlassTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(19))
        this.m_writer.WriteAttributeString("scaling", ((int) imageEffect.GlassScaling).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(21) || imageEffect.PropertiesHash.ContainsKey(20))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticGlowDiffused", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(20))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.GlowDiffusedTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(21))
        this.m_writer.WriteAttributeString("intensity", ((int) imageEffect.GlowDiffusedIntensity).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(23) || imageEffect.PropertiesHash.ContainsKey(22))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticGlowEdges", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(22))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.GlowEdgesTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(23))
        this.m_writer.WriteAttributeString("smoothness", ((int) imageEffect.GlowEdgesSmoothness).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(25) || imageEffect.PropertiesHash.ContainsKey(24))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticLightScreen", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(24))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.LightScreenTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(25))
        this.m_writer.WriteAttributeString("gridSize", ((int) imageEffect.LightScreenGrid).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(27) || imageEffect.PropertiesHash.ContainsKey(26))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticLineDrawing", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(26))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.LineDrawingTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(27))
        this.m_writer.WriteAttributeString("pencilSize", ((int) imageEffect.LineDrawingPensilSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(29) || imageEffect.PropertiesHash.ContainsKey(28))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticMarker", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(28))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.MarkerTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(29))
        this.m_writer.WriteAttributeString("size", ((int) imageEffect.MarkerSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(31 /*0x1F*/) || imageEffect.PropertiesHash.ContainsKey(30))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticMosiaicBubbles", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(30))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.MosiaicBubbleTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(31 /*0x1F*/))
        this.m_writer.WriteAttributeString("intensity", ((int) imageEffect.MosiaicBubblePressure).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(33) || imageEffect.PropertiesHash.ContainsKey(32 /*0x20*/))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPaintStrokes", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(32 /*0x20*/))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.StrokeTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(33))
        this.m_writer.WriteAttributeString("intensity", ((int) imageEffect.StrokeIntensity).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(35) || imageEffect.PropertiesHash.ContainsKey(34))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPaintBrush", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(34))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.BrushTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(35))
        this.m_writer.WriteAttributeString("brushSize", ((int) imageEffect.BrushSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(37) || imageEffect.PropertiesHash.ContainsKey(36))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPastelsSmooth", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(36))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.PastelTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(37))
        this.m_writer.WriteAttributeString("brushSize", ((int) imageEffect.PastelSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(39) || imageEffect.PropertiesHash.ContainsKey(38))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPencilGrayscale", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(39))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.PencilGrayScaleTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) (float) imageEffect.PropertiesHash[39] != 0.0)
        this.m_writer.WriteAttributeString("pencilSize", ((int) imageEffect.PencilGraySize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(41) || imageEffect.PropertiesHash.ContainsKey(40))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPencilSketch", "http://schemas.microsoft.com/office/drawing/2010/main");
      if ((double) (float) imageEffect.PropertiesHash[40] != 0.0)
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.PencilSketchTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(41))
        this.m_writer.WriteAttributeString("pencilSize", ((int) imageEffect.PencilSketchSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(43) || imageEffect.PropertiesHash.ContainsKey(42))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPhotocopy", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(42))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.PhotocopyTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(43))
        this.m_writer.WriteAttributeString("detail", ((int) imageEffect.PhotocopySize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(45) || imageEffect.PropertiesHash.ContainsKey(44))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPlasticWrap", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(44))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.PlasticWrapTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(45))
        this.m_writer.WriteAttributeString("smoothness", ((int) imageEffect.PlasticWrapSmoothness).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(47) || imageEffect.PropertiesHash.ContainsKey(46))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticTexturizer", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(46))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.TexturizerTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(47))
        this.m_writer.WriteAttributeString("scaling", ((int) imageEffect.TexturizerSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.PropertiesHash.ContainsKey(49) || imageEffect.PropertiesHash.ContainsKey(48 /*0x30*/))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticWatercolorSponge", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (imageEffect.PropertiesHash.ContainsKey(48 /*0x30*/))
        this.m_writer.WriteAttributeString("trans", ((int) imageEffect.SpongeTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (imageEffect.PropertiesHash.ContainsKey(49))
        this.m_writer.WriteAttributeString("brushSize", ((int) imageEffect.SpongeBrushSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (imageEffect.HasBackgroundRemovalEffect)
    {
      this.m_writer.WriteStartElement("backgroundRemoval", "http://schemas.microsoft.com/office/drawing/2010/main");
      if ((double) imageEffect.BackgroundRemovalRectangle.BottomOffset != 0.0 || (double) imageEffect.BackgroundRemovalRectangle.LeftOffset != 0.0 || (double) imageEffect.BackgroundRemovalRectangle.RightOffset != 0.0 || (double) imageEffect.BackgroundRemovalRectangle.TopOffset != 0.0)
        this.SerializeTileRectange(imageEffect.BackgroundRemovalRectangle);
      if (imageEffect.ForegroundVertices != null && imageEffect.ForegroundVertices.Count > 0)
      {
        for (int index = 0; index < imageEffect.ForegroundVertices.Count; index += 2)
        {
          this.m_writer.WriteStartElement("foregroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
          this.m_writer.WriteAttributeString("x1", ((int) imageEffect.ForegroundVertices[index].X).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteAttributeString("y1", ((int) imageEffect.ForegroundVertices[index].Y).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteAttributeString("x2", ((int) imageEffect.ForegroundVertices[index + 1].X).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteAttributeString("y2", ((int) imageEffect.ForegroundVertices[index + 1].Y).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
      }
      if (imageEffect.BackgroundVertices != null && imageEffect.BackgroundVertices.Count > 0)
      {
        for (int index = 0; index < imageEffect.BackgroundVertices.Count; index += 2)
        {
          this.m_writer.WriteStartElement("backgroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
          XmlWriter writer1 = this.m_writer;
          int num = (int) imageEffect.BackgroundVertices[index].X;
          string str2 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer1.WriteAttributeString("x1", str2);
          XmlWriter writer2 = this.m_writer;
          PointF backgroundVertex = imageEffect.BackgroundVertices[index];
          num = (int) backgroundVertex.Y;
          string str3 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer2.WriteAttributeString("y1", str3);
          XmlWriter writer3 = this.m_writer;
          backgroundVertex = imageEffect.BackgroundVertices[index + 1];
          num = (int) backgroundVertex.X;
          string str4 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer3.WriteAttributeString("x2", str4);
          XmlWriter writer4 = this.m_writer;
          backgroundVertex = imageEffect.BackgroundVertices[index + 1];
          num = (int) backgroundVertex.Y;
          string str5 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer4.WriteAttributeString("y2", str5);
          this.m_writer.WriteEndElement();
        }
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeImageProperties(GroupShape shape)
  {
    this.m_writer.WriteStartElement("a14", "imgProps", "http://schemas.microsoft.com/office/drawing/2010/main");
    this.m_writer.WriteStartElement("imgLayer", "http://schemas.microsoft.com/office/drawing/2010/main");
    Entity baseEntity = this.GetBaseEntity((Entity) shape);
    string str1 = string.Empty;
    WPicture wpicture = new WPicture((IWordDocument) this.m_document);
    if (shape.FillFormat.ImageRecord.ImageBytes != null)
      wpicture.LoadImage(shape.FillFormat.ImageRecord.ImageBytes);
    this.UpdateImages(wpicture);
    switch (baseEntity)
    {
      case WSection _:
        str1 = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
        break;
      case HeaderFooter _:
        str1 = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
        break;
    }
    this.m_writer.WriteAttributeString("embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str1);
    int num;
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(0))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("sharpenSoften", "http://schemas.microsoft.com/office/drawing/2010/main");
      XmlWriter writer = this.m_writer;
      num = (int) shape.FillFormat.BlipFormat.ImageEffect.SharpenAmount;
      string str2 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      writer.WriteAttributeString("amount", str2);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(1))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("colorTemperature", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("colorTemp", ((int) shape.FillFormat.BlipFormat.ImageEffect.ColorTemprature).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(2))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("saturation", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("sat", ((int) shape.FillFormat.BlipFormat.ImageEffect.Saturation).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(3) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(4))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("brightnessContrast", "http://schemas.microsoft.com/office/drawing/2010/main");
      if ((double) (float) shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[3] != 0.0)
        this.m_writer.WriteAttributeString("bright", ((int) shape.FillFormat.BlipFormat.ImageEffect.Brightness).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) (float) shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[4] != 0.0)
        this.m_writer.WriteAttributeString("contrast", ((int) shape.FillFormat.BlipFormat.ImageEffect.Contrast).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(7))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticBlur", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteAttributeString("radius", ((int) shape.FillFormat.BlipFormat.ImageEffect.BlurRadius).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(9) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(8))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticCement", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(8))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.CementTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(9))
        this.m_writer.WriteAttributeString("crackSpacing", ((int) shape.FillFormat.BlipFormat.ImageEffect.CementCracking).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(13) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(12))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticCrisscrossEtching", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(12))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.CrisscrossEtchingTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(13))
        this.m_writer.WriteAttributeString("pressure", ((int) shape.FillFormat.BlipFormat.ImageEffect.CrisscrossEtchingPressure).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(14) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(15))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticCutout", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(15))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.CutoutTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(14))
        this.m_writer.WriteAttributeString("numberOfShades", ((int) shape.FillFormat.BlipFormat.ImageEffect.CutoutShades).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(17) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(16 /*0x10*/))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticFilmGrain", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(16 /*0x10*/))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.GrainTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(17))
        this.m_writer.WriteAttributeString("grainSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.GrainSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(18) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(19))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticGlass", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(18))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.GlassTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(19))
        this.m_writer.WriteAttributeString("scaling", ((int) shape.FillFormat.BlipFormat.ImageEffect.GlassScaling).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(21) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(20))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticGlowDiffused", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(20))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.GlowDiffusedTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(21))
        this.m_writer.WriteAttributeString("intensity", ((int) shape.FillFormat.BlipFormat.ImageEffect.GlowDiffusedIntensity).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(23) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(22))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticGlowEdges", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(22))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.GlowEdgesTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(23))
        this.m_writer.WriteAttributeString("smoothness", ((int) shape.FillFormat.BlipFormat.ImageEffect.GlowEdgesSmoothness).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(25) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(24))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticLightScreen", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(24))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.LightScreenTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(25))
        this.m_writer.WriteAttributeString("gridSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.LightScreenGrid).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(27) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(26))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticLineDrawing", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(26))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.LineDrawingTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(27))
        this.m_writer.WriteAttributeString("pencilSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.LineDrawingPensilSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(29) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(28))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticMarker", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(28))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.MarkerTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(29))
        this.m_writer.WriteAttributeString("size", ((int) shape.FillFormat.BlipFormat.ImageEffect.MarkerSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(31 /*0x1F*/) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(30))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticMosiaicBubbles", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(30))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.MosiaicBubbleTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(31 /*0x1F*/))
        this.m_writer.WriteAttributeString("intensity", ((int) shape.FillFormat.BlipFormat.ImageEffect.MosiaicBubblePressure).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(33) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(32 /*0x20*/))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPaintStrokes", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(32 /*0x20*/))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.StrokeTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(33))
        this.m_writer.WriteAttributeString("intensity", ((int) shape.FillFormat.BlipFormat.ImageEffect.StrokeIntensity).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(35) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(34))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPaintBrush", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(34))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.BrushTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(35))
        this.m_writer.WriteAttributeString("brushSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.BrushSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(37) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(36))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPastelsSmooth", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(36))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.PastelTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(37))
        this.m_writer.WriteAttributeString("brushSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.PastelSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(39) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(38))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPencilGrayscale", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(39))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.PencilGrayScaleTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if ((double) (float) shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[39] != 0.0)
        this.m_writer.WriteAttributeString("pencilSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.PencilGraySize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(41) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(40))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPencilSketch", "http://schemas.microsoft.com/office/drawing/2010/main");
      if ((double) (float) shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[40] != 0.0)
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.PencilSketchTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(41))
        this.m_writer.WriteAttributeString("pencilSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.PencilSketchSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(43) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(42))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPhotocopy", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(42))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.PhotocopyTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(43))
        this.m_writer.WriteAttributeString("detail", ((int) shape.FillFormat.BlipFormat.ImageEffect.PhotocopySize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(45) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(44))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticPlasticWrap", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(44))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.PlasticWrapTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(45))
        this.m_writer.WriteAttributeString("smoothness", ((int) shape.FillFormat.BlipFormat.ImageEffect.PlasticWrapSmoothness).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(47) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(46))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticTexturizer", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(46))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.TexturizerTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(47))
        this.m_writer.WriteAttributeString("scaling", ((int) shape.FillFormat.BlipFormat.ImageEffect.TexturizerSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(49) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(48 /*0x30*/))
    {
      this.m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
      this.m_writer.WriteStartElement("artisticWatercolorSponge", "http://schemas.microsoft.com/office/drawing/2010/main");
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(48 /*0x30*/))
        this.m_writer.WriteAttributeString("trans", ((int) shape.FillFormat.BlipFormat.ImageEffect.SpongeTransparency).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(49))
        this.m_writer.WriteAttributeString("brushSize", ((int) shape.FillFormat.BlipFormat.ImageEffect.SpongeBrushSize).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (shape.FillFormat.BlipFormat.ImageEffect.HasBackgroundRemovalEffect)
    {
      this.m_writer.WriteStartElement("backgroundRemoval", "http://schemas.microsoft.com/office/drawing/2010/main");
      if ((double) shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.BottomOffset != 0.0 || (double) shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.LeftOffset != 0.0 || (double) shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.RightOffset != 0.0 || (double) shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.TopOffset != 0.0)
        this.SerializeTileRectange(shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle);
      PointF pointF;
      if (shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices != null && shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices.Count > 0)
      {
        for (int index = 0; index < shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices.Count; index += 2)
        {
          this.m_writer.WriteStartElement("foregroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
          XmlWriter writer = this.m_writer;
          pointF = shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[index];
          string str3 = ((int) pointF.X).ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer.WriteAttributeString("x1", str3);
          this.m_writer.WriteAttributeString("y1", ((int) shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[index].Y).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteAttributeString("x2", ((int) shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[index + 1].X).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteAttributeString("y2", ((int) shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[index + 1].Y).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
      }
      if (shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices != null && shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices.Count > 0)
      {
        for (int index = 0; index < shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices.Count; index += 2)
        {
          this.m_writer.WriteStartElement("backgroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
          this.m_writer.WriteAttributeString("x1", ((int) shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[index].X).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          XmlWriter writer1 = this.m_writer;
          pointF = shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[index];
          num = (int) pointF.Y;
          string str4 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer1.WriteAttributeString("y1", str4);
          XmlWriter writer2 = this.m_writer;
          pointF = shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[index + 1];
          num = (int) pointF.X;
          string str5 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer2.WriteAttributeString("x2", str5);
          XmlWriter writer3 = this.m_writer;
          pointF = shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[index + 1];
          num = (int) pointF.Y;
          string str6 = num.ToString((IFormatProvider) CultureInfo.InvariantCulture);
          writer3.WriteAttributeString("y2", str6);
          this.m_writer.WriteEndElement();
        }
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeTileRectange(TileRectangle tileRectangle)
  {
    if ((double) tileRectangle.BottomOffset != 0.0)
      this.m_writer.WriteAttributeString("b", (tileRectangle.BottomOffset * 1000f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if ((double) tileRectangle.LeftOffset != 0.0)
      this.m_writer.WriteAttributeString("l", (tileRectangle.LeftOffset * 1000f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if ((double) tileRectangle.RightOffset != 0.0)
      this.m_writer.WriteAttributeString("r", (tileRectangle.RightOffset * 1000f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    if ((double) tileRectangle.TopOffset == 0.0)
      return;
    this.m_writer.WriteAttributeString("t", (tileRectangle.TopOffset * 1000f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
  }

  private string GetBlipAlignment(TextureAlignment textureAlignment)
  {
    switch (textureAlignment)
    {
      case TextureAlignment.TopLeft:
        return "tl";
      case TextureAlignment.Top:
        return "t";
      case TextureAlignment.TopRight:
        return "tr";
      case TextureAlignment.Left:
        return "l";
      case TextureAlignment.Center:
        return "ctr";
      case TextureAlignment.Right:
        return "r";
      case TextureAlignment.BottomLeft:
        return "bl";
      case TextureAlignment.Bottom:
        return "b";
      case TextureAlignment.BottomRight:
        return "br";
      default:
        return string.Empty;
    }
  }

  private void SerializePatternFill(FillFormat fillFormat)
  {
    this.m_writer.WriteStartElement("pattFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", this.GetPatternFillType(fillFormat.Pattern));
    this.m_writer.WriteStartElement("fgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.ForeColor));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("bgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.Color));
    uint num = (uint) Math.Round((1.0 - (double) fillFormat.Transparency / 100.0) * 100.0) * 1000U;
    this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private string GetPatternFillType(PatternType patternType)
  {
    switch (patternType)
    {
      case PatternType.Pattern5Percent:
        return "pct5";
      case PatternType.Pattern10Percent:
        return "pct10";
      case PatternType.Pattern20Percent:
        return "pct20";
      case PatternType.Pattern25Percent:
        return "pct25";
      case PatternType.Pattern30Percent:
        return "pct30";
      case PatternType.Pattern40Percent:
        return "pct40";
      case PatternType.Pattern50Percent:
        return "pct50";
      case PatternType.Pattern60Percent:
        return "pct60";
      case PatternType.Pattern70Percent:
        return "pct70";
      case PatternType.Pattern75Percent:
        return "pct75";
      case PatternType.Pattern80Percent:
        return "pct80";
      case PatternType.Pattern90Percent:
        return "pct90";
      case PatternType.DarkHorizontal:
        return "dkHorz";
      case PatternType.DarkVertical:
        return "dkVert";
      case PatternType.DarkDownwardDiagonal:
        return "dkDnDiag";
      case PatternType.DarkUpwardDiagonal:
        return "dkUpDiag";
      case PatternType.SmallCheckerBoard:
        return "smCheck";
      case PatternType.Trellis:
        return "trellis";
      case PatternType.LightHorizontal:
        return "ltHorz";
      case PatternType.LightVertical:
        return "ltVert";
      case PatternType.LightDownwardDiagonal:
        return "ltDnDiag";
      case PatternType.LightUpwardDiagonal:
        return "ltUpDiag";
      case PatternType.SmallGrid:
        return "smGrid";
      case PatternType.DottedDiamond:
        return "dotDmnd";
      case PatternType.WideDownwardDiagonal:
        return "wdDnDiag";
      case PatternType.WideUpwardDiagonal:
        return "wdUpDiag";
      case PatternType.DashedUpwardDiagonal:
        return "dashUpDiag";
      case PatternType.DashedDownwardDiagonal:
        return "dashDnDiag";
      case PatternType.NarrowVertical:
        return "narVert";
      case PatternType.NarrowHorizontal:
        return "narHorz";
      case PatternType.DashedVertical:
        return "dashVert";
      case PatternType.DashedHorizontal:
        return "dashHorz";
      case PatternType.LargeConfetti:
        return "lgConfetti";
      case PatternType.LargeGrid:
        return "lgGrid";
      case PatternType.HorizontalBrick:
        return "horzBrick";
      case PatternType.LargeCheckerBoard:
        return "lgCheck";
      case PatternType.SmallConfetti:
        return "smConfetti";
      case PatternType.ZigZag:
        return "zigZag";
      case PatternType.SolidDiamond:
        return "solidDmnd";
      case PatternType.DiagonalBrick:
        return "diagBrick";
      case PatternType.OutlinedDiamond:
        return "openDmnd";
      case PatternType.Plaid:
        return "Plaid";
      case PatternType.Sphere:
        return "sphere";
      case PatternType.Weave:
        return "weave";
      case PatternType.DottedGrid:
        return "dotGrid";
      case PatternType.Divot:
        return "divot";
      case PatternType.Shingle:
        return "shingle";
      case PatternType.Wave:
        return "wave";
      case PatternType.Horizontal:
        return "horz";
      case PatternType.Vertical:
        return "vert";
      case PatternType.Cross:
        return "cross";
      case PatternType.DownwardDiagonal:
        return "dnDiag";
      case PatternType.UpwardDiagonal:
        return "upDiag";
      case PatternType.DiagonalCross:
        return "diagCross";
      default:
        return "pct5";
    }
  }

  private void SerializeSolidFill(Color fillColor, float transparency)
  {
    this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillColor));
    uint num = (uint) Math.Round((1.0 - (double) transparency / 100.0) * 100.0) * 1000U;
    this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private string GetLineStyle(LineStyle lineStyle, bool is2007)
  {
    switch (lineStyle)
    {
      case LineStyle.ThinThin:
        return !is2007 ? "dbl" : "thinThin";
      case LineStyle.ThinThick:
        return "thinThick";
      case LineStyle.ThickThin:
        return "thickThin";
      case LineStyle.ThickBetweenThin:
        return !is2007 ? "tri" : "thickBetweenThin";
      default:
        return !is2007 ? "sng" : "single";
    }
  }

  private void SerializeTextBoxContent(WTextBody textBody)
  {
    this.m_writer.WriteStartElement("txbx", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("txbxContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    for (int index = 0; index < textBody.Items.Count; ++index)
      this.SerializeBodyItem(textBody.Items[index], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeChildShapeTextBoxContent(WTextBody textBody, TextFrame textFrame)
  {
    this.m_writer.WriteStartElement("textbox", "urn:schemas-microsoft-com:vml");
    this.SerializeTextBoxStyle(textFrame);
    if (textFrame.HasInternalMargin)
      this.SerializeInsetAttribute(textFrame);
    if (textBody.Items.Count > 0)
    {
      this.m_writer.WriteStartElement("txbxContent", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      for (int index = 0; index < textBody.Items.Count; ++index)
        this.SerializeBodyItem(textBody.Items[index], false);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTextBoxStyle(TextFrame textFrame)
  {
    StringBuilder stringBuilder = new StringBuilder();
    if (textFrame.ShapeAutoFit)
      stringBuilder.Append("mso-fit-shape-to-text:t;");
    stringBuilder.Append(this.SerializeFallbackTextDirection(textFrame.TextDirection));
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
  }

  private void SerializeBodyProperties(Shape shape)
  {
    this.m_writer.WriteStartElement("wps", "bodyPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("rot", "0");
    this.m_writer.WriteAttributeString("spcFirstLastPara", "0");
    this.m_writer.WriteAttributeString("vertOverflow", "overflow");
    this.m_writer.WriteAttributeString("horzOverflow", "overflow");
    if (shape.TextFrame.NoWrap)
      this.m_writer.WriteAttributeString("wrap", "none");
    else
      this.m_writer.WriteAttributeString("wrap", "square");
    if ((double) shape.TextFrame.InternalMargin.Left >= 0.0)
      this.m_writer.WriteAttributeString("lIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Left));
    if ((double) shape.TextFrame.InternalMargin.Right >= 0.0)
      this.m_writer.WriteAttributeString("rIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Right));
    if ((double) shape.TextFrame.InternalMargin.Top >= 0.0)
      this.m_writer.WriteAttributeString("tIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Top));
    if ((double) shape.TextFrame.InternalMargin.Bottom >= 0.0)
      this.m_writer.WriteAttributeString("bIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Bottom));
    this.m_writer.WriteAttributeString("numCol", "1");
    this.m_writer.WriteAttributeString("spcCol", "0");
    this.m_writer.WriteAttributeString("rtlCol", "0");
    this.m_writer.WriteAttributeString("fromWordArt", "0");
    if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Bottom)
      this.m_writer.WriteAttributeString("anchor", "b");
    else if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Middle)
      this.m_writer.WriteAttributeString("anchor", "ctr");
    else
      this.m_writer.WriteAttributeString("anchor", "t");
    this.m_writer.WriteAttributeString("anchorCtr", "0");
    this.m_writer.WriteAttributeString("forceAA", "0");
    this.m_writer.WriteAttributeString("compatLnSpc", "1");
    if (shape.TextFrame.Upright)
      this.m_writer.WriteAttributeString("upright", "1");
    this.SerializeTextDirection(shape.TextFrame.TextDirection);
    this.m_writer.WriteStartElement("a", "prstTxWarp", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", "textNoShape");
    this.m_writer.WriteStartElement("a", "avLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (shape.TextFrame.NoAutoFit)
    {
      this.m_writer.WriteStartElement("noAutofit", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (shape.TextFrame.NormalAutoFit)
    {
      this.m_writer.WriteStartElement("normAutofit", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (shape.TextFrame.ShapeAutoFit)
    {
      this.m_writer.WriteStartElement("spAutoFit", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!shape.TextFrame.NoAutoFit && !shape.TextFrame.NormalAutoFit && !shape.TextFrame.ShapeAutoFit)
    {
      this.m_writer.WriteStartElement("noAutofit", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBodyProperties(ChildShape shape)
  {
    this.m_writer.WriteStartElement("wps", "bodyPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("rot", "0");
    this.m_writer.WriteAttributeString("spcFirstLastPara", "0");
    this.m_writer.WriteAttributeString("vertOverflow", "overflow");
    this.m_writer.WriteAttributeString("horzOverflow", "overflow");
    if (shape.TextFrame.NoWrap)
      this.m_writer.WriteAttributeString("wrap", "none");
    else
      this.m_writer.WriteAttributeString("wrap", "square");
    if ((double) shape.TextFrame.InternalMargin.Left >= 0.0)
      this.m_writer.WriteAttributeString("lIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Left));
    if ((double) shape.TextFrame.InternalMargin.Right >= 0.0)
      this.m_writer.WriteAttributeString("rIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Right));
    if ((double) shape.TextFrame.InternalMargin.Top >= 0.0)
      this.m_writer.WriteAttributeString("tIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Top));
    if ((double) shape.TextFrame.InternalMargin.Bottom >= 0.0)
      this.m_writer.WriteAttributeString("bIns", this.GetEmuFromPoint((double) shape.TextFrame.InternalMargin.Bottom));
    this.m_writer.WriteAttributeString("numCol", "1");
    this.m_writer.WriteAttributeString("spcCol", "0");
    this.m_writer.WriteAttributeString("rtlCol", "0");
    this.m_writer.WriteAttributeString("fromWordArt", "0");
    if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Bottom)
      this.m_writer.WriteAttributeString("anchor", "b");
    else if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Middle)
      this.m_writer.WriteAttributeString("anchor", "ctr");
    else
      this.m_writer.WriteAttributeString("anchor", "t");
    this.m_writer.WriteAttributeString("anchorCtr", "0");
    this.m_writer.WriteAttributeString("forceAA", "0");
    this.m_writer.WriteAttributeString("compatLnSpc", "1");
    if (shape.TextFrame.Upright)
      this.m_writer.WriteAttributeString("upright", "1");
    this.SerializeTextDirection(shape.TextFrame.TextDirection);
    this.m_writer.WriteStartElement("a", "prstTxWarp", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", "textNoShape");
    this.m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (shape.TextFrame.NoAutoFit)
    {
      this.m_writer.WriteStartElement("noAutofit", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (shape.TextFrame.NormalAutoFit)
    {
      this.m_writer.WriteStartElement("normAutofit", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (shape.TextFrame.ShapeAutoFit)
    {
      this.m_writer.WriteStartElement("spAutoFit", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!shape.TextFrame.NoAutoFit && !shape.TextFrame.NormalAutoFit && !shape.TextFrame.ShapeAutoFit)
    {
      this.m_writer.WriteStartElement("noAutofit", "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTextDirection(TextDirection textDirection)
  {
    switch (textDirection)
    {
      case TextDirection.VerticalFarEast:
        this.m_writer.WriteAttributeString("vert", "eaVert");
        break;
      case TextDirection.VerticalBottomToTop:
        this.m_writer.WriteAttributeString("vert", "vert270");
        break;
      case TextDirection.VerticalTopToBottom:
        this.m_writer.WriteAttributeString("vert", "vert");
        break;
      case TextDirection.HorizontalFarEast:
        this.m_writer.WriteAttributeString("vert", "horz");
        break;
      case TextDirection.Vertical:
        this.m_writer.WriteAttributeString("vert", "mongolianVert");
        break;
      default:
        this.m_writer.WriteAttributeString("vert", "horz");
        break;
    }
  }

  private void SerializeAutoShapeStyles(Shape shape)
  {
    this.m_writer.WriteStartElement("wps", "style", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("a", "lnRef", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[0], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "fillRef", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[1], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "effectRef", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[2], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "fontRef", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[3], true);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeAutoShapeStyles(ChildShape shape)
  {
    this.m_writer.WriteStartElement("wps", "style", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("a", "lnRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[0], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "fillRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[1], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "effectRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[2], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "fontRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[3], true);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeAutoShapeStyles(GroupShape shape)
  {
    this.m_writer.WriteStartElement("wps", "style", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteStartElement("a", "lnRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[0], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "fillRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[1], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "effectRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[2], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "fontRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeAutoShapeStyles(shape.ShapeStyleReferences[3], true);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeAutoShapeStyles(ShapeStyleReference shapeStyleRef, bool isFontRef)
  {
    string empty = string.Empty;
    if (isFontRef)
      this.m_writer.WriteAttributeString("idx", shapeStyleRef.StyleRefIndex == 1 ? "minor" : "major");
    else
      this.m_writer.WriteAttributeString("idx", shapeStyleRef.StyleRefIndex.ToString());
    Color styleRefColor = shapeStyleRef.StyleRefColor;
    if (!(shapeStyleRef.StyleRefColor != Color.Empty))
      return;
    this.m_writer.WriteStartElement("a", "srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(shapeStyleRef.StyleRefColor));
    if ((double) shapeStyleRef.StyleRefOpacity != 4294967296.0)
    {
      uint num = (uint) Math.Round((1.0 - (double) shapeStyleRef.StyleRefOpacity / 100.0) * 100.0) * 1000U;
      this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeWatermark(Watermark watermark)
  {
    if (watermark == null || watermark.Type == WatermarkType.NoWatermark || watermark is PictureWatermark && ((PictureWatermark) watermark).Picture == null)
      return;
    if (watermark.Type == WatermarkType.TextWatermark)
      this.SerializeTextWatermark(watermark as TextWatermark);
    else
      this.SerializePictureWatermark(watermark as PictureWatermark);
  }

  private void SerializeTextWatermark(TextWatermark textWatermark)
  {
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("id", "PowerPlusWaterMarkObject31" + Guid.NewGuid().ToString());
    this.m_writer.WriteAttributeString("type", "#_x0000_t136");
    this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    this.m_writer.WriteAttributeString("style", this.SerializeTextStyleAttribute(textWatermark));
    StringBuilder stringBuilder = new StringBuilder();
    this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(textWatermark.Color));
    this.m_writer.WriteAttributeString("stroked", "f");
    if (textWatermark.Semitransparent)
    {
      this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
      this.m_writer.WriteAttributeString("opacity", ".5");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("textpath", "urn:schemas-microsoft-com:vml");
    stringBuilder.Remove(0, stringBuilder.Length);
    stringBuilder.Append("font-family:" + this.InvertedCommas);
    stringBuilder.Append(textWatermark.FontName.Replace(this.NullSymbol, string.Empty));
    stringBuilder.Append(this.InvertedCommas);
    if ((double) textWatermark.Size == 36.0 || (double) textWatermark.Size == 144.0)
    {
      stringBuilder.Append(";font-size:2in");
    }
    else
    {
      stringBuilder.Append(";font-size:");
      stringBuilder.Append(textWatermark.Size);
      stringBuilder.Append("pt");
    }
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
    if (textWatermark.Text.Trim(ControlChar.SpaceChar) != string.Empty)
      this.m_writer.WriteAttributeString("string", textWatermark.Text.Replace(this.NullSymbol, string.Empty));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializePictureWatermark(PictureWatermark pictWatermark)
  {
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("id", "WordPictureWatermark1" + Guid.NewGuid().ToString());
    this.m_writer.WriteAttributeString("type", "##_x0000_t75");
    this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    this.m_writer.WriteAttributeString("style", this.SerializeShapePictStyle(pictWatermark.WordPicture));
    this.m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
    if (this.m_watermarkId == string.Empty)
      this.m_watermarkId = this.GetNextRelationShipID();
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", this.m_watermarkId);
    if (pictWatermark.WordPicture.Title != null)
      this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", pictWatermark.WordPicture.Title);
    if (pictWatermark.Washout)
    {
      this.m_writer.WriteAttributeString("gain", "19661f");
      this.m_writer.WriteAttributeString("blacklevel", "22938f");
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private string SerializeTextStyleAttribute(TextWatermark textWatermark)
  {
    StringBuilder stringBuilder = new StringBuilder();
    if (textWatermark.TextWrappingStyle != TextWrappingStyle.Inline)
      stringBuilder.Append("position:absolute;");
    stringBuilder.Append("margin-left:");
    stringBuilder.Append(textWatermark.HorizontalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;margin-top:");
    stringBuilder.Append(textWatermark.VerticalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;width:");
    float num1 = (double) textWatermark.Width != -1.0 ? textWatermark.Width : textWatermark.ShapeSize.Width * 0.6934f;
    stringBuilder.Append(Math.Round((double) num1, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;height:");
    float num2 = (double) textWatermark.Height != -1.0 ? textWatermark.Height : textWatermark.ShapeSize.Height * 0.67f;
    stringBuilder.Append(Math.Round((double) num2, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt");
    if (textWatermark.Rotation != 0)
      stringBuilder.Append(";rotation:" + textWatermark.Rotation.ToString());
    stringBuilder.Append(";mso-position-horizontal-relative:");
    stringBuilder.Append(this.GetHorizOriginAsString(textWatermark.HorizontalOrigin));
    stringBuilder.Append(";mso-position-vertical-relative:");
    stringBuilder.Append(this.GetVerticalOrginAsString(textWatermark.VerticalOrigin, true));
    if (textWatermark.HorizontalAlignment != ShapeHorizontalAlignment.None)
    {
      stringBuilder.Append(";mso-position-horizontal:");
      stringBuilder.Append(textWatermark.HorizontalAlignment.ToString().ToLower());
    }
    if (textWatermark.VerticalAlignment != ShapeVerticalAlignment.None)
    {
      stringBuilder.Append(";mso-position-vertical:");
      stringBuilder.Append(textWatermark.VerticalAlignment.ToString().ToLower());
    }
    if (textWatermark.OrderIndex != int.MaxValue)
      stringBuilder.Append(";z-index:" + textWatermark.OrderIndex.ToString());
    return stringBuilder.ToString();
  }

  private void SerializeSafeFieldText(string inputString, bool isDeletedText)
  {
    if (inputString == null || inputString == string.Empty)
      return;
    string empty = string.Empty;
    int length = inputString.IndexOf('\u0001');
    string textToDisplay = length != -1 ? inputString.Substring(0, length) : inputString;
    if (string.IsNullOrEmpty(textToDisplay))
      return;
    this.SerializeText(textToDisplay, isDeletedText, true);
  }

  public Image DownloadImage(string url)
  {
    Image image = (Image) null;
    try
    {
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(url);
      httpWebRequest.AllowWriteStreamBuffering = true;
      WebResponse response = httpWebRequest.GetResponse();
      image = Image.FromStream(response.GetResponseStream());
      response.Close();
    }
    catch
    {
    }
    return image;
  }

  private string UpdateInclPicFieldUrl(string url, WField field)
  {
    string nextRelationShipId = this.GetNextRelationShipID();
    if (field.OwnerParagraph.OwnerTextBody is HeaderFooter)
    {
      string key1 = string.Empty;
      foreach (HeaderFooterType key2 in this.m_headerFooterColl.Keys)
      {
        Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key2];
        foreach (string key3 in dictionary.Keys)
        {
          if (dictionary[key3] == field.OwnerParagraph.OwnerTextBody as HeaderFooter)
            key1 = key3;
        }
      }
      if (this.HeaderFooterInclPicUrls.ContainsKey(key1))
        this.m_headerFooterInclPicUrls[key1].Add(nextRelationShipId, url);
      else
        this.HeaderFooterInclPicUrls.Add(key1, new Dictionary<string, string>()
        {
          {
            nextRelationShipId,
            url
          }
        });
    }
    else
      this.InclPicFieldUrl.Add(nextRelationShipId, url);
    return nextRelationShipId;
  }

  private void SerializeFieldBegin(WField field)
  {
    this.FieldStack.Push(field);
    if (this.IsPictureHyperLink(field))
    {
      this.HasHyperlink = true;
      this.IsSkipFieldItem = true;
      if (field.FieldSeparator.NextSibling.NextSibling == field.FieldEnd)
        return;
      this.m_writer.WriteStartElement("hyperlink", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeHyperlinkAttributes(field);
      this.m_writer.WriteAttributeString("history", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    }
    else if (field.IsPgNum)
    {
      this.IsSkipFieldItem = true;
      this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (field.CharacterFormat != null)
        this.SerializeCharacterFormat(field.CharacterFormat);
      this.m_writer.WriteStartElement("pgNum", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      if (field is WMergeField)
        (field as WMergeField).UpdateFieldMarks();
      if (field is WSeqField)
        (field as WSeqField).UpdateFieldMarks();
      if (!this.HasHyperlink && field.FieldType == FieldType.FieldHyperlink)
        this.HasHyperlink = true;
      if (field.FieldSeparator != null)
        this.FieldMarkStack.Push(field.FieldSeparator);
      else if (field.FieldEnd != null)
        this.FieldMarkStack.Push(field.FieldEnd);
      this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (field.CharacterFormat != null)
        this.SerializeCharacterFormat(field.CharacterFormat);
      this.m_writer.WriteStartElement("fldChar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("fldCharType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
      if (field.IsLocked || WordDocument.DisableDateTimeUpdating && (field.FieldType == FieldType.FieldDate || field.FieldType == FieldType.FieldTime))
        this.m_writer.WriteAttributeString("fldLock", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      if (field == null || !field.IsFieldWithoutSeparator || field.FieldSeparator == null || field.FieldEnd == null)
        return;
      field.RemoveFieldSeparator(field.FieldEnd);
      field.FieldSeparator = (WFieldMark) null;
    }
  }

  private bool IsPictureHyperLink(WField field)
  {
    return field.FieldType == FieldType.FieldHyperlink && field.FieldSeparator != null && field.FieldSeparator.NextSibling is WPicture && !(field.FieldSeparator.NextSibling as WPicture).IsShape;
  }

  private void SerializeHyperlinkAttributes(WField field)
  {
    string nextRelationShipId = this.GetNextRelationShipID();
    string str1 = field.FieldValue.Replace(this.InvertedCommas, string.Empty);
    Entity ownerTextBody = field.GetOwnerTextBody((Entity) field);
    string str2 = str1.Replace(" ", "%20");
    bool flag = str2.StartsWithExt("_Toc");
    if (str2.IndexOf("http") == -1 && str2.IndexOf("www") == -1 && str2.IndexOf("mailto") == -1 && str2.IndexOf("javascript") == -1 && str2.IndexOf("ftp:") == -1)
    {
      str2 = str2.Replace(this.SlashSymbol + this.SlashSymbol, "/");
      if (str2.Length > 2 && str2.Substring(0, 3) == "../")
        str2 = str2.Remove(0, 3);
      else if (field.IsLocal || field.FormattingString.IndexOf($"{this.SlashSymbol}{this.SlashSymbol}l") != -1)
        str2 = str2.Insert(0, "#");
    }
    if (((Entity) field).GetBaseEntity((Entity) field) is HeaderFooter || this.m_IsAutoshapeTextboxInHeader)
    {
      string key1 = string.Empty;
      foreach (HeaderFooterType key2 in this.m_headerFooterColl.Keys)
      {
        Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key2];
        foreach (string key3 in dictionary.Keys)
        {
          if (dictionary[key3] == ((Entity) field).GetBaseEntity((Entity) field) as HeaderFooter || dictionary[key3].Type == this.m_HeaderFooterType && this.m_IsAutoshapeTextboxInHeader)
            key1 = key3;
        }
      }
      if (this.HeaderFooterHyperlinks.ContainsKey(key1))
        this.m_headerFooterHyperlinks[key1].Add(nextRelationShipId, str2);
      else
        this.HeaderFooterHyperlinks.Add(key1, new Dictionary<string, string>()
        {
          {
            nextRelationShipId,
            str2
          }
        });
    }
    else if (!flag)
    {
      if (ownerTextBody is WSection || ownerTextBody is WTextBox || ownerTextBody is WTableRow)
        this.HyperlinkTargets.Add(nextRelationShipId, str2);
      else if (ownerTextBody is WFootnote)
      {
        if ((ownerTextBody as WFootnote).FootnoteType == FootnoteType.Footnote)
          this.FootnoteHyperlinks.Add(nextRelationShipId, str2);
        else
          this.EndnoteHyperlinks.Add(nextRelationShipId, str2);
      }
      if (ownerTextBody is WComment)
        this.CommentHyperlinks.Add(nextRelationShipId, str2);
    }
    if (flag)
      this.m_writer.WriteAttributeString("anchor", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.FieldValue.Replace(this.InvertedCommas, string.Empty));
    else
      this.m_writer.WriteAttributeString("r", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
    this.WriteLocalReference(field);
  }

  private void WriteLocalReference(WField field)
  {
    if (!field.IsLocal || field.LocalReference == null || !(field.LocalReference != string.Empty))
      return;
    this.m_writer.WriteAttributeString("anchor", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.LocalReference.Replace(this.InvertedCommas, string.Empty));
  }

  private void SerializeFootEndnote(WFootnote footnote, bool isFromCompression)
  {
    footnote.EnsureFtnMarker();
    bool flag = footnote.FootnoteType == FootnoteType.Endnote;
    int key = flag ? this.m_endnoteId++ : this.m_footnoteId++;
    if (flag)
    {
      this.HasEndnote = true;
      this.EndnoteCollection.Add(key, footnote);
    }
    else
    {
      this.HasFootnote = true;
      this.FootnoteCollection.Add(key, footnote);
    }
    if (!isFromCompression)
      this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(footnote.MarkerCharacterFormat);
    this.m_writer.WriteStartElement(flag ? "endnoteReference" : "footnoteReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string str = footnote.IsAutoNumbered ? "0" : "1";
    this.m_writer.WriteAttributeString("customMarkFollows", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key.ToString());
    this.m_writer.WriteEndElement();
    if (!footnote.IsAutoNumbered)
    {
      if (footnote.SymbolCode != (byte) 0)
      {
        this.m_writer.WriteStartElement("sym", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("char", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "F0" + footnote.SymbolCode.ToString("X2"));
        this.m_writer.WriteAttributeString("font", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", footnote.SymbolFontName);
        this.m_writer.WriteEndElement();
      }
      else if (footnote.m_strCustomMarker != string.Empty && footnote.CustomMarker != "(")
        this.m_writer.WriteElementString("t", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", footnote.m_strCustomMarker);
    }
    if (isFromCompression)
      return;
    this.m_writer.WriteEndElement();
  }

  private void SerializeFootEndnotes(bool IsEndnotes)
  {
    MemoryStream data = new MemoryStream();
    string empty1 = string.Empty;
    string empty2 = string.Empty;
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, IsEndnotes ? "/word/endnotes.xml" : "/word/footnotes.xml");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, IsEndnotes ? "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml" : "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) data);
    Dictionary<int, WFootnote> dictionary = (Dictionary<int, WFootnote>) null;
    if (IsEndnotes)
    {
      if (this.m_endnoteColl != null)
        dictionary = this.m_endnoteColl;
    }
    else if (this.m_footnoteColl != null)
      dictionary = this.m_footnoteColl;
    if (dictionary != null)
    {
      string collTagStr;
      string elemTagStr;
      if (IsEndnotes)
      {
        collTagStr = "endnotes";
        elemTagStr = "endnote";
      }
      else
      {
        collTagStr = "footnotes";
        elemTagStr = "footnote";
      }
      this.SerializeFootEndnotesStartElement(collTagStr, elemTagStr);
      foreach (int key in dictionary.Keys)
        this.SerializeFootEndnoteElement(dictionary[key], IsEndnotes, key);
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      if (IsEndnotes)
        this.m_archive.AddItem("word\\endnotes.xml", (Stream) data, false, FileAttributes.Archive);
      else
        this.m_archive.AddItem("word\\footnotes.xml", (Stream) data, false, FileAttributes.Archive);
    }
  }

  private void SerializeFootEndnotesStartElement(string collTagStr, string elemTagStr)
  {
    this.m_writer.WriteStartElement("w", collTagStr, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "ve", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "pic", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteStartElement("w", elemTagStr, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "separator");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "-1");
    this.SerializeBodyItems((!(elemTagStr == "footnote") ? this.m_document.Endnotes.Separator : this.m_document.Footnotes.Separator).Items, true);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("w", elemTagStr, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continuationSeparator");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.SerializeBodyItems((!(elemTagStr == "footnote") ? this.m_document.Endnotes.ContinuationSeparator : this.m_document.Footnotes.ContinuationSeparator).Items, true);
    this.m_writer.WriteEndElement();
    WTextBody wtextBody = !(elemTagStr == "footnote") ? this.m_document.Endnotes.ContinuationNotice : this.m_document.Footnotes.ContinuationNotice;
    if (wtextBody.ChildEntities.Count <= 0)
      return;
    this.m_writer.WriteStartElement("w", elemTagStr, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continuationNotice");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.SerializeBodyItems(wtextBody.Items, true);
    this.m_writer.WriteEndElement();
  }

  private void SerializeFootEndnoteElement(WFootnote footnote, bool isEndNote, int id)
  {
    if (isEndNote)
      this.m_writer.WriteStartElement("endnote", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    else
      this.m_writer.WriteStartElement(nameof (footnote), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString(nameof (id), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", id.ToString());
    for (int index = 0; index < footnote.TextBody.Items.Count; ++index)
      this.SerializeBodyItem(footnote.TextBody.Items[index], false);
    this.m_writer.WriteEndElement();
  }

  private void SerializeDropDownFormField(WDropDownFormField dropDownFormField)
  {
    this.FieldStack.Push((WField) dropDownFormField);
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(dropDownFormField.CharacterFormat);
    this.m_writer.WriteStartElement("fldChar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "fldCharType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
    if (dropDownFormField.HasFFData)
    {
      this.m_writer.WriteStartElement("ffData", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeFormFieldData((WFormField) dropDownFormField);
      this.m_writer.WriteStartElement("ddList", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (dropDownFormField.DropDownSelectedIndex >= 0)
      {
        this.m_writer.WriteStartElement("result", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownFormField.DropDownSelectedIndex.ToString());
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownFormField.DefaultDropDownValue.ToString());
      this.m_writer.WriteEndElement();
      foreach (WDropDownItem dropDownItem in (CollectionImpl) dropDownFormField.DropDownItems)
      {
        this.m_writer.WriteStartElement("listEntry", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownItem.Text);
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeCheckBoxField(WCheckBox checkBox)
  {
    this.FieldStack.Push((WField) checkBox);
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(checkBox.CharacterFormat);
    this.m_writer.WriteStartElement("fldChar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "fldCharType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
    if (checkBox.HasFFData)
    {
      this.m_writer.WriteStartElement("ffData", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeFormFieldData((WFormField) checkBox);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeTextFormField(WTextFormField textFormField)
  {
    this.FieldStack.Push((WField) textFormField);
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(textFormField.CharacterFormat);
    this.m_writer.WriteStartElement("fldChar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "fldCharType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
    if (textFormField.HasFFData)
    {
      this.m_writer.WriteStartElement("ffData", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeFormFieldData((WFormField) textFormField);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeFormFieldData(WFormField field)
  {
    if (field.Name != "")
    {
      this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.Name);
      this.m_writer.WriteEndElement();
    }
    if (!field.Enabled)
    {
      this.m_writer.WriteStartElement("enabled", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      this.m_writer.WriteEndElement();
    }
    if (field.CalculateOnExit)
    {
      this.m_writer.WriteStartElement("calcOnExit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (field.MacroOnStart != null && field.MacroOnStart.Length > 0)
    {
      this.m_writer.WriteStartElement("entryMacro", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.MacroOnStart);
      this.m_writer.WriteEndElement();
    }
    if (field.MacroOnEnd != null && field.MacroOnEnd.Length > 0)
    {
      this.m_writer.WriteStartElement("exitMacro", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.MacroOnEnd);
      this.m_writer.WriteEndElement();
    }
    if (field.Help != "")
    {
      this.m_writer.WriteStartElement("helpText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if ((field.Params & 128 /*0x80*/) == 128 /*0x80*/)
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "text");
      else
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "autoText");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.Help);
      this.m_writer.WriteEndElement();
    }
    if (field.StatusBarHelp != "")
    {
      this.m_writer.WriteStartElement("statusText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if ((field.Params & 256 /*0x0100*/) == 256 /*0x0100*/)
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "text");
      else
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "autoText");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.StatusBarHelp);
      this.m_writer.WriteEndElement();
    }
    switch (field.FieldType)
    {
      case FieldType.FieldFormTextInput:
        WTextFormField wtextFormField = field as WTextFormField;
        this.m_writer.WriteStartElement("textInput", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        switch (wtextFormField.Type)
        {
          case TextFormFieldType.RegularText:
            this.m_writer.WriteStartElement("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "regular");
            this.m_writer.WriteEndElement();
            break;
          case TextFormFieldType.NumberText:
            this.m_writer.WriteStartElement("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "number");
            this.m_writer.WriteEndElement();
            break;
          case TextFormFieldType.DateText:
            this.m_writer.WriteStartElement("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "date");
            this.m_writer.WriteEndElement();
            break;
          case TextFormFieldType.CurrentDateText:
            this.m_writer.WriteStartElement("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "currentDate");
            this.m_writer.WriteEndElement();
            break;
          case TextFormFieldType.CurrentTimeText:
            this.m_writer.WriteStartElement("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "currentTime");
            this.m_writer.WriteEndElement();
            break;
          case TextFormFieldType.Calculation:
            this.m_writer.WriteStartElement("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "calculated");
            this.m_writer.WriteEndElement();
            break;
        }
        this.m_writer.WriteStartElement("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wtextFormField.DefaultText);
        this.m_writer.WriteEndElement();
        if (wtextFormField.MaximumLength > 0)
        {
          this.m_writer.WriteStartElement("maxLength", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wtextFormField.MaximumLength.ToString());
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteStartElement("format", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        if (wtextFormField.Type == TextFormFieldType.RegularText)
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wtextFormField.TextFormat.ToString());
        else
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wtextFormField.StringFormat);
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
        break;
      case FieldType.FieldFormCheckBox:
        WCheckBox wcheckBox = field as WCheckBox;
        this.m_writer.WriteStartElement("checkBox", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        if (wcheckBox.SizeType == CheckBoxSizeType.Auto)
        {
          this.m_writer.WriteStartElement("sizeAuto", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
        }
        else
        {
          this.m_writer.WriteStartElement("size", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (wcheckBox.CheckBoxSize * 2).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteStartElement("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        string str = wcheckBox.DefaultCheckBoxValue ? "true" : "false";
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
        this.m_writer.WriteEndElement();
        if (wcheckBox.Checked)
        {
          this.m_writer.WriteStartElement("checked", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
        }
        else if (wcheckBox.DefaultCheckBoxValue && !wcheckBox.Checked)
        {
          this.m_writer.WriteStartElement("checked", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
        break;
    }
  }

  private void SerializeTextboxes(WTextBoxCollection textboxes)
  {
    foreach (WTextBox textbox in (CollectionImpl) textboxes)
      this.SerializeTextBox(textbox);
  }

  private void SerializeTextBox(WTextBox textBox)
  {
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(textBox.CharacterFormat);
    if (textBox.IsShape)
    {
      this.m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_writer.WriteAttributeString("Requires", "wps");
      this.m_writer.WriteStartElement("drawing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.IsSerializingChoiceContent = true;
      if (textBox.Shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Inline && this.IsNotShapeFieldResult())
        this.SerializeAbsolutePicture((ParagraphItem) textBox);
      else
        this.SerializeInlinePicture((ParagraphItem) textBox);
      this.IsSerializingChoiceContent = false;
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
      this.m_isFallBack = true;
    }
    this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("id", textBox.Name);
    if (string.IsNullOrEmpty(textBox.TextBoxFormat.Path))
      this.m_writer.WriteAttributeString("type", "#_x0000_t202");
    this.SerializeTextBoxFormat(textBox.Visible, textBox.TextBoxFormat);
    this.SerializeFillEffects(textBox);
    this.m_writer.WriteStartElement("textbox", "urn:schemas-microsoft-com:vml");
    StringBuilder stringBuilder = new StringBuilder();
    if (textBox.TextBoxFormat.AutoFit)
      stringBuilder.Append("mso-fit-shape-to-text:t;");
    stringBuilder.Append(this.SerializeFallbackTextDirection(textBox.TextBoxFormat.TextDirection));
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
    this.SerializeInsetAttribute(textBox);
    this.m_writer.WriteStartElement("txbxContent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    for (int index = 0; index < textBox.TextBoxBody.Items.Count; ++index)
      this.SerializeBodyItem(textBox.TextBoxBody.Items[index], false);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (!textBox.IsShape)
      return;
    this.m_writer.WriteEndElement();
    this.m_isFallBack = false;
    this.m_writer.WriteEndElement();
  }

  private string SerializeFallbackTextDirection(TextDirection textDirection)
  {
    switch (textDirection)
    {
      case TextDirection.VerticalFarEast:
        return "layout-flow:vertical-ideographic";
      case TextDirection.VerticalBottomToTop:
        return "layout-flow:vertical;mso-layout-flow-alt:bottom-to-top";
      case TextDirection.VerticalTopToBottom:
        return "layout-flow:vertical";
      case TextDirection.HorizontalFarEast:
        return "layout-flow:horizontal-ideographic";
      case TextDirection.Vertical:
        return "layout-flow:vertical;mso-layout-flow-alt:top-to-bottom";
      default:
        return string.Empty;
    }
  }

  private void SerializeFillEffects(WTextBox textBox)
  {
    Background fillEfects = textBox.TextBoxFormat.FillEfects;
    if (fillEfects.PatternFill != null)
    {
      bool isHeaderFooter = false;
      if (textBox.OwnerParagraph != null)
        isHeaderFooter = textBox.OwnerParagraph.Owner is HeaderFooter;
      this.SerializePatternFill(textBox, isHeaderFooter);
    }
    else
    {
      if (fillEfects.Type == BackgroundType.NoBackground || fillEfects.Type == BackgroundType.Color)
        return;
      this.m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
      if ((fillEfects.Type == BackgroundType.Picture || fillEfects.Type == BackgroundType.Texture) && fillEfects.ImageBytes != null)
        this.SerializePictureFill(textBox);
      else if (fillEfects.Type == BackgroundType.Gradient)
        this.SerializeGradientFill(textBox.TextBoxFormat.FillEfects.Gradient);
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeGradientFill(BackgroundGradient backgroundGradient)
  {
    this.SerializeGradientColor(backgroundGradient);
    this.SerializeGradientShadings(backgroundGradient);
  }

  private void SerializePictureFill(WTextBox textBox)
  {
    Entity baseEntity = ((Entity) textBox).GetBaseEntity((Entity) textBox);
    Background fillEfects = textBox.TextBoxFormat.FillEfects;
    string str = string.Empty;
    WPicture wpicture = new WPicture((IWordDocument) textBox.Document);
    if (fillEfects.ImageBytes != null)
      wpicture.LoadImage(fillEfects.ImageBytes);
    this.UpdateImages(wpicture);
    switch (baseEntity)
    {
      case WSection _:
        str = this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture));
        break;
      case HeaderFooter _:
        str = this.UpdateHFImageRels(baseEntity as HeaderFooter, wpicture);
        break;
    }
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
    if (fillEfects.Type == BackgroundType.Picture)
      this.m_writer.WriteAttributeString("type", "frame");
    else
      this.m_writer.WriteAttributeString("type", "tile");
  }

  private void SerializePatternFill(WTextBox textBox, bool isHeaderFooter)
  {
    Background fillEfects = textBox.TextBoxFormat.FillEfects;
    string empty = string.Empty;
    if (fillEfects.PatternImageBytes != null)
    {
      WPicture wpicture = new WPicture((IWordDocument) this.m_document);
      wpicture.LoadImage(fillEfects.PatternImageBytes);
      string relationId = !isHeaderFooter ? this.AddImageRelation(this.DocumentImages, wpicture.ImageRecord, this.IsNeedToSkipImageRelation(wpicture)) : this.UpdateHFImageRels(textBox.OwnerParagraph.Owner as HeaderFooter, wpicture);
      this.m_hasImages = true;
      this.m_writer.WriteNode(this.CreateReader(this.SetIDAttribute(fillEfects.PatternFill, relationId)), false);
    }
    else
      this.m_writer.WriteNode(this.CreateReader(fillEfects.PatternFill), false);
  }

  private Stream SetIDAttribute(Stream inputStream, string relationId)
  {
    inputStream.Position = 0L;
    XmlReader reader = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateReader(inputStream);
    MemoryStream data = new MemoryStream((int) inputStream.Length);
    XmlWriter writer = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateWriter((Stream) data, Encoding.UTF8);
    bool flag1 = false;
    bool eof;
    do
    {
      bool flag2 = false;
      switch (reader.NodeType)
      {
        case XmlNodeType.Element:
          writer.WriteStartElement(reader.Prefix, reader.LocalName, reader.NamespaceURI);
          this.SetRelationshipIDAttribute(reader, writer, relationId);
          reader.MoveToElement();
          if (!reader.IsEmptyElement)
          {
            string localName = reader.LocalName;
            reader.Read();
            flag2 = true;
            if (localName == reader.LocalName && reader.NodeType == XmlNodeType.EndElement)
            {
              writer.WriteEndElement();
              flag1 = true;
              break;
            }
            flag1 = false;
            break;
          }
          writer.WriteEndElement();
          flag1 = false;
          break;
        case XmlNodeType.Text:
          writer.WriteString(reader.Value);
          flag1 = false;
          break;
        case XmlNodeType.SignificantWhitespace:
          writer.WriteWhitespace(reader.Value);
          flag1 = false;
          break;
        case XmlNodeType.EndElement:
          if (!flag1)
          {
            writer.WriteEndElement();
            break;
          }
          flag1 = false;
          break;
        default:
          flag1 = false;
          break;
      }
      eof = reader.EOF;
      if (!flag2 && !eof)
        reader.Read();
    }
    while (!eof);
    writer.Flush();
    data.Flush();
    return (Stream) data;
  }

  private void SetRelationshipIDAttribute(XmlReader reader, XmlWriter writer, string relationId)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "id":
        case "href":
          if (reader.Value != null && reader.Value.Length > 0)
          {
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, relationId);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private bool IsNotShapeFieldResult()
  {
    return this.CurrentField == null || this.CurrentField.FieldType != FieldType.FieldShape;
  }

  private void SerializeTextBoxFormat(bool visible, WTextBoxFormat textBoxFormat)
  {
    string str1 = string.Empty;
    string str2 = string.Empty;
    string str3 = string.Empty;
    string str4 = string.Empty;
    string empty1 = string.Empty;
    StringBuilder stringBuilder1 = new StringBuilder();
    if (textBoxFormat.HorizontalOrigin != HorizontalOrigin.Column)
      str1 = this.GetHorizOriginAsString(textBoxFormat.HorizontalOrigin);
    if (textBoxFormat.VerticalOrigin != VerticalOrigin.Paragraph)
      str3 = this.GetVerticalOrginAsString(textBoxFormat.VerticalOrigin, true);
    if (textBoxFormat.HorizontalAlignment != ShapeHorizontalAlignment.None)
      str2 = textBoxFormat.HorizontalAlignment.ToString().ToLower();
    if (textBoxFormat.VerticalAlignment != ShapeVerticalAlignment.None)
      str4 = textBoxFormat.VerticalAlignment.ToString().ToLower();
    string lower = textBoxFormat.TextVerticalAlignment.ToString().ToLower();
    if (textBoxFormat.TextWrappingStyle != TextWrappingStyle.Inline && this.IsNotShapeFieldResult())
      stringBuilder1.Append("position:absolute;");
    stringBuilder1.Append("margin-left:");
    stringBuilder1.Append(textBoxFormat.HorizontalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;margin-top:");
    stringBuilder1.Append(textBoxFormat.VerticalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;width:");
    stringBuilder1.Append(textBoxFormat.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;height:");
    stringBuilder1.Append(textBoxFormat.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;");
    if ((double) textBoxFormat.Rotation != 0.0)
    {
      stringBuilder1.Append("rotation:");
      long rotationAngle = (long) this.GetRotationAngle(textBoxFormat.Rotation);
      stringBuilder1.Append(rotationAngle.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      stringBuilder1.Append(";");
    }
    if (textBoxFormat.FlipHorizontal && textBoxFormat.FlipVertical)
      stringBuilder1.Append("flip:x y;");
    else if (textBoxFormat.FlipHorizontal)
      stringBuilder1.Append("flip:x;");
    else if (textBoxFormat.FlipVertical)
      stringBuilder1.Append("flip:y;");
    if (textBoxFormat.OrderIndex != int.MaxValue)
    {
      if (textBoxFormat.OrderIndex > 0 && textBoxFormat.IsBelowText)
        stringBuilder1.Append($"z-index:-{textBoxFormat.OrderIndex.ToString()};");
      else
        stringBuilder1.Append($"z-index:{textBoxFormat.OrderIndex.ToString()};");
    }
    else if (textBoxFormat.IsBelowText)
      stringBuilder1.Append("z-index:-251658752;");
    if (!visible)
    {
      stringBuilder1.Append("visibility:");
      stringBuilder1.Append("hidden");
    }
    if (str1.Length != 0)
    {
      stringBuilder1.Append("mso-position-horizontal-relative:");
      stringBuilder1.Append(str1);
    }
    if (str3.Length != 0)
    {
      stringBuilder1.Append(";mso-position-vertical-relative:");
      stringBuilder1.Append(str3);
    }
    if (str2.Length != 0)
    {
      stringBuilder1.Append(";mso-position-horizontal:");
      stringBuilder1.Append(str2);
    }
    if (str4.Length != 0)
    {
      stringBuilder1.Append(";mso-position-vertical:");
      stringBuilder1.Append(str4);
    }
    if ((double) textBoxFormat.WidthRelativePercent != 0.0)
    {
      stringBuilder1.Append(";mso-width-percent:" + (textBoxFormat.WidthRelativePercent * 10f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      stringBuilder1.Append(";mso-width-relative:" + this.GetWidthOrigin(textBoxFormat.WidthOrigin));
    }
    if ((double) textBoxFormat.HeightRelativePercent != 0.0)
    {
      stringBuilder1.Append(";mso-height-percent:" + (textBoxFormat.HeightRelativePercent * 10f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      stringBuilder1.Append(";mso-height-relative:" + this.GetHeightOrigin(textBoxFormat.HeightOrigin));
    }
    if (lower.Length != 0)
    {
      stringBuilder1.Append(";v-text-anchor:");
      stringBuilder1.Append(lower);
    }
    if ((double) textBoxFormat.HorizontalRelativePercent != -3.4028234663852886E+38)
    {
      stringBuilder1.Append(";mso-left-percent:");
      stringBuilder1.Append(textBoxFormat.HorizontalRelativePercent * 10f);
    }
    if ((double) textBoxFormat.VerticalRelativePercent != -3.4028234663852886E+38)
    {
      stringBuilder1.Append(";mso-top-percent:");
      stringBuilder1.Append(textBoxFormat.VerticalRelativePercent * 10f);
    }
    stringBuilder1.Append(";mso-wrap-distance-left:");
    stringBuilder1.Append(textBoxFormat.WrapDistanceLeft.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;mso-wrap-distance-top:");
    stringBuilder1.Append(textBoxFormat.WrapDistanceTop.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;mso-wrap-distance-right:");
    stringBuilder1.Append(textBoxFormat.WrapDistanceRight.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;mso-wrap-distance-bottom:");
    stringBuilder1.Append(textBoxFormat.WrapDistanceBottom.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder1.Append("pt;");
    string textBoxWrapType = this.GetTextBoxWrapType(textBoxFormat);
    if (!string.IsNullOrEmpty(textBoxWrapType))
      stringBuilder1.Append("mso-wrap-style:" + textBoxWrapType);
    if (textBoxFormat.HasDocxProps)
    {
      foreach (string docxStyleProp in textBoxFormat.DocxStyleProps)
      {
        if (!docxStyleProp.Contains("mso-wrap-distance-left") && !docxStyleProp.Contains("mso-wrap-distance-top") && !docxStyleProp.Contains("mso-wrap-distance-right") && !docxStyleProp.Contains("mso-wrap-distance-bottom"))
          stringBuilder1.Append(";" + docxStyleProp);
      }
    }
    this.m_writer.WriteAttributeString("style", stringBuilder1.ToString());
    if (!string.IsNullOrEmpty(textBoxFormat.CoordinateSize))
      this.m_writer.WriteAttributeString("coordsize", textBoxFormat.CoordinateSize);
    if ((double) textBoxFormat.CoordinateXOrigin != 0.0 && (double) textBoxFormat.CoordinateYOrigin != 0.0)
    {
      string str5 = $"{textBoxFormat.CoordinateXOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)},{textBoxFormat.CoordinateYOrigin.ToString((IFormatProvider) CultureInfo.InvariantCulture)}";
      if (!string.IsNullOrEmpty(str5))
        this.m_writer.WriteAttributeString("coordorigin", str5);
    }
    if (!string.IsNullOrEmpty(textBoxFormat.Path))
      this.m_writer.WriteAttributeString("path", textBoxFormat.Path);
    if (textBoxFormat.TextWrappingStyle == TextWrappingStyle.Through || textBoxFormat.TextWrappingStyle == TextWrappingStyle.Tight)
    {
      StringBuilder stringBuilder2 = new StringBuilder();
      foreach (PointF vertex in textBoxFormat.WrapPolygon.Vertices)
      {
        stringBuilder2.Append(vertex.X.ToString((IFormatProvider) CultureInfo.InvariantCulture) + " ");
        stringBuilder2.Append(vertex.Y.ToString((IFormatProvider) CultureInfo.InvariantCulture) + " ");
      }
      this.m_writer.WriteAttributeString("wrapcoords", stringBuilder2.ToString());
    }
    if (textBoxFormat.FillEfects.Type == BackgroundType.Color || textBoxFormat.FillEfects.Type == BackgroundType.Gradient)
    {
      Color empty2 = Color.Empty;
      Color color = textBoxFormat.FillEfects.Type != BackgroundType.Gradient ? textBoxFormat.FillColor : textBoxFormat.FillEfects.Gradient.Color1;
      if (color == Color.Empty)
        this.m_writer.WriteAttributeString("filled", "f");
      else
        this.m_writer.WriteAttributeString("fillcolor", "#" + this.GetRGBCode(color));
    }
    if (textBoxFormat.LineColor != Color.Empty)
      this.m_writer.WriteAttributeString("strokecolor", "#" + this.GetRGBCode(textBoxFormat.LineColor));
    if ((double) textBoxFormat.LineWidth > 0.0)
      this.m_writer.WriteAttributeString("strokeweight", textBoxFormat.LineWidth.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
    if (!textBoxFormat.AllowInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (!textBoxFormat.AllowOverlap)
      this.m_writer.WriteAttributeString("allowoverlap", "urn:schemas-microsoft-com:office:office", "f");
    if (textBoxFormat.NoLine)
      this.m_writer.WriteAttributeString("stroked", "f");
    else
      this.SerializeStroke(textBoxFormat);
    if (textBoxFormat.DocxProps.Count > 0)
      this.SerializeDocxProps(textBoxFormat.DocxProps, "shadow");
    if (textBoxFormat.TextWrappingStyle == TextWrappingStyle.InFrontOfText || textBoxFormat.TextWrappingStyle == TextWrappingStyle.Behind)
      return;
    this.m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("type", this.GetTextWrappingStyleAsString(textBoxFormat.TextWrappingStyle));
    if (textBoxFormat.TextWrappingType != TextWrappingType.Both)
      this.m_writer.WriteAttributeString("side", this.GetTextWrappingTypeAsString(textBoxFormat.TextWrappingType));
    this.m_writer.WriteEndElement();
  }

  private string GetTextBoxWrapType(WTextBoxFormat textBoxFormat)
  {
    switch (textBoxFormat.WrappingMode)
    {
      case WrapMode.Square:
        return "square";
      case WrapMode.None:
        return "none";
      case WrapMode.TopBottom:
        return "top-and-bottom";
      case WrapMode.Through:
        return "through";
      default:
        return string.Empty;
    }
  }

  private string GetHeightOrigin(HeightOrigin rel)
  {
    switch (rel)
    {
      case HeightOrigin.Page:
        return "page";
      case HeightOrigin.TopMargin:
        return "top-margin-area";
      case HeightOrigin.BottomMargin:
        return "bottom-margin-area";
      case HeightOrigin.InsideMargin:
        return "inner-margin-area";
      case HeightOrigin.OutsideMargin:
        return "outer-margin-area";
      default:
        return "margin";
    }
  }

  private string GetWidthOrigin(WidthOrigin rel)
  {
    switch (rel)
    {
      case WidthOrigin.Page:
        return "page";
      case WidthOrigin.LeftMargin:
        return "left-margin-area";
      case WidthOrigin.RightMargin:
        return "right-margin-area";
      case WidthOrigin.InsideMargin:
        return "inner-margin-area";
      case WidthOrigin.OutsideMargin:
        return "outer-margin-area";
      default:
        return "margin";
    }
  }

  private string GetTextWrappingTypeAsString(TextWrappingType textWrappingType)
  {
    switch (textWrappingType)
    {
      case TextWrappingType.Left:
        return "left";
      case TextWrappingType.Right:
        return "right";
      default:
        return "largest";
    }
  }

  private string GetTextWrappingStyleAsString(TextWrappingStyle textWrappingStyle)
  {
    switch (textWrappingStyle)
    {
      case TextWrappingStyle.Inline:
        return "none";
      case TextWrappingStyle.TopAndBottom:
        return "topAndBottom";
      case TextWrappingStyle.Tight:
        return "tight";
      case TextWrappingStyle.Through:
        return "through";
      default:
        return "square";
    }
  }

  private void SerializeStroke(WTextBoxFormat textBoxFormat)
  {
    string dashStyle = this.GetDashStyle(textBoxFormat.LineDashing, true);
    string lineStyle = this.GetLineStyle(textBoxFormat.LineStyle, true);
    if (dashStyle == null && lineStyle == null)
      return;
    this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
    if (dashStyle != null)
      this.m_writer.WriteAttributeString("dashstyle", dashStyle);
    if (lineStyle != null)
      this.m_writer.WriteAttributeString("linestyle", lineStyle);
    this.m_writer.WriteEndElement();
  }

  private string GetDashStyle(LineDashing lineDashing, bool is2007)
  {
    switch (lineDashing)
    {
      case LineDashing.Solid:
        return "solid";
      case LineDashing.Dash:
        return "sysDash";
      case LineDashing.Dot:
        return "sysDot";
      case LineDashing.DashDot:
        return "sysDashDot";
      case LineDashing.DashDotDot:
        return "sysDashDotDot";
      case LineDashing.DotGEL:
        return "1 1";
      case LineDashing.DashGEL:
        return "dash";
      case LineDashing.LongDashGEL:
        return !is2007 ? "lgDash" : "longDash";
      case LineDashing.DashDotGEL:
        return "dashDot";
      case LineDashing.LongDashDotGEL:
        return !is2007 ? "lgDashDot" : "longDashDot";
      case LineDashing.LongDashDotDotGEL:
        return !is2007 ? "lgDashDotDot" : "longDashDotDot";
      default:
        return (string) null;
    }
  }

  private string GetLineStyle(TextBoxLineStyle lineStyle, bool is2007)
  {
    switch (lineStyle)
    {
      case TextBoxLineStyle.Double:
        return !is2007 ? "dbl" : "thinThin";
      case TextBoxLineStyle.ThickThin:
        return "thickThin";
      case TextBoxLineStyle.ThinThick:
        return "thinThick";
      case TextBoxLineStyle.Triple:
        return !is2007 ? "tri" : "thickBetweenThin";
      default:
        return !is2007 ? "sng" : "single";
    }
  }

  private void SerializeInsetAttribute(WTextBox textBox)
  {
    float num1 = textBox.TextBoxFormat.InternalMargin.Left;
    if ((double) num1 != 0.0)
      num1 = (float) Math.Round((double) num1, 3);
    float num2 = textBox.TextBoxFormat.InternalMargin.Right;
    if ((double) num2 != 0.0)
      num2 = (float) Math.Round((double) num2, 3);
    float num3 = textBox.TextBoxFormat.InternalMargin.Top;
    if ((double) num3 != 0.0)
      num3 = (float) Math.Round((double) num3, 3);
    float num4 = textBox.TextBoxFormat.InternalMargin.Bottom;
    if ((double) num4 != 0.0)
      num4 = (float) Math.Round((double) num4, 3);
    this.m_writer.WriteAttributeString("inset", $"{$"{$"{$"{string.Empty}{XmlConvert.ToString(num1)}pt,"}{XmlConvert.ToString(num3)}pt,"}{XmlConvert.ToString(num2)}pt,"}{XmlConvert.ToString(num4)}pt");
  }

  private void SerializeInsetAttribute(TextFrame textFrame)
  {
    float num1 = textFrame.InternalMargin.Left;
    if ((double) num1 != 0.0)
      num1 = (float) Math.Round((double) num1, 3);
    float num2 = textFrame.InternalMargin.Right;
    if ((double) num2 != 0.0)
      num2 = (float) Math.Round((double) num2, 3);
    float num3 = textFrame.InternalMargin.Top;
    if ((double) num3 != 0.0)
      num3 = (float) Math.Round((double) num3, 3);
    float num4 = textFrame.InternalMargin.Bottom;
    if ((double) num4 != 0.0)
      num4 = (float) Math.Round((double) num4, 3);
    this.m_writer.WriteAttributeString("inset", $"{$"{$"{$"{string.Empty}{XmlConvert.ToString(num1)}pt,"}{XmlConvert.ToString(num3)}pt,"}{XmlConvert.ToString(num2)}pt,"}{XmlConvert.ToString(num4)}pt");
  }

  private void SerializeXmlParagraphItem(XmlParagraphItem item, bool isInGroupShape)
  {
    if (this.m_document.DocxPackage == null)
      return;
    Stream stream1;
    if (item.Relations.Count == 0 && item.ImageRelations.Count == 0)
    {
      List<string> relationIds = new List<string>();
      stream1 = this.ChangeIDAttribute(item.DataNode, ref relationIds, item);
    }
    else
      stream1 = this.ChangeItemRel(item);
    if (item.ImageRelations.Count > 0)
    {
      MemoryStream stream2 = new MemoryStream();
      this.SerializeImagesRelations(stream2, item.ImageRelations, (ParagraphItem) item);
      stream2.Close();
    }
    XmlReader reader = this.CreateReader(stream1);
    if (reader.LocalName == "oMath" || reader.LocalName == "oMathPara" || isInGroupShape)
    {
      this.m_writer.WriteNode(reader, false);
    }
    else
    {
      this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeCharacterFormat(item.CharacterFormat);
      this.m_writer.WriteNode(reader, false);
      this.m_writer.WriteEndElement();
    }
  }

  private Stream UpdateXMLRelation(Shape shape, Stream stream)
  {
    Stream stream1;
    if (shape.Relations.Count == 0 && shape.ImageRelations.Count == 0)
    {
      List<string> relationIds = new List<string>();
      stream1 = this.ChangeIDAttribute(stream, ref relationIds, (XmlParagraphItem) null);
    }
    else
      stream1 = this.ChangeItemRel(shape, stream);
    return stream1;
  }

  private Stream UpdateXMLRelation(ChildShape shape, Stream stream)
  {
    Stream stream1;
    if (shape.Relations.Count == 0 && shape.ImageRelations.Count == 0)
    {
      List<string> relationIds = new List<string>();
      stream1 = this.ChangeIDAttribute(stream, ref relationIds, (XmlParagraphItem) null);
    }
    else
      stream1 = this.ChangeItemRel(shape, stream);
    return stream1;
  }

  private Stream ChangeItemRel(Shape shape, Stream shapestream)
  {
    List<string> relationIds = new List<string>();
    List<string> relationshipIds = this.FindRelationshipIds(shapestream);
    Stream stream = this.ChangeIDAttribute(shapestream, ref relationIds, (XmlParagraphItem) null);
    int index = 0;
    for (int count = relationshipIds.Count; index < count; ++index)
    {
      string str = relationshipIds[index];
      string newID = relationIds[index];
      if (shape.ImageRelations.ContainsKey(str))
      {
        this.ChangePicRel(shape, str, newID);
      }
      else
      {
        DictionaryEntry relation = shape.Relations[str];
        string relType = relation.Key.ToString();
        this.UpdateItemRelation((ParagraphItem) shape, newID, relation);
        switch (relType)
        {
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
            this.AddXmlItemContType(relType, relation.Value.ToString());
            continue;
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject":
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package":
            this.m_hasOleObject = true;
            this.UpdateOleContentType(shapestream);
            continue;
          default:
            this.m_hasDiagrams = true;
            continue;
        }
      }
    }
    return stream;
  }

  private Stream ChangeItemRel(ChildShape shape, Stream shapestream)
  {
    List<string> relationIds = new List<string>();
    List<string> relationshipIds = this.FindRelationshipIds(shapestream);
    Stream stream = this.ChangeIDAttribute(shapestream, ref relationIds, (XmlParagraphItem) null);
    int index = 0;
    for (int count = relationshipIds.Count; index < count; ++index)
    {
      string str = relationshipIds[index];
      string newID = relationIds[index];
      if (shape.ImageRelations.ContainsKey(str))
      {
        this.ChangePicRel(shape, str, newID);
      }
      else
      {
        DictionaryEntry relation = shape.Relations[str];
        string relType = relation.Key.ToString();
        this.UpdateItemRelation((ParagraphItem) shape, newID, relation);
        switch (relType)
        {
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
            this.AddXmlItemContType(relType, relation.Value.ToString());
            continue;
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject":
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package":
            this.m_hasOleObject = true;
            this.UpdateOleContentType(shapestream);
            continue;
          default:
            this.m_hasDiagrams = true;
            continue;
        }
      }
    }
    return stream;
  }

  private void ChangePicRel(Shape shape, string oldID, string newID)
  {
    if (!shape.ImageRelations.ContainsKey(oldID))
      return;
    ImageRecord imageRelation = shape.ImageRelations[oldID];
    Entity baseEntity = ((Entity) shape).GetBaseEntity((Entity) shape);
    if (baseEntity is HeaderFooter)
    {
      HeaderFooter hf = baseEntity as HeaderFooter;
      this.UpdateHFImageRels(newID, hf, imageRelation);
    }
    else if (baseEntity.Owner != null && baseEntity.Owner is HeaderFooter)
    {
      HeaderFooter owner = baseEntity.Owner as HeaderFooter;
      this.UpdateHFImageRels(newID, owner, imageRelation);
    }
    else
    {
      switch (baseEntity)
      {
        case WFootnote _:
          if ((baseEntity as WFootnote).FootnoteType == FootnoteType.Footnote)
          {
            this.FootnoteImages.Add(newID, imageRelation);
            break;
          }
          this.EndnoteImages.Add(newID, imageRelation);
          break;
        case WComment _:
          this.CommentImages.Add(newID, imageRelation);
          break;
        default:
          this.DocumentImages.Add(newID, imageRelation);
          break;
      }
    }
    if (imageRelation.IsMetafile)
      this.m_hasMetafiles = true;
    else
      this.m_hasImages = true;
  }

  private void ChangePicRel(ChildShape shape, string oldID, string newID)
  {
    if (!shape.ImageRelations.ContainsKey(oldID))
      return;
    ImageRecord imageRelation = shape.ImageRelations[oldID];
    Entity baseEntity = this.GetBaseEntity((Entity) shape);
    if (baseEntity is HeaderFooter)
    {
      HeaderFooter hf = baseEntity as HeaderFooter;
      this.UpdateHFImageRels(newID, hf, imageRelation);
    }
    else if (baseEntity.Owner != null && baseEntity.Owner is HeaderFooter)
    {
      HeaderFooter owner = baseEntity.Owner as HeaderFooter;
      this.UpdateHFImageRels(newID, owner, imageRelation);
    }
    else
    {
      switch (baseEntity)
      {
        case WFootnote _:
          if ((baseEntity as WFootnote).FootnoteType == FootnoteType.Footnote)
          {
            this.FootnoteImages.Add(newID, imageRelation);
            break;
          }
          this.EndnoteImages.Add(newID, imageRelation);
          break;
        case WComment _:
          this.CommentImages.Add(newID, imageRelation);
          break;
        default:
          this.DocumentImages.Add(newID, imageRelation);
          break;
      }
    }
    if (imageRelation.IsMetafile)
      this.m_hasMetafiles = true;
    else
      this.m_hasImages = true;
  }

  private Stream ChangeItemRel(XmlParagraphItem item)
  {
    List<string> relationIds = new List<string>();
    List<string> relationshipIds = this.FindRelationshipIds(item.DataNode);
    Stream stream = this.ChangeIDAttribute(item.DataNode, ref relationIds, item);
    int index = 0;
    for (int count = relationshipIds.Count; index < count; ++index)
    {
      string str = relationshipIds[index];
      string newID = relationIds[index];
      if (item.ImageRelations.ContainsKey(str) && !item.HasNestedImageRelations)
      {
        this.ChangePicRel(item, str, newID);
      }
      else
      {
        DictionaryEntry relation = item.Relations[str];
        string relType = relation.Key.ToString();
        this.UpdateItemRelation((ParagraphItem) item, newID, relation);
        switch (relType)
        {
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
            this.AddXmlItemContType(relType, relation.Value.ToString());
            continue;
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject":
          case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package":
            this.m_hasOleObject = true;
            this.UpdateOleContentType(item.DataNode);
            continue;
          default:
            this.m_hasDiagrams = true;
            continue;
        }
      }
    }
    return stream;
  }

  private void ChangePicRel(XmlParagraphItem item, string oldID, string newID)
  {
    if (!item.ImageRelations.ContainsKey(oldID))
      return;
    ImageRecord imageRelation = item.ImageRelations[oldID];
    Entity xmlItemOwner = this.GetXmlItemOwner(item);
    if (xmlItemOwner is HeaderFooter)
    {
      HeaderFooter hf = xmlItemOwner as HeaderFooter;
      this.UpdateHFImageRels(newID, hf, imageRelation);
    }
    else if (xmlItemOwner.Owner != null && xmlItemOwner.Owner is HeaderFooter)
    {
      HeaderFooter owner = xmlItemOwner.Owner as HeaderFooter;
      this.UpdateHFImageRels(newID, owner, imageRelation);
    }
    else
    {
      switch (xmlItemOwner)
      {
        case WFootnote _:
          if ((xmlItemOwner as WFootnote).FootnoteType == FootnoteType.Footnote)
          {
            this.FootnoteImages.Add(newID, imageRelation);
            break;
          }
          this.EndnoteImages.Add(newID, imageRelation);
          break;
        case WComment _:
          this.CommentImages.Add(newID, imageRelation);
          break;
        default:
          this.DocumentImages.Add(newID, imageRelation);
          break;
      }
    }
    if (imageRelation.IsMetafile)
      this.m_hasMetafiles = true;
    else
      this.m_hasImages = true;
  }

  private Entity GetXmlItemOwner(XmlParagraphItem item)
  {
    Entity entity1 = item.Owner;
    WParagraph wparagraph = (WParagraph) null;
    if (item.Owner is WOleObject)
      entity1 = (Entity) (item.Owner as WOleObject).OwnerParagraph;
    if (entity1.EntityType == EntityType.InlineContentControl)
      wparagraph = entity1.Owner.Owner as WParagraph;
    else if (entity1.EntityType == EntityType.Paragraph)
      wparagraph = entity1 as WParagraph;
    WTableCell owner1 = wparagraph.Owner as WTableCell;
    Entity owner2 = wparagraph.Owner.Owner;
    Entity entity2 = owner1 == null ? wparagraph.Owner : (Entity) owner1.OwnerRow.OwnerTable.OwnerTextBody;
    Entity owner3 = entity2.Owner;
    return (!(owner3 is WTextBox) || (owner3 as WTextBox).OwnerParagraph == null ? (Entity) (entity2 as HeaderFooter) : (Entity) ((owner3 as WTextBox).OwnerParagraph.OwnerTextBody as HeaderFooter)) ?? owner3;
  }

  private void UpdateHFXmlRels(string newId, HeaderFooter hf, DictionaryEntry itemRel)
  {
    string headerFooterId = this.GetHeaderFooterId(hf);
    if (headerFooterId == null)
      return;
    Dictionary<string, DictionaryEntry> dictionary;
    if (!this.HFRelations.ContainsKey(headerFooterId))
    {
      dictionary = new Dictionary<string, DictionaryEntry>();
      this.HFRelations.Add(headerFooterId, dictionary);
    }
    else
      dictionary = this.HFRelations[headerFooterId];
    dictionary.Add(newId, itemRel);
  }

  private Stream ChangeIDAttribute(
    Stream inputStream,
    ref List<string> relationIds,
    XmlParagraphItem xmlParaItem)
  {
    inputStream.Position = 0L;
    XmlReader reader = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateReader(inputStream);
    MemoryStream data = new MemoryStream((int) inputStream.Length);
    XmlWriter writer = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateWriter((Stream) data, Encoding.UTF8);
    bool flag1 = false;
    bool eof;
    do
    {
      bool flag2 = false;
      switch (reader.NodeType)
      {
        case XmlNodeType.Element:
          writer.WriteStartElement(reader.Prefix, reader.LocalName, reader.NamespaceURI);
          this.ChangeRelationshipIDs(reader, writer, ref relationIds, xmlParaItem);
          reader.MoveToElement();
          if (!reader.IsEmptyElement)
          {
            string localName = reader.LocalName;
            reader.Read();
            flag2 = true;
            if (localName == reader.LocalName && reader.NodeType == XmlNodeType.EndElement)
            {
              writer.WriteEndElement();
              flag1 = true;
              break;
            }
            flag1 = false;
            break;
          }
          writer.WriteEndElement();
          flag1 = false;
          break;
        case XmlNodeType.Text:
          writer.WriteString(reader.Value);
          flag1 = false;
          break;
        case XmlNodeType.SignificantWhitespace:
          writer.WriteWhitespace(reader.Value);
          flag1 = false;
          break;
        case XmlNodeType.EndElement:
          if (!flag1)
          {
            writer.WriteEndElement();
            break;
          }
          flag1 = false;
          break;
        default:
          flag1 = false;
          break;
      }
      eof = reader.EOF;
      if (!flag2 && !eof)
        reader.Read();
    }
    while (!eof);
    writer.Flush();
    data.Flush();
    return (Stream) data;
  }

  private void ChangeRelationshipIDs(
    XmlReader reader,
    XmlWriter writer,
    ref List<string> relationIds,
    XmlParagraphItem xmlParaItem)
  {
    if (reader.LocalName == "fill" || reader.LocalName == "chart" || reader.LocalName == "imagedata" || reader.LocalName == "stroke" || reader.LocalName == "control" || reader.LocalName == "OLEObject" || reader.LocalName == "hyperlink" || reader.LocalName == "imageData")
      this.ChangeRelationshipIDAttribute(reader, writer, ref relationIds);
    else if (reader.LocalName == "arc" || reader.LocalName == "curve" || reader.LocalName == "line" || reader.LocalName == "oval" || reader.LocalName == "polyline" || reader.LocalName == "rect" || reader.LocalName == "roundrect")
      this.ChangeShapeIDAttribute(reader, writer, xmlParaItem);
    else if (reader.LocalName == "blip")
      this.ChangeBlipIDAttribute(reader, writer, ref relationIds);
    else if (reader.LocalName == "relIds")
      this.ChangeRelationIDAttribute(reader, writer, ref relationIds);
    else if (reader.LocalName == "docPr")
      this.ChangeDocPropertyIDAttribute(reader, writer);
    else if (reader.LocalName == "numId")
    {
      this.ChangeNumId(reader, writer);
    }
    else
    {
      for (int i = 0; i < reader.AttributeCount; ++i)
      {
        reader.MoveToAttribute(i);
        if (reader.LocalName == "anchor" && reader.Prefix == "relativeHeight" && xmlParaItem != null)
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, xmlParaItem.ZOrderIndex.ToString());
        else if ((reader.LocalName == "style" || reader.Prefix == "style") && xmlParaItem != null && !string.IsNullOrEmpty(reader.Value) && reader.Value.Contains("z-index"))
          this.UpdateZOrderPosition(reader, xmlParaItem, writer);
        else
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
      }
    }
  }

  private void ChangeNumId(XmlReader reader, XmlWriter writer)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "val":
          if (reader.Value != null && reader.Value.Length > 0)
          {
            if (this.m_document.ListStyleNames.ContainsKey(reader.Value))
            {
              string listNumId = this.GetListNumId(this.m_document.ListStyleNames[reader.Value]);
              writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, listNumId);
              break;
            }
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private string GetListNumId(string styleName)
  {
    int num = 0;
    foreach (ListStyle listStyle in (CollectionImpl) this.m_document.ListStyles)
    {
      if (listStyle.Name == styleName)
      {
        ++num;
        break;
      }
      ++num;
    }
    return num.ToString();
  }

  private void ChangeRelationshipIDAttribute(
    XmlReader reader,
    XmlWriter writer,
    ref List<string> relationIds)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "id":
        case "href":
          if (reader.Value != null && reader.Value.Length > 0)
          {
            string nextRelationShipId = this.GetNextRelationShipID();
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, nextRelationShipId);
            relationIds.Add(nextRelationShipId);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private void ChangeBlipIDAttribute(
    XmlReader reader,
    XmlWriter writer,
    ref List<string> relationIds)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "embed":
          if (reader.Value != null && reader.Value.Length > 0)
          {
            string nextRelationShipId = this.GetNextRelationShipID();
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, nextRelationShipId);
            relationIds.Add(nextRelationShipId);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private void ChangeRelationIDAttribute(
    XmlReader reader,
    XmlWriter writer,
    ref List<string> relationIds)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "dm":
        case "lo":
        case "qs":
        case "cs":
          if (reader.Value != null && reader.Value.Length > 0)
          {
            string nextRelationShipId = this.GetNextRelationShipID();
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, nextRelationShipId);
            relationIds.Add(nextRelationShipId);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private void ChangeDocPropertyIDAttribute(XmlReader reader, XmlWriter writer)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "id":
          if (!string.IsNullOrEmpty(reader.Value))
          {
            string str = this.GetNextDocPrID().ToString();
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, str);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private void ChangeShapeIDAttribute(
    XmlReader reader,
    XmlWriter writer,
    XmlParagraphItem xmlParaItem)
  {
    for (int i = 0; i < reader.AttributeCount; ++i)
    {
      reader.MoveToAttribute(i);
      switch (reader.LocalName)
      {
        case "id":
          if (!string.IsNullOrEmpty(reader.Value))
          {
            string str = "_x0000_i" + this.GetNextShapeID().ToString();
            writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, str);
            break;
          }
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
        case "style":
          this.UpdateZOrderPosition(reader, xmlParaItem, writer);
          break;
        default:
          writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
          break;
      }
    }
  }

  private void UpdateZOrderPosition(
    XmlReader reader,
    XmlParagraphItem xmlParaItem,
    XmlWriter writer)
  {
    if (!string.IsNullOrEmpty(reader.Value) && xmlParaItem != null)
    {
      string[] strArray1 = reader.Value.Split(';');
      StringBuilder stringBuilder = new StringBuilder();
      foreach (string str in strArray1)
      {
        if (str.Contains("z-index"))
        {
          string[] strArray2 = str.Split(':');
          if (strArray2.Length == 2 && strArray2[0] == "z-index" && !string.IsNullOrEmpty(strArray2[1]))
          {
            stringBuilder.Append(strArray2[0] + ":");
            stringBuilder.Append(xmlParaItem.ZOrderIndex.ToString() + ";");
          }
          else
            stringBuilder.Append(str + ";");
        }
        else
          stringBuilder.Append(str + ";");
      }
      writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, stringBuilder.ToString());
    }
    else
      writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
  }

  private void ChangeDiagID(XmlNode childNode, List<string> array)
  {
    XmlAttribute xmlAttribute = (XmlAttribute) null;
    for (int index = 0; index < 4; ++index)
    {
      switch (index)
      {
        case 0:
          xmlAttribute = childNode.Attributes["dm", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships"];
          break;
        case 1:
          xmlAttribute = childNode.Attributes["lo", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships"];
          break;
        case 2:
          xmlAttribute = childNode.Attributes["qs", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships"];
          break;
        case 3:
          xmlAttribute = childNode.Attributes["cs", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships"];
          break;
      }
      if (xmlAttribute != null)
      {
        xmlAttribute.Value = this.GetNextRelationShipID();
        array.Add(xmlAttribute.Value);
      }
    }
  }

  private void AddXmlItemContType(string relType, string relTarget)
  {
    switch (relType)
    {
      case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
        this.ChartsPathNames.Add("word/" + relTarget);
        this.UpdateChartInnerRelation("word/" + relTarget);
        break;
      case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
        this.ControlsPathNames.Add("word/" + relTarget);
        break;
    }
  }

  private void UpdateChartInnerRelation(string containerName)
  {
    PartContainer partContainer = this.m_document.DocxPackage.FindPartContainer(containerName);
    string partName = containerName.Substring(containerName.LastIndexOf('/') + 1);
    string xmlPartRelationKey = partContainer.GetXmlPartRelationKey(partName);
    if (string.IsNullOrEmpty(xmlPartRelationKey))
      return;
    Stream dataStream = partContainer.Relations[xmlPartRelationKey].DataStream;
    dataStream.Position = 0L;
    XmlReader reader = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateReader(dataStream);
    int content = (int) reader.MoveToContent();
    if (reader.LocalName != "Relationships")
      reader.ReadInnerXml();
    if (reader.IsEmptyElement)
      return;
    string localName = reader.LocalName;
    reader.Read();
    bool flag = true;
    if (localName == reader.LocalName && reader.NodeType == XmlNodeType.EndElement)
      return;
    do
    {
      if (!flag)
        reader.Read();
      if (reader.NodeType == XmlNodeType.Element && !(reader.GetAttribute("TargetMode") == "External"))
      {
        string attribute = reader.GetAttribute("Target");
        string containerName1 = !attribute.StartsWithExt("../") ? containerName.Remove(containerName.LastIndexOf('/') + 1) + attribute : this.m_document.DocxPackage.GetXmlPartContainerPath(partContainer, attribute);
        if (containerName1.EndsWith(".xml"))
        {
          this.ChartsPathNames.Add(containerName1);
          this.UpdateChartInnerRelation(containerName1);
        }
      }
      flag = false;
    }
    while (reader.LocalName != "Relationships");
    reader.Close();
    dataStream.Position = 0L;
  }

  private void SerializeAbsoluteTab(WAbsoluteTab absoluteTab)
  {
    this.m_writer.WriteStartElement("w", "r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(absoluteTab.CharacterFormat);
    this.m_writer.WriteStartElement("ptab", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (absoluteTab.Relation)
    {
      case AbsoluteTabRelation.Margin:
        this.m_writer.WriteAttributeString("w", "relativeTo", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "margin");
        break;
      case AbsoluteTabRelation.Indent:
        this.m_writer.WriteAttributeString("w", "relativeTo", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "margin");
        break;
    }
    switch (absoluteTab.Alignment)
    {
      case AbsoluteTabAlignment.Left:
        this.m_writer.WriteAttributeString("w", "alignment", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "left");
        break;
      case AbsoluteTabAlignment.Center:
        this.m_writer.WriteAttributeString("w", "alignment", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
        break;
      case AbsoluteTabAlignment.Right:
        this.m_writer.WriteAttributeString("w", "alignment", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "right");
        break;
    }
    this.m_writer.WriteAttributeString("leader", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetTabLeader(absoluteTab.TabLeader));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeOleObject(WOleObject oleObject)
  {
    if (oleObject.OleXmlItem != null)
    {
      oleObject.OleXmlItem.SetOwner((OwnerHolder) oleObject.Owner);
      this.SerializeXmlParagraphItem(oleObject.OleXmlItem, false);
    }
    else
    {
      if (oleObject.IsEmpty && oleObject.LinkType == OleLinkType.Embed || oleObject.OlePicture == null)
        return;
      this.m_hasOleObject = true;
      if (oleObject.Field.FieldEnd != null)
      {
        this.FieldStack.Push(oleObject.Field);
        this.IsSkipFieldItem = true;
      }
      this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeCharacterFormat(oleObject.OlePicture.CharacterFormat);
      this.m_writer.WriteStartElement("object", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
      string shapeId = "_x0000_i" + this.GetNextShapeID().ToString();
      this.m_writer.WriteAttributeString("id", shapeId);
      this.m_writer.WriteAttributeString("type", "#_x0000_t75");
      if (!string.IsNullOrEmpty(oleObject.OlePicture.AlternativeText))
        this.m_writer.WriteAttributeString("alt", oleObject.OlePicture.AlternativeText);
      this.m_writer.WriteAttributeString("style", this.GetOlePictureStyle(oleObject.OlePicture));
      this.m_writer.WriteAttributeString("ole", "urn:schemas-microsoft-com:office:office", "");
      this.SerializeShapeBorderColor(oleObject.OlePicture.PictureShape, true);
      this.SerializeOlePicture(oleObject);
      this.m_writer.WriteEndElement();
      this.SerializeOleData(oleObject, shapeId);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeOleData(WOleObject oleObject, string shapeId)
  {
    this.m_writer.WriteStartElement("OLEObject", "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("Type", oleObject.LinkType == OleLinkType.Embed ? "Embed" : "Link");
    this.m_writer.WriteAttributeString("ProgID", oleObject.ObjectType);
    this.m_writer.WriteAttributeString("ShapeID", shapeId);
    if (oleObject.DisplayAsIcon)
      this.m_writer.WriteAttributeString("DrawAspect", "Icon");
    else
      this.m_writer.WriteAttributeString("DrawAspect", "Content");
    string key = (string) null;
    IEntity baseEntity = (IEntity) ((Entity) oleObject).GetBaseEntity((Entity) oleObject);
    if (baseEntity.EntityType == EntityType.HeaderFooter)
      key = this.GetHeaderFooterId(baseEntity as HeaderFooter);
    if ((key == null || this.HFOleContainers.ContainsKey(key)) && this.OleIds.ContainsKey(oleObject.OleStorageName) && oleObject.LinkType == OleLinkType.Embed)
    {
      string oleId = this.OleIds[oleObject.OleStorageName];
      this.m_writer.WriteAttributeString("ObjectID", "_" + oleObject.OleStorageName);
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", oleId);
    }
    else
    {
      string nextRelationShipId = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
      if (!this.OleIds.ContainsKey(oleObject.OleStorageName) && oleObject.LinkType == OleLinkType.Embed)
        this.OleIds.Add(oleObject.OleStorageName, nextRelationShipId);
      string str;
      if (oleObject.LinkType == OleLinkType.Embed)
      {
        this.m_writer.WriteAttributeString("ObjectID", "_" + oleObject.OleStorageName);
        string oleFileName = this.GetOleFileName(oleObject.OleObjectType, oleObject.ObjectType);
        if (baseEntity.EntityType == EntityType.HeaderFooter)
        {
          if (this.HFOleContainers.ContainsKey(key))
          {
            this.HFOleContainers[key].Add(oleFileName, oleObject.GetOlePartStream(false));
          }
          else
          {
            this.HFOleContainers.Add(key, new Dictionary<string, Stream>());
            this.HFOleContainers[key].Add(oleFileName, oleObject.GetOlePartStream(false));
          }
        }
        else
          this.OleContainers.Add(oleFileName, oleObject.GetOlePartStream(false));
        str = "embeddings/" + oleFileName;
      }
      else
      {
        this.m_writer.WriteAttributeString("UpdateMode", oleObject.UpdateMode.ToString());
        this.WriteLinkOptions();
        str = oleObject.LinkPath.Replace(" ", "%20");
        if (!string.IsNullOrEmpty(str) && !str.Contains("file:///"))
          str = "file:///" + str;
      }
      DictionaryEntry itemRel = new DictionaryEntry((object) this.GetOleRelType(oleObject.OleObjectType, oleObject.ObjectType), (object) str);
      this.UpdateItemRelation((ParagraphItem) oleObject, nextRelationShipId, itemRel);
      this.UpdateOleContentType(oleObject.ObjectType);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeOlePicture(WOleObject oleObject)
  {
    WPicture olePicture = oleObject.OlePicture;
    string str = this.UpdateShapeId(olePicture, true, oleObject);
    this.m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
    if (!string.IsNullOrEmpty(str))
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
    this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", "");
    this.m_writer.WriteEndElement();
    if (olePicture.IsMetaFile)
      this.m_hasMetafiles = true;
    else
      this.m_hasImages = true;
    if (olePicture.TextWrappingStyle == TextWrappingStyle.Inline || olePicture.TextWrappingStyle == TextWrappingStyle.InFrontOfText || olePicture.TextWrappingStyle == TextWrappingStyle.Behind)
      return;
    this.m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("type", olePicture.TextWrappingStyle.ToString());
    this.m_writer.WriteEndElement();
  }

  private void WriteLinkOptions()
  {
    this.m_writer.WriteStartElement("LinkType", "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteString("EnhancedMetaFile");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("LockedField", "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteString("false");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("FieldCodes", "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteString($"{this.SlashSymbol}{this.SlashSymbol}f 0");
    this.m_writer.WriteEndElement();
  }

  private string GetOleFileName(OleObjectType objectType, string stringObjType)
  {
    string oleFileName;
    switch (OleTypeConvertor.ToString(objectType, false))
    {
      case "Excel.Chart.8":
      case "Excel.Sheet.8":
        oleFileName = $"Microsoft_Office_Excel_97-2003_Worksheet{this.GetNextID().ToString()}.xls";
        break;
      case "Excel.Sheet.12":
        oleFileName = $"Microsoft_Office_Excel_Worksheet{this.GetNextID().ToString()}.xlsx";
        break;
      case "Excel.SheetMacroEnabled.12":
        oleFileName = $"Microsoft_Office_Excel_Macro-Enabled_Worksheet{this.GetNextID().ToString()}.xlsm";
        break;
      case "Excel.SheetBinaryMacroEnabled.12":
        oleFileName = $"Microsoft_Office_Excel_Binary_Worksheet{this.GetNextID().ToString()}.xlsb";
        break;
      case "PowerPoint.Show.8":
        oleFileName = $"Microsoft_Office_PowerPoint_97-2003_Presentation{this.GetNextID().ToString()}.ppt";
        break;
      case "PowerPoint.Show.12":
        oleFileName = $"Microsoft_Office_PowerPoint_Presentation{this.GetNextID().ToString()}.pptx";
        break;
      case "Word.Document.8":
        oleFileName = $"Microsoft_Office_Word_97-2003_Document{this.GetNextID().ToString()}.doc";
        break;
      case "Word.Document.12":
        oleFileName = $"Microsoft_Office_Word_Document{this.GetNextID().ToString()}.docx";
        break;
      case "Word.DocumentMacroEnabled.12":
        oleFileName = $"Microsoft_Office_Word_Macro-Enabled_Document{this.GetNextID().ToString()}.docm";
        break;
      case "PowerPoint.ShowMacroEnabled.12":
        oleFileName = $"Microsoft_Office_PowerPoint_Macro-Enabled_Presentation{this.GetNextID().ToString()}.pptm";
        break;
      case "PowerPoint.SlideMacroEnabled.12":
        oleFileName = $"Microsoft_Office_PowerPoint_Macro-Enabled_Slide{this.GetNextID().ToString()}.sldm";
        break;
      case "PowerPoint.Slide.12":
        oleFileName = $"Microsoft_Office_PowerPoint_Slide{this.GetNextID().ToString()}.sldx";
        break;
      default:
        oleFileName = objectType != OleObjectType.Undefined || !(stringObjType == "Visio.Drawing.15") ? $"oleObject{this.GetNextID().ToString()}.bin" : $"Microsoft_Visio_Drawing{this.GetNextID().ToString()}.vsdx";
        break;
    }
    return oleFileName;
  }

  private string GetOleRelType(OleObjectType objectType, string stringObjType)
  {
    string oleRelType;
    switch (OleTypeConvertor.ToString(objectType, false))
    {
      case "Excel.Sheet.12":
      case "Excel.SheetBinaryMacroEnabled.12":
      case "PowerPoint.Show.12":
      case "Word.Document.12":
      case "Word.DocumentMacroEnabled.12":
      case "Excel.SheetMacroEnabled.12":
      case "PowerPoint.ShowMacroEnabled.12":
      case "PowerPoint.SlideMacroEnabled.12":
      case "PowerPoint.Slide.12":
        oleRelType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
        break;
      default:
        oleRelType = objectType != OleObjectType.Undefined || !(stringObjType == "Visio.Drawing.15") ? "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
        break;
    }
    return oleRelType;
  }

  private string GetOlePictureStyle(WPicture picture) => this.SerializeShapePictStyle(picture);

  private void UpdateOleContentType(Stream nodeStream)
  {
    XmlReader reader = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateReader(nodeStream);
    reader.ReadToFollowing("OLEObject", "urn:schemas-microsoft-com:office:office");
    if (reader.LocalName != "OLEObject")
      return;
    string attribute = reader.GetAttribute("ProgID");
    if (attribute == null)
      return;
    this.UpdateOleContentType(attribute);
  }

  private void UpdateOleContentType(string type)
  {
    string str;
    switch (type)
    {
      case "Excel.Chart.8":
      case "Excel.Sheet.8":
        str = "application/vnd.ms-excel";
        break;
      case "Excel.Sheet.12":
        str = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        break;
      case "Excel.SheetBinaryMacroEnabled.12":
        str = "application/vnd.ms-excel.sheet.binary.macroEnabled.12";
        break;
      case "Excel.SheetMacroEnabled.12":
        str = "application/vnd.ms-excel.sheet.macroEnabled.12";
        break;
      case "PowerPoint.Show.8":
        str = "application/vnd.ms-powerpoint";
        break;
      case "PowerPoint.Show.12":
        str = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
        break;
      case "Word.Document.8":
        str = "application/msword";
        break;
      case "Word.Document.12":
        str = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        break;
      case "Word.DocumentMacroEnabled.12":
        str = "application/vnd.ms-word.document.macroEnabled.12";
        break;
      case "PowerPoint.ShowMacroEnabled.12":
        str = "application/vnd.ms-powerpoint.presentation.macroEnabled.12";
        break;
      case "PowerPoint.SlideMacroEnabled.12":
        str = "application/vnd.ms-powerpoint.slide.macroEnabled.12";
        break;
      case "PowerPoint.Slide.12":
        str = "application/vnd.openxmlformats-officedocument.presentationml.slide";
        break;
      case "Visio.Drawing.11":
        str = "application/vnd.visio";
        break;
      case "Visio.Drawing.15":
        str = "application/vnd.ms-visio.drawing";
        break;
      default:
        str = "application/vnd.openxmlformats-officedocument.oleObject";
        break;
    }
    if (str == null)
      return;
    if (this.OleContentTypes.Count == 0)
      this.OleContentTypes.Add("application/vnd.openxmlformats-officedocument.oleObject");
    if (this.OleContentTypes.Contains(str))
      return;
    this.OleContentTypes.Add(str);
  }

  private void SerializeSymbol(WSymbol symbol)
  {
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(symbol.CharacterFormat);
    this.m_writer.WriteStartElement("sym", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("char", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (symbol.CharCodeExt != (byte) 240 /*0xF0*/ ? "00" : "F0") + symbol.CharacterCode.ToString("X2"));
    this.m_writer.WriteAttributeString("font", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", symbol.FontName);
    if (this.m_symbolFontNames == null)
      this.m_symbolFontNames = new List<string>();
    if (!this.m_symbolFontNames.Contains(symbol.FontName))
      this.m_symbolFontNames.Add(symbol.FontName);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeFieldMark(WFieldMark fieldMark)
  {
    if (this.CurrentField == null)
      return;
    WField wfield = fieldMark.ParentField != null ? fieldMark.ParentField : this.CurrentField;
    if (wfield.FieldType == FieldType.FieldHyperlink && fieldMark.Type == FieldMarkType.FieldEnd && this.IsPictureHyperLink(wfield))
    {
      this.FieldStack.Pop();
      if (wfield.FieldSeparator.NextSibling.NextSibling == fieldMark)
        return;
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("w", "r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (fieldMark.CharacterFormat.IsDefault && wfield != null)
      {
        fieldMark.CharacterFormat.ImportContainer((FormatBase) wfield.CharacterFormat);
        fieldMark.CharacterFormat.CopyProperties((FormatBase) wfield.CharacterFormat);
      }
      this.SerializeCharacterFormat(wfield != null ? wfield.CharacterFormat : fieldMark.CharacterFormat);
      this.m_writer.WriteStartElement("w", "fldChar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      string str = fieldMark.Type == FieldMarkType.FieldSeparator ? "separate" : "end";
      this.m_writer.WriteAttributeString("w", "fldCharType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      if (wfield != null && wfield.FieldType == FieldType.FieldIncludePicture && fieldMark.Type != FieldMarkType.FieldEnd)
        this.SerializeIncludePictureFieldResult(wfield);
      if (this.FieldMarkStack.Count > 0 && fieldMark == this.FieldMarkStack.Peek())
        this.FieldMarkStack.Pop();
      if (fieldMark.Type != FieldMarkType.FieldEnd || this.CurrentField == null)
        return;
      this.FieldStack.Pop();
    }
  }

  private void SerializeIncludePictureFieldResult(WField includePictureField)
  {
    string[] strArray = includePictureField.FieldCode.Trim().Split('"');
    string empty = string.Empty;
    if (strArray.Length > 1)
      empty = strArray[1];
    Image image = this.DownloadImage(empty);
    if (image == null)
      return;
    ParagraphItem pictureFieldResult = includePictureField.GetIncudePictureFieldResult();
    if (pictureFieldResult != null && pictureFieldResult is WPicture)
    {
      float width = (pictureFieldResult as WPicture).Width;
      float height = (pictureFieldResult as WPicture).Height;
      (pictureFieldResult as WPicture).LoadImage(image);
      (pictureFieldResult as WPicture).Width = width;
      (pictureFieldResult as WPicture).Height = height;
    }
    else
    {
      WPicture picture = new WPicture((IWordDocument) includePictureField.Document);
      picture.LoadImage(image);
      picture.SetOwner((OwnerHolder) includePictureField.Owner);
      string str1 = this.UpdateShapeId(picture, false, (WOleObject) null);
      string str2 = this.UpdateInclPicFieldUrl(empty, includePictureField);
      string str3 = $"width:{picture.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt;height:{picture.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture)}pt".Replace(",", ".");
      this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
      this.m_writer.WriteAttributeString("style", str3);
      this.m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str1);
      this.m_writer.WriteAttributeString("href", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str2);
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializePicture(WPicture picture)
  {
    if (picture.SkipDocxItem || this.IsPictureBullet(picture) || (double) picture.Width < 0.0 || (double) picture.Height < 0.0)
      return;
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(picture.CharacterFormat);
    if (picture.IsShape || picture.Document.Settings.CompatibilityMode == CompatibilityMode.Word2003 && picture.Document.SaveOptions.MaintainCompatibilityMode)
      this.SerializeShape(picture);
    else
      this.SerializeDrawing(picture);
    this.m_writer.WriteEndElement();
  }

  private bool IsPictureBullet(WPicture picture)
  {
    ParagraphItemCollection paragraphItemCollection = (ParagraphItemCollection) null;
    if (picture.Owner is WParagraph)
      paragraphItemCollection = (picture.Owner as WParagraph).Items;
    else if (picture.Owner is InlineContentControl)
      paragraphItemCollection = (picture.Owner as InlineContentControl).ParagraphItems;
    if (paragraphItemCollection != null)
    {
      foreach (ParagraphItem paragraphItem in (CollectionImpl) paragraphItemCollection)
      {
        if (paragraphItem is BookmarkStart bookmarkStart && bookmarkStart.Name == "_PictureBullets")
          return true;
      }
    }
    return false;
  }

  private void SerializeDrawing(WPicture picture)
  {
    if (picture.ImageRecord == null && string.IsNullOrEmpty(picture.ExternalLink))
      return;
    this.m_writer.WriteStartElement("drawing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (picture.TextWrappingStyle != TextWrappingStyle.Inline)
      this.SerializeAbsolutePicture(picture);
    else
      this.SerializeInlinePicture(picture);
    this.m_writer.WriteEndElement();
  }

  private void SerializeInlinePicture(WPicture picture)
  {
    this.m_writer.WriteStartElement("inline", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteStartElement("extent", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    RectangleF boundsAfterRotation = this.GetBoundsAfterRotation(new RectangleF(0.0f, 0.0f, picture.Width, picture.Height), picture.Rotation);
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) boundsAfterRotation.Width * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) boundsAfterRotation.Height * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    double borderWidth = (double) picture.PictureShape.PictureDescriptor.BorderLeft.LineWidth / 8.0;
    if (borderWidth > 0.0 && picture.DocxProps.Count == 0)
    {
      long leftTop = 0;
      long rightBottom = 0;
      picture.PictureShape.GetEffectExtent(borderWidth, ref leftTop, ref rightBottom);
      this.m_writer.WriteStartElement("effectExtent", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("l", leftTop.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("t", leftTop.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("r", rightBottom.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("b", rightBottom.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.SerializePicProperties(picture);
    this.SerializeDrawingGraphics(picture);
    this.m_writer.WriteEndElement();
  }

  private RectangleF GetBoundsAfterRotation(RectangleF bounds, float rotation)
  {
    double num1 = (double) bounds.X + (double) bounds.Width / 2.0;
    double num2 = (double) bounds.Y + (double) bounds.Height / 2.0;
    rotation = this.GetRotationAngle(rotation);
    double num3 = (double) rotation * Math.PI / 180.0;
    double num4 = Math.Sin(num3);
    double num5 = Math.Cos(num3);
    return new RectangleF((float) (num1 + ((double) bounds.X - num1) * num5 - ((double) bounds.Y - num2) * num4), (float) (num2 + ((double) bounds.X - num1) * num4 + ((double) bounds.Y - num2) * num5), bounds.Width, bounds.Height);
  }

  private float GetRotationAngle(float rotation)
  {
    if ((double) rotation >= 360.0 || (double) rotation <= -360.0)
      rotation %= 360f;
    if ((double) rotation < 0.0)
      rotation = 360f + rotation;
    return rotation;
  }

  private void SerializeAbsolutePicture(WPicture picture)
  {
    this.m_writer.WriteStartElement("anchor", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("distT", (picture.DistanceFromTop * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("distB", (picture.DistanceFromBottom * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("distL", (picture.DistanceFromLeft * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("distR", (picture.DistanceFromRight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("simplePos", "0");
    if (picture.OrderIndex != int.MaxValue)
      this.m_writer.WriteAttributeString("relativeHeight", picture.OrderIndex.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    else
      this.m_writer.WriteAttributeString("relativeHeight", "0");
    this.m_writer.WriteAttributeString("behindDoc", picture.IsBelowText ? "1" : "0");
    this.m_writer.WriteAttributeString("locked", "0");
    if (picture.LayoutInCell)
      this.m_writer.WriteAttributeString("layoutInCell", "1");
    else
      this.m_writer.WriteAttributeString("layoutInCell", "0");
    if (picture.AllowOverlap)
      this.m_writer.WriteAttributeString("allowOverlap", "1");
    else
      this.m_writer.WriteAttributeString("allowOverlap", "0");
    this.m_writer.WriteStartElement("simplePos", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("x", "0");
    this.m_writer.WriteAttributeString("y", "0");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("positionH", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("relativeFrom", this.GetShapeHorzOrigin(picture.HorizontalOrigin));
    if (picture.HorizontalAlignment == ShapeHorizontalAlignment.None)
    {
      this.m_writer.WriteStartElement("posOffset", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteString(((int) Math.Round((double) picture.HorizontalPosition * 12700.0)).ToString());
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("align", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteString(picture.HorizontalAlignment.ToString().ToLower());
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("positionV", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("relativeFrom", this.GetVerticalOrginAsString(picture.VerticalOrigin, false));
    if (picture.VerticalAlignment == ShapeVerticalAlignment.None)
    {
      this.m_writer.WriteStartElement("posOffset", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteString(((int) Math.Round((double) picture.VerticalPosition * 12700.0)).ToString());
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("align", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteString(picture.VerticalAlignment.ToString().ToLower());
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("extent", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) picture.Width * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) picture.Height * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.SerializePicProperties(picture);
    switch (picture.TextWrappingStyle)
    {
      case TextWrappingStyle.TopAndBottom:
        this.m_writer.WriteStartElement("wrapTopAndBottom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteEndElement();
        break;
      case TextWrappingStyle.Square:
        this.m_writer.WriteStartElement("wrapSquare", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteAttributeString("wrapText", this.GetPictureWrappingTypeAsString(picture.TextWrappingType));
        this.m_writer.WriteEndElement();
        break;
      case TextWrappingStyle.Tight:
        this.m_writer.WriteStartElement("wrapTight", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteAttributeString("wrapText", this.GetPictureWrappingTypeAsString(picture.TextWrappingType));
        this.SerializeWrapPolygon((Entity) picture, picture.WrapPolygon);
        this.m_writer.WriteEndElement();
        break;
      case TextWrappingStyle.Through:
        this.m_writer.WriteStartElement("wrapThrough", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteAttributeString("wrapText", this.GetPictureWrappingTypeAsString(picture.TextWrappingType));
        this.SerializeWrapPolygon((Entity) picture, picture.WrapPolygon);
        this.m_writer.WriteEndElement();
        break;
      default:
        this.m_writer.WriteStartElement("wrapNone", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
        this.m_writer.WriteEndElement();
        break;
    }
    this.SerializeDrawingGraphics(picture);
    this.m_writer.WriteEndElement();
  }

  private void SerializePicProperties(WPicture picture)
  {
    if (picture.DocxProps.Count <= 0)
      return;
    foreach (Stream docxProp in picture.DocxProps)
      this.m_writer.WriteNode(this.CreateReader(docxProp), false);
  }

  private void SerializeDrawingGraphics(WPicture picture)
  {
    string empty = string.Empty;
    string key = this.UpdateShapeId(picture, false, (WOleObject) null);
    picture.ShapeId = this.GetNextDocPrID();
    this.m_writer.WriteStartElement("wp", "docPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("id", picture.ShapeId.ToString());
    if (picture.AlternativeText != null)
      this.m_writer.WriteAttributeString("descr", picture.AlternativeText);
    this.m_writer.WriteAttributeString("name", picture.Name);
    if (!string.IsNullOrEmpty(picture.Title))
      this.m_writer.WriteAttributeString("title", picture.Title);
    if (!picture.Visible)
      this.m_writer.WriteAttributeString("hidden", "1");
    this.SerializePictureHyperlink(picture);
    this.m_writer.WriteEndElement();
    if (picture.LockAspectRatio)
    {
      this.m_writer.WriteStartElement("wp", "cNvGraphicFramePr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteStartElement("a", "graphicFrameLocks", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("noChangeAspect", "1");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("a", "graphic", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "graphicData", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("uri", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("pic", "pic", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("pic", "nvPicPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("pic", "cNvPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("id", "0");
    this.m_writer.WriteAttributeString("name", "");
    this.m_writer.WriteAttributeString("descr", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pic", "cNvPicPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("a", "picLocks", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("noChangeAspect", "1");
    this.m_writer.WriteAttributeString("noChangeArrowheads", "1");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pic", "blipFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteStartElement("a", "blip", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (picture.HasImageRecordReference || string.IsNullOrEmpty(picture.ExternalLink) && !picture.IsDefaultPicOfContentControl)
      this.m_writer.WriteAttributeString("r", "embed", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", key);
    if (!string.IsNullOrEmpty(picture.ExternalLink) && this.DocumentImages.ContainsKey(key))
    {
      if (!picture.HasImageRecordReference)
        this.DocumentImages.Remove(key);
      else
        key = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("link", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", key);
      this.ExternalLinkImages.Add(key, picture.ExternalLink);
    }
    if (picture.FillFormat.FillType == FillType.FillPicture)
    {
      Entity baseEntity = ((Entity) picture).GetBaseEntity((Entity) picture);
      this.SerializeBlipFill(picture.FillFormat, baseEntity, picture, false);
    }
    else if (picture.ChromaKeyColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("clrChange", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("clrFrom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(picture.ChromaKeyColor));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("clrTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(picture.ChromaKeyColor));
      this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", "0");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "srcRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if ((double) picture.FillRectangle.LeftOffset != 0.0)
      this.m_writer.WriteAttributeString("l", this.GetFillRectangleOffsetVal((double) picture.FillRectangle.LeftOffset));
    if ((double) picture.FillRectangle.TopOffset != 0.0)
      this.m_writer.WriteAttributeString("t", this.GetFillRectangleOffsetVal((double) picture.FillRectangle.TopOffset));
    if ((double) picture.FillRectangle.RightOffset != 0.0)
      this.m_writer.WriteAttributeString("r", this.GetFillRectangleOffsetVal((double) picture.FillRectangle.RightOffset));
    if ((double) picture.FillRectangle.BottomOffset != 0.0)
      this.m_writer.WriteAttributeString("b", this.GetFillRectangleOffsetVal((double) picture.FillRectangle.BottomOffset));
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "stretch", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("a", "fillRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pic", "spPr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("bwMode", "auto");
    this.m_writer.WriteStartElement("a", "xfrm", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if ((double) picture.Rotation != 0.0)
    {
      float a = this.GetRotationAngle(picture.Rotation) * 60000f;
      if ((double) a != 0.0)
        this.m_writer.WriteAttributeString("rot", Math.Round((double) a).ToString());
    }
    if (picture.FlipHorizontal)
      this.m_writer.WriteAttributeString("flipH", "1");
    if (picture.FlipVertical)
      this.m_writer.WriteAttributeString("flipV", "1");
    this.m_writer.WriteStartElement("a", "off", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("x", "0");
    this.m_writer.WriteAttributeString("y", "0");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "ext", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    RectangleF boundsAfterRotation = this.GetBoundsAfterRotation(new RectangleF(0.0f, 0.0f, picture.Width, picture.Height), picture.Rotation);
    this.m_writer.WriteAttributeString("cx", ((int) Math.Round((double) boundsAfterRotation.Width * 12700.0)).ToString());
    this.m_writer.WriteAttributeString("cy", ((int) Math.Round((double) boundsAfterRotation.Height * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("a", "prstGeom", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", "rect");
    this.m_writer.WriteStartElement("a", "avLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (picture.HasBorder)
    {
      if (picture.TextWrappingStyle == TextWrappingStyle.Inline && picture.IsShape)
        this.SerializeInlineShapeLine(picture.PictureShape);
      else
        this.SerializeShapeLine(picture.PictureShape);
    }
    if (picture.DocxVisualShapeProps.Count > 0)
    {
      this.SerializeDocxProps(picture.DocxVisualShapeProps, "effectLst");
      this.SerializeDocxProps(picture.DocxVisualShapeProps, "scene3d");
      this.SerializeDocxProps(picture.DocxVisualShapeProps, "sp3d");
      this.SerializeDocxProps(picture.DocxVisualShapeProps, "extLst");
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private string GetFillRectangleOffsetVal(double value) => Math.Round(value * 1000.0).ToString();

  private void SerializeInlineShapeLine(InlineShapeObject shape)
  {
    BorderCode borderLeft = shape.PictureDescriptor.BorderLeft;
    TextBoxLineStyle lineStyle = TextBoxLineStyle.Simple;
    LineDashing dashStyle = shape.GetDashStyle((BorderStyle) borderLeft.BorderType, ref lineStyle);
    this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (lineStyle != TextBoxLineStyle.Simple)
      this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle(lineStyle, false));
    uint num = (uint) Math.Round((double) borderLeft.LineWidth / 8.0 * 12700.0);
    if (num > 0U)
      this.m_writer.WriteAttributeString("w", num.ToString());
    if (shape.LineGradient.GradientStops.Count > 0)
    {
      this.SerializeGradientFill(shape.LineGradient);
    }
    else
    {
      Color color = shape.PictureDescriptor.BorderLeft.LineColorExt;
      if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(924))
        color = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(924));
      if (color.IsEmpty)
      {
        this.m_writer.WriteStartElement("noFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(color));
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
    }
    if (borderLeft.BorderType != (byte) 0)
    {
      this.m_writer.WriteStartElement("prstDash", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetDashStyle(dashStyle, false));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private string GetLanguage(short key)
  {
    switch (key)
    {
      case 1:
        return "ar";
      case 2:
        return "bg";
      case 3:
        return "ca";
      case 4:
        return "zh";
      case 5:
        return "cs";
      case 6:
        return "da";
      case 7:
        return "de";
      case 8:
        return "el";
      case 9:
        return "en";
      case 10:
        return "es";
      case 11:
        return "fi";
      case 12:
        return "fr";
      case 13:
        return "he";
      case 14:
        return "hu";
      case 15:
        return "is";
      case 16 /*0x10*/:
        return "it";
      case 17:
        return "ja";
      case 18:
        return "ko";
      case 19:
        return "nl";
      case 20:
        return "nb";
      case 21:
        return "pl";
      case 22:
        return "pt";
      case 23:
        return "rm";
      case 24:
        return "ro";
      case 25:
        return "ru";
      case 26:
        return "hr";
      case 27:
        return "sk";
      case 28:
        return "sq";
      case 29:
        return "sv";
      case 30:
        return "th";
      case 31 /*0x1F*/:
        return "tr";
      case 32 /*0x20*/:
        return "ur";
      case 33:
        return "id";
      case 34:
        return "uk";
      case 35:
        return "be";
      case 36:
        return "sl";
      case 37:
        return "et";
      case 38:
        return "lv";
      case 39:
        return "lt";
      case 40:
        return "tg";
      case 41:
        return "fa";
      case 42:
        return "vi";
      case 43:
        return "hy";
      case 44:
        return "az";
      case 45:
        return "eu";
      case 46:
        return "hsb";
      case 47:
        return "mk";
      case 50:
        return "tn";
      case 52:
        return "xh";
      case 53:
        return "zu";
      case 54:
        return "af";
      case 55:
        return "ka";
      case 56:
        return "fo";
      case 57:
        return "hi";
      case 58:
        return "mt";
      case 59:
        return "smn";
      case 62:
        return "ms";
      case 63 /*0x3F*/:
        return "kk";
      case 64 /*0x40*/:
        return "ky";
      case 65:
        return "sw";
      case 66:
        return "tk";
      case 67:
        return "uz";
      case 68:
        return "tt";
      case 69:
        return "bn";
      case 70:
        return "pa";
      case 71:
        return "gu";
      case 72:
        return "or";
      case 73:
        return "ta";
      case 74:
        return "te";
      case 75:
        return "kn";
      case 76:
        return "ml";
      case 78:
        return "mr";
      case 79:
        return "sa";
      case 80 /*0x50*/:
        return "mn";
      case 81:
        return "bo";
      case 82:
        return "cy";
      case 84:
        return "lo";
      case 86:
        return "gl";
      case 87:
        return "kok";
      case 90:
        return "syr";
      case 91:
        return "si";
      case 92:
        return "chr";
      case 93:
        return "iu";
      case 94:
        return "am";
      case 97:
        return "ne";
      case 98:
        return "fy";
      case 99:
        return "ps";
      case 100:
        return "fil";
      case 101:
        return "dv";
      case 103:
        return "ff";
      case 104:
        return "ha";
      case 107:
        return "quz";
      case 108:
        return "nso";
      case 109:
        return "ba";
      case 110:
        return "lb";
      case 111:
        return "kl";
      case 112 /*0x70*/:
        return "ig";
      case 115:
        return "ti";
      case 117:
        return "haw";
      case 120:
        return "ii";
      case 122:
        return "arn";
      case 126:
        return "br";
      case 128 /*0x80*/:
        return "ug";
      case 129:
        return "mi";
      case 130:
        return "oc";
      case 131:
        return "co";
      case 132:
        return "gsw";
      case 133:
        return "sah";
      case 134:
        return "qut";
      case 135:
        return "rw";
      case 140:
        return "prs";
      default:
        return "en-US";
    }
  }

  private string GetLineCapStyle(LineCap lineCap, bool is2007)
  {
    switch (lineCap)
    {
      case LineCap.Round:
        return !is2007 ? "rnd" : "round";
      case LineCap.Flat:
        return "flat";
      default:
        return !is2007 ? "sq" : "square";
    }
  }

  private string GetLineJoinStyle(LineJoin linejoin)
  {
    switch (linejoin)
    {
      case LineJoin.Bevel:
        return "bevel";
      case LineJoin.Round:
        return "round";
      default:
        return "miter";
    }
  }

  private string GetLineEnd(ArrowheadStyle lineEnd, bool is2007)
  {
    switch (lineEnd)
    {
      case ArrowheadStyle.ArrowheadTriangle:
        return !is2007 ? "triangle" : "block";
      case ArrowheadStyle.ArrowheadStealth:
        return !is2007 ? "stealth" : "classic";
      case ArrowheadStyle.ArrowheadDiamond:
        return "diamond";
      case ArrowheadStyle.ArrowheadOval:
        return "oval";
      case ArrowheadStyle.ArrowheadOpen:
        return !is2007 ? "arrow" : "open";
      default:
        return "none";
    }
  }

  private string GetLineEndWidth(LineEndWidth lineEndWidth, bool is2007)
  {
    switch (lineEndWidth)
    {
      case LineEndWidth.NarrowArrow:
        return !is2007 ? "sm" : "narrow";
      case LineEndWidth.WideArrow:
        return !is2007 ? "lg" : "wide";
      default:
        return !is2007 ? "med" : "medium";
    }
  }

  private string GetLineEndLength(LineEndLength lineEndLength, bool is2007)
  {
    switch (lineEndLength)
    {
      case LineEndLength.ShortArrow:
        return !is2007 ? "sm" : "short";
      case LineEndLength.LongArrow:
        return !is2007 ? "lg" : "long";
      default:
        return !is2007 ? "med" : "medium";
    }
  }

  private void SerializeShapeLine(InlineShapeObject shape)
  {
    this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (shape.ShapeContainer.ShapeOptions.LineProperties.HasDefined && shape.ShapeContainer.ShapeOptions.LineProperties.PenAlignInset)
      this.m_writer.WriteAttributeString("algn", "in");
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(471))
      this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle((LineCap) shape.ShapeContainer.GetPropertyValue(471), false));
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(461))
      this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle((TextBoxLineStyle) shape.ShapeContainer.GetPropertyValue(461), false));
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(459))
      this.m_writer.WriteAttributeString("w", shape.ShapeContainer.GetPropertyValue(459).ToString());
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(448))
    {
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(WordColor.ConvertRGBToColor(shape.ShapeContainer.GetPropertyValue(448))));
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(449))
      {
        uint num = (uint) Math.Round((double) (shape.ShapeContainer.ShapeOptions.GetPropertyValue(449) * 100U) / 65536.0) * 1000U;
        this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", num.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else if (shape.LineGradient.GradientStops.Count > 0)
    {
      this.SerializeGradientFill(shape.LineGradient);
    }
    else
    {
      this.m_writer.WriteStartElement("noFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(462))
    {
      this.m_writer.WriteStartElement("prstDash", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetDashStyle((LineDashing) shape.ShapeContainer.GetPropertyValue(462), false));
      this.m_writer.WriteEndElement();
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(470))
    {
      LineJoin propertyValue = (LineJoin) shape.ShapeContainer.GetPropertyValue(470);
      this.m_writer.WriteStartElement(this.GetLineJoinStyle(propertyValue), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (propertyValue == LineJoin.Miter && shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(460))
        this.m_writer.WriteAttributeString("lim", ((uint) ((double) shape.ShapeContainer.GetPropertyValue(460) / 65536.0 * 100.0 * 1000.0)).ToString());
      this.m_writer.WriteEndElement();
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(464) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(467) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(466))
    {
      this.m_writer.WriteStartElement("headEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(464))
      {
        string lineEnd = this.GetLineEnd((ArrowheadStyle) shape.ShapeContainer.GetPropertyValue(464), false);
        if (lineEnd != null)
          this.m_writer.WriteAttributeString("type", lineEnd);
      }
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(466))
        this.m_writer.WriteAttributeString("w", this.GetLineEndWidth((LineEndWidth) shape.ShapeContainer.GetPropertyValue(466), false));
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(467))
        this.m_writer.WriteAttributeString("len", this.GetLineEndLength((LineEndLength) shape.ShapeContainer.GetPropertyValue(467), false));
      this.m_writer.WriteEndElement();
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(465) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(469) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(468))
    {
      this.m_writer.WriteStartElement("tailEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(465))
      {
        string lineEnd = this.GetLineEnd((ArrowheadStyle) shape.ShapeContainer.GetPropertyValue(465), false);
        if (lineEnd != null)
          this.m_writer.WriteAttributeString("type", lineEnd);
      }
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(468))
        this.m_writer.WriteAttributeString("w", this.GetLineEndWidth((LineEndWidth) shape.ShapeContainer.GetPropertyValue(468), false));
      if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(469))
        this.m_writer.WriteAttributeString("len", this.GetLineEndLength((LineEndLength) shape.ShapeContainer.GetPropertyValue(469), false));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeGradientFill(GradientFill gradientFill)
  {
    this.m_writer.WriteStartElement("gradFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (!gradientFill.IsEmptyElement)
    {
      if (gradientFill.Flip != FlipOrientation.None)
        this.m_writer.WriteAttributeString("flip", this.GetFlipOrientation(gradientFill.Flip));
      this.m_writer.WriteAttributeString("rotWithShape", gradientFill.RotateWithShape ? "1" : "0");
      this.m_writer.WriteStartElement("gsLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      foreach (GradientStop gradientStop in gradientFill.GradientStops)
        this.SerializeGradientStop(gradientStop);
      this.m_writer.WriteEndElement();
      if (gradientFill.LinearGradient != null)
      {
        this.m_writer.WriteStartElement("lin", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("ang", ((int) gradientFill.LinearGradient.Angle * 60000).ToString());
        this.m_writer.WriteAttributeString("scaled", gradientFill.LinearGradient.Scaled ? "1" : "0");
        this.m_writer.WriteEndElement();
      }
      if (gradientFill.PathGradient != null)
      {
        this.m_writer.WriteStartElement("path", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("path", this.GetGradientShadeType(gradientFill.PathGradient.PathShade));
        this.m_writer.WriteStartElement("fillToRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        if (gradientFill.PathGradient.LeftOffset != (short) 0)
          this.m_writer.WriteAttributeString("l", ((int) gradientFill.PathGradient.LeftOffset * 1000).ToString());
        if (gradientFill.PathGradient.TopOffset != (short) 0)
          this.m_writer.WriteAttributeString("t", ((int) gradientFill.PathGradient.TopOffset * 1000).ToString());
        if (gradientFill.PathGradient.RightOffset != (short) 0)
          this.m_writer.WriteAttributeString("r", ((int) gradientFill.PathGradient.RightOffset * 1000).ToString());
        if (gradientFill.PathGradient.BottomOffset != (short) 0)
          this.m_writer.WriteAttributeString("b", ((int) gradientFill.PathGradient.BottomOffset * 1000).ToString());
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("tileRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) gradientFill.TileRectangle.LeftOffset != 0.0)
        this.m_writer.WriteAttributeString("l", (gradientFill.TileRectangle.LeftOffset * 1000f).ToString());
      if ((double) gradientFill.TileRectangle.TopOffset != 0.0)
        this.m_writer.WriteAttributeString("t", (gradientFill.TileRectangle.TopOffset * 1000f).ToString());
      if ((double) gradientFill.TileRectangle.RightOffset != 0.0)
        this.m_writer.WriteAttributeString("r", (gradientFill.TileRectangle.RightOffset * 1000f).ToString());
      if ((double) gradientFill.TileRectangle.BottomOffset != 0.0)
        this.m_writer.WriteAttributeString("b", (gradientFill.TileRectangle.BottomOffset * 1000f).ToString());
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeGradientStop(GradientStop gradientStop)
  {
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", (this.IsStrict ? gradientStop.Position.ToString() : ((int) gradientStop.Position * 1000).ToString()) + (this.IsStrict ? "%" : ""));
    Color color = gradientStop.Color;
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.GetRGBCode(gradientStop.Color));
    if (gradientStop.Opacity != byte.MaxValue)
    {
      this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", ((int) gradientStop.Opacity * 1000).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private string GetFlipOrientation(FlipOrientation flip)
  {
    switch (flip)
    {
      case FlipOrientation.Horizontal:
        return "x";
      case FlipOrientation.Vertical:
        return "y";
      case FlipOrientation.Both:
        return "xy";
      default:
        return "none";
    }
  }

  private string GetGradientShadeType(GradientShadeType shade)
  {
    switch (shade)
    {
      case GradientShadeType.Circle:
        return "circle";
      case GradientShadeType.Rectangle:
        return "rect";
      default:
        return "shape";
    }
  }

  private void SerializePictureHyperlink(WPicture picture)
  {
    if (this.FieldStack.Count == 0)
      return;
    WField currentField = this.CurrentField;
    if (currentField.FieldType != FieldType.FieldHyperlink || currentField.FieldSeparator == null || currentField.FieldSeparator.NextSibling != picture)
      return;
    this.m_writer.WriteStartElement("hlinkClick", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeHyperlinkAttributes(currentField);
    this.m_writer.WriteEndElement();
  }

  private string UpdateShapeId(ChildShape childShape)
  {
    string str = string.Empty;
    IEntity ownerTextBody = (IEntity) childShape.GetOwnerTextBody((Entity) childShape);
    if (childShape.ImageRecord.IsMetafile)
      this.m_hasMetafiles = true;
    else
      this.m_hasImages = true;
    if (ownerTextBody is HeaderFooter)
      str = this.UpdateHFImageRels(ownerTextBody as HeaderFooter, childShape.ImageRecord, false);
    else if (ownerTextBody.Owner != null && ownerTextBody.Owner is HeaderFooter)
    {
      str = this.UpdateHFImageRels(ownerTextBody.Owner as HeaderFooter, childShape.ImageRecord, false);
    }
    else
    {
      if (ownerTextBody is WSection || ownerTextBody is WTextBox || ownerTextBody is WTableRow || ownerTextBody is WParagraph || ownerTextBody is BlockContentControl || ownerTextBody is Shape || ownerTextBody is GroupShape || ownerTextBody is ChildShape)
        str = this.AddImageRelation(this.DocumentImages, childShape.ImageRecord, false);
      if (ownerTextBody is WFootnote)
        str = (ownerTextBody as WFootnote).FootnoteType != FootnoteType.Footnote ? this.AddImageRelation(this.EndnoteImages, childShape.ImageRecord, false) : this.AddImageRelation(this.FootnoteImages, childShape.ImageRecord, false);
      if (ownerTextBody is WComment)
        str = this.AddImageRelation(this.CommentImages, childShape.ImageRecord, false);
    }
    return str;
  }

  private string UpdateShapeId(WPicture picture, bool isOlePicture, WOleObject oleObject)
  {
    string str = string.Empty;
    IEntity hf = isOlePicture ? this.GetOleObjectOwner(oleObject) : this.GetPictureOwner(picture);
    if (hf is HeaderFooter)
      str = this.UpdateHFImageRels(hf as HeaderFooter, picture);
    else if (hf.Owner != null && hf.Owner is HeaderFooter)
    {
      str = this.UpdateHFImageRels(hf.Owner as HeaderFooter, picture);
    }
    else
    {
      this.UpdateImages(picture);
      if (hf is WSection || hf is WTextBox || hf is WTableRow || hf is WParagraph || hf is BlockContentControl || hf is Shape || hf is GroupShape || hf is ChildShape)
        str = this.AddImageRelation(this.DocumentImages, picture.ImageRecord, this.IsNeedToSkipImageRelation(picture));
      if (hf is WFootnote)
        str = (hf as WFootnote).FootnoteType != FootnoteType.Footnote ? this.AddImageRelation(this.EndnoteImages, picture.ImageRecord, this.IsNeedToSkipImageRelation(picture)) : this.AddImageRelation(this.FootnoteImages, picture.ImageRecord, this.IsNeedToSkipImageRelation(picture));
      if (hf is WComment)
        str = this.AddImageRelation(this.CommentImages, picture.ImageRecord, this.IsNeedToSkipImageRelation(picture));
    }
    return str;
  }

  private string AddImageRelation(
    Dictionary<string, ImageRecord> imageCollection,
    ImageRecord imageRecord,
    bool IsSkipToAdd)
  {
    string key1 = string.Empty;
    if (imageCollection.ContainsValue(imageRecord))
    {
      foreach (string key2 in imageCollection.Keys)
      {
        if (imageRecord == imageCollection[key2])
        {
          key1 = key2;
          break;
        }
      }
    }
    else
    {
      if (IsSkipToAdd && imageRecord != null)
        imageRecord.ImageBytes = new byte[0];
      if (!IsSkipToAdd || imageRecord != null)
      {
        key1 = this.GetNextRelationShipID();
        imageCollection.Add(key1, imageRecord);
      }
    }
    return key1;
  }

  private void UpdateHFImageRels(string id, HeaderFooter hf, ImageRecord imageRecord)
  {
    string empty = string.Empty;
    foreach (HeaderFooterType key1 in this.m_headerFooterColl.Keys)
    {
      Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key1];
      foreach (string key2 in dictionary.Keys)
      {
        if (dictionary[key2] == hf)
        {
          string key3 = key2;
          if (this.HeaderFooterImages.ContainsKey(key3))
            this.HeaderFooterImages[key3].Add(id, imageRecord);
          else
            this.HeaderFooterImages.Add(key3, new Dictionary<string, ImageRecord>()
            {
              {
                id,
                imageRecord
              }
            });
        }
      }
    }
  }

  private void UpdateHFSvgImageRels(string id, HeaderFooter hf, Stream stream)
  {
    string empty = string.Empty;
    foreach (HeaderFooterType key1 in this.m_headerFooterColl.Keys)
    {
      Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key1];
      foreach (string key2 in dictionary.Keys)
      {
        if (dictionary[key2] == hf)
        {
          string key3 = key2;
          if (this.HeaderFooterSvgImages.ContainsKey(key3))
            this.HeaderFooterSvgImages[key3].Add(id, stream);
          else
            this.HeaderFooterSvgImages.Add(key3, new Dictionary<string, Stream>()
            {
              {
                id,
                stream
              }
            });
        }
      }
    }
  }

  private string UpdateHFImageRels(HeaderFooter hf, WPicture image)
  {
    this.UpdateImages(image);
    string empty1 = string.Empty;
    string empty2 = string.Empty;
    return this.UpdateHFImageRels(hf, image.ImageRecord, this.IsNeedToSkipImageRelation(image));
  }

  private string UpdateHFImageRels(HeaderFooter hf, ImageRecord imageRecord, bool IsSkipToAdd)
  {
    string str = string.Empty;
    string empty = string.Empty;
    foreach (HeaderFooterType key1 in this.m_headerFooterColl.Keys)
    {
      Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key1];
      foreach (string key2 in dictionary.Keys)
      {
        if (dictionary[key2] == hf)
        {
          string key3 = key2;
          if (this.HeaderFooterImages.ContainsKey(key3))
          {
            str = this.AddImageRelation(this.HeaderFooterImages[key3], imageRecord, IsSkipToAdd);
          }
          else
          {
            Dictionary<string, ImageRecord> imageCollection = new Dictionary<string, ImageRecord>();
            str = this.AddImageRelation(imageCollection, imageRecord, IsSkipToAdd);
            this.HeaderFooterImages.Add(key3, imageCollection);
          }
        }
      }
    }
    return str;
  }

  private string GetHeaderFooterId(HeaderFooter hf)
  {
    foreach (HeaderFooterType key1 in this.m_headerFooterColl.Keys)
    {
      Dictionary<string, HeaderFooter> dictionary = this.m_headerFooterColl[key1];
      foreach (string key2 in dictionary.Keys)
      {
        if (dictionary[key2] == hf)
          return key2;
      }
    }
    return (string) null;
  }

  private IEntity GetPictureOwner(WPicture pic)
  {
    Entity entity = pic.Owner;
    WParagraph wparagraph = (WParagraph) null;
    if (pic.Owner is WOleObject)
      entity = (Entity) (pic.Owner as WOleObject).OwnerParagraph;
    if (pic.Owner is GroupShape)
      entity = (Entity) (pic.Owner as GroupShape).OwnerParagraph;
    if (pic.Owner is ChildGroupShape)
      entity = (Entity) ((pic.Owner as ChildGroupShape).Owner as GroupShape).OwnerParagraph;
    if (entity.EntityType == EntityType.InlineContentControl)
      wparagraph = (entity as InlineContentControl).OwnerParagraph;
    else if (entity.EntityType == EntityType.Paragraph)
      wparagraph = entity as WParagraph;
    WTableCell owner1 = wparagraph.Owner as WTableCell;
    Entity owner2 = wparagraph.Owner.Owner;
    Entity owner3 = (owner1 == null ? (IEntity) wparagraph.Owner : (IEntity) owner1.OwnerRow.OwnerTable.OwnerTextBody).Owner;
    return ((Entity) pic).GetBaseEntity((Entity) pic) is HeaderFooter baseEntity ? (IEntity) baseEntity : (IEntity) owner3;
  }

  private IEntity GetOleObjectOwner(WOleObject oleObject)
  {
    WParagraph ownerParagraph = oleObject.OwnerParagraph;
    WTableCell owner1 = ownerParagraph.Owner as WTableCell;
    Entity owner2 = ownerParagraph.Owner.Owner;
    Entity owner3 = (owner1 == null ? (IEntity) oleObject.OwnerParagraph.Owner : (IEntity) owner1.OwnerRow.OwnerTable.OwnerTextBody).Owner;
    return ((Entity) oleObject).GetBaseEntity((Entity) oleObject) is HeaderFooter baseEntity ? (IEntity) baseEntity : (IEntity) owner3;
  }

  private void SerializeShape(WPicture picture)
  {
    string key = this.UpdateShapeId(picture, false, (WOleObject) null);
    this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("type", "#_x0000_t75");
    this.m_writer.WriteAttributeString("style", this.SerializeShapePictStyle(picture));
    this.m_writer.WriteAttributeString("wrapcoords", this.SerializeWrapPolygons(picture));
    if (!picture.LayoutInCell)
      this.m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
    if (picture.HasBorder && picture.TextWrappingStyle == TextWrappingStyle.Inline)
      this.SerializeShapeBorderColor(picture.PictureShape, false);
    if (!string.IsNullOrEmpty(picture.Href))
      this.m_writer.WriteAttributeString("href", picture.Href);
    if (!string.IsNullOrEmpty(picture.AlternativeText))
      this.m_writer.WriteAttributeString("alt", picture.AlternativeText);
    this.m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
    if (!string.IsNullOrEmpty(key))
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", key);
    this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", picture.Title != null ? picture.Title : "");
    if (!string.IsNullOrEmpty(picture.ExternalLink) && this.DocumentImages.ContainsKey(key))
    {
      if (!picture.HasImageRecordReference)
        this.DocumentImages.Remove(key);
      else
        key = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("href", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", key);
      this.ExternalLinkImages.Add(key, picture.ExternalLink);
    }
    if ((double) picture.FillRectangle.TopOffset != 0.0)
      this.m_writer.WriteAttributeString("croptop", Math.Round((double) this.SetCroppingValue(picture.FillRectangle.TopOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if ((double) picture.FillRectangle.BottomOffset != 0.0)
      this.m_writer.WriteAttributeString("cropbottom", Math.Round((double) this.SetCroppingValue(picture.FillRectangle.BottomOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if ((double) picture.FillRectangle.LeftOffset != 0.0)
      this.m_writer.WriteAttributeString("cropleft", Math.Round((double) this.SetCroppingValue(picture.FillRectangle.LeftOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if ((double) picture.FillRectangle.RightOffset != 0.0)
      this.m_writer.WriteAttributeString("cropright", Math.Round((double) this.SetCroppingValue(picture.FillRectangle.RightOffset)).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "f");
    if (picture.ChromaKeyColor != Color.Empty)
      this.m_writer.WriteAttributeString("chromakey", "#" + this.GetRGBCode(picture.ChromaKeyColor));
    this.m_writer.WriteEndElement();
    this.SerializeWrapping(picture.TextWrappingStyle, picture.TextWrappingType);
    if (picture.HasBorder)
    {
      if (picture.TextWrappingStyle == TextWrappingStyle.Inline)
        this.SerializeShapeBorders(picture.PictureShape.PictureDescriptor);
      else
        this.SerializeStrokeProps(picture.PictureShape);
    }
    this.SerializeDocxProps(picture.SignatureLineElements, "lock");
    this.SerializeDocxProps(picture.SignatureLineElements, "signatureline");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private float SetCroppingValue(float offset) => offset * 1000f / 1.5259f;

  private void SerializeShapeBorderColor(InlineShapeObject shape, bool isOleObjectShape)
  {
    Color color1 = shape.PictureDescriptor.BorderBottom.LineColorExt;
    Color color2 = shape.PictureDescriptor.BorderLeft.LineColorExt;
    Color color3 = shape.PictureDescriptor.BorderRight.LineColorExt;
    Color color4 = shape.PictureDescriptor.BorderTop.LineColorExt;
    if (shape.ShapeContainer != null && shape.ShapeContainer.ShapePosition != null)
    {
      if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(924))
        color2 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(924));
      if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(926))
        color3 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(926));
      if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(923))
        color4 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(923));
      if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(925))
        color1 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(925));
    }
    this.m_writer.WriteAttributeString("bordertopcolor", "urn:schemas-microsoft-com:office:office", "#" + this.GetRGBCode(color4));
    this.m_writer.WriteAttributeString("borderleftcolor", "urn:schemas-microsoft-com:office:office", "#" + this.GetRGBCode(color2));
    this.m_writer.WriteAttributeString("borderbottomcolor", "urn:schemas-microsoft-com:office:office", "#" + this.GetRGBCode(color1));
    this.m_writer.WriteAttributeString("borderrightcolor", "urn:schemas-microsoft-com:office:office", "#" + this.GetRGBCode(color3));
    if (!isOleObjectShape)
      return;
    this.SerializeStrokeProps(shape);
  }

  private void WriteStartElement(ref bool isWritten)
  {
    if (isWritten)
      return;
    this.m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
    isWritten = true;
  }

  private void SerializeStrokeProps(InlineShapeObject shape)
  {
    if (shape.ShapeContainer == null || shape.ShapeContainer.ShapeOptions == null)
      return;
    bool isWritten = false;
    if (shape.ShapeContainer.ShapeOptions.LineProperties.HasDefined)
    {
      this.WriteStartElement(ref isWritten);
      if (shape.ShapeContainer.ShapeOptions.LineProperties.UsefLine && shape.ShapeContainer.ShapeOptions.LineProperties.Line)
        this.m_writer.WriteAttributeString("on", "t");
      else
        this.m_writer.WriteAttributeString("on", "f");
      if (shape.ShapeContainer.ShapeOptions.LineProperties.PenAlignInset)
        this.m_writer.WriteAttributeString("insetpen", "t");
      if (shape.ShapeContainer.ShapeOptions.LineProperties.UsefNoLineDrawDash && shape.ShapeContainer.ShapeOptions.LineProperties.NoLineDrawDash)
        this.m_writer.WriteAttributeString("forcedash", "t");
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(448))
    {
      this.WriteStartElement(ref isWritten);
      this.m_writer.WriteAttributeString("color", "#" + this.GetRGBCode(WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapeOptions.GetPropertyValue(448))));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(449))
    {
      this.WriteStartElement(ref isWritten);
      this.m_writer.WriteAttributeString("opacity", shape.ShapeContainer.ShapeOptions.GetPropertyValue(449).ToString() + "f");
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(462))
    {
      this.WriteStartElement(ref isWritten);
      this.m_writer.WriteAttributeString("dashstyle", this.GetStrokeDashStyle((LineDashing) shape.ShapeContainer.ShapeOptions.GetPropertyValue(462)));
    }
    uint propertyValue1;
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(470))
    {
      this.WriteStartElement(ref isWritten);
      uint propertyValue2 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(470);
      this.m_writer.WriteAttributeString("joinstyle", this.GetLineJoinStyle((LineJoin) propertyValue2));
      if (propertyValue2 == 1U && shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(460))
      {
        propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(460);
        this.m_writer.WriteAttributeString("miterlimit", propertyValue1.ToString() + "f");
      }
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(461))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(461);
      this.m_writer.WriteAttributeString("linestyle", this.GetStrokeLineStyle((TextBoxLineStyle) propertyValue1));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(471))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(471);
      this.m_writer.WriteAttributeString("endcap", this.GetLineCapStyle((LineCap) propertyValue1, false));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(459))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(459);
      this.m_writer.WriteAttributeString("weight", Math.Round((double) propertyValue1 / 12700.0, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture) + "pt");
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(464))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(464);
      this.m_writer.WriteAttributeString("startarrow", this.GetLineEnd((ArrowheadStyle) propertyValue1, true));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(466))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(466);
      this.m_writer.WriteAttributeString("startarrowwidth", this.GetLineEndWidth((LineEndWidth) propertyValue1, true));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(467))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(467);
      this.m_writer.WriteAttributeString("startarrowlength", this.GetLineEndLength((LineEndLength) propertyValue1, true));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(465))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(465);
      this.m_writer.WriteAttributeString("endarrow", this.GetLineEnd((ArrowheadStyle) propertyValue1, true));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(468))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(468);
      this.m_writer.WriteAttributeString("endarrowwidth", this.GetLineEndWidth((LineEndWidth) propertyValue1, true));
    }
    if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(469))
    {
      this.WriteStartElement(ref isWritten);
      propertyValue1 = shape.ShapeContainer.ShapeOptions.GetPropertyValue(469);
      this.m_writer.WriteAttributeString("endarrowlength", this.GetLineEndLength((LineEndLength) propertyValue1, true));
    }
    if (!isWritten)
      return;
    this.m_writer.WriteEndElement();
  }

  private string GetStrokeLineStyle(TextBoxLineStyle lineStyle)
  {
    switch (lineStyle)
    {
      case TextBoxLineStyle.Double:
        return "thinThin";
      case TextBoxLineStyle.ThickThin:
        return "thickThin";
      case TextBoxLineStyle.ThinThick:
        return "thinThick";
      case TextBoxLineStyle.Triple:
        return "thickBetweenThin";
      default:
        return "single";
    }
  }

  private string GetStrokeDashStyle(LineDashing lineDashing)
  {
    switch (lineDashing)
    {
      case LineDashing.Dash:
      case LineDashing.DashGEL:
        return "dash";
      case LineDashing.Dot:
      case LineDashing.DotGEL:
        return "1 1";
      case LineDashing.DashDot:
      case LineDashing.LongDashDotGEL:
        return "longDashDot";
      case LineDashing.DashDotDot:
      case LineDashing.LongDashDotDotGEL:
        return "longDashDotDot";
      case LineDashing.LongDashGEL:
        return "longDash";
      case LineDashing.DashDotGEL:
        return "dashDot";
      default:
        return "solid";
    }
  }

  private void SerializeWrapping(TextWrappingStyle wrapStyle, TextWrappingType wrapType)
  {
    if (wrapStyle == TextWrappingStyle.InFrontOfText)
      return;
    this.m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("type", this.GetWrappingStyleAsString(wrapStyle));
    if (wrapType != TextWrappingType.Both)
      this.m_writer.WriteAttributeString("side", this.GetWrappingTypeAsString(wrapType));
    this.m_writer.WriteEndElement();
  }

  private void SerializeWrapPolygon(Entity entity, WrapPolygon wrapPolygon)
  {
    PointF[] pointFArray = wrapPolygon.Vertices.ToArray();
    if (!this.m_document.SaveOptions.MaintainCompatibilityMode && this.IsWord2010)
      pointFArray = this.AdjustPolygonPoints(wrapPolygon.Vertices);
    this.m_writer.WriteStartElement(nameof (wrapPolygon), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("edited", wrapPolygon.Edited ? "1" : "0");
    this.m_writer.WriteStartElement("start", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("x", pointFArray[0].X.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteAttributeString("y", pointFArray[0].Y.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    for (int index = 1; index < wrapPolygon.Vertices.Count; ++index)
    {
      this.m_writer.WriteStartElement("lineTo", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
      this.m_writer.WriteAttributeString("x", pointFArray[index].X.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("y", pointFArray[index].Y.ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private PointF[] AdjustPolygonPoints(List<PointF> vertices)
  {
    PointF[] pointFArray = new PointF[vertices.Count];
    float num1 = 0.0f;
    float num2 = 0.0f;
    bool flag = false;
    for (int index = 0; index < vertices.Count; ++index)
    {
      float x = vertices[index].X;
      float y = vertices[index].Y;
      if ((double) x < 0.0)
      {
        flag = true;
        num1 += -x;
        num2 = -x;
        x = 0.0f;
        if ((double) y != 0.0)
          y -= num2;
      }
      else if (flag)
      {
        if ((double) x != 0.0)
          x -= num1;
        if ((double) y != 0.0)
          y -= num2;
      }
      pointFArray[index] = new PointF(x, y);
    }
    return pointFArray;
  }

  private string GetWrappingStyleAsString(TextWrappingStyle wrapStyle)
  {
    switch (wrapStyle)
    {
      case TextWrappingStyle.TopAndBottom:
        return "topAndBottom";
      case TextWrappingStyle.Square:
        return "square";
      case TextWrappingStyle.Tight:
        return "tight";
      case TextWrappingStyle.Through:
        return "through";
      default:
        return "none";
    }
  }

  private string GetVerticalOrginAsString(VerticalOrigin verticalOrigin, bool isShapeStyle)
  {
    string empty = string.Empty;
    string verticalOrginAsString;
    switch (verticalOrigin)
    {
      case VerticalOrigin.TopMargin:
        verticalOrginAsString = !isShapeStyle ? "topMargin" : "top-margin-area";
        break;
      case VerticalOrigin.BottomMargin:
        verticalOrginAsString = !isShapeStyle ? "bottomMargin" : "bottom-margin-area";
        break;
      case VerticalOrigin.InsideMargin:
        verticalOrginAsString = !isShapeStyle ? "insideMargin" : "inner-margin-area";
        break;
      case VerticalOrigin.OutsideMargin:
        verticalOrginAsString = !isShapeStyle ? "outsideMargin" : "outer-margin-area";
        break;
      default:
        verticalOrginAsString = verticalOrigin.ToString().ToLower();
        break;
    }
    return verticalOrginAsString;
  }

  private string GetWrappingTypeAsString(TextWrappingType wrapType)
  {
    switch (wrapType)
    {
      case TextWrappingType.Left:
        return "left";
      case TextWrappingType.Right:
        return "right";
      case TextWrappingType.Largest:
        return "largest";
      default:
        return "both";
    }
  }

  private string GetPictureWrappingTypeAsString(TextWrappingType wrapType)
  {
    switch (wrapType)
    {
      case TextWrappingType.Left:
        return "left";
      case TextWrappingType.Right:
        return "right";
      case TextWrappingType.Largest:
        return "largest";
      default:
        return "bothSides";
    }
  }

  private void SerializeShapeBorders(PICF picDescriptor)
  {
    if (picDescriptor.BorderTop.BorderType != (byte) 0)
      this.SerializeShapeBorder(picDescriptor.BorderTop, "bordertop");
    if (picDescriptor.BorderBottom.BorderType != (byte) 0)
      this.SerializeShapeBorder(picDescriptor.BorderBottom, "borderbottom");
    if (picDescriptor.BorderRight.BorderType != (byte) 0)
      this.SerializeShapeBorder(picDescriptor.BorderRight, "borderright");
    if (picDescriptor.BorderLeft.BorderType == (byte) 0)
      return;
    this.SerializeShapeBorder(picDescriptor.BorderLeft, "borderleft");
  }

  private void SerializeShapeBorder(BorderCode border, string localName)
  {
    this.m_writer.WriteStartElement(localName, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("type", this.GetShapeBorderStyleAsString((BorderStyle) border.BorderType));
    this.m_writer.WriteAttributeString("width", border.LineWidth.ToString());
    if (border.Shadow)
      this.m_writer.WriteAttributeString("shadow", border.Shadow.ToString());
    this.m_writer.WriteEndElement();
  }

  private string GetShapeBorderStyleAsString(BorderStyle borderStyle)
  {
    switch (borderStyle)
    {
      case BorderStyle.Single:
        return "single";
      case BorderStyle.Thick:
        return "thick";
      case BorderStyle.Double:
        return "double";
      case BorderStyle.Hairline:
        return "hairline";
      case BorderStyle.Dot:
        return "dot";
      case BorderStyle.DashLargeGap:
        return "dash";
      case BorderStyle.DotDash:
        return "dotDash";
      case BorderStyle.DotDotDash:
        return "dashDotDot";
      case BorderStyle.Triple:
        return "triple";
      case BorderStyle.ThinThickSmallGap:
        return "thinThickSmall";
      case BorderStyle.ThinThinSmallGap:
        return "thickThinSmall";
      case BorderStyle.ThinThickThinSmallGap:
        return "thickBetweenThinSmall";
      case BorderStyle.ThinThickMediumGap:
        return "thinThick";
      case BorderStyle.ThickThinMediumGap:
        return "thickThin";
      case BorderStyle.ThickThickThinMediumGap:
        return "thickBetweenThin";
      case BorderStyle.ThinThickLargeGap:
        return "thinThickLarge";
      case BorderStyle.ThickThinLargeGap:
        return "thickThinLarge";
      case BorderStyle.ThinThickThinLargeGap:
        return "thickBetweenThinLarge";
      case BorderStyle.Wave:
        return "wave";
      case BorderStyle.DoubleWave:
        return "doubleWave";
      case BorderStyle.DashSmallGap:
        return "dashedSmall";
      case BorderStyle.DashDotStroker:
        return "dashDotStroked";
      case BorderStyle.Emboss3D:
        return "threeDEmboss";
      case BorderStyle.Engrave3D:
        return "threeDEngrave";
      case BorderStyle.Outset:
        return "HTMLOutset";
      case BorderStyle.Inset:
        return "HTMLInset";
      case BorderStyle.TwistedLines1:
        return "twistedLines1";
      case BorderStyle.Cleared:
        return "nil";
      default:
        return "none";
    }
  }

  private string SerializeShapePictStyle(WPicture picture)
  {
    StringBuilder stringBuilder = new StringBuilder();
    if (picture.TextWrappingStyle != TextWrappingStyle.Inline)
      stringBuilder.Append("position:absolute;");
    stringBuilder.Append("margin-left:");
    stringBuilder.Append(picture.HorizontalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;margin-top:");
    stringBuilder.Append(picture.VerticalPosition.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;width:");
    stringBuilder.Append(Math.Round((double) picture.Width, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;height:");
    stringBuilder.Append(Math.Round((double) picture.Height, 2).ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt");
    if (picture.HorizontalOrigin != HorizontalOrigin.Column)
    {
      stringBuilder.Append(";mso-position-horizontal-relative:");
      stringBuilder.Append(this.GetHorizOriginAsString(picture.HorizontalOrigin));
    }
    if (picture.VerticalOrigin != VerticalOrigin.Paragraph)
    {
      stringBuilder.Append(";mso-position-vertical-relative:");
      stringBuilder.Append(this.GetVerticalOrginAsString(picture.VerticalOrigin, true));
    }
    if (picture.HorizontalAlignment != ShapeHorizontalAlignment.None)
    {
      stringBuilder.Append(";mso-position-horizontal:");
      stringBuilder.Append(picture.HorizontalAlignment.ToString().ToLower());
    }
    if (picture.VerticalAlignment != ShapeVerticalAlignment.None)
    {
      stringBuilder.Append(";mso-position-vertical:");
      stringBuilder.Append(picture.VerticalAlignment.ToString().ToLower());
    }
    if (picture.OrderIndex != int.MaxValue)
    {
      if (picture.OrderIndex > 0 && picture.TextWrappingStyle == TextWrappingStyle.Behind)
        stringBuilder.Append(";z-index:-" + picture.OrderIndex.ToString());
      else
        stringBuilder.Append(";z-index:" + picture.OrderIndex.ToString());
    }
    else if (picture.TextWrappingStyle == TextWrappingStyle.Behind)
      stringBuilder.Append(";z-index:-1");
    if (picture.Visible)
      stringBuilder.Append(";visibility:visible");
    else
      stringBuilder.Append(";visibility:hidden");
    return stringBuilder.ToString();
  }

  private string SerializeWrapPolygons(WPicture picture)
  {
    StringBuilder stringBuilder = new StringBuilder();
    for (int index = 1; index < picture.WrapPolygon.Vertices.Count; ++index)
      stringBuilder.Append($"{picture.WrapPolygon.Vertices[index].X.ToString((IFormatProvider) CultureInfo.InvariantCulture)} {picture.WrapPolygon.Vertices[index].Y.ToString((IFormatProvider) CultureInfo.InvariantCulture)} ");
    return stringBuilder.ToString().TrimEnd();
  }

  private void SerializeBookmarkEnd(BookmarkEnd bookmarkEnd)
  {
    if (!bookmarkEnd.IsAfterParagraphMark && !bookmarkEnd.IsAfterCellMark && !bookmarkEnd.IsAfterRowMark && !bookmarkEnd.IsAfterTableMark)
    {
      if ((!this.m_bookmarks.ContainsKey(bookmarkEnd.Name) || this.m_isFallBack) && (!this.m_isFallBack || !this.m_FallBackbookmarks.ContainsKey(bookmarkEnd.Name)))
        return;
      this.m_writer.WriteStartElement("w", nameof (bookmarkEnd), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      int num = this.m_isFallBack ? this.m_FallBackbookmarks[bookmarkEnd.Name] : this.m_bookmarks[bookmarkEnd.Name];
      this.m_writer.WriteAttributeString("w", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
      if (!string.IsNullOrEmpty(bookmarkEnd.DisplacedByCustomXml))
        this.m_writer.WriteAttributeString("w", "displacedByCustomXml", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkEnd.DisplacedByCustomXml);
      this.m_writer.WriteEndElement();
    }
    else
      this.BookMarkCollection.Add((Entity) bookmarkEnd);
  }

  private void SerializeBookmarkStart(BookmarkStart bookmarkStart)
  {
    string name = bookmarkStart.Name;
    int nextBookmarkId = this.GetNextBookmarkID();
    if (this.m_bookmarks.ContainsKey(name) && !this.m_isFallBack || this.m_isFallBack && this.m_FallBackbookmarks.ContainsKey(name))
      return;
    if (this.m_isFallBack)
      this.m_FallBackbookmarks.Add(name, nextBookmarkId);
    else
      this.m_bookmarks.Add(name, nextBookmarkId);
    this.m_writer.WriteStartElement("w", nameof (bookmarkStart), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (bookmarkStart.ColumnFirst >= (short) 0)
      this.m_writer.WriteAttributeString("w", "colFirst", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkStart.ColumnFirst.ToString());
    if (bookmarkStart.ColumnLast >= (short) 0)
      this.m_writer.WriteAttributeString("w", "colLast", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkStart.ColumnLast.ToString());
    this.m_writer.WriteAttributeString("w", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", nextBookmarkId.ToString());
    this.m_writer.WriteAttributeString("w", "name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", name);
    if (!string.IsNullOrEmpty(bookmarkStart.DisplacedByCustomXml))
      this.m_writer.WriteAttributeString("w", "displacedByCustomXml", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkStart.DisplacedByCustomXml);
    this.m_writer.WriteEndElement();
  }

  private void SerializeEditableRangeEnd(EditableRangeEnd editableRangeEnd)
  {
    if (!editableRangeEnd.IsAfterParagraphMark && !editableRangeEnd.IsAfterCellMark && !editableRangeEnd.IsAfterRowMark && !editableRangeEnd.IsAfterTableMark)
    {
      if (!this.IsSerializingChoiceContent && !this.m_editableRanges.Contains(editableRangeEnd.Id))
        return;
      this.m_writer.WriteStartElement("w", "permEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeEnd.Id);
      this.m_writer.WriteEndElement();
    }
    else
    {
      if (this.IsSerializingChoiceContent)
        return;
      this.EditableRangeCollection.Add((Entity) editableRangeEnd);
    }
  }

  private void SerializeEditableRangeStart(EditableRangeStart editableRangeStart)
  {
    string id = editableRangeStart.Id;
    if (this.m_editableRanges.Contains(editableRangeStart.Id))
      return;
    if (!this.IsSerializingChoiceContent)
      this.m_editableRanges.Add(editableRangeStart.Id);
    this.m_writer.WriteStartElement("w", "permStart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (editableRangeStart.ColumnFirst >= (short) 0)
      this.m_writer.WriteAttributeString("w", "colFirst", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.ColumnFirst.ToString());
    if (editableRangeStart.ColumnLast >= (short) 0)
      this.m_writer.WriteAttributeString("w", "colLast", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.ColumnLast.ToString());
    if (!string.IsNullOrEmpty(editableRangeStart.Ed))
      this.m_writer.WriteAttributeString("w", "ed", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.Ed);
    if (!string.IsNullOrEmpty(editableRangeStart.EdGrp))
      this.m_writer.WriteAttributeString("w", "edGrp", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.EdGrp);
    this.m_writer.WriteAttributeString("w", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.Id.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeBreak(Break brk)
  {
    BreakType breakType = brk.BreakType;
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCharacterFormat(brk.CharacterFormat);
    this.m_writer.WriteStartElement("br", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (breakType)
    {
      case BreakType.PageBreak:
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "page");
        break;
      case BreakType.ColumnBreak:
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "column");
        break;
      default:
        if (brk.CharacterFormat.HasValue(126))
        {
          this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "textWrapping");
          this.m_writer.WriteAttributeString("clear", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", brk.CharacterFormat.BreakClear.ToString().ToLower());
          break;
        }
        break;
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeCommentReference(WComment comment)
  {
    string str = !(comment.Format.TagBkmk != "-1") ? this.GetNextID().ToString() : (this.m_commentsId == null || !this.m_commentsId.ContainsKey(comment.Format.TagBkmk) ? this.GetNextID().ToString() : this.m_commentsId[comment.Format.TagBkmk]);
    this.CommentCollection.Add(str, comment);
    this.m_hasComment = true;
    if (comment.AppendItems)
      this.WriteCommItems(comment, str);
    this.m_writer.WriteStartElement("r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("commentReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void WriteCommItems(WComment comment, string commentId)
  {
    if (comment.CommentedBodyPart != null)
    {
      this.m_writer.WriteEndElement();
      this.SerializeCommentRangeStart(commentId);
      this.SerializeBodyItems(comment.CommentedBodyPart.BodyItems, false);
      this.SerializeCommentRangeEnd(commentId, comment.CommentRangeEnd);
      this.m_writer.WriteStartElement("p", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeParagraphFormat(comment.OwnerParagraph.ParagraphFormat, comment.OwnerParagraph);
      this.m_writer.WriteEndElement();
    }
    else
    {
      if (comment.CommentedItems.Count <= 0)
        return;
      this.SerializeCommentRangeStart(commentId);
      foreach (ParagraphItem commentedItem in (CollectionImpl) comment.CommentedItems)
        this.SerializeParagraphItem(commentedItem, false);
      this.SerializeCommentRangeEnd(commentId, comment.CommentRangeEnd);
    }
  }

  private void SerializeCommentRangeStart(string commentId)
  {
    this.m_writer.WriteStartElement("commentRangeStart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", commentId);
    this.m_writer.WriteEndElement();
  }

  private void SerializeCommentRangeEnd(string commentId, WCommentMark commentMark)
  {
    if (commentMark == null || !commentMark.IsAfterCellMark)
    {
      this.m_writer.WriteStartElement("commentRangeEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", commentId);
      this.m_writer.WriteEndElement();
    }
    else
      this.CommentMarkCollection.Add((Entity) commentMark);
  }

  private void SerializeComments()
  {
    MemoryStream data = new MemoryStream();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteStartElement("pkg", "part", (string) null);
      this.m_writer.WriteAttributeString("pkg", "name", (string) null, "/word/comments.xml");
      this.m_writer.WriteAttributeString("pkg", "contentType", (string) null, "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml");
      this.m_writer.WriteStartElement("pkg", "xmlData", (string) null);
    }
    else
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "comments", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "ve", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "pic", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.microsoft.com/office/word/2010/wordml");
    List<string> stringList = new List<string>();
    foreach (string key in this.CommentCollection.Keys)
    {
      WComment comment = this.CommentCollection[key];
      if (comment.ChildEntities.InnerList.Count == 0)
        stringList.Add(key);
      else
        this.SerializeComment(comment, key);
    }
    if (stringList.Count > 0)
    {
      foreach (string str in stringList)
        this.SerializeComment(this.CommentCollection[str], str);
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
    {
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.Flush();
      this.m_archive.AddItem("word\\comments.xml", (Stream) data, false, FileAttributes.Archive);
    }
  }

  internal void SerializeComment(WComment comment, string id)
  {
    this.m_writer.WriteStartElement("w", nameof (comment), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", nameof (id), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", id);
    this.m_writer.WriteAttributeString("w", "author", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", comment.Format.User);
    this.m_writer.WriteAttributeString("w", "initials", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", comment.Format.UserInitials);
    this.m_writer.WriteAttributeString("w", "date", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", comment.Format.DateTime.ToString("yyyy-MM-ddTHH:mm:ssZ"));
    for (int index = 0; index < comment.TextBody.Items.Count; ++index)
      this.SerializeBodyItem(comment.TextBody.Items[index], true);
    this.m_writer.WriteEndElement();
  }

  private void SerializeCommentMark(WCommentMark commMark)
  {
    bool flag = false;
    if (!(commMark.CommentId != "-1"))
      return;
    if (commMark.Type == CommentMarkType.CommentStart)
    {
      if (commMark.CommentId != null)
        flag = this.CommentIdCheck(commMark.CommentId);
      if (!flag)
        TagIdRandomizer.NoneChangeIds.Add(Convert.ToInt32(commMark.CommentId));
      string commentId = this.GetNextID().ToString();
      if (!this.CommentsId.ContainsKey(commMark.CommentId))
        this.CommentsId.Add(commMark.CommentId, commentId);
      this.SerializeCommentRangeStart(commentId);
    }
    else
    {
      if (this.m_commentsId == null || !this.m_commentsId.ContainsKey(commMark.CommentId))
        return;
      this.SerializeCommentRangeEnd(this.m_commentsId[commMark.CommentId], commMark);
    }
  }

  private bool CommentIdCheck(string currCommentId)
  {
    if (currCommentId != null)
    {
      char[] charArray = currCommentId.ToCharArray();
      for (int index = 0; index < charArray.Length; ++index)
      {
        if (charArray[index] < '[' && charArray[index] >= 'A' || charArray[index] < '{' && charArray[index] >= 'a')
          return true;
      }
    }
    return false;
  }

  private void SerializeCommentsExtended()
  {
    MemoryStream data = new MemoryStream();
    this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "commentsEx", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "ve", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "pic", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    foreach (WCommentExtended inner in (IEnumerable) this.m_document.CommentsEx.InnerList)
      this.SerializeCommentExtended(inner);
    this.m_writer.WriteEndElement();
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\commentsExtended.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeCommentExtended(WCommentExtended commentExtended)
  {
    this.m_writer.WriteStartElement("commentEx", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("paraId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml", commentExtended.ParaId);
    if (!string.IsNullOrEmpty(commentExtended.ParentParaId))
      this.m_writer.WriteAttributeString("paraIdParent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml", commentExtended.ParentParaId);
    this.m_writer.WriteAttributeString("done", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml", commentExtended.IsResolved ? "1" : "0");
    this.m_writer.WriteEndElement();
  }

  private void SerializeTextRange(ParagraphItem item)
  {
    if (!(item is WTextRange))
      return;
    WTextRange wtextRange = item as WTextRange;
    if (string.IsNullOrEmpty(wtextRange.Text))
      return;
    WFootnote wfootnote = (WFootnote) null;
    if (wtextRange.OwnerParagraph != null && wtextRange.OwnerParagraph.OwnerTextBody != null)
      wfootnote = wtextRange.OwnerParagraph.OwnerTextBody.Owner as WFootnote;
    if (wfootnote != null && wtextRange.Text == '\u0002'.ToString() || wfootnote != null && wfootnote.IsAutoNumbered && wtextRange.PreviousSibling == null && wtextRange.OwnerParagraph.PreviousSibling == null)
    {
      this.m_writer.WriteStartElement("w", "r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeCharacterFormat(wtextRange.CharacterFormat);
      if (wfootnote.FootnoteType == FootnoteType.Endnote)
      {
        this.m_writer.WriteStartElement("endnoteRef", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
      }
      else
      {
        this.m_writer.WriteStartElement("footnoteRef", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("w", "r", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeCharacterFormat(wtextRange.CharacterFormat);
      bool isDeletedText = false;
      if (wtextRange.RevisionsInternal.Count > 0)
      {
        foreach (Revision revision in wtextRange.RevisionsInternal)
        {
          if (revision.RevisionType == RevisionType.Deletions)
          {
            isDeletedText = true;
            break;
          }
        }
      }
      this.SerializeText(wtextRange.Text, isDeletedText, this.IsFieldCode());
      this.m_writer.WriteEndElement();
    }
  }

  private bool IsFieldCode()
  {
    if (this.m_fieldMarkStack == null || this.m_fieldMarkStack.Count <= 0 || this.CurrentField == null)
      return false;
    return this.CurrentField.FieldSeparator == null ? this.CurrentField.FieldEnd == this.m_fieldMarkStack.Peek() : this.CurrentField.FieldSeparator == this.m_fieldMarkStack.Peek();
  }

  private void SerializeText(string textToDisplay, bool isDeletedText, bool isInstrText)
  {
    char[] anyOf = new char[32 /*0x20*/];
    for (int index = 0; index <= 31 /*0x1F*/; ++index)
      anyOf[index] = (char) index;
    int startIndex = 0;
    for (int index = textToDisplay.IndexOfAny(anyOf); index != -1; index = textToDisplay.IndexOfAny(anyOf))
    {
      string text = textToDisplay.Substring(startIndex, index);
      char ch = textToDisplay[index];
      if (text != string.Empty)
      {
        if (isInstrText)
          this.SerializeInstrText(text, isDeletedText);
        else
          this.SerializeRawText(text, isDeletedText);
      }
      switch (ch)
      {
        case '\u0002':
          this.m_writer.WriteStartElement("footnoteRef", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\u0003':
          this.m_writer.WriteStartElement("separator", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\u0004':
          this.m_writer.WriteStartElement("continuationSeparator", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\u0005':
          this.m_writer.WriteStartElement("annotationRef", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\t':
          this.m_writer.WriteStartElement("w", "tab", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\n':
          this.m_writer.WriteStartElement("w", "P", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\v':
          this.m_writer.WriteStartElement("w", "br", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\f':
          this.m_writer.WriteStartElement("w", "br", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("w", "type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "page");
          this.m_writer.WriteEndElement();
          break;
        case '\u000E':
          this.m_writer.WriteStartElement("w", "br", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("w", "type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "column");
          this.m_writer.WriteEndElement();
          break;
        case '\u001E':
          this.m_writer.WriteStartElement("noBreakHyphen", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
        case '\u001F':
          this.m_writer.WriteStartElement("softHyphen", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
          break;
      }
      textToDisplay = textToDisplay.Substring(index + 1);
    }
    if (isInstrText)
      this.SerializeInstrText(textToDisplay, isDeletedText);
    else
      this.SerializeRawText(textToDisplay, isDeletedText);
  }

  private void SerializeRawText(string text, bool isDeletedText)
  {
    this.m_writer.WriteStartElement(isDeletedText ? "delText" : "t", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xml", "space", "http://www.w3.org/XML/1998/namespace", "preserve");
    this.m_writer.WriteString(DocxSerializator.ReplaceInvalidSurrogateCharacters(text));
    this.m_writer.WriteEndElement();
  }

  private void SerializeInstrText(string text, bool isDeletedText)
  {
    this.m_writer.WriteStartElement(isDeletedText ? "delInstrText" : "instrText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xml", "space", "http://www.w3.org/XML/1998/namespace", "preserve");
    this.m_writer.WriteString(DocxSerializator.ReplaceInvalidSurrogateCharacters(text));
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableOfContents(TableOfContent toc)
  {
    this.SerializeFieldBegin(toc.TOCField);
  }

  private string GetFieldTypeAsString(FieldType type)
  {
    switch (type)
    {
      case FieldType.FieldRef:
        return "REF ";
      case FieldType.FieldIndexEntry:
        return "XE ";
      case FieldType.FieldSet:
        return "SET ";
      case FieldType.FieldIf:
        return "IF ";
      case FieldType.FieldIndex:
        return "INDEX ";
      case FieldType.FieldStyleRef:
        return "STYLEREF ";
      case FieldType.FieldSequence:
        return "SEQ ";
      case FieldType.FieldTOC:
        return "TOC ";
      case FieldType.FieldInfo:
        return "INFO ";
      case FieldType.FieldTitle:
        return "TITLE ";
      case FieldType.FieldSubject:
        return "SUBJECT ";
      case FieldType.FieldAuthor:
        return "AUTHOR ";
      case FieldType.FieldKeyWord:
        return "KEYWORDS ";
      case FieldType.FieldComments:
        return "COMMENTS ";
      case FieldType.FieldLastSavedBy:
        return "LASTSAVEDBY ";
      case FieldType.FieldCreateDate:
        return "CREATEDATE ";
      case FieldType.FieldSaveDate:
        return "SAVEDATE ";
      case FieldType.FieldPrintDate:
        return "PRINTDATE ";
      case FieldType.FieldRevisionNum:
        return "REVNUM ";
      case FieldType.FieldEditTime:
        return "EDITTIME ";
      case FieldType.FieldNumPages:
        return "NUMPAGES ";
      case FieldType.FieldNumWords:
        return "NUMWORDS ";
      case FieldType.FieldNumChars:
        return "NUMCHARS ";
      case FieldType.FieldFileName:
        return "FILENAME ";
      case FieldType.FieldTemplate:
        return "TEMPLATE ";
      case FieldType.FieldDate:
        return "DATE ";
      case FieldType.FieldTime:
        return "TIME ";
      case FieldType.FieldPage:
        return "PAGE ";
      case FieldType.FieldFormula:
        return "= ";
      case FieldType.FieldQuote:
        return "QUOTE ";
      case FieldType.FieldPageRef:
        return "PAGEREF ";
      case FieldType.FieldAsk:
        return "ASK ";
      case FieldType.FieldFillIn:
        return "FILLIN ";
      case FieldType.FieldPrint:
        return "PRINT ";
      case FieldType.FieldGoToButton:
        return "GOTOBUTTON ";
      case FieldType.FieldMacroButton:
        return "MACROBUTTON ";
      case FieldType.FieldAutoNumOutline:
        return "AUTONUMOUT ";
      case FieldType.FieldAutoNumLegal:
        return "AUTONUMLGL ";
      case FieldType.FieldAutoNum:
        return "AUTONUM ";
      case FieldType.FieldLink:
        return "LINK ";
      case FieldType.FieldSymbol:
        return "SYMBOL ";
      case FieldType.FieldMergeField:
        return "MERGEFIELD ";
      case FieldType.FieldUserName:
        return "USERNAME ";
      case FieldType.FieldUserInitials:
        return "USERINITIALS ";
      case FieldType.FieldUserAddress:
        return "USERADDRESS ";
      case FieldType.FieldBarCode:
        return "BARCODE ";
      case FieldType.FieldDocVariable:
        return "DOCVARIABLE ";
      case FieldType.FieldSection:
        return "SECTION ";
      case FieldType.FieldSectionPages:
        return "SECTIONPAGES ";
      case FieldType.FieldIncludePicture:
        return "INCLUDEPICTURE ";
      case FieldType.FieldIncludeText:
        return "INCLUDETEXT ";
      case FieldType.FieldFileSize:
        return "FILESIZE ";
      case FieldType.FieldFormTextInput:
        return "FORMTEXT ";
      case FieldType.FieldFormCheckBox:
        return "FORMCHECKBOX ";
      case FieldType.FieldNoteRef:
        return "NOTEREF ";
      case FieldType.FieldTOA:
        return "TOA ";
      case FieldType.FieldPrivate:
        return "PRIVATE ";
      case FieldType.FieldAutoText:
        return "AUTOTEXT ";
      case FieldType.FieldAddin:
        return "ADDIN ";
      case FieldType.FieldFormDropDown:
        return "FORMDROPDOWN ";
      case FieldType.FieldAdvance:
        return "ADVANCE ";
      case FieldType.FieldDocProperty:
        return "DOCPROPERTY ";
      case FieldType.FieldHyperlink:
        return "HYPERLINK ";
      case FieldType.FieldAutoTextList:
        return "AUTOTEXTLIST ";
      case FieldType.FieldListNum:
        return "LISTNUM ";
      case FieldType.FieldBidiOutline:
        return "BIDIOUTLINE";
      case FieldType.FieldAddressBlock:
        return "ADDRESSBLOCK";
      default:
        return string.Empty;
    }
  }

  private void SerializeSectionProperties(WSection section, bool isTrackrevision)
  {
    this.m_writer.WriteStartElement("w", "sectPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (!isTrackrevision)
      this.SerializeHFReference(section.HeadersFooters);
    if (this.IsNeedToSerializeSectionFootNoteProperties(section))
      this.SerializeFootnoteProperties(section);
    if (this.IsNeedToSerializeSectionEndNoteProperties(section))
      this.SerializeEndnoteProperties(section);
    this.SerializeSectionType(section.BreakCode);
    this.SerializePageSetup(section.PageSetup);
    this.SerializeColumns(section);
    this.SerializeSectionProtection(section);
    if (section.PageSetup.VerticalAlignment != PageAlignment.Top)
    {
      this.m_writer.WriteStartElement("vAlign", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (section.PageSetup.VerticalAlignment)
      {
        case PageAlignment.Top:
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "top");
          break;
        case PageAlignment.Middle:
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
          break;
        case PageAlignment.Justified:
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "both");
          break;
        case PageAlignment.Bottom:
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "bottom");
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (section.PageSetup.DifferentFirstPage)
    {
      this.m_writer.WriteStartElement("titlePg", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeTextDirection(section);
    if (section.PageSetup.Bidi)
    {
      this.m_writer.WriteStartElement("bidi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocGrid(section);
    if (section.SectionFormat.Revisions.Count > 0 && !this.m_isAlternativeSection)
    {
      foreach (Revision revision in section.SectionFormat.Revisions)
      {
        if (revision.RevisionType == RevisionType.Formatting)
        {
          this.SerializeTrackChangeProps("sectPrChange", revision.Author, revision.Date);
          if (section.SectionFormat.OldPropertiesHash.Count > 0 || section.PageSetup.OldPropertiesHash.Count > 0 || section.PageSetup.Margins.OldPropertiesHash.Count > 0 || section.PageSetup.PageNumbers.OldPropertiesHash.Count > 0)
          {
            this.m_isAlternativeSection = true;
            Dictionary<int, object> dictionary1 = new Dictionary<int, object>((IDictionary<int, object>) section.SectionFormat.OldPropertiesHash);
            Dictionary<int, object> dictionary2 = new Dictionary<int, object>((IDictionary<int, object>) section.PageSetup.OldPropertiesHash);
            Dictionary<int, object> dictionary3 = new Dictionary<int, object>((IDictionary<int, object>) section.PageSetup.PageNumbers.OldPropertiesHash);
            Dictionary<int, object> dictionary4 = new Dictionary<int, object>((IDictionary<int, object>) section.PageSetup.Margins.OldPropertiesHash);
            Dictionary<int, object> dictionary5 = new Dictionary<int, object>((IDictionary<int, object>) section.SectionFormat.PropertiesHash);
            Dictionary<int, object> dictionary6 = new Dictionary<int, object>((IDictionary<int, object>) section.PageSetup.PropertiesHash);
            Dictionary<int, object> dictionary7 = new Dictionary<int, object>((IDictionary<int, object>) section.PageSetup.PageNumbers.PropertiesHash);
            Dictionary<int, object> dictionary8 = new Dictionary<int, object>((IDictionary<int, object>) section.PageSetup.Margins.PropertiesHash);
            ColumnCollection columnCollection = new ColumnCollection(section);
            if (section.SectionFormat.SectFormattingColumnCollection != null)
            {
              for (int index = 0; index < section.Columns.Count; ++index)
                columnCollection.Add(section.Columns[index]);
              if (section.Columns.Count > 0)
                section.Columns.InnerList.Clear();
              for (int index = 0; index < section.SectionFormat.SectFormattingColumnCollection.Count; ++index)
              {
                Column column = new Column((IWordDocument) section.Document);
                section.Columns.Add(column);
                foreach (KeyValuePair<int, object> keyValuePair in section.SectionFormat.SectFormattingColumnCollection[index].OldPropertiesHash)
                  section.Columns[index].PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
              }
            }
            section.SectionFormat.PropertiesHash.Clear();
            section.SectionFormat.OldPropertiesHash.Clear();
            section.PageSetup.OldPropertiesHash.Clear();
            section.PageSetup.PropertiesHash.Clear();
            section.PageSetup.PageNumbers.OldPropertiesHash.Clear();
            section.PageSetup.PageNumbers.PropertiesHash.Clear();
            section.PageSetup.Margins.OldPropertiesHash.Clear();
            section.PageSetup.Margins.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              section.SectionFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary2)
              section.PageSetup.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary3)
              section.PageSetup.PageNumbers.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary4)
              section.PageSetup.Margins.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.SerializeSectionProperties(section, true);
            if (section.Columns.Count > 0)
              section.Columns.InnerList.Clear();
            for (int index = 0; index < columnCollection.Count; ++index)
              section.Columns.Add(columnCollection[index]);
            columnCollection.Close();
            section.SectionFormat.PropertiesHash.Clear();
            section.PageSetup.PropertiesHash.Clear();
            section.PageSetup.PageNumbers.PropertiesHash.Clear();
            section.PageSetup.Margins.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              section.SectionFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary5)
              section.SectionFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary6)
              section.PageSetup.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary6)
              section.PageSetup.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary3)
              section.PageSetup.PageNumbers.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary7)
              section.PageSetup.PageNumbers.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary4)
              section.PageSetup.Margins.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary8)
              section.PageSetup.Margins.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.m_isAlternativeSection = false;
          }
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeHFReference(WHeadersFooters headerFooters)
  {
    string empty = string.Empty;
    if (headerFooters.FirstPageHeader.Items.Count > 0 || headerFooters.FirstPageHeader.WriteWatermark)
    {
      this.m_writer.WriteStartElement("headerReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "first");
      string nextRelationShipId = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
      this.AddHeaderFooter(headerFooters.FirstPageHeader, HeaderFooterType.FirstPageHeader, nextRelationShipId);
      this.m_writer.WriteEndElement();
    }
    if (headerFooters.FirstPageFooter.Items.Count > 0)
    {
      this.m_writer.WriteStartElement("footerReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "first");
      string nextRelationShipId = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
      this.AddHeaderFooter(headerFooters.FirstPageFooter, HeaderFooterType.FirstPageFooter, nextRelationShipId);
      this.m_writer.WriteEndElement();
    }
    if (headerFooters.EvenHeader.Items.Count > 0 || headerFooters.EvenHeader.WriteWatermark)
    {
      this.m_writer.WriteStartElement("headerReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "even");
      string nextRelationShipId = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
      this.AddHeaderFooter(headerFooters.EvenHeader, HeaderFooterType.EvenHeader, nextRelationShipId);
      this.m_writer.WriteEndElement();
    }
    if (headerFooters.EvenFooter.Items.Count > 0)
    {
      this.m_writer.WriteStartElement("footerReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "even");
      string nextRelationShipId = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
      this.AddHeaderFooter(headerFooters.EvenFooter, HeaderFooterType.EvenFooter, nextRelationShipId);
      this.m_writer.WriteEndElement();
    }
    if (headerFooters.OddHeader.Items.Count > 0 || headerFooters.OddHeader.WriteWatermark)
    {
      this.m_writer.WriteStartElement("headerReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "default");
      string nextRelationShipId = this.GetNextRelationShipID();
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId);
      this.AddHeaderFooter(headerFooters.OddHeader, HeaderFooterType.OddHeader, nextRelationShipId);
      this.m_writer.WriteEndElement();
    }
    if (headerFooters.OddFooter.Items.Count <= 0)
      return;
    this.m_writer.WriteStartElement("footerReference", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "default");
    string nextRelationShipId1 = this.GetNextRelationShipID();
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipId1);
    this.AddHeaderFooter(headerFooters.OddFooter, HeaderFooterType.OddFooter, nextRelationShipId1);
    this.m_writer.WriteEndElement();
  }

  private void SerializeDocGrid(WSection section)
  {
    if ((double) section.PageSetup.LinePitch <= 0.0)
      return;
    this.m_writer.WriteStartElement("docGrid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (section.PageSetup.PitchType)
    {
      case GridPitchType.CharsAndLine:
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "linesAndChars");
        break;
      case GridPitchType.LinesOnly:
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lines");
        break;
      case GridPitchType.SnapToChars:
        this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "snapToChars");
        break;
    }
    ushort num = (ushort) Math.Round((double) section.PageSetup.LinePitch * 20.0);
    this.m_writer.WriteAttributeString("linePitch", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeSectionProtection(WSection section)
  {
    if (section.ProtectForm)
      return;
    this.m_writer.WriteStartElement("w", "formProt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteEndElement();
  }

  private void SerializeTextDirection(WSection section)
  {
    if (section.TextDirection == DocTextDirection.LeftToRight)
      return;
    this.m_writer.WriteStartElement("w", "textDirection", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (section.TextDirection)
    {
      case DocTextDirection.TopToBottom:
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRl");
        break;
      case DocTextDirection.TopToBottomRotated:
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTbV");
        break;
      case DocTextDirection.LeftToRightRotated:
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "btLr");
        break;
      case DocTextDirection.RightToLeft:
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTbV");
        break;
      case DocTextDirection.RightToLeftRotated:
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRlV");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeColumns(WSection section)
  {
    ColumnCollection columns = section.Columns;
    this.m_writer.WriteStartElement("cols", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (columns.Count > 0)
      this.m_writer.WriteAttributeString("num", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", columns.Count.ToString());
    if (section.PageSetup.DrawLinesBetweenCols)
      this.m_writer.WriteAttributeString("sep", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    if (columns.OwnerSection.PageSetup.EqualColumnWidth)
    {
      this.m_writer.WriteAttributeString("equalWidth", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? (columns.Count > 0 ? columns[0].Space : 36f).ToString() : this.ToString(columns.Count > 0 ? columns[0].Space * 20f : 720f)) + (this.IsStrict ? "pt" : ""));
    }
    else if (columns.Count > 0)
    {
      this.m_writer.WriteAttributeString("equalWidth", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      foreach (Column column in (CollectionImpl) columns)
      {
        this.m_writer.WriteStartElement("col", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? column.Width.ToString() : this.ToString(column.Width * 20f) + (this.IsStrict ? "pt" : ""));
        this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? column.Space.ToString() : this.ToString(column.Space * 20f) + (this.IsStrict ? "pt" : ""));
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializePageSetup(WPageSetup pageSetup)
  {
    this.SerializePageSize(pageSetup);
    this.SerializePageMargins(pageSetup);
    if (pageSetup.FirstPageTray > PrinterPaperTray.DefaultBin || pageSetup.OtherPagesTray > PrinterPaperTray.DefaultBin)
    {
      this.m_writer.WriteStartElement("paperSrc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (pageSetup.FirstPageTray > PrinterPaperTray.DefaultBin)
        this.m_writer.WriteAttributeString("first", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((int) pageSetup.FirstPageTray).ToString());
      if (pageSetup.OtherPagesTray > PrinterPaperTray.DefaultBin)
        this.m_writer.WriteAttributeString("other", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((int) pageSetup.OtherPagesTray).ToString());
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("pgBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (pageSetup.PageBordersApplyType == PageBordersApplyType.FirstPage)
      this.m_writer.WriteAttributeString("display", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "firstPage");
    else if (pageSetup.PageBordersApplyType == PageBordersApplyType.AllExceptFirstPage)
      this.m_writer.WriteAttributeString("display", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "notFirstPage");
    if (pageSetup.PageBorderOffsetFrom == PageBorderOffsetFrom.PageEdge)
      this.m_writer.WriteAttributeString("offsetFrom", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "page");
    if (!pageSetup.IsFrontPageBorder)
      this.m_writer.WriteAttributeString("zOrder", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "back");
    this.SerializePageBorders(pageSetup.Borders);
    this.m_writer.WriteEndElement();
    this.SerializeLineNumberType(pageSetup);
    this.SerializePageNumberType(pageSetup);
  }

  private void SerializePageBorders(Borders borders)
  {
    this.SerializeBorder(borders.Top, "top", 8);
    this.SerializeBorder(borders.Left, "left", 8);
    this.SerializeBorder(borders.Bottom, "bottom", 8);
    this.SerializeBorder(borders.Right, "right", 8);
  }

  private void SerializeTableCellBorders(CellFormat format)
  {
    if (this.IsNoneBorder(format.Borders))
      return;
    this.m_writer.WriteStartElement("tcBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeBorders(format.Borders, 8);
    this.m_writer.WriteEndElement();
  }

  private bool IsNoneBorder(Border border)
  {
    if (border.BorderType == BorderStyle.None && !border.HasNoneStyle)
      return true;
    return border.BorderType == BorderStyle.Cleared && border.HasNoneStyle;
  }

  private void SerializeBorders(Borders borders, int multipler)
  {
    this.SerializeBorder(borders.Top, "top", multipler);
    this.SerializeBorder(borders.Left, this.IsStrict ? "start" : "left", multipler);
    this.SerializeBorder(borders.Bottom, "bottom", multipler);
    this.SerializeBorder(borders.Right, this.IsStrict ? "end" : "right", multipler);
    this.SerializeBorder(borders.Horizontal, "insideH", multipler);
    this.SerializeBorder(borders.Vertical, "insideV", multipler);
    this.SerializeBorder(borders.DiagonalDown, "tl2br", multipler);
    this.SerializeBorder(borders.DiagonalUp, "tr2bl", multipler);
  }

  private void SerializePageMargins(WPageSetup pageSetup)
  {
    this.m_writer.WriteStartElement("pgMar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    int num = this.IsStrict ? (int) Math.Round((double) pageSetup.Margins.Top) : (int) Math.Round((double) pageSetup.Margins.Top * 20.0);
    this.m_writer.WriteAttributeString("top", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
    num = this.IsStrict ? (int) Math.Round((double) pageSetup.Margins.Right) : (int) Math.Round((double) pageSetup.Margins.Right * 20.0);
    this.m_writer.WriteAttributeString("right", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
    num = this.IsStrict ? (int) Math.Round((double) pageSetup.Margins.Bottom) : (int) Math.Round((double) pageSetup.Margins.Bottom * 20.0);
    this.m_writer.WriteAttributeString("bottom", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
    num = this.IsStrict ? (int) Math.Round((double) pageSetup.Margins.Left) : (int) Math.Round((double) pageSetup.Margins.Left * 20.0);
    this.m_writer.WriteAttributeString("left", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
    if ((double) pageSetup.HeaderDistance >= 0.0)
      this.m_writer.WriteAttributeString("header", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? pageSetup.HeaderDistance.ToString() : this.ToString(pageSetup.HeaderDistance * 20f)) + (this.IsStrict ? "pt" : ""));
    if ((double) pageSetup.FooterDistance >= 0.0)
      this.m_writer.WriteAttributeString("footer", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? pageSetup.FooterDistance.ToString() : this.ToString(pageSetup.FooterDistance * 20f)) + (this.IsStrict ? "pt" : ""));
    num = this.IsStrict ? (int) Math.Round((double) pageSetup.Margins.Gutter) : (int) Math.Round((double) pageSetup.Margins.Gutter * 20.0);
    this.m_writer.WriteAttributeString("gutter", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
    this.m_writer.WriteEndElement();
  }

  private void SerializePageSize(WPageSetup pageSetup)
  {
    this.m_writer.WriteStartElement("pgSz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? pageSetup.PageSize.Width.ToString() : this.ToString(pageSetup.PageSize.Width * 20f)) + (this.IsStrict ? "pt" : ""));
    this.m_writer.WriteAttributeString("h", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? pageSetup.PageSize.Height.ToString() : this.ToString(pageSetup.PageSize.Height * 20f)) + (this.IsStrict ? "pt" : ""));
    if (pageSetup.Orientation == PageOrientation.Landscape)
      this.m_writer.WriteAttributeString("orient", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "landscape");
    this.m_writer.WriteEndElement();
  }

  private void SerializePageNumberType(WPageSetup pageSetup)
  {
    this.m_writer.WriteStartElement("pgNumType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string pageNumType = this.GetPageNumType(pageSetup.PageNumberStyle);
    this.m_writer.WriteAttributeString("fmt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageNumType);
    if (pageSetup.RestartPageNumbering)
      this.m_writer.WriteAttributeString("start", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageSetup.PageStartingNumber.ToString());
    if (pageSetup.PageNumbers.HeadingLevelForChapter != HeadingLevel.None)
    {
      this.m_writer.WriteAttributeString("chapStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", Convert.ToInt32((object) pageSetup.PageNumbers.HeadingLevelForChapter).ToString());
      switch (pageSetup.PageNumbers.ChapterPageSeparator)
      {
        case ChapterPageSeparatorType.Hyphen:
          this.m_writer.WriteAttributeString("chapSep", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "hyphen");
          break;
        case ChapterPageSeparatorType.Period:
          this.m_writer.WriteAttributeString("chapSep", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "period");
          break;
        case ChapterPageSeparatorType.Colon:
          this.m_writer.WriteAttributeString("chapSep", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "colon");
          break;
        case ChapterPageSeparatorType.EmDash:
          this.m_writer.WriteAttributeString("chapSep", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "emDash");
          break;
        case ChapterPageSeparatorType.EnDash:
          this.m_writer.WriteAttributeString("chapSep", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "enDash");
          break;
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeLineNumberType(WPageSetup pageSetup)
  {
    if (pageSetup.LineNumberingStep == 0)
      return;
    this.m_writer.WriteStartElement("lnNumType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (pageSetup.LineNumberingStep != 0)
      this.m_writer.WriteAttributeString("countBy", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageSetup.LineNumberingStep.ToString());
    if (pageSetup.LineNumberingStartValue != 0)
    {
      int numberingStartValue = pageSetup.LineNumberingStartValue;
      this.m_writer.WriteAttributeString("start", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", numberingStartValue == -1 ? numberingStartValue.ToString() : (numberingStartValue - 1).ToString());
    }
    if ((double) pageSetup.LineNumberingDistanceFromText != 0.0)
      this.m_writer.WriteAttributeString("distance", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(pageSetup.LineNumberingDistanceFromText * 20f));
    switch (pageSetup.LineNumberingMode)
    {
      case LineNumberingMode.RestartPage:
        this.m_writer.WriteAttributeString("restart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "newPage");
        break;
      case LineNumberingMode.RestartSection:
        this.m_writer.WriteAttributeString("restart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "newSection");
        break;
      case LineNumberingMode.Continuous:
        this.m_writer.WriteAttributeString("restart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continuous");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeSectionType(SectionBreakCode sectionBreakCode)
  {
    this.m_writer.WriteStartElement("w", "type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetSectionBreakCode(sectionBreakCode));
    this.m_writer.WriteEndElement();
  }

  private string GetSectionBreakCode(SectionBreakCode sectionBreakCode)
  {
    switch (sectionBreakCode)
    {
      case SectionBreakCode.NewColumn:
        return "nextColumn";
      case SectionBreakCode.NewPage:
        return "nextPage";
      case SectionBreakCode.EvenPage:
        return "evenPage";
      case SectionBreakCode.Oddpage:
        return "oddPage";
      default:
        return "continuous";
    }
  }

  private void SerializeEndnoteProperties(WSection section)
  {
    this.m_writer.WriteStartElement("endnotePr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeEndnoteFootnoteNumberFormat(section, false);
    if (section.PageSetup.InitialEndnoteNumber > 1)
      this.SerializeEndnoteFootnoteElement("numStart", section.PageSetup.InitialEndnoteNumber.ToString());
    if (section.PageSetup.RestartIndexForEndnote == EndnoteRestartIndex.RestartForEachSection)
      this.SerializeEndnoteFootnoteElement("numRestart", "eachSect");
    this.m_writer.WriteEndElement();
  }

  private void SerializeFootnoteProperties(WSection section)
  {
    this.m_writer.WriteStartElement("footnotePr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeFootnotePosition(section);
    this.SerializeEndnoteFootnoteNumberFormat(section, true);
    if (section.PageSetup.InitialFootnoteNumber > 1)
      this.SerializeEndnoteFootnoteElement("numStart", section.PageSetup.InitialFootnoteNumber.ToString());
    if (section.PageSetup.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachPage)
      this.SerializeEndnoteFootnoteElement("numRestart", "eachPage");
    else if (section.PageSetup.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachSection)
      this.SerializeEndnoteFootnoteElement("numRestart", "eachSect");
    this.m_writer.WriteEndElement();
  }

  private bool IsNeedToSerializeSectionFootNoteProperties(WSection section)
  {
    return section.PageSetup.FootnotePosition != FootnotePosition.PrintAtBottomOfPage || section.PageSetup.InitialFootnoteNumber > 1 || section.PageSetup.FootnoteNumberFormat != FootEndNoteNumberFormat.Arabic || section.PageSetup.RestartIndexForFootnotes != FootnoteRestartIndex.DoNotRestart;
  }

  private bool IsNeedToSerializeSectionEndNoteProperties(WSection section)
  {
    return section.PageSetup.EndnotePosition != EndnotePosition.DisplayEndOfDocument || section.PageSetup.InitialEndnoteNumber > 1 || section.PageSetup.EndnoteNumberFormat != FootEndNoteNumberFormat.LowerCaseRoman || section.PageSetup.RestartIndexForEndnote != EndnoteRestartIndex.DoNotRestart;
  }

  private bool IsNeedToSerializeDocumentFootNoteProperties()
  {
    return this.m_document.FootnotePosition != FootnotePosition.PrintAtBottomOfPage || this.m_document.InitialFootnoteNumber > 1 || this.m_document.FootnoteNumberFormat != FootEndNoteNumberFormat.Arabic || this.m_document.RestartIndexForFootnotes != FootnoteRestartIndex.DoNotRestart || this.HasFootnote;
  }

  private bool IsNeedToSerializeDocumentEndNoteProperties()
  {
    return this.m_document.EndnotePosition != EndnotePosition.DisplayEndOfDocument || this.m_document.InitialEndnoteNumber > 1 || this.m_document.EndnoteNumberFormat != FootEndNoteNumberFormat.LowerCaseRoman || this.m_document.RestartIndexForEndnote != EndnoteRestartIndex.DoNotRestart || this.HasEndnote;
  }

  private void SerializeEndnoteFootnoteElement(string elemName, string elemValue)
  {
    this.m_writer.WriteStartElement(elemName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", elemValue);
    this.m_writer.WriteEndElement();
  }

  private void SerializeEndnoteFootnoteNumberFormat(WSection section, bool isFootnote)
  {
    switch (isFootnote ? (int) section.PageSetup.FootnoteNumberFormat : (int) section.PageSetup.EndnoteNumberFormat)
    {
      case 0:
        if (isFootnote)
          break;
        this.SerializeEndnoteFootnoteElement("numFmt", "decimal");
        break;
      case 1:
        this.SerializeEndnoteFootnoteElement("numFmt", "upperRoman");
        break;
      case 2:
        if (!isFootnote)
          break;
        this.SerializeEndnoteFootnoteElement("numFmt", "lowerRoman");
        break;
      case 3:
        this.SerializeEndnoteFootnoteElement("numFmt", "upperLetter");
        break;
      case 4:
        this.SerializeEndnoteFootnoteElement("numFmt", "lowerLetter");
        break;
    }
  }

  private void SerializeEndnoteFootnoteNumberFormat(bool isFootnote)
  {
    switch (isFootnote ? (int) this.m_document.FootnoteNumberFormat : (int) this.m_document.EndnoteNumberFormat)
    {
      case 0:
        if (isFootnote)
          break;
        this.SerializeEndnoteFootnoteElement("numFmt", "decimal");
        break;
      case 1:
        this.SerializeEndnoteFootnoteElement("numFmt", "upperRoman");
        break;
      case 2:
        if (!isFootnote)
          break;
        this.SerializeEndnoteFootnoteElement("numFmt", "lowerRoman");
        break;
      case 3:
        this.SerializeEndnoteFootnoteElement("numFmt", "upperLetter");
        break;
      case 4:
        this.SerializeEndnoteFootnoteElement("numFmt", "lowerLetter");
        break;
    }
  }

  private void AddHeaderFooter(HeaderFooter hf, HeaderFooterType hfType, string id)
  {
    if (!this.HeadersFooters.ContainsKey(hfType))
    {
      Dictionary<string, HeaderFooter> dictionary = new Dictionary<string, HeaderFooter>();
      this.HeadersFooters.Add(hfType, dictionary);
    }
    this.HeadersFooters[hfType].Add(id, hf);
  }

  private void SerializeThemes()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("a", "theme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", "Office Theme");
    this.m_writer.WriteStartElement("themeElements", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeColorScheme();
    this.SerializeFontScheme();
    this.SerializeFormatScheme();
    this.m_writer.WriteEndElement();
    if (this.m_document.Themes.DocxProps.ContainsKey("objectDefaults"))
      this.SerializeDocxStream(this.m_document.Themes.DocxProps, "objectDefaults");
    if (this.m_document.Themes.DocxProps.ContainsKey("extraClrSchemeLst"))
      this.SerializeDocxStream(this.m_document.Themes.DocxProps, "extraClrSchemeLst");
    if (this.m_document.Themes.DocxProps.ContainsKey("extLst"))
      this.SerializeDocxStream(this.m_document.Themes.DocxProps, "extLst");
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\theme\\theme1.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeFormatScheme()
  {
    Shape shape = new Shape((IWordDocument) this.m_document);
    this.m_writer.WriteStartElement("fmtScheme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", this.m_document.Themes.FmtScheme.FmtName);
    this.m_writer.WriteStartElement("fillStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeFillStyleList(this.m_document.Themes.FmtScheme.FillFormats);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("lnStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < this.m_document.Themes.FmtScheme.LnStyleScheme.Count; ++index)
      this.SerializeLineStyleList(this.m_document.Themes.FmtScheme.LnStyleScheme[index]);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("effectStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < this.m_document.Themes.FmtScheme.EffectStyles.Count; ++index)
    {
      if (this.m_document.Themes.FmtScheme.EffectStyles[index] != null)
      {
        EffectFormat effectStyle = this.m_document.Themes.FmtScheme.EffectStyles[index];
        this.m_writer.WriteStartElement("effectStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("a", "effectLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.SerializeEffectStyles(effectStyle);
        this.m_writer.WriteEndElement();
        if (effectStyle.IsSceneProperties)
          this.SerializeThreeDSceneEffects(effectStyle.ThreeDFormat);
        if (effectStyle.IsShapeProperties)
          this.SerializeThreeDShapeEffects(effectStyle.ThreeDFormat);
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("bgFillStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeFillStyleList(this.m_document.Themes.FmtScheme.BgFillFormats);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeFillStyleList(List<FillFormat> fillFormats)
  {
    for (int index = 0; index < fillFormats.Count; ++index)
    {
      FillFormat fillFormat = fillFormats[index];
      if (fillFormat.FillType == FillType.FillSolid)
        this.SerializeThemeSolidFill(fillFormat);
      else if (fillFormat.FillType == FillType.FillGradient)
        this.SerializeThemeGradient(fillFormat.GradientFill);
      else if (fillFormat.FillType == FillType.FillTextured || fillFormat.FillType == FillType.FillPicture)
      {
        Shape shape = new Shape((IWordDocument) this.m_document);
        shape.FillFormat = this.m_document.Themes.FmtScheme.FillFormats[index];
        Entity baseEntity = ((Entity) shape).GetBaseEntity((Entity) shape);
        this.SerializeBlipFill(shape.FillFormat, baseEntity, (WPicture) null, false);
      }
      else if (fillFormat.FillType == FillType.FillPatterned)
        this.SerializeThemePattern(fillFormat);
      else if (fillFormat.FillType == FillType.None)
      {
        this.m_writer.WriteStartElement("noFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
    }
  }

  private void SerializeThemePattern(FillFormat fillFormat)
  {
    this.m_writer.WriteStartElement("pattFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", this.GetPatternFillType(fillFormat.Pattern));
    if (fillFormat.ForeColor == Color.Empty || fillFormat.Color == Color.Empty || fillFormat.FillSchemeColorTransforms.Count > 0)
    {
      this.m_writer.WriteStartElement("fgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.ForeColor == Color.Empty || fillFormat.FillSchemeColorTransforms.Count > 0)
      {
        this.SerializeThemeColor(fillFormat.FillSchemeColorTransforms);
      }
      else
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.ForeColor));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("bgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.Color == Color.Empty || fillFormat.FillSchemeColorTransforms.Count > 0)
      {
        this.SerializeThemeColor(fillFormat.FillSchemeColorTransforms);
      }
      else
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(fillFormat.Color));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeThemeColor(List<DictionaryEntry> fillSchemeColorTransforms)
  {
    this.m_writer.WriteStartElement("schemeClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", "phClr");
    if (fillSchemeColorTransforms.Count > 0)
    {
      for (int index = 0; index < fillSchemeColorTransforms.Count; ++index)
      {
        this.m_writer.WriteStartElement(fillSchemeColorTransforms[index].Key.ToString().StartsWithExt("fgClr") || fillSchemeColorTransforms[index].Key.ToString().StartsWithExt("bgClr") ? fillSchemeColorTransforms[index].Key.ToString().Remove(0, 5) : fillSchemeColorTransforms[index].Key.ToString(), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        int num = 0;
        if (this.IsStrict)
          num = Convert.ToInt32(fillSchemeColorTransforms[index].Value);
        this.m_writer.WriteAttributeString("val", (this.IsStrict ? (num / 1000).ToString() : fillSchemeColorTransforms[index].Value.ToString()) + (this.IsStrict ? "%" : ""));
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeThemeLinePattern(LineFormat lineFormat)
  {
    this.m_writer.WriteStartElement("pattFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("prst", this.GetPatternFillType(lineFormat.Pattern));
    if (lineFormat.ForeColor == Color.Empty || lineFormat.Color == Color.Empty)
    {
      this.m_writer.WriteStartElement("fgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (lineFormat.ForeColor == Color.Empty || lineFormat.LineSchemeColorTransforms.Count > 0)
      {
        this.SerializeThemeColor(lineFormat.LineSchemeColorTransforms);
      }
      else
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(lineFormat.ForeColor));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("bgClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (lineFormat.Color == Color.Empty || lineFormat.LineSchemeColorTransforms.Count > 0)
      {
        this.SerializeThemeColor(lineFormat.LineSchemeColorTransforms);
      }
      else
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(lineFormat.Color));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeThemeSolidFill(FillFormat fillFormat)
  {
    if (fillFormat.Color == Color.Empty && fillFormat.FillSchemeColorTransforms.Count > 0)
    {
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (fillFormat.Color == Color.Empty && fillFormat.FillSchemeColorTransforms.Count > 0)
        this.SerializeThemeColor(fillFormat.FillSchemeColorTransforms);
      this.m_writer.WriteEndElement();
    }
    else if (fillFormat.Color == Color.Empty)
    {
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("schemeClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", "phClr");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
      this.SerializeSolidFill(fillFormat.Color, fillFormat.Transparency);
  }

  private void SerializeThemeGradient(GradientFill gradientFill)
  {
    this.m_writer.WriteStartElement("gradFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (!gradientFill.IsEmptyElement)
    {
      if (gradientFill.Flip != FlipOrientation.None)
        this.m_writer.WriteAttributeString("flip", this.GetFlipOrientation(gradientFill.Flip));
      this.m_writer.WriteAttributeString("rotWithShape", gradientFill.RotateWithShape ? "1" : "0");
      this.m_writer.WriteStartElement("gsLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      foreach (GradientStop gradientStop in gradientFill.GradientStops)
        this.SerializeThemeGradientStop(gradientStop);
      this.m_writer.WriteEndElement();
      if (gradientFill.LinearGradient != null)
      {
        this.m_writer.WriteStartElement("lin", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("ang", ((int) gradientFill.LinearGradient.Angle * 60000).ToString());
        this.m_writer.WriteAttributeString("scaled", gradientFill.LinearGradient.Scaled ? "1" : "0");
        this.m_writer.WriteEndElement();
      }
      if (gradientFill.PathGradient != null)
      {
        this.m_writer.WriteStartElement("path", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("path", this.GetGradientShadeType(gradientFill.PathGradient.PathShade));
        this.m_writer.WriteStartElement("fillToRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        if (gradientFill.PathGradient.LeftOffset != (short) 0)
          this.m_writer.WriteAttributeString("l", ((int) gradientFill.PathGradient.LeftOffset * 1000).ToString());
        if (gradientFill.PathGradient.TopOffset != (short) 0)
          this.m_writer.WriteAttributeString("t", ((int) gradientFill.PathGradient.TopOffset * 1000).ToString());
        if (gradientFill.PathGradient.RightOffset != (short) 0)
          this.m_writer.WriteAttributeString("r", ((int) gradientFill.PathGradient.RightOffset * 1000).ToString());
        if (gradientFill.PathGradient.BottomOffset != (short) 0)
          this.m_writer.WriteAttributeString("b", ((int) gradientFill.PathGradient.BottomOffset * 1000).ToString());
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("tileRect", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if ((double) gradientFill.TileRectangle.LeftOffset != 0.0)
        this.m_writer.WriteAttributeString("l", (gradientFill.TileRectangle.LeftOffset * 1000f).ToString());
      if ((double) gradientFill.TileRectangle.TopOffset != 0.0)
        this.m_writer.WriteAttributeString("t", (gradientFill.TileRectangle.TopOffset * 1000f).ToString());
      if ((double) gradientFill.TileRectangle.RightOffset != 0.0)
        this.m_writer.WriteAttributeString("r", (gradientFill.TileRectangle.RightOffset * 1000f).ToString());
      if ((double) gradientFill.TileRectangle.BottomOffset != 0.0)
        this.m_writer.WriteAttributeString("b", (gradientFill.TileRectangle.BottomOffset * 1000f).ToString());
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeThemeGradientStop(GradientStop gradientStop)
  {
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", (this.IsStrict ? gradientStop.Position.ToString() : ((int) gradientStop.Position * 1000).ToString()) + (this.IsStrict ? "%" : ""));
    if (gradientStop.FillSchemeColorTransforms.Count > 0)
      this.SerializeThemeColor(gradientStop.FillSchemeColorTransforms);
    else if (gradientStop.Color != Color.Empty)
    {
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(gradientStop.Color));
      if (gradientStop.Opacity != byte.MaxValue)
      {
        this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", ((int) gradientStop.Opacity * 1000).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("schemeClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", "phClr");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeEffectStyles(EffectFormat effectFormat)
  {
    if (effectFormat.IsShadowEffect)
      this.SerializeShadowEffect(effectFormat.ShadowFormat);
    if (effectFormat.IsReflection)
      this.SerializeReflectionEffect(effectFormat.ReflectionFormat);
    if (effectFormat.IsGlowEffect)
    {
      this.m_writer.WriteStartElement("a", "glow", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      if (effectFormat.GlowFormat.IsInlineRadius)
        this.m_writer.WriteAttributeString("rad", ((int) Math.Round((double) effectFormat.GlowFormat.Radius * 12700.0)).ToString());
      if (effectFormat.GlowFormat.IsInlineColor)
      {
        this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetRGBCode(effectFormat.GlowFormat.Color));
        if (effectFormat.GlowFormat.IsInlineTransparency)
        {
          this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("val", Math.Round((double) effectFormat.GlowFormat.Transparency * 100.0 * 1000.0).ToString((IFormatProvider) CultureInfo.InvariantCulture));
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    if (!effectFormat.IsSoftEdge)
      return;
    this.m_writer.WriteStartElement("a", "softEdge", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (!effectFormat.NoSoftEdges)
      this.m_writer.WriteAttributeString("rad", ((int) Math.Round((double) effectFormat.SoftEdgeRadius * 12700.0)).ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeLineStyleList(LineFormat lineFormat)
  {
    if (!lineFormat.Line)
    {
      this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("w", (lineFormat.Weight * 12700f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
      this.m_writer.WriteAttributeString("cap", this.GetLineCapStyle(lineFormat.LineCap, false));
      if (lineFormat.InsetPen)
        this.m_writer.WriteAttributeString("algn", "in");
      this.m_writer.WriteAttributeString("cmpd", this.GetLineStyle(lineFormat.Style, false));
      if (lineFormat.Line)
      {
        if (lineFormat.LineFormatType == LineFormatType.Gradient)
          this.SerializeThemeGradient(lineFormat.GradientFill);
        else if (lineFormat.LineFormatType == LineFormatType.Patterned)
          this.SerializeThemeLinePattern(lineFormat);
        else if (lineFormat.LineSchemeColorTransforms.Count > 0 || lineFormat.Color == Color.Empty)
          this.SerializeThemeLineSolidFill(lineFormat);
        else
          this.SerializeSolidFill(lineFormat.Color, lineFormat.Transparency);
      }
      else
      {
        this.m_writer.WriteStartElement("noFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
      if (lineFormat.DocxProps.ContainsKey("custDash"))
      {
        this.SerializeDocxStream(lineFormat.DocxProps, "custDash");
      }
      else
      {
        this.m_writer.WriteStartElement("prstDash", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.GetDashStyle(lineFormat.DashStyle, false));
        this.m_writer.WriteEndElement();
      }
      if (lineFormat.LineJoin == LineJoin.Miter && !string.IsNullOrEmpty(lineFormat.MiterJoinLimit))
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle(lineFormat.LineJoin), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        int result = 0;
        if (this.IsStrict)
        {
          int.TryParse(lineFormat.MiterJoinLimit, NumberStyles.Number, (IFormatProvider) CultureInfo.CurrentCulture, out result);
          result /= 1000;
        }
        this.m_writer.WriteAttributeString("lim", this.IsStrict ? result.ToString() + "%" : lineFormat.MiterJoinLimit);
        this.m_writer.WriteEndElement();
      }
      else if (lineFormat.LineJoin != LineJoin.Miter)
      {
        this.m_writer.WriteStartElement(this.GetLineJoinStyle(lineFormat.LineJoin), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeThemeLineSolidFill(LineFormat lineFormat)
  {
    if (lineFormat.Color == Color.Empty || lineFormat.LineSchemeColorTransforms.Count > 0)
    {
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("schemeClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", "phClr");
      if (lineFormat.LineSchemeColorTransforms.Count > 0)
      {
        for (int index = 0; index < lineFormat.LineSchemeColorTransforms.Count; ++index)
        {
          if (!lineFormat.LineSchemeColorTransforms[index].Key.ToString().StartsWithExt("fgClr") && !lineFormat.LineSchemeColorTransforms[index].Key.ToString().StartsWithExt("bgClr"))
          {
            this.m_writer.WriteStartElement(lineFormat.LineSchemeColorTransforms[index].Key.ToString(), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
            this.m_writer.WriteAttributeString("val", lineFormat.LineSchemeColorTransforms[index].Value.ToString());
            this.m_writer.WriteEndElement();
          }
        }
      }
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else if (lineFormat.Color == Color.Empty)
    {
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("schemeClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", "phClr");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
      this.SerializeSolidFill(lineFormat.Color, lineFormat.Transparency);
  }

  private void SerializeColorScheme()
  {
    string empty = string.Empty;
    this.m_writer.WriteStartElement("clrScheme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", this.m_document.Themes.ColorSchemeName);
    if (this.m_document.Themes.SchemeColor.ContainsKey("dk1"))
    {
      this.m_writer.WriteStartElement("dk1", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["dk1"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("lt1"))
    {
      this.m_writer.WriteStartElement("lt1", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["lt1"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("dk2"))
    {
      this.m_writer.WriteStartElement("dk2", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["dk2"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("lt2"))
    {
      this.m_writer.WriteStartElement("lt2", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["lt2"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("accent1"))
    {
      this.m_writer.WriteStartElement("accent1", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["accent1"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("accent2"))
    {
      this.m_writer.WriteStartElement("accent2", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["accent2"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("accent3"))
    {
      this.m_writer.WriteStartElement("accent3", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["accent3"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("accent4"))
    {
      this.m_writer.WriteStartElement("accent4", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["accent4"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("accent5"))
    {
      this.m_writer.WriteStartElement("accent5", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["accent5"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("accent6"))
    {
      this.m_writer.WriteStartElement("accent6", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["accent6"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("hlink"))
    {
      this.m_writer.WriteStartElement("hlink", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["hlink"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("folHlink"))
    {
      this.m_writer.WriteStartElement("folHlink", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["folHlink"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Themes.SchemeColor.ContainsKey("phClr"))
    {
      this.m_writer.WriteStartElement("phClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.GetRGBCode(this.m_document.Themes.SchemeColor["phClr"]));
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeFontScheme()
  {
    this.m_writer.WriteStartElement("fontScheme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", this.m_document.Themes.FontScheme.FontSchemeName);
    this.m_writer.WriteStartElement("majorFont", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList.Count; ++index)
    {
      switch (this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Name)
      {
        case "latin":
        case "ea":
        case "cs":
          this.m_writer.WriteStartElement(this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Name, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("typeface", this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Typeface);
          if (this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Panose != null)
            this.m_writer.WriteAttributeString("panose", this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Panose);
          if (this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Charset != (byte) 0)
            this.m_writer.WriteAttributeString("charset", this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].Charset.ToString());
          if (this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].PitchFamily != (byte) 0)
            this.m_writer.WriteAttributeString("pitchFamily", this.m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[index].PitchFamily.ToString());
          this.m_writer.WriteEndElement();
          break;
      }
    }
    foreach (KeyValuePair<string, string> keyValuePair in this.m_document.Themes.FontScheme.MajorFontScheme.FontTypeface)
    {
      this.m_writer.WriteStartElement("font", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("script", keyValuePair.Key);
      this.m_writer.WriteAttributeString("typeface", keyValuePair.Value);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("minorFont", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    for (int index = 0; index < this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList.Count; ++index)
    {
      switch (this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Name)
      {
        case "latin":
        case "ea":
        case "cs":
          this.m_writer.WriteStartElement(this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Name, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
          this.m_writer.WriteAttributeString("typeface", this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Typeface);
          if (this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Panose != null)
            this.m_writer.WriteAttributeString("panose", this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Panose);
          if (this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Charset != (byte) 0)
            this.m_writer.WriteAttributeString("charset", this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].Charset.ToString());
          if (this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].PitchFamily != (byte) 0)
            this.m_writer.WriteAttributeString("pitchFamily", this.m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[index].PitchFamily.ToString());
          this.m_writer.WriteEndElement();
          break;
      }
    }
    foreach (KeyValuePair<string, string> keyValuePair in this.m_document.Themes.FontScheme.MinorFontScheme.FontTypeface)
    {
      this.m_writer.WriteStartElement("font", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("script", keyValuePair.Key);
      this.m_writer.WriteAttributeString("typeface", keyValuePair.Value);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultThemes()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("a", "theme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "a", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", "Office Theme");
    this.m_writer.WriteStartElement("themeElements", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    bool isWord2013 = this.IsWord2013 || this.IsWordLatest;
    this.SerializeDefaultColorScheme(isWord2013);
    this.SerializeDefaultFontScheme(isWord2013);
    this.SerializeDefaultFormatScheme(isWord2013);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("objectDefaults", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("extraClrSchemeLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\theme\\theme1.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeDefaultColorScheme(bool isWord2013)
  {
    this.m_writer.WriteStartElement("clrScheme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", "Office");
    this.m_writer.WriteStartElement("dk1", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("sysClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", "windowText");
    this.m_writer.WriteAttributeString("lastClr", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("lt1", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("sysClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", "window");
    this.m_writer.WriteAttributeString("lastClr", "FFFFFF");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("dk2", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "44546A" : "1F497D", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("lt2", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "E7E6E6" : "EEECE1", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("accent1", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "5B9BD5" : "4F81BD", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("accent2", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "ED7D31" : "C0504D", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("accent3", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "A5A5A5" : "9BBB59", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("accent4", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "FFC000" : "8064A2", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("accent5", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "4472C4" : "4BACC6", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("accent6", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "70AD47" : "F79646", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("hlink", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "0563C1" : "0000FF", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("folHlink", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeRGBColor(isWord2013 ? "954F72" : "800080", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeRGBColor(string colorValue, string alphaColorValue)
  {
    this.m_writer.WriteStartElement("srgbClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", colorValue);
    if (!string.IsNullOrEmpty(alphaColorValue))
    {
      this.m_writer.WriteStartElement("alpha", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", alphaColorValue);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultFontScheme(bool isWord2013)
  {
    this.m_writer.WriteStartElement("fontScheme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", "Office");
    this.SerializeDefaultThemeFont("majorFont", isWord2013);
    this.SerializeDefaultThemeFont("minorFont", isWord2013);
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultFormatScheme(bool isWord2013)
  {
    this.m_writer.WriteStartElement("fmtScheme", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("name", "Office");
    this.SerializeDefaultFillStyleList(isWord2013);
    this.SerializeDefaultLineStyleList(isWord2013);
    this.SerializeDefaultEffectStyleList(isWord2013);
    this.SerializeDefaultBackgroundFillStyleList(isWord2013);
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultFillStyleList(bool isWord2013)
  {
    this.m_writer.WriteStartElement("fillStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeSchemeColor("phClr");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gradFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("rotWithShape", "1");
    this.m_writer.WriteStartElement("gsLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", this.IsStrict ? "0%" : "0");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("110000", "105000", "67000", "");
    else
      this.SerializeGradientRelativePositions("", "300000", "50000", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", isWord2013 ? "50000" : "37000");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("105000", "103000", "73000", "");
    else
      this.SerializeGradientRelativePositions("", "300000", "37000", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", this.IsStrict ? "100000%" : "100000");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("105000", "109000", "81000", "");
    else
      this.SerializeGradientRelativePositions("", "350000", "15000", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("lin", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("ang", isWord2013 ? "5400000" : "16200000");
    this.m_writer.WriteAttributeString("scaled", isWord2013 ? "0" : "1");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gradFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("rotWithShape", "1");
    this.m_writer.WriteStartElement("gsLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", this.IsStrict ? "0%" : "0");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("103000", "102000", "94000", "");
    else
      this.SerializeGradientRelativePositions("", "130000", "", "51000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", isWord2013 ? "50000" : "80000");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("100000", "110000", "", "100000");
    else
      this.SerializeGradientRelativePositions("", "130000", "", "93000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", this.IsStrict ? "100000%" : "100000");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("99000", "120000", "", "78000");
    else
      this.SerializeGradientRelativePositions("", "350000", "", "94000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("lin", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("ang", isWord2013 ? "5400000" : "16200000");
    this.m_writer.WriteAttributeString("scaled", "0");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultLineStyleList(bool isWord2013)
  {
    this.m_writer.WriteStartElement("lnStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (isWord2013)
    {
      this.SerializeDefaultLineStyle("6350", "flat", "sng", "ctr", true);
      this.SerializeDefaultLineStyle("12700", "flat", "sng", "ctr", true);
      this.SerializeDefaultLineStyle("19050", "flat", "sng", "ctr", true);
    }
    else
    {
      this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("w", "9525");
      this.m_writer.WriteAttributeString("cap", "flat");
      this.m_writer.WriteAttributeString("cmpd", "sng");
      this.m_writer.WriteAttributeString("algn", "ctr");
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.SerializeSchemeColor("phClr");
      this.SerializeGradientRelativePositions("", "105000", "", "95000");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("prstDash", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", "solid");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
      this.SerializeDefaultLineStyle("25400", "flat", "sng", "ctr", false);
      this.SerializeDefaultLineStyle("38100", "flat", "sng", "ctr", false);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultLineStyle(
    string width,
    string lineCap,
    string lineType,
    string alignment,
    bool isMiter)
  {
    this.m_writer.WriteStartElement("ln", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("w", width);
    this.m_writer.WriteAttributeString("cap", lineCap);
    this.m_writer.WriteAttributeString("cmpd", lineType);
    this.m_writer.WriteAttributeString("algn", alignment);
    this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeSchemeColor("phClr");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("prstDash", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", "solid");
    this.m_writer.WriteEndElement();
    if (isMiter)
    {
      this.m_writer.WriteStartElement("miter", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("lim", this.IsStrict ? (Convert.ToInt32(800000) / 1000).ToString() + "%" : "800000");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultEffectStyleList(bool isWord2013)
  {
    this.m_writer.WriteStartElement("effectStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    if (isWord2013)
    {
      for (int index = 0; index < 2; ++index)
      {
        this.m_writer.WriteStartElement("effectStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteStartElement("effectLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteEndElement();
        this.m_writer.WriteEndElement();
      }
      this.SerializeEffectStyle("57150", "19050", "63000", true);
    }
    else
    {
      this.SerializeEffectStyle("40000", "20000", "38000", false);
      this.SerializeEffectStyle("40000", "23000", "35000", false);
      this.SerializeEffectStyle("40000", "23000", "35000", false);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeEffectStyle(
    string blurRadius,
    string distance,
    string alpha,
    bool isAlign)
  {
    this.m_writer.WriteStartElement("effectStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("effectLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("outerShdw", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("blurRad", blurRadius);
    this.m_writer.WriteAttributeString("dist", distance);
    this.m_writer.WriteAttributeString("dir", "5400000");
    if (isAlign)
      this.m_writer.WriteAttributeString("algn", "ctr");
    this.m_writer.WriteAttributeString("rotWithShape", "0");
    this.SerializeRGBColor("000000", alpha);
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultBackgroundFillStyleList(bool isWord2013)
  {
    this.m_writer.WriteStartElement("bgFillStyleLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.SerializeSchemeColor("phClr");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (isWord2013)
    {
      this.m_writer.WriteStartElement("solidFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.SerializeSchemeColor("phClr");
      this.SerializeGradientRelativePositions("", "170000", "95000", "");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("gradFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("rotWithShape", "1");
    this.m_writer.WriteStartElement("gsLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", "0");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("102000", "150000", "93000", "98000");
    else
      this.SerializeGradientRelativePositions("", "350000", "40000", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", isWord2013 ? "50000" : "40000");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("103000", "130000", "98000", "90000");
    else
      this.SerializeGradientRelativePositions("", "350000", "45000", "99000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", "100000");
    this.SerializeSchemeColor("phClr");
    if (isWord2013)
      this.SerializeGradientRelativePositions("", "120000", "", "63000");
    else
      this.SerializeGradientRelativePositions("", "255000", "", "20000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    if (isWord2013)
    {
      this.m_writer.WriteStartElement("lin", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("ang", "5400000");
      this.m_writer.WriteAttributeString("scaled", "0");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
    else
      this.SerializeDefaultBackgroundFillStyleList();
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultBackgroundFillStyleList()
  {
    this.m_writer.WriteStartElement("path", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("path", "circle");
    this.m_writer.WriteStartElement("fillToRect");
    this.m_writer.WriteAttributeString("l", "50000");
    this.m_writer.WriteAttributeString("t", "-80000");
    this.m_writer.WriteAttributeString("r", "50000");
    this.m_writer.WriteAttributeString("b", "180000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gradFill", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("rotWithShape", "1");
    this.m_writer.WriteStartElement("gsLst", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", "0");
    this.SerializeSchemeColor("phClr");
    this.SerializeGradientRelativePositions("", "300000", "80000", "");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("gs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("pos", "100000");
    this.SerializeSchemeColor("phClr");
    this.SerializeGradientRelativePositions("", "200000", "", "30000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("path", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("path", "circle");
    this.m_writer.WriteStartElement("fillToRect");
    this.m_writer.WriteAttributeString("l", "50000");
    this.m_writer.WriteAttributeString("t", "50000");
    this.m_writer.WriteAttributeString("r", "50000");
    this.m_writer.WriteAttributeString("b", "50000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeSchemeColor(string value)
  {
    this.m_writer.WriteStartElement("schemeClr", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", value);
  }

  private void SerializeGradientRelativePositions(
    string lumMod,
    string satMod,
    string tint,
    string shade)
  {
    if (!string.IsNullOrEmpty(lumMod))
    {
      this.m_writer.WriteStartElement(nameof (lumMod), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? (Convert.ToInt32(lumMod) / 1000).ToString() + "%" : lumMod);
      this.m_writer.WriteEndElement();
    }
    if (!string.IsNullOrEmpty(satMod))
    {
      this.m_writer.WriteStartElement(nameof (satMod), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? (Convert.ToInt32(satMod) / 1000).ToString() + "%" : satMod);
      this.m_writer.WriteEndElement();
    }
    if (!string.IsNullOrEmpty(tint))
    {
      this.m_writer.WriteStartElement(nameof (tint), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? (Convert.ToInt32(tint) / 1000).ToString() + "%" : tint);
      this.m_writer.WriteEndElement();
    }
    if (string.IsNullOrEmpty(shade))
      return;
    this.m_writer.WriteStartElement(nameof (shade), this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? (Convert.ToInt32(shade) / 1000).ToString() + "%" : shade);
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultThemeFont(string fontType, bool isWord2013)
  {
    this.m_writer.WriteStartElement(fontType, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
    MajorMinorFontScheme majorMinorFontScheme = fontType == "majorFont" ? this.m_document.Themes.FontScheme.MajorFontScheme : this.m_document.Themes.FontScheme.MinorFontScheme;
    if (majorMinorFontScheme == null || majorMinorFontScheme.FontSchemeList.Count == 0 || !this.m_document.DocHasThemes)
    {
      this.m_writer.WriteStartElement("latin", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("typeface", fontType == "majorFont" ? (isWord2013 ? "Calibri Light" : "Cambria") : "Calibri");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("ea", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("typeface", "");
      this.m_writer.WriteEndElement();
      this.m_writer.WriteStartElement("cs", this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
      this.m_writer.WriteAttributeString("typeface", "");
      this.m_writer.WriteEndElement();
    }
    else
    {
      for (int index = 0; index < majorMinorFontScheme.FontSchemeList.Count; ++index)
      {
        this.m_writer.WriteStartElement(majorMinorFontScheme.FontSchemeList[index].Name, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
        this.m_writer.WriteAttributeString("typeface", majorMinorFontScheme.FontSchemeList[index].Typeface);
        if (majorMinorFontScheme.FontSchemeList[index].Panose != null)
          this.m_writer.WriteAttributeString("panose", majorMinorFontScheme.FontSchemeList[index].Panose);
        if (majorMinorFontScheme.FontSchemeList[index].Charset != (byte) 0)
          this.m_writer.WriteAttributeString("charset", majorMinorFontScheme.FontSchemeList[index].Charset.ToString());
        if (majorMinorFontScheme.FontSchemeList[index].PitchFamily != (byte) 0)
          this.m_writer.WriteAttributeString("pitchFamily", majorMinorFontScheme.FontSchemeList[index].PitchFamily.ToString());
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeSettings()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "settings", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "sl", (string) null, "http://schemas.openxmlformats.org/schemaLibrary/2006/main");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15");
    this.ParseSettingsRelations();
    List<Stream> tempDocxProps = new List<Stream>();
    int index1 = 0;
    for (int count = this.m_document.DocxProps.Count; index1 < count; ++index1)
      tempDocxProps.Add(this.m_document.DocxProps[index1]);
    if (this.m_document.WriteProtected)
    {
      this.m_writer.WriteStartElement("w", "writeProtection", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("recommended", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.ViewSetup.DocumentViewType != DocumentViewType.PrintLayout && this.m_document.ViewSetup.DocumentViewType != DocumentViewType.NormalLayout)
    {
      this.m_writer.WriteStartElement("view", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      string str = string.Empty;
      if (this.m_document.ViewSetup.DocumentViewType == DocumentViewType.OutlineLayout)
        str = "outline";
      else if (this.m_document.ViewSetup.DocumentViewType == DocumentViewType.WebLayout)
        str = "web";
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("w", "zoom", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (this.m_document.ViewSetup.ZoomType)
    {
      case ZoomType.FullPage:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fullPage");
        break;
      case ZoomType.PageWidth:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "bestFit");
        break;
      case ZoomType.TextFit:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "textFit");
        break;
      default:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "none");
        break;
    }
    this.m_writer.WriteAttributeString("w", "percent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.ViewSetup.ZoomPercent.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    this.m_writer.WriteEndElement();
    this.SerializeDocxProps(tempDocxProps, "removePersonalInformation");
    this.SerializeDocxProps(tempDocxProps, "removeDateAndTime");
    if (this.m_document.DOP.Dop2000.NoMargPgvwSaved)
    {
      this.m_writer.WriteStartElement("doNotDisplayPageBoundaries", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.DisplayBackgrounds)
    {
      this.m_writer.WriteStartElement("displayBackgroundShape", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "printFractionalCharacterWidth");
    this.SerializeDocxProps(tempDocxProps, "printFormsData");
    this.SerializeDocxProps(tempDocxProps, "embedTrueTypeFonts");
    this.SerializeDocxProps(tempDocxProps, "embedSystemFonts");
    this.SerializeDocxProps(tempDocxProps, "saveSubsetFonts");
    this.SerializeDocxProps(tempDocxProps, "saveFormsData");
    switch (this.m_document.MultiplePage)
    {
      case MultiplePage.MirrorMargins:
        this.m_writer.WriteStartElement("mirrorMargins", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
        break;
      case MultiplePage.TwoPagesPerSheet:
        this.m_writer.WriteStartElement("printTwoOnOne", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteEndElement();
        break;
      case MultiplePage.BookFold:
        this.m_writer.WriteStartElement("bookFoldPrinting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        if (this.m_document.SheetsPerBooklet != 0)
          this.m_writer.WriteAttributeString("bookFoldPrintingSheets", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.SheetsPerBooklet.ToString());
        this.m_writer.WriteEndElement();
        break;
      case MultiplePage.ReverseBookFold:
        this.m_writer.WriteStartElement("bookFoldRevPrinting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        if (this.m_document.SheetsPerBooklet != 0)
          this.m_writer.WriteAttributeString("bookFoldPrintingSheets", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.SheetsPerBooklet.ToString());
        this.m_writer.WriteEndElement();
        break;
    }
    this.SerializeDocxProps(tempDocxProps, "alignBordersAndEdges");
    if (!this.m_document.BordersSurroundHeader)
    {
      this.m_writer.WriteStartElement("bordersDoNotSurroundHeader", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.BordersSurroundFooter)
    {
      this.m_writer.WriteStartElement("bordersDoNotSurroundFooter", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.DOP.GutterAtTop)
    {
      this.m_writer.WriteStartElement("gutterAtTop", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "hideSpellingErrors");
    this.SerializeDocxProps(tempDocxProps, "hideGrammaticalErrors");
    this.SerializeDocxProps(tempDocxProps, "activeWritingStyle");
    if (this.m_document.DOP.Dop97.GramAllDone || this.m_document.DOP.SpellAllDone)
    {
      this.m_writer.WriteStartElement("proofState", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "spelling", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.DOP.SpellAllDone ? "clean" : "dirty");
      this.m_writer.WriteAttributeString("w", "grammar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.DOP.Dop97.GramAllDone ? "clean" : "dirty");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "formsDesign");
    if (!string.IsNullOrEmpty(this.m_document.AssociatedStrings.AttachedTemplate))
    {
      foreach (KeyValuePair<string, DictionaryEntry> settingsRelation in this.SettingsRelations)
      {
        if (Convert.ToString(this.SettingsRelations[settingsRelation.Key.ToString()].Key, (IFormatProvider) CultureInfo.InvariantCulture) == "http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate")
        {
          this.SettingsRelations.Remove(settingsRelation.Key);
          break;
        }
      }
      this.m_writer.WriteStartElement("attachedTemplate", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      string key = "rId1";
      for (int index2 = 1; index2 <= this.SettingsRelations.Count && this.SettingsRelations.ContainsKey(key); ++index2)
        key = $"rId{index2 + 1}";
      this.m_writer.WriteAttributeString("r", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", key);
      string str = this.m_document.AssociatedStrings.AttachedTemplate.ToString();
      if (!str.StartsWithExt("file:///") && !str.Contains("http") && !str.Contains("www"))
        str = "file:///" + str;
      this.SettingsRelations.Add(key, new DictionaryEntry((object) "http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate", (object) str));
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.DOP.LinkStyles)
    {
      this.m_writer.WriteStartElement("linkStyles", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "stylePaneFormatFilter");
    this.SerializeDocxProps(tempDocxProps, "stylePaneSortMethod");
    this.SerializeDocxProps(tempDocxProps, "documentType");
    if (this.m_document.MailMerge.Settings.HasData)
      this.SerializeMailMergeSettings();
    this.SerializeDocxProps(tempDocxProps, "revisionView");
    if (this.m_document.TrackChanges)
    {
      this.m_writer.WriteStartElement("trackRevisions", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "doNotTrackMoves");
    this.SerializeDocxProps(tempDocxProps, "doNotTrackFormatting");
    if (this.m_document.DOP.Dop2003.EnforceDocProt)
      this.SerializeProtect((ProtectionType) this.m_document.DOP.Dop2003.DocProtCur);
    this.SerializeDocxProps(tempDocxProps, "autoFormatOverride");
    this.SerializeDocxProps(tempDocxProps, "styleLockTheme");
    this.SerializeDocxProps(tempDocxProps, "styleLockQFSet");
    this.m_writer.WriteStartElement("defaultTabStop", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    int num = (int) Math.Round((double) this.m_document.DefaultTabWidth * 20.0);
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
    this.m_writer.WriteEndElement();
    if (this.m_document.DOP.AutoHyphen)
    {
      this.m_writer.WriteStartElement("autoHyphenation", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.DOP.ConsecHypLim > 0)
    {
      this.m_writer.WriteStartElement("consecutiveHyphenLimit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.DOP.ConsecHypLim.ToString());
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.DOP.DxaHotZ != 360)
    {
      this.m_writer.WriteStartElement("hyphenationZone", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.DOP.DxaHotZ.ToString());
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.DOP.HyphCapitals)
    {
      this.m_writer.WriteStartElement("doNotHyphenateCaps", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "showEnvelope");
    this.SerializeDocxProps(tempDocxProps, "summaryLength");
    this.SerializeDocxProps(tempDocxProps, "clickAndTypeStyle");
    this.SerializeDocxProps(tempDocxProps, "defaultTableStyle");
    if (this.m_document.DifferentOddAndEvenPages)
    {
      this.m_writer.WriteStartElement("evenAndOddHeaders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "drawingGridHorizontalSpacing");
    this.SerializeDocxProps(tempDocxProps, "drawingGridVerticalSpacing");
    this.SerializeDocxProps(tempDocxProps, "displayHorizontalDrawingGridEvery");
    this.SerializeDocxProps(tempDocxProps, "displayVerticalDrawingGridEvery");
    this.SerializeDocxProps(tempDocxProps, "doNotUseMarginsForDrawingGridOrigin");
    this.SerializeDocxProps(tempDocxProps, "drawingGridHorizontalOrigin");
    this.SerializeDocxProps(tempDocxProps, "drawingGridVerticalOrigin");
    if (!this.m_document.DOP.FormFieldShading)
    {
      this.m_writer.WriteStartElement("doNotShadeFormData", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "noPunctuationKerning");
    this.SerializeDocxProps(tempDocxProps, "characterSpacingControl");
    this.SerializeDocxProps(tempDocxProps, "strictFirstAndLastChars");
    this.SerializeDocxProps(tempDocxProps, "noLineBreaksAfter");
    this.SerializeDocxProps(tempDocxProps, "noLineBreaksBefore");
    this.SerializeDocxProps(tempDocxProps, "savePreviewPicture");
    this.SerializeDocxProps(tempDocxProps, "doNotValidateAgainstSchema");
    this.SerializeDocxProps(tempDocxProps, "saveInvalidXml");
    this.SerializeDocxProps(tempDocxProps, "ignoreMixedContent");
    this.SerializeDocxProps(tempDocxProps, "alwaysShowPlaceholderText");
    this.SerializeDocxProps(tempDocxProps, "doNotDemarcateInvalidXml");
    this.SerializeDocxProps(tempDocxProps, "saveXmlDataOnly");
    this.SerializeDocxProps(tempDocxProps, "useXSLTWhenSaving");
    this.SerializeDocxProps(tempDocxProps, "saveThroughXslt");
    this.SerializeDocxProps(tempDocxProps, "showXMLTags");
    this.SerializeDocxProps(tempDocxProps, "alwaysMergeEmptyNamespace");
    this.SerializeDocxProps(tempDocxProps, "updateFields");
    this.SerializeDocxProps(tempDocxProps, "hdrShapeDefaults");
    this.SerializeFootnoteSettings();
    this.SerializeCompatSettings();
    if (this.m_document.Variables.Count > 0)
      this.SerializeDocVariables(this.m_document.Variables);
    this.SerializeDocxProps(tempDocxProps, "rsids");
    if (this.m_document.Settings.MathProperties != null && !this.m_document.Settings.MathProperties.IsDefault)
      new MathMLSerializer().SerializeMathProperties(this.m_writer, this.m_document.Settings.MathProperties);
    this.SerializeDocxProps(tempDocxProps, "uiCompat97To2003");
    this.SerializeDocxProps(tempDocxProps, "attachedSchema");
    if (this.m_document.Settings.ThemeFontLanguages != null)
      this.SerializeLanguage(this.m_document.Settings.ThemeFontLanguages, true);
    this.SerializeDocxProps(tempDocxProps, "clrSchemeMapping");
    this.SerializeDocxProps(tempDocxProps, "doNotIncludeSubdocsInStats");
    this.SerializeDocxProps(tempDocxProps, "doNotAutoCompressPictures");
    this.SerializeDocxProps(tempDocxProps, "forceUpgrade");
    this.SerializeDocxProps(tempDocxProps, "captions");
    this.SerializeDocxProps(tempDocxProps, "readModeInkLockDown");
    this.SerializeDocxProps(tempDocxProps, "smartTagType");
    this.SerializeDocxProps(tempDocxProps, "schemaLibrary");
    this.SerializeDocxProps(tempDocxProps, "shapeDefaults");
    this.SerializeDocxProps(tempDocxProps, "doNotEmbedSmartTags");
    this.SerializeDocxProps(tempDocxProps, "decimalSymbol");
    this.SerializeDocxProps(tempDocxProps, "listSeparator");
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\settings.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeMailMergeSettings()
  {
    this.m_writer.WriteStartElement("mailMerge", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (this.m_document.MailMerge.Settings.HasKey(12))
      this.SerializeMailMergeSettingsMainDocumentType();
    if (this.m_document.MailMerge.Settings.HasKey(9))
      this.SerializeBoolProperty("linkToQuery", this.m_document.MailMerge.Settings.LinkToQuery);
    if (this.m_document.MailMerge.Settings.HasKey(5))
      this.SerializeMailMergeSettingsDataType();
    if (this.m_document.MailMerge.Settings.HasKey(3))
    {
      this.m_writer.WriteStartElement("connectString", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.MailMerge.Settings.ConnectString);
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.MailMerge.Settings.HasKey(13))
    {
      this.m_writer.WriteStartElement("query", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.MailMerge.Settings.Query);
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.MailMerge.Settings.HasKey(4))
      this.SerializeMailMergeSettingsDataSource();
    if (this.m_document.MailMerge.Settings.HasKey(8))
      this.SerializeMailMergeSettingsHeaderSource();
    if (this.m_document.MailMerge.Settings.HasKey(7))
      this.SerializeBoolProperty("doNotSuppressBlankLines", this.m_document.MailMerge.Settings.DoNotSupressBlankLines);
    if (this.m_document.MailMerge.Settings.HasKey(14))
      this.SerializeBoolProperty("viewMergedData", this.m_document.MailMerge.Settings.ViewMergedData);
    if (this.m_document.MailMerge.Settings.HasKey(6))
      this.SerializeMailMergeSettingsDestination();
    if (this.m_document.MailMerge.Settings.HasKey(1))
    {
      this.m_writer.WriteStartElement("addressFieldName", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.MailMerge.Settings.AddressFieldName);
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.MailMerge.Settings.HasKey(11))
    {
      this.m_writer.WriteStartElement("mailSubject", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.MailMerge.Settings.MailSubject);
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.MailMerge.Settings.HasKey(10))
      this.SerializeBoolProperty("mailAsAttachment", this.m_document.MailMerge.Settings.MailAsAttachment);
    if (this.m_document.MailMerge.Settings.HasKey(0))
    {
      this.m_writer.WriteStartElement("activeRecord", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.MailMerge.Settings.ActiveRecord.ToString());
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.MailMerge.Settings.HasKey(2))
      this.SerializeMailMergeSettingsCheckErrors();
    if (this.m_document.MailMerge.Settings.HasKey(15) && this.m_document.MailMerge.Settings.ODSOSettings != null)
    {
      XmlReader reader = this.CreateReader(this.m_document.MailMerge.Settings.ODSOSettings);
      int content = (int) reader.MoveToContent();
      this.m_writer.WriteNode(reader, false);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeMailMergeSettingsMainDocumentType()
  {
    this.m_writer.WriteStartElement("mainDocumentType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (this.m_document.MailMerge.Settings.MainDocumentType)
    {
      case MailMergeMainDocumentType.FormLetters:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "formLetters");
        break;
      case MailMergeMainDocumentType.MailingLabels:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "mailingLabels");
        break;
      case MailMergeMainDocumentType.Envelopes:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "envelopes");
        break;
      case MailMergeMainDocumentType.Catalog:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "catalog");
        break;
      case MailMergeMainDocumentType.EMail:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "email");
        break;
      case MailMergeMainDocumentType.Fax:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fax");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeMailMergeSettingsDataType()
  {
    this.m_writer.WriteStartElement("dataType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (this.m_document.MailMerge.Settings.DataType)
    {
      case MailMergeDataType.TextFile:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "textFile");
        break;
      case MailMergeDataType.Database:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "database");
        break;
      case MailMergeDataType.Spreadsheet:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "spreadsheet");
        break;
      case MailMergeDataType.Query:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "query");
        break;
      case MailMergeDataType.ODBC:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "odbc");
        break;
      case MailMergeDataType.Native:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "native");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeMailMergeSettingsDataSource()
  {
    this.m_writer.WriteStartElement("dataSource", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string key1 = string.Empty;
    int num = 0;
    foreach (KeyValuePair<string, DictionaryEntry> settingsRelation1 in this.SettingsRelations)
    {
      DictionaryEntry settingsRelation2 = this.SettingsRelations[settingsRelation1.Key.ToString()];
      if (settingsRelation2.Value.ToString() == "file:///" + this.m_document.MailMerge.Settings.DataSource && settingsRelation2.Key.ToString().Contains("mailMergeSource"))
      {
        key1 = settingsRelation1.Key.ToString();
        break;
      }
      ++num;
    }
    if (num == this.SettingsRelations.Count)
    {
      key1 = "rId" + (this.SettingsRelations.Count + 1).ToString();
      string key2 = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/mailMergeSource";
      this.SettingsRelations.Add(key1, new DictionaryEntry((object) key2, (object) ("file:///" + this.m_document.MailMerge.Settings.DataSource)));
    }
    this.m_writer.WriteAttributeString("r", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", key1);
    this.m_writer.WriteEndElement();
  }

  private void SerializeMailMergeSettingsHeaderSource()
  {
    this.m_writer.WriteStartElement("headerSource", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string empty = string.Empty;
    foreach (KeyValuePair<string, DictionaryEntry> settingsRelation1 in this.SettingsRelations)
    {
      DictionaryEntry settingsRelation2 = this.SettingsRelations[settingsRelation1.Key.ToString()];
      if (settingsRelation2.Value.ToString() == this.m_document.MailMerge.Settings.HeaderSource && settingsRelation2.Key.ToString().Contains("mailMergeHeaderSource"))
      {
        empty = settingsRelation1.Key.ToString();
        break;
      }
    }
    this.m_writer.WriteAttributeString("r", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
    this.m_writer.WriteEndElement();
  }

  private void SerializeMailMergeSettingsDestination()
  {
    this.m_writer.WriteStartElement("mainDocumentType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (this.m_document.MailMerge.Settings.Destination)
    {
      case MailMergeDestination.NewDocument:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "newDocument");
        break;
      case MailMergeDestination.Printer:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "printer");
        break;
      case MailMergeDestination.EMail:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "email");
        break;
      case MailMergeDestination.Fax:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fax");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeMailMergeSettingsCheckErrors()
  {
    this.m_writer.WriteStartElement("checkErrors", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    switch (this.m_document.MailMerge.Settings.CheckErrors)
    {
      case MailMergeCheckErrors.Simulate:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
        break;
      case MailMergeCheckErrors.PauseOnError:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "2");
        break;
      case MailMergeCheckErrors.CollectErrors:
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "3");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeSettingsRelation()
  {
    if (this.SettingsRelations.Count == 0)
      return;
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    foreach (KeyValuePair<string, DictionaryEntry> settingsRelation1 in this.SettingsRelations)
    {
      DictionaryEntry settingsRelation2 = this.SettingsRelations[settingsRelation1.Key.ToString()];
      this.SerializeRelationShip((Stream) data, settingsRelation1.Key.ToString(), settingsRelation2.Key.ToString(), settingsRelation2.Value.ToString());
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\_rels\\settings.xml.rels", (Stream) data, false, FileAttributes.Archive);
  }

  private void ParseSettingsRelations()
  {
    if (this.m_document.DocxPackage == null || !this.m_document.DocxPackage.XmlPartContainers.ContainsKey("word/"))
      return;
    PartContainer partContainer = this.m_document.DocxPackage.FindPartContainer("word/");
    if (partContainer == null || !partContainer.Relations.ContainsKey("word/_rels/settings.xml.rels"))
      return;
    Stream dataStream = partContainer.Relations["word/_rels/settings.xml.rels"].DataStream;
    dataStream.Position = 0L;
    this.ParseRelations(Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateReader(dataStream), this.SettingsRelations);
  }

  private void SerializeDocxProps(List<Stream> tempDocxProps, string propertyName)
  {
    int index = 0;
    for (int count = tempDocxProps.Count; index < count; ++index)
    {
      XmlReader reader = this.CreateReader(tempDocxProps[index]);
      int content = (int) reader.MoveToContent();
      if (reader.LocalName == propertyName)
      {
        tempDocxProps.RemoveAt(index);
        this.m_writer.WriteNode(reader, false);
        break;
      }
    }
  }

  private void SerializeDocxProps(Dictionary<string, Stream> tempDocxProps, string propertyName)
  {
    if (!tempDocxProps.ContainsKey(propertyName))
      return;
    XmlReader reader = this.CreateReader(tempDocxProps[propertyName]);
    int content = (int) reader.MoveToContent();
    this.m_writer.WriteNode(reader, false);
  }

  private void SerializeCompatibilityProperties()
  {
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.OrigWordTableRules])
    {
      this.m_writer.WriteStartElement("useSingleBorderforContiguousCells", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.WPJust])
    {
      this.m_writer.WriteStartElement("wpJustification", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.NoTabForInd])
    {
      this.m_writer.WriteStartElement("noTabHangInd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.NoExtLeading])
    {
      this.m_writer.WriteStartElement("noLeading", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.NoColumnBalance])
    {
      this.m_writer.WriteStartElement("noColumnBalance", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.TruncDxaExpand])
    {
      this.m_writer.WriteStartElement("spacingInWholePoints", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.LineWrapLikeWord6])
    {
      this.m_writer.WriteStartElement("lineWrapLikeWord6", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.PrintBodyBeforeHdr])
    {
      this.m_writer.WriteStartElement("printBodyTextBeforeHeader", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.MapPrintTextColor])
    {
      this.m_writer.WriteStartElement("printColBlack", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.WPSpace])
    {
      this.m_writer.WriteStartElement("wpSpaceWidth", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ShowBreaksInFrames])
    {
      this.m_writer.WriteStartElement("showBreaksInFrames", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SubOnSize])
    {
      this.m_writer.WriteStartElement("subFontBySize", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SuppressTopSpacingMac5])
    {
      this.m_writer.WriteStartElement("suppressSpacingAtTopOfPage", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.F2ptExtLeadingOnly])
    {
      this.m_writer.WriteStartElement("suppressTopSpacingWP", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SuppressSpBfAfterPgBrk])
    {
      this.m_writer.WriteStartElement("suppressSpBfAfterPgBrk", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SwapBordersFacingPgs])
    {
      this.m_writer.WriteStartElement("swapBordersFacingPages", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ConvMailMergeEsc])
    {
      this.m_writer.WriteStartElement("convMailMergeEsc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.TruncFontHeight])
    {
      this.m_writer.WriteStartElement("truncateFontHeightsLikeWP6", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.MWSmallCaps])
    {
      this.m_writer.WriteStartElement("mwSmallCaps", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.PrintMet])
    {
      this.m_writer.WriteStartElement("usePrinterMetrics", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.WW6BorderRules])
    {
      this.m_writer.WriteStartElement("doNotSuppressParagraphBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.WrapTrailSpaces])
    {
      this.m_writer.WriteStartElement("wrapTrailSpaces", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.FtnLayoutLikeWW8])
    {
      this.m_writer.WriteStartElement("footnoteLayoutLikeWW8", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SpLayoutLikeWW8])
    {
      this.m_writer.WriteStartElement("shapeLayoutLikeWW8", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.AlignTablesRowByRow])
    {
      this.m_writer.WriteStartElement("alignTablesRowByRow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ForgetLastTabAlign])
    {
      this.m_writer.WriteStartElement("forgetLastTabAlignment", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.UseAutospaceForFullWidthAlpha])
    {
      this.m_writer.WriteStartElement("autoSpaceLikeWord95", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.NoSpaceRaiseLower])
    {
      this.m_writer.WriteStartElement("noSpaceRaiseLower", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontUseHTMLParagraphAutoSpacing])
    {
      this.m_writer.WriteStartElement("doNotUseHTMLParagraphAutoSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.LayoutRawTableWidth])
    {
      this.m_writer.WriteStartElement("layoutRawTableWidth", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.LayoutTableRowsApart])
    {
      this.m_writer.WriteStartElement("layoutTableRowsApart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.UseWord97LineBreakingRules])
    {
      this.m_writer.WriteStartElement("useWord97LineBreakRules", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontBreakWrappedTables])
    {
      this.m_writer.WriteStartElement("doNotBreakWrappedTables", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontSnapToGridInCell])
    {
      this.m_writer.WriteStartElement("doNotSnapToGridInCell", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontAllowFieldEndSelect])
    {
      this.m_writer.WriteStartElement("selectFldWithFirstOrLastChar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontWrapTextWithPunct])
    {
      this.m_writer.WriteStartElement("doNotWrapTextWithPunct", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontUseAsianBreakRules])
    {
      this.m_writer.WriteStartElement("doNotUseEastAsianBreakRules", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.UseWord2002TableStyleRules])
    {
      this.m_writer.WriteStartElement("useWord2002TableStyleRules", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.GrowAutoFit])
    {
      this.m_writer.WriteStartElement("growAutofit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.UseNormalStyleForList])
    {
      this.m_writer.WriteStartElement("useNormalStyleForList", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontUseIndentAsNumberingTabStop])
    {
      this.m_writer.WriteStartElement("doNotUseIndentAsNumberingTabStop", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.FELineBreak11])
    {
      this.m_writer.WriteStartElement("useAltKinsokuLineBreakRules", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.AllowSpaceOfSameStyleInTable])
    {
      this.m_writer.WriteStartElement("allowSpaceOfSameStyleInTable", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.WW11IndentRules])
    {
      this.m_writer.WriteStartElement("doNotSuppressIndentation", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontAutofitConstrainedTables])
    {
      this.m_writer.WriteStartElement("doNotAutofitConstrainedTables", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.AutofitLikeWW11])
    {
      this.m_writer.WriteStartElement("autofitToFirstFixedWidthCell", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.UnderlineTabInNumList])
    {
      this.m_writer.WriteStartElement("underlineTabInNumList", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.HangulWidthLikeWW11])
    {
      this.m_writer.WriteStartElement("displayHangulFixedWidth", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SplitPgBreakAndParaMark])
    {
      this.m_writer.WriteStartElement("splitPgBreakAndParaMark", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontVertAlignCellWithSp])
    {
      this.m_writer.WriteStartElement("doNotVertAlignCellWithSp", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontBreakConstrainedForcedTables])
    {
      this.m_writer.WriteStartElement("doNotBreakConstrainedForcedTable", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontVertAlignInTxbx])
    {
      this.m_writer.WriteStartElement("doNotVertAlignInTxbx", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.Word11KerningPairs])
    {
      this.m_writer.WriteStartElement("useAnsiKerningPairs", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.CachedColBalance])
      return;
    this.m_writer.WriteStartElement("cachedColBalance", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
  }

  private void SerializeCommonCompatibilityOptions()
  {
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontMakeSpaceForUL])
    {
      this.m_writer.WriteStartElement("spaceForUL", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DntBlnSbDbWid])
    {
      this.m_writer.WriteStartElement("balanceSingleByteDoubleByteWidth", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ExactOnTop])
    {
      this.m_writer.WriteStartElement("noExtraLineSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.LeaveBackslashAlone])
    {
      this.m_writer.WriteStartElement("doNotLeaveBackslashAlone", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DntULTrlSpc])
    {
      this.m_writer.WriteStartElement("ulTrailSpace", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ExpShRtn])
    {
      this.m_writer.WriteStartElement("doNotExpandShiftReturn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ExtraAfter])
    {
      this.m_writer.WriteStartElement("suppressBottomSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (this.m_document.Settings.CompatibilityOptions[CompatibilityOption.SuppressTopSpacing])
    {
      this.m_writer.WriteStartElement("suppressTopSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.DontAdjustLineHeightInTable])
    {
      this.m_writer.WriteStartElement("adjustLineHeightInTable", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!this.m_document.Settings.CompatibilityOptions[CompatibilityOption.ApplyBreakingRules])
      return;
    this.m_writer.WriteStartElement("applyBreakingRules", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
  }

  private void SerializeCompatSettings()
  {
    string str = "15";
    if (this.m_document.Settings.CompatibilityMode == CompatibilityMode.Word2003)
      str = "11";
    if (this.m_document.Settings.CompatibilityMode == CompatibilityMode.Word2007)
      str = "12";
    if (this.m_document.Settings.CompatibilityMode == CompatibilityMode.Word2010)
      str = "14";
    this.m_writer.WriteStartElement("compat", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeCommonCompatibilityOptions();
    if (this.m_document.SaveOptions.MaintainCompatibilityMode)
      this.SerializeCompatibilityProperties();
    else if (!this.m_document.Settings.CompatibilityModeEnabled)
    {
      if (this.IsWord2007)
        str = "12";
      if (this.IsWord2010)
        str = "14";
      if (this.IsWord2013 || this.IsWordLatest)
        str = "15";
    }
    this.m_writer.WriteStartElement("compatSetting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "compatibilityMode");
    this.m_writer.WriteAttributeString("w", "uri", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteEndElement();
    if (str == "14" || str == "15")
    {
      bool flag1 = true;
      if (this.m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.overrideTableStyleFontSizeAndJustification))
        flag1 = this.m_document.Settings.CompatibilityOptions[CompatibilityOption.overrideTableStyleFontSizeAndJustification];
      if (flag1)
      {
        this.m_writer.WriteStartElement("compatSetting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("w", "name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "overrideTableStyleFontSizeAndJustification");
        this.m_writer.WriteAttributeString("w", "uri", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
        this.m_writer.WriteEndElement();
      }
      bool flag2 = true;
      if (this.m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.enableOpenTypeFeatures))
        flag2 = this.m_document.Settings.CompatibilityOptions[CompatibilityOption.enableOpenTypeFeatures];
      if (flag2)
      {
        this.m_writer.WriteStartElement("compatSetting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("w", "name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "enableOpenTypeFeatures");
        this.m_writer.WriteAttributeString("w", "uri", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
        this.m_writer.WriteEndElement();
      }
      bool flag3 = true;
      if (this.m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.doNotFlipMirrorIndents))
        flag3 = this.m_document.Settings.CompatibilityOptions[CompatibilityOption.doNotFlipMirrorIndents];
      if (flag3)
      {
        this.m_writer.WriteStartElement("compatSetting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("w", "name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "doNotFlipMirrorIndents");
        this.m_writer.WriteAttributeString("w", "uri", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
        this.m_writer.WriteEndElement();
      }
      if (str == "15")
      {
        bool flag4 = true;
        if (this.m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.doNotFlipMirrorIndents))
          flag4 = this.m_document.Settings.CompatibilityOptions[CompatibilityOption.doNotFlipMirrorIndents];
        if (flag4)
        {
          this.m_writer.WriteStartElement("compatSetting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteAttributeString("w", "name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "differentiateMultirowTableHeaders");
          this.m_writer.WriteAttributeString("w", "uri", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeProtect(ProtectionType protectionType)
  {
    string str = string.Empty;
    switch (protectionType)
    {
      case ProtectionType.AllowOnlyRevisions:
        str = "trackedChanges";
        break;
      case ProtectionType.AllowOnlyComments:
        str = "comments";
        break;
      case ProtectionType.AllowOnlyFormFields:
        str = "forms";
        break;
      case ProtectionType.AllowOnlyReading:
        str = "readOnly";
        break;
    }
    if (!(str != string.Empty))
      return;
    this.m_writer.WriteStartElement("documentProtection", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (this.m_document.DOP.LockRev)
    {
      this.m_writer.WriteAttributeString("edit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "trackedChanges");
      this.m_writer.WriteAttributeString("enforcement", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    }
    else if (this.m_document.DOP.ProtEnabled)
    {
      this.m_writer.WriteAttributeString("edit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "forms");
      this.m_writer.WriteAttributeString("enforcement", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    }
    else if (this.m_document.DOP.LockAtn)
    {
      if (this.m_document.DOP.Dop2003.TreatLockAtnAsReadOnly)
      {
        this.m_writer.WriteAttributeString("edit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "readOnly");
        this.m_writer.WriteAttributeString("enforcement", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      }
      else
      {
        this.m_writer.WriteAttributeString("edit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "comments");
        this.m_writer.WriteAttributeString("enforcement", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      }
    }
    else
    {
      this.m_writer.WriteAttributeString("edit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      this.m_writer.WriteAttributeString("enforcement", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    }
    if (this.m_document.RestrictFormatting)
      this.m_writer.WriteAttributeString("formatting", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    if (this.m_document.DOP.ProtectionKey != 0U)
    {
      DocxProtection docxProtection = new DocxProtection();
      this.m_writer.WriteAttributeString("cryptProviderType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptProviderTypeValue);
      this.m_writer.WriteAttributeString("cryptAlgorithmClass", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptAlgorithmClassValue);
      this.m_writer.WriteAttributeString("cryptAlgorithmType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptAlgorithmTypeValue);
      this.m_writer.WriteAttributeString("cryptAlgorithmSid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptAlgorithmSidValue);
      this.m_writer.WriteAttributeString("cryptSpinCount", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptSpinCountValue);
      byte[] salt = docxProtection.CreateSalt(16 /*0x10*/);
      byte[] hash = docxProtection.ComputeHash(salt, this.m_document.DOP.ProtectionKey);
      this.m_writer.WriteAttributeString("hash", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", Convert.ToBase64String(hash));
      this.m_writer.WriteAttributeString("salt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", Convert.ToBase64String(salt));
    }
    else if (!string.IsNullOrEmpty(this.m_document.Settings.HashValue) && !string.IsNullOrEmpty(this.m_document.Settings.SaltValue))
    {
      this.m_writer.WriteAttributeString("cryptProviderType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptProviderTypeValue);
      this.m_writer.WriteAttributeString("cryptAlgorithmClass", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptAlgorithmClassValue);
      this.m_writer.WriteAttributeString("cryptAlgorithmType", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptAlgorithmTypeValue);
      this.m_writer.WriteAttributeString("cryptAlgorithmSid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptAlgorithmSidValue);
      this.m_writer.WriteAttributeString("cryptSpinCount", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.CryptSpinCountValue);
      this.m_writer.WriteAttributeString("hash", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.HashValue);
      this.m_writer.WriteAttributeString("salt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.Settings.SaltValue);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeDocVariables(DocVariables docVariables)
  {
    this.m_writer.WriteStartElement("docVars", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string empty = string.Empty;
    foreach (string key in docVariables.Items.Keys)
    {
      if (docVariables.Items.ContainsKey(key))
        empty = docVariables.Items[key];
      this.m_writer.WriteStartElement("docVar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key);
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ConvertToValidXmlString(empty));
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeFootnoteSettings()
  {
    if (this.IsNeedToSerializeDocumentFootNoteProperties())
    {
      this.m_writer.WriteStartElement("footnotePr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeFootnotePosition();
      this.SerializeEndnoteFootnoteNumberFormat(true);
      if (this.m_document.InitialFootnoteNumber > 1)
        this.SerializeEndnoteFootnoteElement("numStart", this.m_document.InitialFootnoteNumber.ToString());
      if (this.m_document.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachPage)
        this.SerializeEndnoteFootnoteElement("numRestart", "eachPage");
      else if (this.m_document.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachSection)
        this.SerializeEndnoteFootnoteElement("numRestart", "eachSect");
      if (this.HasFootnote)
      {
        this.WriteFootEndnoteID(true, -1);
        this.WriteFootEndnoteID(true, 0);
        if (this.m_document.Footnotes.ContinuationNotice.Count > 0)
          this.WriteFootEndnoteID(true, 1);
      }
      this.m_writer.WriteEndElement();
    }
    if (!this.IsNeedToSerializeDocumentEndNoteProperties())
      return;
    this.m_writer.WriteStartElement("endnotePr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.WriteEntPosition();
    this.SerializeEndnoteFootnoteNumberFormat(false);
    if (this.m_document.InitialEndnoteNumber > 1)
      this.SerializeEndnoteFootnoteElement("numStart", this.m_document.InitialEndnoteNumber.ToString());
    if (this.m_document.RestartIndexForEndnote == EndnoteRestartIndex.RestartForEachSection)
      this.SerializeEndnoteFootnoteElement("numRestart", "eachSect");
    if (this.HasEndnote)
    {
      this.WriteFootEndnoteID(false, -1);
      this.WriteFootEndnoteID(false, 0);
      if (this.m_document.Endnotes.ContinuationNotice.Count > 0)
        this.WriteFootEndnoteID(false, 1);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeFootnotePosition()
  {
    if (this.m_document.FootnotePosition == FootnotePosition.PrintImmediatelyBeneathText)
    {
      this.m_writer.WriteStartElement("pos", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "beneathText");
      this.m_writer.WriteEndElement();
    }
    else
    {
      if (this.m_document.FootnotePosition != FootnotePosition.PrintAsEndnotes)
        return;
      this.WriteEntPosition();
    }
  }

  private void WriteEntPosition()
  {
    if (this.m_document.EndnotePosition != EndnotePosition.DisplayEndOfSection)
      return;
    this.m_writer.WriteStartElement("pos", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "sectEnd");
    this.m_writer.WriteEndElement();
  }

  private void SerializeFootnotePosition(WSection section)
  {
    if (section.PageSetup.FootnotePosition != FootnotePosition.PrintImmediatelyBeneathText)
      return;
    this.m_writer.WriteStartElement("pos", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "beneathText");
    this.m_writer.WriteEndElement();
  }

  private void WriteFootEndnoteID(bool isFootnote, int id)
  {
    this.m_writer.WriteStartElement(isFootnote ? "footnote" : "endnote", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString(nameof (id), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", id.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeNumberings()
  {
    if (this.m_document.ListStyles.Count == 0 && this.m_document.ListOverrides.Count == 0)
      return;
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.HasNumbering = true;
    this.m_writer.WriteStartElement("w", "numbering", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "wpc", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "o", (string) null, "urn:schemas-microsoft-com:office:office");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "m", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
    this.m_writer.WriteAttributeString("xmlns", "v", (string) null, "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("xmlns", "wp14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "wp", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
    this.m_writer.WriteAttributeString("xmlns", "w", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "w10", (string) null, "urn:schemas-microsoft-com:office:word");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wpg", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
    this.m_writer.WriteAttributeString("xmlns", "wpi", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
    this.m_writer.WriteAttributeString("xmlns", "wne", (string) null, "http://schemas.microsoft.com/office/word/2006/wordml");
    this.m_writer.WriteAttributeString("xmlns", "wps", (string) null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15 wp14");
    if (this.m_document.ListStyles.Count > 0)
    {
      this.SerializePictureBullets(this.m_document.ListStyles);
      this.SerializeAbstractListStyles(this.m_document.ListStyles);
      this.SerializeListInstances(this.m_document.ListStyles);
      this.SerializeListOverrides(this.m_document.ListOverrides);
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\numbering.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeListOverrides(ListOverrideStyleCollection listOverrideStyles)
  {
    if (this.m_lstStyleReferences == null || this.m_lstStyleReferences.Count == 0)
      return;
    foreach (int key1 in this.m_lstStyleReferences.Keys)
    {
      Dictionary<int, string> lstStyleReference = this.m_lstStyleReferences[key1];
      string empty = string.Empty;
      foreach (int key2 in lstStyleReference.Keys)
      {
        string name = lstStyleReference[key2];
        this.m_writer.WriteStartElement("num", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("numId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key2.ToString());
        this.m_writer.WriteStartElement("abstractNumId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key1.ToString());
        this.m_writer.WriteEndElement();
        ListOverrideStyle byName = listOverrideStyles.FindByName(name);
        if (byName != null)
          this.SerializeOverrideStyle(byName);
        this.m_writer.WriteEndElement();
      }
    }
  }

  private void SerializeOverrideStyle(ListOverrideStyle listOverrideStyle)
  {
    foreach (KeyValuePair<short, short> keyValuePair in listOverrideStyle.OverrideLevels.LevelIndex)
      this.SerializeOverrideLevel((int) keyValuePair.Key, listOverrideStyle.OverrideLevels[(int) keyValuePair.Key]);
  }

  private void SerializeOverrideLevel(int levelIndex, OverrideLevelFormat level)
  {
    this.m_writer.WriteStartElement("lvlOverride", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("ilvl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", levelIndex.ToString());
    if (level.OverrideStartAtValue)
    {
      this.m_writer.WriteStartElement("startOverride", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", level.StartAt.ToString());
      this.m_writer.WriteEndElement();
    }
    if (level.OverrideFormatting)
      this.SerializeListLevel(level.OverrideListLevel, levelIndex);
    this.m_writer.WriteEndElement();
  }

  private void SerializeListInstances(ListStyleCollection listStyles)
  {
    for (int index = 0; index < listStyles.Count; ++index)
    {
      this.m_writer.WriteStartElement("num", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("numId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (index + 1).ToString());
      this.m_writer.WriteStartElement("abstractNumId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", index.ToString());
      this.m_writer.WriteEndElement();
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeAbstractListStyles(ListStyleCollection listStyles)
  {
    int num1 = 0;
    foreach (ListStyle listStyle in (CollectionImpl) listStyles)
    {
      this.m_writer.WriteStartElement("abstractNum", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("abstractNumId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num1.ToString());
      this.m_writer.WriteStartElement("nsid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listStyle.ListID.ToString("X8"));
      this.m_writer.WriteEndElement();
      if (!string.IsNullOrEmpty(listStyle.StyleLink))
      {
        this.m_writer.WriteStartElement("styleLink", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listStyle.StyleLink);
        this.m_writer.WriteEndElement();
      }
      if (!string.IsNullOrEmpty(listStyle.BaseListStyleName))
      {
        this.m_writer.WriteStartElement("numStyleLink", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listStyle.BaseListStyleName);
        this.m_writer.WriteEndElement();
      }
      else
      {
        int num2 = 0;
        for (int count = listStyle.Levels.Count; num2 < count; ++num2)
          this.SerializeListLevel(listStyle.Levels[num2], num2);
      }
      this.m_writer.WriteEndElement();
      ++num1;
    }
  }

  private void SerializeListLevel(WListLevel listLevel, int levelIndex)
  {
    this.m_writer.WriteStartElement("lvl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("ilvl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", levelIndex.ToString());
    this.m_writer.WriteStartElement("start", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.StartAt.ToString());
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("numFmt", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetPatternType(listLevel));
    this.m_writer.WriteEndElement();
    if (listLevel.NoRestartByHigher)
    {
      this.m_writer.WriteStartElement("lvlRestart", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      this.m_writer.WriteEndElement();
    }
    if (listLevel.ParaStyleName != null)
    {
      string str = this.GetStyleId(listLevel.ParaStyleName) ?? listLevel.ParaStyleName.Replace(" ", string.Empty);
      this.m_writer.WriteStartElement("pStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      this.m_writer.WriteEndElement();
    }
    if (listLevel.IsLegalStyleNumbering)
    {
      this.m_writer.WriteStartElement("isLgl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.SerializeLevelFollow(listLevel);
    this.SerializeLevelText(listLevel, levelIndex + 1);
    this.SerializeLegacyProperties(listLevel);
    if (listLevel.PicBulletId > (short) 0)
    {
      this.m_writer.WriteStartElement("lvlPicBulletId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.PicBulletId.ToString());
      this.m_writer.WriteEndElement();
    }
    if (listLevel.NumberAlignment != ListNumberAlignment.Left)
    {
      this.m_writer.WriteStartElement("lvlJc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      string empty = string.Empty;
      string str = listLevel.NumberAlignment != ListNumberAlignment.Right ? "center" : "right";
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.SerializeParagraphFormat(listLevel.ParagraphFormat, (WParagraph) null);
    this.m_writer.WriteEndElement();
    this.SerializeCharacterFormat(listLevel.CharacterFormat);
    this.m_writer.WriteEndElement();
  }

  private void SerializeLegacyProperties(WListLevel listLevel)
  {
    if (!listLevel.Word6Legacy)
      return;
    this.m_writer.WriteStartElement("legacy", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("legacy", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteAttributeString("legacySpace", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.LegacySpace.ToString());
    this.m_writer.WriteAttributeString("legacyIndent", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.LegacyIndent.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeLevelFollow(WListLevel listLevel)
  {
    string empty = string.Empty;
    string str = listLevel.FollowCharacter != FollowCharacterType.Space ? (listLevel.FollowCharacter != FollowCharacterType.Tab ? "nothing" : "tab") : "space";
    this.m_writer.WriteStartElement("suff", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteEndElement();
  }

  private string RemoveIllegalXMLCharacters(string text)
  {
    for (int oldChar = 0; oldChar < 30; ++oldChar)
      text = text.Replace((char) oldChar, char.MinValue);
    return text != null ? text.Replace("\0", string.Empty) : text;
  }

  private void SerializeLevelText(WListLevel listLevel, int lvlIndex)
  {
    this.m_writer.WriteStartElement("lvlText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    bool flag = false;
    if (listLevel.PatternType == ListPatternType.None && listLevel.BulletCharacter != null && listLevel.BulletCharacter.Length > 0 && listLevel.ParaStyleName == null)
      flag = true;
    if ((listLevel.PatternType == ListPatternType.Bullet || flag) && listLevel.BulletCharacter != null)
    {
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.RemoveIllegalXMLCharacters(listLevel.BulletCharacter));
    }
    else
    {
      string str1 = string.Empty;
      if (listLevel.NumberPrefix != null && listLevel.NumberPrefix.Length > 0)
        str1 = DocxSerializator.UpdateNumberPrefix(listLevel.NumberPrefix);
      string str2 = str1;
      if (!listLevel.NoLevelText && listLevel.NumberSuffix != null)
      {
        char listSymbol = this.GetListSymbol(listLevel.LevelNumber);
        listLevel.NumberSuffix = listLevel.NumberSuffix.Replace(listSymbol.ToString(), string.Empty);
        char[] chArray = new char[1];
        str2 = $"{str2}%{lvlIndex.ToString()}{listLevel.NumberSuffix.Trim(chArray)}";
      }
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str2);
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializePictureBullets(ListStyleCollection listStyleCollection)
  {
    foreach (ListStyle listStyle in (CollectionImpl) listStyleCollection)
    {
      int index = 0;
      for (int count = listStyle.Levels.Count; index < count; ++index)
      {
        WListLevel level = listStyle.Levels[index];
        if (level.PicBullet != null)
          this.SerializePictureBullet(level);
      }
    }
  }

  private void SerializePictureBullet(WListLevel listLevel)
  {
    WPicture picBullet = listLevel.PicBullet;
    string str = this.AddImageRelation(this.PictureBullets, picBullet.ImageRecord, this.IsNeedToSkipImageRelation(picBullet));
    this.m_hasImages = true;
    int nextId = this.GetNextID();
    listLevel.PicBulletId = (short) nextId;
    StringBuilder stringBuilder = new StringBuilder("width:");
    stringBuilder.Append(picBullet.Width.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt;height:");
    stringBuilder.Append(picBullet.Height.ToString((IFormatProvider) CultureInfo.InvariantCulture));
    stringBuilder.Append("pt");
    stringBuilder.Replace(",", ".");
    this.m_writer.WriteStartElement("numPicBullet", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("numPicBulletId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", nextId.ToString());
    this.m_writer.WriteStartElement("pict", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
    this.m_writer.WriteAttributeString("type", "#_x0000_t75");
    this.m_writer.WriteAttributeString("style", stringBuilder.ToString());
    this.m_writer.WriteAttributeString("bullet", "urn:schemas-microsoft-com:office:office", "t");
    if (!listLevel.IsEmptyPicture)
    {
      this.m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", str);
      this.m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", string.Empty);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeStyles()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.m_writer.WriteStartElement("w", "styles", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "mc", (string) null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
    this.m_writer.WriteAttributeString("xmlns", "r", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
    this.m_writer.WriteAttributeString("xmlns", "w", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("xmlns", "w14", (string) null, "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteAttributeString("xmlns", "w15", (string) null, "http://schemas.microsoft.com/office/word/2012/wordml");
    this.m_writer.WriteAttributeString("mc", "Ignorable", (string) null, "w14 w15");
    this.SerializeDefaultStyles();
    this.SerializeDocumentStyles();
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("word\\styles.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeDocumentStyles()
  {
    Dictionary<string, int> dictionary1 = new Dictionary<string, int>();
    foreach (Style style in (IEnumerable) this.m_document.Styles)
    {
      string str = style.StyleType == StyleType.CharacterStyle ? style.StyleType.ToString() : StyleType.ParagraphStyle.ToString();
      while (dictionary1.ContainsKey($"{style.Name}_{str}"))
      {
        style.IsCustom = true;
        string name = style.Name;
        style.SetStyleName($"{style.Name}_{dictionary1[$"{style.Name}_{str}"].ToString()}");
        Dictionary<string, int> dictionary2;
        string key;
        (dictionary2 = dictionary1)[key = $"{name}_{str}"] = dictionary2[key] + 1;
      }
      this.SerializeStyle(style, this.m_document);
      dictionary1.Add($"{style.Name}_{str}", 0);
    }
  }

  private string GetStyleId(string styleName)
  {
    Dictionary<string, string> styleNameIds = this.m_document.StyleNameIds;
    foreach (string key in styleNameIds.Keys)
    {
      if (styleNameIds[key] == styleName)
        return key;
    }
    return (string) null;
  }

  private void SerializeStyle(Style style, WordDocument document)
  {
    string name = style.Name;
    string empty1 = string.Empty;
    string empty2 = string.Empty;
    string str1;
    switch (style.TypeCode)
    {
      case WordStyleType.TableStyle:
        switch (name)
        {
          case "TableNormal":
            return;
          case "Table Normal":
            return;
          case "NormalTable":
            return;
          case "Normal Table":
            return;
          default:
            str1 = "table";
            break;
        }
        break;
      case WordStyleType.ListStyle:
        str1 = "numbering";
        break;
      default:
        string str2;
        switch (style)
        {
          case WTableStyle _:
            str2 = "table";
            break;
          case WParagraphStyle _:
            str2 = "paragraph";
            break;
          case WNumberingStyle _:
            str2 = "numbering";
            break;
          default:
            str2 = "character";
            break;
        }
        str1 = str2;
        break;
    }
    this.m_writer.WriteStartElement("w", nameof (style), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str1);
    string str3 = name;
    Dictionary<string, string> styleNameIds = document.StyleNameIds;
    if (styleNameIds.ContainsValue(name))
    {
      string styleIdName = style.StyleIDName;
      foreach (string key in styleNameIds.Keys)
      {
        if (styleIdName != null)
        {
          if (key == styleIdName)
          {
            this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key);
            break;
          }
        }
        else if (styleNameIds[key] == name)
        {
          this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key);
          break;
        }
      }
    }
    else
    {
      if (str3 == "Normal Table")
        str3 = "TableNormal";
      this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str3.Replace(" ", string.Empty));
    }
    style.IsCustom = !style.GetBuiltinStyles().ContainsKey(name.ToLower());
    if (style.IsCustom)
      this.m_writer.WriteAttributeString("customStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    else if (this.IsDefaultStyle(style))
      this.m_writer.WriteAttributeString("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", name);
    this.m_writer.WriteEndElement();
    if (style.BaseStyle != null)
    {
      string styleName = style.BaseStyle.Name;
      this.m_writer.WriteStartElement("basedOn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      string styleId = this.GetStyleId(styleName);
      if (!string.IsNullOrEmpty(styleId))
      {
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleId);
      }
      else
      {
        if (styleName == "Normal Table")
          styleName = "TableNormal";
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleName.Replace(" ", string.Empty));
      }
      this.m_writer.WriteEndElement();
    }
    if (!string.IsNullOrEmpty(style.NextStyle))
    {
      string nextStyle = style.NextStyle;
      if (nextStyle != style.Name)
      {
        this.m_writer.WriteStartElement("next", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        string styleId = this.GetStyleId(nextStyle);
        if (!string.IsNullOrEmpty(styleId))
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleId);
        else
          this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", nextStyle.Replace(" ", string.Empty));
        this.m_writer.WriteEndElement();
      }
    }
    if (!string.IsNullOrEmpty(style.LinkStyle))
    {
      this.m_writer.WriteStartElement("link", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", style.LinkStyle.Replace(" ", string.Empty));
      this.m_writer.WriteEndElement();
    }
    if (style.UIPriority != int.MinValue)
    {
      this.m_writer.WriteStartElement("uiPriority", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", style.UIPriority.ToString());
      this.m_writer.WriteEndElement();
    }
    if (style.IsSemiHidden)
    {
      this.m_writer.WriteStartElement("semiHidden", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (style.UnhideWhenUsed)
    {
      this.m_writer.WriteStartElement("unhideWhenUsed", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (style.IsPrimaryStyle)
    {
      this.m_writer.WriteStartElement("qFormat", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    switch (style)
    {
      case WParagraphStyle _:
        WParagraphStyle wparagraphStyle = style as WParagraphStyle;
        if (wparagraphStyle.ListIndex >= 0)
          this.SerializeNumPr(wparagraphStyle.ListIndex, wparagraphStyle.ListLevel);
        else if (wparagraphStyle.ListFormat.CurrentListStyle != null || wparagraphStyle.ListFormat.IsEmptyList)
        {
          int listId = 0;
          int listLevel = -1;
          if (!wparagraphStyle.ListFormat.IsEmptyList)
          {
            listId = this.GetListId(wparagraphStyle.ListFormat);
            int outlineLevel = (int) wparagraphStyle.ParagraphFormat.OutlineLevel;
            if (wparagraphStyle.ListFormat.PropertiesHash.ContainsKey(0))
              listLevel = wparagraphStyle.ListFormat.ListLevelNumber;
          }
          this.SerializeNumPr(listId, listLevel);
        }
        else if (wparagraphStyle.ListFormat.ListLevelNumber > 0)
          this.SerializeNumPr(-1, wparagraphStyle.ListFormat.ListLevelNumber);
        this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.SerializeParagraphFormat(wparagraphStyle.ParagraphFormat, (WParagraph) null);
        this.m_writer.WriteEndElement();
        this.SerializeCharacterFormat(style.CharacterFormat);
        break;
      case WTableStyle _:
        this.SerializeTableStyle(style as WTableStyle);
        break;
      case WNumberingStyle _:
        WNumberingStyle wnumberingStyle = style as WNumberingStyle;
        if (wnumberingStyle.ListIndex >= 0)
        {
          this.SerializeNumPr(wnumberingStyle.ListIndex, wnumberingStyle.ListLevel);
          break;
        }
        if (wnumberingStyle.ListFormat.CurrentListStyle != null || wnumberingStyle.ListFormat.IsEmptyList)
        {
          int listId = 0;
          int listLevel = -1;
          if (!wnumberingStyle.ListFormat.IsEmptyList)
          {
            listId = this.GetListId(wnumberingStyle.ListFormat);
            listLevel = wnumberingStyle.ListFormat.ListLevelNumber;
          }
          this.SerializeNumPr(listId, listLevel);
          break;
        }
        if (wnumberingStyle.ListFormat.ListLevelNumber > 0)
        {
          this.SerializeNumPr(-1, wnumberingStyle.ListFormat.ListLevelNumber);
          break;
        }
        break;
      default:
        this.SerializeCharacterFormat(style.CharacterFormat);
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableStyle(WTableStyle style)
  {
    if (!style.ParagraphFormat.IsDefault)
    {
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (style.ListFormat.CurrentListStyle != null || style.ListFormat.IsEmptyList)
      {
        int listId = 0;
        int listLevel = -1;
        if (!style.ListFormat.IsEmptyList)
        {
          listId = this.GetListId(style.ListFormat);
          listLevel = style.ListFormat.ListLevelNumber;
        }
        this.SerializeNumPr(listId, listLevel);
      }
      else if (style.ListFormat.ListLevelNumber > 0)
        this.SerializeNumPr(-1, style.ListFormat.ListLevelNumber);
      this.SerializeParagraphFormat(style.ParagraphFormat, (WParagraph) null);
      this.m_writer.WriteEndElement();
    }
    if (!style.CharacterFormat.IsDefault)
      this.SerializeCharacterFormat(style.CharacterFormat);
    if (!style.TableProperties.IsDefault)
      this.SerializeTableStyleTableProperties(style.TableProperties);
    if (!style.RowProperties.IsDefault)
      this.SerializeTableStyleRowProperties(style.RowProperties);
    if (!style.CellProperties.IsDefault)
      this.SerializeTableStyleCellProperties(style.CellProperties);
    foreach (ConditionalFormattingStyle conditionalFormattingStyle in (CollectionImpl) style.ConditionalFormattingStyles)
      this.SerializeConditionalFormattingStyle(conditionalFormattingStyle.ConditionalFormattingType, conditionalFormattingStyle);
  }

  private void SerializeConditionalFormattingStyle(
    ConditionalFormattingType code,
    ConditionalFormattingStyle style)
  {
    this.m_writer.WriteStartElement("w", "tblStylePr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetConditionalStyleType(code));
    if (!style.ParagraphFormat.IsDefault)
    {
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeParagraphFormat(style.ParagraphFormat, (WParagraph) null);
      this.m_writer.WriteEndElement();
    }
    if (!style.CharacterFormat.IsDefault)
      this.SerializeCharacterFormat(style.CharacterFormat);
    if (!style.TableProperties.IsDefault)
      this.SerializeTableStyleTableProperties(style.TableProperties);
    if (!style.RowProperties.IsDefault)
      this.SerializeTableStyleRowProperties(style.RowProperties);
    if (!style.CellProperties.IsDefault)
      this.SerializeTableStyleCellProperties(style.CellProperties);
    this.m_writer.WriteEndElement();
  }

  private string GetConditionalStyleType(ConditionalFormattingType code)
  {
    string conditionalStyleType = "";
    switch (code)
    {
      case ConditionalFormattingType.FirstRow:
        conditionalStyleType = "firstRow";
        break;
      case ConditionalFormattingType.LastRow:
        conditionalStyleType = "lastRow";
        break;
      case ConditionalFormattingType.OddRowBanding:
        conditionalStyleType = "band1Horz";
        break;
      case ConditionalFormattingType.EvenRowBanding:
        conditionalStyleType = "band2Horz";
        break;
      case ConditionalFormattingType.FirstColumn:
        conditionalStyleType = "firstCol";
        break;
      case ConditionalFormattingType.LastColumn:
        conditionalStyleType = "lastCol";
        break;
      case ConditionalFormattingType.OddColumnBanding:
        conditionalStyleType = "band1Vert";
        break;
      case ConditionalFormattingType.EvenColumnBanding:
        conditionalStyleType = "band2Vert";
        break;
      case ConditionalFormattingType.FirstRowLastCell:
        conditionalStyleType = "neCell";
        break;
      case ConditionalFormattingType.FirstRowFirstCell:
        conditionalStyleType = "nwCell";
        break;
      case ConditionalFormattingType.LastRowLastCell:
        conditionalStyleType = "seCell";
        break;
      case ConditionalFormattingType.LastRowFirstCell:
        conditionalStyleType = "swCell";
        break;
    }
    return conditionalStyleType;
  }

  private void SerializeTableStyleCellProperties(TableStyleCellProperties props)
  {
    this.m_writer.WriteStartElement("tcPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (!props.Borders.IsDefault && props.HasValue(1))
    {
      this.m_writer.WriteStartElement("tcBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeBorders(props.Borders, 8);
      this.m_writer.WriteEndElement();
    }
    this.SerializeShading(props);
    if (!props.TextWrap)
    {
      this.m_writer.WriteStartElement("noWrap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (!props.Paddings.IsDefault && props.HasValue(3))
    {
      this.m_writer.WriteStartElement("tcMar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializePaddings(props.Paddings);
      this.m_writer.WriteEndElement();
    }
    this.SerializeCellVerticalAlign(props.VerticalAlignment);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableStyleRowProperties(TableStyleRowProperties props)
  {
    this.m_writer.WriteStartElement("trPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (!props.IsBreakAcrossPages)
    {
      this.m_writer.WriteStartElement("cantSplit", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (props.IsHeader)
    {
      this.m_writer.WriteStartElement("tblHeader", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    if (props.HasValue(52))
    {
      this.m_writer.WriteStartElement("tblCellSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(props.CellSpacing * 20f));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      this.m_writer.WriteEndElement();
    }
    if (props.HasValue(105))
    {
      this.m_writer.WriteStartElement("jc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (props.HorizontalAlignment)
      {
        case RowAlignment.Center:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
          break;
        case RowAlignment.Right:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? "end" : "right");
          break;
        default:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.IsStrict ? "start" : "left");
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (props.IsHidden)
    {
      this.m_writer.WriteStartElement("hidden", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableStyleTableProperties(TableStyleTableProperties props)
  {
    this.m_writer.WriteStartElement("tblPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (props.OwnerBase is WTableStyle && props.HasValue(5))
    {
      this.m_writer.WriteStartElement("tblStyleRowBandSize", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", props.RowStripe.ToString());
      this.m_writer.WriteEndElement();
    }
    if (props.OwnerBase is WTableStyle && props.HasValue(4))
    {
      this.m_writer.WriteStartElement("tblStyleColBandSize", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", props.ColumnStripe.ToString());
      this.m_writer.WriteEndElement();
    }
    if (props.HasValue(105))
    {
      this.m_writer.WriteStartElement("jc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (props.HorizontalAlignment)
      {
        case RowAlignment.Center:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
          break;
        case RowAlignment.Right:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "right");
          break;
        default:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "left");
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (props.HasValue(52))
    {
      this.m_writer.WriteStartElement("tblCellSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(props.CellSpacing * 20f));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      this.m_writer.WriteEndElement();
    }
    if (props.HasValue(53))
    {
      this.m_writer.WriteStartElement("tblInd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(props.LeftIndent * 20f));
      this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
      this.m_writer.WriteEndElement();
    }
    if (!props.Borders.IsDefault && props.HasValue(1))
    {
      this.m_writer.WriteStartElement("tblBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeBorders(props.Borders, 8);
      this.m_writer.WriteEndElement();
    }
    if (!props.Paddings.IsDefault && props.HasValue(3))
    {
      this.m_writer.WriteStartElement("tblCellMar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializePaddings(props.Paddings);
      this.m_writer.WriteEndElement();
    }
    this.SerializeShading(props);
    this.m_writer.WriteEndElement();
  }

  private void SerializeShading(TableStyleCellProperties props)
  {
    if (!props.HasValue(4) && !props.HasValue(5) && !props.HasValue(7))
      return;
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string textureStyle = this.GetTextureStyle(props.TextureStyle);
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
    if (props.ForeColor == Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else if (props.ForeColor != Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(props.ForeColor));
    if (props.BackColor == Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else if (props.BackColor != Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(props.BackColor));
    this.m_writer.WriteEndElement();
  }

  private void SerializeShading(TableStyleTableProperties props)
  {
    if (!props.HasValue(108) && !props.HasValue(111) && !props.HasValue(110))
      return;
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string textureStyle = this.GetTextureStyle(props.TextureStyle);
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
    if (props.ForeColor == Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else if (props.ForeColor != Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(props.ForeColor));
    if (props.BackColor == Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    else if (props.BackColor != Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(props.BackColor));
    this.m_writer.WriteEndElement();
  }

  private void SerializeLatentStyles()
  {
    if (this.m_document.LatentStyles != null)
    {
      this.m_document.LatentStyles.WriteTo(this.m_writer);
    }
    else
    {
      if (this.m_document.LatentStyles2010 == null)
        return;
      this.m_writer.WriteNode(this.CreateReader((Stream) this.m_document.LatentStyles2010), false);
    }
  }

  private void SerializeDefaultStyles()
  {
    this.m_writer.WriteStartElement("docDefaults", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("rPrDefault", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (this.m_document.DefCharFormat != null)
    {
      this.SerializeCharacterFormat(this.m_document.DefCharFormat);
    }
    else
    {
      this.m_writer.WriteStartElement("rPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteStartElement("rFonts", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!string.IsNullOrEmpty(this.m_document.StandardAsciiFont))
        this.m_writer.WriteAttributeString("ascii", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.StandardAsciiFont);
      if (!string.IsNullOrEmpty(this.m_document.StandardFarEastFont))
        this.m_writer.WriteAttributeString("eastAsia", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.StandardFarEastFont);
      if (!string.IsNullOrEmpty(this.m_document.StandardNonFarEastFont))
        this.m_writer.WriteAttributeString("hAnsi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.StandardNonFarEastFont);
      if (!string.IsNullOrEmpty(this.m_document.StandardBidiFont))
        this.m_writer.WriteAttributeString("cs", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.m_document.StandardBidiFont);
      this.m_writer.WriteEndElement();
      float defFontSize1 = this.GetDefFontSize(this.m_document, (short) 3);
      if ((double) defFontSize1 != 0.0)
      {
        this.m_writer.WriteStartElement("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (defFontSize1 * 2f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      float defFontSize2 = this.GetDefFontSize(this.m_document, (short) 62);
      if ((double) defFontSize2 != 0.0)
      {
        this.m_writer.WriteStartElement("szCs", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (defFontSize2 * 2f).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("pPrDefault", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (this.m_document.m_defParaFormat != null)
    {
      this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.SerializeParagraphFormat(this.m_document.m_defParaFormat, (WParagraph) null);
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.SerializeLatentStyles();
    if (this.m_document.Styles.Count == 0 || this.m_document.Styles.FindByName("Normal") == null)
      this.SerializeDefaultParagraphStyle();
    if (!this.IsDocumentContainsDefaultTableStyle())
      this.SerializeTableNormalStyle();
    if (this.m_document.Styles.FindByName("No List") == null && this.m_document.Styles.FindByName("NoList") == null)
      this.SerializeNoListStyle();
    if (this.m_document.Styles.FindByName("Table Grid") != null || this.m_document.Styles.FindByName("TableGrid") != null)
      return;
    this.SerializeTableGridStyle();
  }

  private void SerializeTableGridStyle()
  {
    this.m_writer.WriteStartElement("w", "style", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "table");
    this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "TableGrid");
    this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Table Grid");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("basedOn", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "TableNormal");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("tblPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("tblInd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("tblBorders", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("top", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
    this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
    this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("left", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
    this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
    this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("bottom", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
    this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
    this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("right", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
    this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
    this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("insideH", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
    this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
    this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("insideV", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
    this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
    this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeNoListStyle()
  {
    this.m_writer.WriteStartElement("w", "style", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "numbering");
    this.m_writer.WriteAttributeString("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "NoList");
    this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "No List");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("uiPriority", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "99");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("semiHidden", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("unhideWhenUsed", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeTableNormalStyle()
  {
    this.m_writer.WriteStartElement("w", "style", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "table");
    this.m_writer.WriteAttributeString("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "TableNormal");
    this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal Table");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("uiPriority", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "99");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("semiHidden", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("unhideWhenUsed", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("qFormat", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("tblPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("tblInd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("tblCellMar", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteStartElement("top", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("left", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "108");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("bottom", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("right", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "108");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeDefaultParagraphStyle()
  {
    this.m_writer.WriteStartElement("w", "style", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "paragraph");
    this.m_writer.WriteAttributeString("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal");
    this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("qFormat", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("w", "style", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("type", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "character");
    this.m_writer.WriteAttributeString("default", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteAttributeString("styleId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "DefaultParagraphFont");
    this.m_writer.WriteStartElement("name", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Default Paragraph Font");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("uiPriority", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("semiHidden", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteStartElement("unhideWhenUsed", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeCharacterFormat(WCharacterFormat characterFormat)
  {
    List<Stream> tempDocxProps = new List<Stream>();
    int index = 0;
    for (int count = characterFormat.XmlProps.Count; index < count; ++index)
      tempDocxProps.Add(characterFormat.XmlProps[index]);
    this.m_writer.WriteStartElement("rPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (characterFormat.OwnerBase is WParagraph && characterFormat.Revisions.Count > 0)
      this.SerializeRevisionsInFormatting(characterFormat.Revisions);
    if (characterFormat.CharStyleName != null && characterFormat.CharStyleName.Length != 0)
    {
      string str = this.GetStyleId(characterFormat.CharStyleName);
      if (string.IsNullOrEmpty(str))
        str = characterFormat.CharStyleName;
      this.m_writer.WriteStartElement("rStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str.Replace(" ", string.Empty));
      this.m_writer.WriteEndElement();
    }
    if (this.HasFont(characterFormat))
    {
      this.m_writer.WriteStartElement("rFonts", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (characterFormat.HasValue(68))
      {
        string localName = "ascii";
        if (characterFormat.IsThemeFont(characterFormat.FontNameAscii))
          localName = "asciiTheme";
        this.m_writer.WriteAttributeString(localName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameAscii);
      }
      if (characterFormat.HasValue(70))
      {
        string localName = "hAnsi";
        if (characterFormat.IsThemeFont(characterFormat.FontNameNonFarEast))
          localName = "hAnsiTheme";
        this.m_writer.WriteAttributeString(localName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameNonFarEast);
      }
      if (characterFormat.HasValue(69))
      {
        string localName = "eastAsia";
        if (characterFormat.IsThemeFont(characterFormat.FontNameFarEast))
          localName = "eastAsiaTheme";
        this.m_writer.WriteAttributeString(localName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameFarEast);
      }
      if (characterFormat.HasValue(61))
      {
        string localName = "cs";
        if (characterFormat.IsThemeFont(characterFormat.FontNameBidi))
          localName = "cstheme";
        this.m_writer.WriteAttributeString(localName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameBidi);
      }
      if (characterFormat.HasValue(72))
        this.m_writer.WriteAttributeString("hint", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.GetFontHint());
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(4))
      this.SerializeBoolProperty("b", characterFormat.Bold);
    if (characterFormat.HasValue(59))
      this.SerializeBoolProperty("bCs", characterFormat.BoldBidi);
    if (characterFormat.HasValue(5))
      this.SerializeBoolProperty("i", characterFormat.Italic);
    if (characterFormat.HasValue(60))
      this.SerializeBoolProperty("iCs", characterFormat.ItalicBidi);
    if (characterFormat.HasValue(54))
      this.SerializeBoolProperty("caps", characterFormat.AllCaps);
    if (characterFormat.HasValue(55))
      this.SerializeBoolProperty("smallCaps", characterFormat.SmallCaps);
    if (characterFormat.HasValue(6))
      this.SerializeBoolProperty("strike", characterFormat.Strikeout);
    if (characterFormat.HasValue(14))
      this.SerializeBoolProperty("dstrike", characterFormat.DoubleStrike);
    if (characterFormat.HasValue(71))
      this.SerializeBoolProperty("outline", characterFormat.OutLine);
    if (characterFormat.HasValue(50))
      this.SerializeBoolProperty("shadow", characterFormat.Shadow);
    this.SerializeDocxProps(tempDocxProps, "shadow");
    if (characterFormat.HasValue(51))
      this.SerializeBoolProperty("emboss", characterFormat.Emboss);
    if (characterFormat.HasValue(52))
      this.SerializeBoolProperty("imprint", characterFormat.Engrave);
    if (characterFormat.HasValue(76))
      this.SerializeBoolProperty("noProof", characterFormat.NoProof);
    if (characterFormat.HasValue(81))
    {
      this.m_writer.WriteStartElement("snapToGrid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!characterFormat.SnapToGrid)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "off");
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(tempDocxProps, "glow");
    this.SerializeDocxProps(tempDocxProps, "reflection");
    this.SerializeDocxProps(tempDocxProps, "textOutline");
    this.SerializeDocxProps(tempDocxProps, "textFill");
    if (characterFormat.HasValue(53))
      this.SerializeBoolProperty("vanish", characterFormat.Hidden);
    if (characterFormat.HasValue(92))
      this.SerializeBoolProperty("webHidden", characterFormat.WebHidden);
    if (characterFormat.HasValue(1))
    {
      this.m_writer.WriteStartElement("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (characterFormat.TextColor == Color.Empty)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(characterFormat.TextColor));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(18))
    {
      this.m_writer.WriteStartElement("spacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(characterFormat.CharacterSpacing * 20f));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue((int) sbyte.MaxValue))
    {
      this.m_writer.WriteStartElement("w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(characterFormat.Scaling));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(125))
    {
      this.m_writer.WriteStartElement("kern", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(characterFormat.Kern * 2f));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(17))
    {
      this.m_writer.WriteStartElement("position", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(characterFormat.Position * 2f));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(3))
    {
      this.m_writer.WriteStartElement("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(characterFormat.FontSize * 2f));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(62))
    {
      this.m_writer.WriteStartElement("szCs", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(characterFormat.FontSizeBidi * 2f));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(63 /*0x3F*/) && characterFormat.HighlightColor != Color.Empty)
    {
      this.m_writer.WriteStartElement("highlight", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      Color colors = WordColor.ColorsArray[WordColor.ConvertColorToId(characterFormat.HighlightColor)];
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetHighlightColor(colors));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(7))
    {
      this.m_writer.WriteStartElement("u", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetUnderlineStyle(characterFormat.UnderlineStyle));
      if (characterFormat.HasValue(90))
        this.m_writer.WriteAttributeString("w", "color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(characterFormat.UnderlineColor));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(79))
    {
      this.m_writer.WriteStartElement("em", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetEmphasisType(characterFormat.EmphasisType));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(80 /*0x50*/))
    {
      this.m_writer.WriteStartElement("effect", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetTextEffect(characterFormat.TextEffect));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(13))
    {
      this.m_writer.WriteStartElement("eastAsianLayout", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.CFELayout.ID.ToString());
      CFELayout cfeLayout = characterFormat.CFELayout;
      if (cfeLayout.Combine)
        this.m_writer.WriteAttributeString("w", "combine", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
      if (cfeLayout.Vertical)
        this.m_writer.WriteAttributeString("w", "vert", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
      if (cfeLayout.VerticalCompress)
        this.m_writer.WriteAttributeString("w", "vertCompress", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
      if (cfeLayout.HasCombineBracketsType())
        this.m_writer.WriteAttributeString("w", "combineBrackets", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", cfeLayout.CombineBracketsType.ToString().ToLower());
      this.m_writer.WriteEndElement();
    }
    this.SerializeBorder(characterFormat.Border, "bdr", 8);
    if (characterFormat.HasValue(9) || characterFormat.HasValue(77))
      this.SerializeCharacterShading(characterFormat);
    if (characterFormat.HasValue(16 /*0x10*/))
    {
      this.m_writer.WriteStartElement("fitText", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (characterFormat.HasValue(19))
        this.m_writer.WriteAttributeString("w", "id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) characterFormat.FitTextID));
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) (characterFormat.FitTextWidth * 20)));
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(10))
    {
      this.m_writer.WriteStartElement("vertAlign", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      switch (characterFormat.SubSuperScript)
      {
        case SubSuperScript.SuperScript:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "superscript");
          break;
        case SubSuperScript.SubScript:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "subscript");
          break;
        default:
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "baseline");
          break;
      }
      this.m_writer.WriteEndElement();
    }
    if (characterFormat.HasValue(58))
      this.SerializeBoolProperty("rtl", characterFormat.Bidi);
    if (characterFormat.HasKey(99))
      this.SerializeBoolProperty("cs", characterFormat.ComplexScript);
    this.SerializeLanguage(characterFormat, false);
    if (characterFormat.HasKey(24))
      this.SerializeBoolProperty("specVanish", characterFormat.SpecVanish);
    this.SerializeDocxProps(tempDocxProps, "oMath");
    this.SerializeLigatures(characterFormat);
    this.SerializeStylisticSet(characterFormat);
    this.SerializeNumberForm(characterFormat);
    this.SerializeNumberSpacing(characterFormat);
    this.SerializeContextualAlternates(characterFormat);
    if (characterFormat.Revisions.Count > 0 && !this.m_isAlternativeCharFormat)
    {
      foreach (Revision revision in characterFormat.Revisions)
      {
        if (revision.RevisionType == RevisionType.Formatting || revision.RevisionType == RevisionType.StyleDefinitionChange)
        {
          this.SerializeTrackChangeProps("rPrChange", revision.Author, revision.Date);
          if (characterFormat.OldPropertiesHash.Count > 0)
          {
            this.m_isAlternativeCharFormat = true;
            Dictionary<int, object> dictionary1 = new Dictionary<int, object>((IDictionary<int, object>) characterFormat.OldPropertiesHash);
            Dictionary<int, object> dictionary2 = new Dictionary<int, object>((IDictionary<int, object>) characterFormat.PropertiesHash);
            characterFormat.PropertiesHash.Clear();
            characterFormat.OldPropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              characterFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.SerializeCharacterFormat(characterFormat);
            characterFormat.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
              characterFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary2)
              characterFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.m_isAlternativeCharFormat = false;
          }
          else
          {
            this.m_writer.WriteStartElement("rPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
            this.m_writer.WriteEndElement();
          }
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeLigatures(WCharacterFormat characterFormat)
  {
    if (!characterFormat.HasValue(121))
      return;
    this.m_writer.WriteStartElement("ligatures", "http://schemas.microsoft.com/office/word/2010/wordml");
    switch (characterFormat.Ligatures)
    {
      case LigatureType.None:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "none");
        break;
      case LigatureType.Standard:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standard");
        break;
      case LigatureType.Contextual:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextual");
        break;
      case LigatureType.StandardContextual:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardContextual");
        break;
      case LigatureType.Historical:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "historical");
        break;
      case LigatureType.StandardHistorical:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardHistorical");
        break;
      case LigatureType.ContextualHistorical:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextualHistorical");
        break;
      case LigatureType.StandardContextualHistorical:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardContextualHistorical");
        break;
      case LigatureType.Discretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "discretional");
        break;
      case LigatureType.StandardDiscretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardDiscretional");
        break;
      case LigatureType.ContextualDiscretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextualDiscretional");
        break;
      case LigatureType.StandardContextualDiscretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardContextualDiscretional");
        break;
      case LigatureType.HistoricalDiscretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "historicalDiscretional");
        break;
      case LigatureType.StandardHistoricalDiscretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardHistoricalDiscretional");
        break;
      case LigatureType.ContextualHistoricalDiscretional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextualHistoricalDiscretional");
        break;
      case LigatureType.All:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "all");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeNumberForm(WCharacterFormat characterFormat)
  {
    if (!characterFormat.HasValue(122))
      return;
    this.m_writer.WriteStartElement("numForm", "http://schemas.microsoft.com/office/word/2010/wordml");
    switch (characterFormat.NumberForm)
    {
      case NumberFormType.Default:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "default");
        break;
      case NumberFormType.Lining:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "lining");
        break;
      case NumberFormType.OldStyle:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "oldStyle");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeNumberSpacing(WCharacterFormat characterFormat)
  {
    if (!characterFormat.HasValue(123))
      return;
    this.m_writer.WriteStartElement("numSpacing", "http://schemas.microsoft.com/office/word/2010/wordml");
    switch (characterFormat.NumberSpacing)
    {
      case NumberSpacingType.Default:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "default");
        break;
      case NumberSpacingType.Proportional:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "proportional");
        break;
      case NumberSpacingType.Tabular:
        this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "tabular");
        break;
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeStylisticSet(WCharacterFormat characterFormat)
  {
    if (!characterFormat.HasValue(124))
      return;
    this.m_writer.WriteStartElement("stylisticSets", "http://schemas.microsoft.com/office/word/2010/wordml");
    this.m_writer.WriteStartElement("styleSet", "http://schemas.microsoft.com/office/word/2010/wordml");
    switch (characterFormat.StylisticSet)
    {
      case StylisticSetType.StylisticSetDefault:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "0");
        break;
      case StylisticSetType.StylisticSet01:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "1");
        break;
      case StylisticSetType.StylisticSet02:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "2");
        break;
      case StylisticSetType.StylisticSet03:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "3");
        break;
      case StylisticSetType.StylisticSet04:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "4");
        break;
      case StylisticSetType.StylisticSet05:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "5");
        break;
      case StylisticSetType.StylisticSet06:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "6");
        break;
      case StylisticSetType.StylisticSet07:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "7");
        break;
      case StylisticSetType.StylisticSet08:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "8");
        break;
      case StylisticSetType.StylisticSet09:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "9");
        break;
      case StylisticSetType.StylisticSet10:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "10");
        break;
      case StylisticSetType.StylisticSet11:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "11");
        break;
      case StylisticSetType.StylisticSet12:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "12");
        break;
      case StylisticSetType.StylisticSet13:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "13");
        break;
      case StylisticSetType.StylisticSet14:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "14");
        break;
      case StylisticSetType.StylisticSet15:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "15");
        break;
      case StylisticSetType.StylisticSet16:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "16");
        break;
      case StylisticSetType.StylisticSet17:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "17");
        break;
      case StylisticSetType.StylisticSet18:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "18");
        break;
      case StylisticSetType.StylisticSet19:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "19");
        break;
      case StylisticSetType.StylisticSet20:
        this.m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "20");
        break;
    }
    this.m_writer.WriteEndElement();
    this.m_writer.WriteEndElement();
  }

  private void SerializeContextualAlternates(WCharacterFormat characterFormat)
  {
    if (!characterFormat.HasValue(120))
      return;
    this.m_writer.WriteStartElement("cntxtAlts", "http://schemas.microsoft.com/office/word/2010/wordml");
    if (!characterFormat.UseContextualAlternates)
      this.m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "false");
    this.m_writer.WriteEndElement();
  }

  private void SerializeCharacterShading(WCharacterFormat characterFormat)
  {
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetTextureStyle(characterFormat.TextureStyle));
    if (characterFormat.ForeColor != Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(characterFormat.ForeColor));
    else
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    if (characterFormat.TextBackgroundColor != Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(characterFormat.TextBackgroundColor));
    else
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    this.m_writer.WriteEndElement();
  }

  private void SerializeCharacterShading(
    WCharacterFormat characterFormat,
    Dictionary<int, object> oldPropertiesHash)
  {
    if (!oldPropertiesHash.ContainsKey(78))
      return;
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetTextureStyle((TextureStyle) oldPropertiesHash[78]));
    if ((Color) oldPropertiesHash[77] != Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode((Color) oldPropertiesHash[77]));
    else
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    if ((Color) oldPropertiesHash[9] != Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode((Color) oldPropertiesHash[9]));
    else
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraphFormat(WParagraphFormat paragraphFormat, WParagraph paragraph)
  {
    if (paragraph != null)
    {
      IWParagraphStyle style = paragraph.GetStyle();
      if (style != null && style.Name != "Normal")
      {
        this.m_writer.WriteStartElement("pStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        string styleId = this.GetStyleId(style.Name);
        if (!string.IsNullOrEmpty(styleId))
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleId);
        else
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", style.Name.Replace(" ", string.Empty));
        this.m_writer.WriteEndElement();
      }
    }
    if (paragraphFormat.HasValue(47))
    {
      string paragraphStyleName = paragraphFormat.ParagraphStyleName;
      if (!string.IsNullOrEmpty(paragraphStyleName))
      {
        this.m_writer.WriteStartElement("pStyle", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", paragraphStyleName);
        this.m_writer.WriteEndElement();
      }
    }
    if (paragraphFormat.HasValue(10))
    {
      this.m_writer.WriteStartElement("keepNext", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.KeepFollow)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(6))
    {
      this.m_writer.WriteStartElement("keepLines", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.Keep)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(12))
    {
      this.m_writer.WriteStartElement("pageBreakBefore", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.PageBreakBefore)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.IsContainFrameKey() && (paragraphFormat.OwnerBase is WParagraphStyle || paragraph != null && !(paragraph.OwnerTextBody.Owner is WTextBox) && !(paragraph.OwnerTextBody.Owner is Shape)))
    {
      WParagraphFormat wparagraphFormat = (WParagraphFormat) null;
      if (paragraphFormat.BaseFormat != null)
        wparagraphFormat = this.GetBaseFormat(paragraphFormat.BaseFormat as WParagraphFormat);
      if (wparagraphFormat != null && wparagraphFormat.IsInFrame() || paragraphFormat.IsInFrame())
        this.SerializeFrame(paragraphFormat);
    }
    if (paragraphFormat.HasValue(11))
    {
      this.m_writer.WriteStartElement("widowControl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.WidowControl)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraph != null)
      this.SerializeListParagraph(paragraph);
    else if (!this.m_isAlternativeParaFormat)
      this.SerializeListStyle(paragraphFormat);
    if (paragraphFormat.HasValue(38))
    {
      this.m_writer.WriteStartElement("suppressLineNumbers", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.SuppressLineNumbers)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    this.SerializeParagraphBorders(paragraphFormat, 8);
    this.SerializeParagraphShading(paragraphFormat);
    if (paragraphFormat.Tabs.Count > 0)
      this.SerializeTabs(paragraphFormat.Tabs);
    this.SerializeSuppressAutoHyphens(paragraphFormat);
    if (paragraphFormat.HasValue(40))
    {
      this.m_writer.WriteStartElement("kinsoku", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.Kinsoku)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(89))
    {
      this.m_writer.WriteStartElement("wordWrap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.WordWrap)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(41))
    {
      this.m_writer.WriteStartElement("overflowPunct", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.OverflowPunctuation)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(42))
    {
      this.m_writer.WriteStartElement("topLinePunct", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.TopLinePunctuation)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(81))
    {
      this.m_writer.WriteStartElement("autoSpaceDE", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.AutoSpaceDE)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(82))
    {
      this.m_writer.WriteStartElement("autoSpaceDN", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.AutoSpaceDN)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(31 /*0x1F*/))
    {
      this.m_writer.WriteStartElement("bidi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.Bidi)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", paragraphFormat.Bidi.ToString().ToLower());
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(80 /*0x50*/))
    {
      this.m_writer.WriteStartElement("adjustRightInd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (paragraphFormat.AdjustRightIndent)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
      else
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(35))
    {
      this.m_writer.WriteStartElement("snapToGrid", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.SnapToGrid)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "off");
      this.m_writer.WriteEndElement();
    }
    this.SerializeParagraphSpacing(paragraphFormat);
    this.SerializeIndentation(paragraphFormat);
    if (paragraphFormat.HasValue(92))
    {
      this.m_writer.WriteStartElement("contextualSpacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.ContextualSpacing)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    this.SerializeMirrorIndents(paragraphFormat);
    if (paragraphFormat.HasValue(36))
    {
      this.m_writer.WriteStartElement("suppressOverlap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      if (!paragraphFormat.SuppressOverlap)
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
      this.m_writer.WriteEndElement();
    }
    if (paragraphFormat.HasValue(0))
      this.SerializeParagraphAlignment((byte) paragraphFormat.LogicalJustification);
    this.SerializeDocxProps(paragraphFormat.XmlProps, "textDirection");
    if (paragraphFormat.HasValue(34))
      this.SerializeParagraphTextAlignment((byte) paragraphFormat.BaseLineAlignment);
    if (paragraphFormat.HasValue(37))
      this.SerializeParagraphTextboxTightWrap((byte) paragraphFormat.TextboxTightWrap);
    if ((paragraphFormat.HasValue(56) && paragraph != null && paragraph.ParaStyle != null && !paragraphFormat.IsBuiltInHeadingStyle(paragraph.ParaStyle.Name) || paragraph == null) && (byte) paragraphFormat.OutlineLevel >= (byte) 0 && (byte) paragraphFormat.OutlineLevel < (byte) 9)
    {
      this.m_writer.WriteStartElement("outlineLvl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((byte) paragraphFormat.OutlineLevel).ToString());
      this.m_writer.WriteEndElement();
    }
    this.SerializeDocxProps(paragraphFormat.XmlProps, "divId");
    if (paragraph != null && paragraph.IsInCell && this.IsParagraphContainsCnfStyle)
    {
      this.IsParagraphContainsCnfStyle = false;
      this.SerializeCnfStyleElement(paragraph);
    }
    if (paragraph != null)
      this.SerializeCharacterFormat(paragraph.BreakCharacterFormat);
    if (paragraph != null && paragraph.IsParagraphHasSectionBreak())
    {
      WSection ownerSection = paragraph.GetOwnerSection();
      if (ownerSection != null && ownerSection.NextSibling != null)
      {
        string str = this.ModifyText(paragraph.Text);
        if (ownerSection != null && !str.Contains(ControlChar.CarriegeReturn))
          this.SerializeSectionProperties(ownerSection, false);
      }
    }
    if (paragraphFormat.Revisions.Count <= 0 || this.m_isAlternativeParaFormat)
      return;
    foreach (Revision revision in paragraphFormat.Revisions)
    {
      if (revision.RevisionType == RevisionType.Formatting || revision.RevisionType == RevisionType.StyleDefinitionChange)
      {
        this.SerializeTrackChangeProps("pPrChange", revision.Author, revision.Date);
        if (paragraphFormat.OldPropertiesHash.Count > 0)
        {
          this.m_isAlternativeParaFormat = true;
          this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          Dictionary<int, object> dictionary1 = new Dictionary<int, object>((IDictionary<int, object>) paragraphFormat.OldPropertiesHash);
          Dictionary<int, object> dictionary2 = new Dictionary<int, object>((IDictionary<int, object>) paragraphFormat.PropertiesHash);
          paragraphFormat.PropertiesHash.Clear();
          paragraphFormat.OldPropertiesHash.Clear();
          foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
            paragraphFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
          this.SerializeParagraphFormat(paragraphFormat, (WParagraph) null);
          if (paragraph != null && paragraph.ListFormat.OldPropertiesHash.Count > 0)
          {
            Dictionary<int, object> dictionary3 = new Dictionary<int, object>((IDictionary<int, object>) paragraph.ListFormat.OldPropertiesHash);
            Dictionary<int, object> dictionary4 = new Dictionary<int, object>((IDictionary<int, object>) paragraph.ListFormat.PropertiesHash);
            paragraph.ListFormat.PropertiesHash.Clear();
            paragraph.ListFormat.OldPropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary3)
              paragraph.ListFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.SerializeListParagraph(paragraph);
            paragraph.ListFormat.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary4)
              paragraph.ListFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary3)
              paragraph.ListFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
          }
          else if (paragraph == null && paragraphFormat.OwnerBase is WParagraphStyle && (paragraphFormat.OwnerBase as WParagraphStyle).ListFormat.OldPropertiesHash.Count > 0)
          {
            WParagraphStyle ownerBase = paragraphFormat.OwnerBase as WParagraphStyle;
            Dictionary<int, object> dictionary5 = new Dictionary<int, object>((IDictionary<int, object>) ownerBase.ListFormat.OldPropertiesHash);
            Dictionary<int, object> dictionary6 = new Dictionary<int, object>((IDictionary<int, object>) ownerBase.ListFormat.PropertiesHash);
            ownerBase.ListFormat.PropertiesHash.Clear();
            ownerBase.ListFormat.OldPropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary5)
              ownerBase.ListFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            this.SerializeListStyle(paragraphFormat);
            ownerBase.ListFormat.PropertiesHash.Clear();
            foreach (KeyValuePair<int, object> keyValuePair in dictionary6)
              ownerBase.ListFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
            foreach (KeyValuePair<int, object> keyValuePair in dictionary5)
              ownerBase.ListFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
          }
          paragraphFormat.PropertiesHash.Clear();
          foreach (KeyValuePair<int, object> keyValuePair in dictionary2)
            paragraphFormat.PropertiesHash[keyValuePair.Key] = keyValuePair.Value;
          foreach (KeyValuePair<int, object> keyValuePair in dictionary1)
            paragraphFormat.OldPropertiesHash[keyValuePair.Key] = keyValuePair.Value;
          this.m_writer.WriteEndElement();
          this.m_isAlternativeParaFormat = false;
        }
        else
        {
          this.m_writer.WriteStartElement("pPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
          this.m_writer.WriteEndElement();
        }
        this.m_writer.WriteEndElement();
      }
    }
  }

  private void SerializeMirrorIndents(WParagraphFormat paragraphFormat)
  {
    if (!paragraphFormat.HasValue(75))
      return;
    this.m_writer.WriteStartElement("mirrorIndents", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (!paragraphFormat.MirrorIndents)
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
    this.m_writer.WriteEndElement();
  }

  private void SerializeSuppressAutoHyphens(WParagraphFormat paragraphFormat)
  {
    if (!paragraphFormat.HasValue(78))
      return;
    this.m_writer.WriteStartElement("suppressAutoHyphens", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (!paragraphFormat.SuppressAutoHyphens)
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
    this.m_writer.WriteEndElement();
  }

  private string GetNextTChangeId() => this.m_trackChangeId++.ToString();

  private bool SerializeDirectionalOverride(ParagraphItem item)
  {
    if (item.GetCharFormat().BiDirectionalOverride == BiDirectionalOverride.None)
      return false;
    this.m_writer.WriteStartElement("bdo", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", item.GetCharFormat().BiDirectionalOverride.ToString().ToLower());
    return true;
  }

  private void SerializeRevisionStart(ParagraphItem item)
  {
    if (item.RevisionsInternal.Count == 0)
      return;
    for (int index1 = item.RevisionsInternal.Count - 1; index1 >= 0; --index1)
    {
      Revision revision = item.RevisionsInternal[index1];
      ParagraphItem paragraphItem1 = (ParagraphItem) null;
      for (int index2 = 0; index2 < revision.Range.Count; ++index2)
      {
        if (revision.Range.Items[index2] is Entity)
        {
          paragraphItem1 = revision.Range.Items[index2] as ParagraphItem;
          break;
        }
      }
      bool flag = false;
      if (item.IsCloned)
        flag = paragraphItem1 is WTextRange && item is WTextRange && (paragraphItem1 as WTextRange).Text == (item as WTextRange).Text;
      if (paragraphItem1 == item || !item.Document.HasRenderableItemBefore(item) || flag)
      {
        switch (revision.RevisionType)
        {
          case RevisionType.Insertions:
            this.SerializeTrackChangeProps("ins", revision.Author, revision.Date);
            continue;
          case RevisionType.Deletions:
            this.SerializeTrackChangeProps("del", revision.Author, revision.Date);
            continue;
          case RevisionType.MoveFrom:
            if (this.MovingRevisionDetails == null)
            {
              this.SerializeTrackChangeProps("moveFromRangeStart", revision.Author, revision.Date, revision.Name);
              this.m_writer.WriteEndElement();
              ParagraphItem paragraphItem2 = (ParagraphItem) null;
              for (int index3 = revision.Range.Count - 1; index3 >= 0; --index3)
              {
                if (revision.Range.Items[index3] is Entity)
                {
                  paragraphItem2 = revision.Range.Items[index3] as ParagraphItem;
                  break;
                }
              }
              this.MovingRevisionDetails = new Dictionary<int, Dictionary<ParagraphItem, RevisionType>>();
              this.MovingRevisionDetails.Add(this.m_trackChangeId - 1, new Dictionary<ParagraphItem, RevisionType>()
              {
                {
                  paragraphItem2,
                  RevisionType.MoveFrom
                }
              });
            }
            this.SerializeTrackChangeProps("moveFrom", revision.Author, revision.Date);
            continue;
          case RevisionType.MoveTo:
            if (this.MovingRevisionDetails == null)
            {
              this.SerializeTrackChangeProps("moveToRangeStart", revision.Author, revision.Date, revision.Name);
              this.m_writer.WriteEndElement();
              ParagraphItem paragraphItem3 = (ParagraphItem) null;
              for (int index4 = revision.Range.Count - 1; index4 >= 0; --index4)
              {
                if (revision.Range.Items[index4] is Entity)
                {
                  paragraphItem3 = revision.Range.Items[index4] as ParagraphItem;
                  break;
                }
              }
              this.MovingRevisionDetails = new Dictionary<int, Dictionary<ParagraphItem, RevisionType>>();
              this.MovingRevisionDetails.Add(this.m_trackChangeId - 1, new Dictionary<ParagraphItem, RevisionType>()
              {
                {
                  paragraphItem3,
                  RevisionType.MoveTo
                }
              });
            }
            this.SerializeTrackChangeProps("moveTo", revision.Author, revision.Date);
            continue;
          default:
            continue;
        }
      }
    }
  }

  private void SerializeRevisionEnd(ParagraphItem item)
  {
    if (item.RevisionsInternal.Count == 0 && this.MovingRevisionDetails == null)
      return;
    if (item.RevisionsInternal.Count > 0)
    {
      for (int index1 = item.RevisionsInternal.Count - 1; index1 >= 0; --index1)
      {
        Revision revision = item.RevisionsInternal[index1];
        ParagraphItem paragraphItem = (ParagraphItem) null;
        for (int index2 = revision.Range.Count - 1; index2 >= 0; --index2)
        {
          if (revision.Range.Items[index2] is Entity)
          {
            paragraphItem = revision.Range.Items[index2] as ParagraphItem;
            break;
          }
        }
        if (paragraphItem is WFieldMark && this.SkipFieldItem(item))
        {
          for (int index3 = revision.Range.Count - 1; index3 >= 0; --index3)
          {
            if (revision.Range.Items[index3] is WOleObject)
            {
              paragraphItem = revision.Range.Items[index3] as ParagraphItem;
              break;
            }
          }
        }
        Entity entity = (Entity) item.OwnerParagraph.LastItem;
label_16:
        entity = entity is InlineContentControl ? (entity as InlineContentControl).ParagraphItems.LastItem : entity;
        while (true)
        {
          switch (entity)
          {
            case BookmarkStart _:
            case BookmarkEnd _:
            case EditableRangeStart _:
            case EditableRangeEnd _:
              entity = entity.PreviousSibling as Entity;
              continue;
            case InlineContentControl _:
              goto label_16;
            default:
              goto label_19;
          }
        }
label_19:
        bool flag1 = false;
        bool flag2 = false;
        if (item.IsCloned)
        {
          flag1 = paragraphItem is WTextRange && item is WTextRange && (paragraphItem as WTextRange).Text == (item as WTextRange).Text;
          flag2 = entity is WTextRange && item is WTextRange && (entity as WTextRange).Text == (item as WTextRange).Text;
        }
        if (paragraphItem == item || entity == item || flag1 || flag2)
          this.m_writer.WriteEndElement();
      }
    }
    if (this.MovingRevisionDetails == null)
      return;
    int idValue = 0;
    ParagraphItem paragraphItem1 = (ParagraphItem) null;
    RevisionType revisionType = RevisionType.MoveFrom;
    foreach (KeyValuePair<int, Dictionary<ParagraphItem, RevisionType>> movingRevisionDetail in this.MovingRevisionDetails)
    {
      idValue = movingRevisionDetail.Key;
      foreach (KeyValuePair<ParagraphItem, RevisionType> keyValuePair in movingRevisionDetail.Value)
      {
        paragraphItem1 = keyValuePair.Key;
        revisionType = keyValuePair.Value;
      }
    }
    if (paragraphItem1 != item)
      return;
    if (paragraphItem1.RevisionsInternal.Count > 0)
    {
      foreach (Revision revision in paragraphItem1.RevisionsInternal)
      {
        if (revision.RevisionType == RevisionType.MoveFrom || revision.RevisionType == RevisionType.MoveTo)
        {
          if (!revision.IsAfterParagraphMark && !revision.IsAfterCellMark && !revision.IsAfterRowMark && !revision.IsAfterTableMark)
            this.WriteMoveRangeEnd(revisionType, idValue);
          else
            this.MovingRevisionCollection.Add(revision);
        }
      }
    }
    else
    {
      if (this.MovingRevisionCollection.Count != 0)
        return;
      this.WriteMoveRangeEnd(revisionType, idValue);
    }
  }

  private void WriteMoveRangeEnd(RevisionType revisionType, int idValue)
  {
    if (revisionType == RevisionType.MoveFrom)
    {
      this.m_writer.WriteStartElement("moveFromRangeEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", idValue.ToString());
    }
    else
    {
      this.m_writer.WriteStartElement("moveToRangeEnd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", idValue.ToString());
    }
    this.m_writer.WriteEndElement();
    this.MovingRevisionDetails.Clear();
    this.MovingRevisionDetails = (Dictionary<int, Dictionary<ParagraphItem, RevisionType>>) null;
  }

  private void SerializeMoveRangeEnd()
  {
    int idValue = 0;
    RevisionType revisionType = RevisionType.MoveFrom;
    foreach (KeyValuePair<int, Dictionary<ParagraphItem, RevisionType>> movingRevisionDetail in this.MovingRevisionDetails)
    {
      idValue = movingRevisionDetail.Key;
      foreach (KeyValuePair<ParagraphItem, RevisionType> keyValuePair in movingRevisionDetail.Value)
        revisionType = keyValuePair.Value;
    }
    this.WriteMoveRangeEnd(revisionType, idValue);
    this.MovingRevisionCollection.Remove(this.MovingRevisionCollection[0]);
  }

  private void SerializeRevisionsInFormatting(List<Revision> revisions)
  {
    foreach (Revision revision in revisions)
    {
      switch (revision.RevisionType)
      {
        case RevisionType.Insertions:
          this.SerializeTrackChangeProps("ins", revision.Author, revision.Date);
          this.m_writer.WriteEndElement();
          continue;
        case RevisionType.Deletions:
          this.SerializeTrackChangeProps("del", revision.Author, revision.Date);
          this.m_writer.WriteEndElement();
          continue;
        case RevisionType.MoveFrom:
          this.SerializeTrackChangeProps("moveFrom", revision.Author, revision.Date);
          this.m_writer.WriteEndElement();
          continue;
        case RevisionType.MoveTo:
          this.SerializeTrackChangeProps("moveTo", revision.Author, revision.Date);
          this.m_writer.WriteEndElement();
          continue;
        default:
          continue;
      }
    }
  }

  private void SerializeTrackChangeProps(string type, string authorName, DateTime dt)
  {
    this.m_writer.WriteStartElement(type, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetNextTChangeId());
    if (!string.IsNullOrEmpty(authorName))
      this.m_writer.WriteAttributeString("author", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", authorName);
    if (!(dt != DateTime.MinValue))
      return;
    this.m_writer.WriteAttributeString("date", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dt.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", (IFormatProvider) CultureInfo.InvariantCulture));
  }

  private void SerializeTrackChangeProps(string type, string authorName, DateTime dt, string name)
  {
    this.m_writer.WriteStartElement(type, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    this.m_writer.WriteAttributeString("id", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetNextTChangeId());
    if (!string.IsNullOrEmpty(authorName))
      this.m_writer.WriteAttributeString("author", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", authorName);
    if (dt != DateTime.MinValue)
      this.m_writer.WriteAttributeString("date", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dt.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", (IFormatProvider) CultureInfo.InvariantCulture));
    if (string.IsNullOrEmpty(name))
      return;
    this.m_writer.WriteAttributeString(nameof (name), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", name);
  }

  private void SerializeParagraphAlignment(byte value)
  {
    this.m_writer.WriteStartElement("jc", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string str = "left";
    switch (value)
    {
      case 1:
        str = "center";
        break;
      case 2:
        str = "right";
        break;
      case 3:
        str = "both";
        break;
      case 4:
        str = "distribute";
        break;
      case 5:
        str = "mediumKashida";
        break;
      case 6:
        str = "numTab";
        break;
      case 7:
        str = "highKashida";
        break;
      case 8:
        str = "lowKashida";
        break;
      case 9:
        str = "thaiDistribute";
        break;
    }
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraphTextAlignment(byte value)
  {
    this.m_writer.WriteStartElement("textAlignment", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string str = "auto";
    switch (value)
    {
      case 0:
        str = "top";
        break;
      case 1:
        str = "center";
        break;
      case 2:
        str = "baseline";
        break;
      case 3:
        str = "bottom";
        break;
    }
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraphTextboxTightWrap(byte value)
  {
    this.m_writer.WriteStartElement("textboxTightWrap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string str = "none";
    switch (value)
    {
      case 1:
        str = "allLines";
        break;
      case 2:
        str = "firstAndLastLine";
        break;
      case 3:
        str = "firstLineOnly";
        break;
      case 4:
        str = "lastLineOnly";
        break;
    }
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    this.m_writer.WriteEndElement();
  }

  private void SerializeIndentation(WParagraphFormat paragraphFormat)
  {
    if (!paragraphFormat.HasValue(2) && !paragraphFormat.HasValue(3) && !paragraphFormat.HasValue(5) && !paragraphFormat.HasValue(85) && !paragraphFormat.HasValue(87) && !paragraphFormat.HasValue(86))
      return;
    this.m_writer.WriteStartElement("ind", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (paragraphFormat.HasValue(2))
      this.m_writer.WriteAttributeString(this.IsStrict ? "start" : "left", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paragraphFormat.LeftIndent.ToString() : this.ToString(paragraphFormat.LeftIndent * 20f)) + (this.IsStrict ? "pt" : ""));
    if (paragraphFormat.HasValue(85))
      this.m_writer.WriteAttributeString("leftChars", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(paragraphFormat.LeftIndentChars * 100f));
    if (paragraphFormat.HasValue(3))
      this.m_writer.WriteAttributeString(this.IsStrict ? "end" : "right", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paragraphFormat.RightIndent.ToString() : this.ToString(paragraphFormat.RightIndent * 20f)) + (this.IsStrict ? "pt" : ""));
    if (paragraphFormat.HasValue(87))
      this.m_writer.WriteAttributeString("rightChars", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(paragraphFormat.RightIndentChars * 100f));
    if (paragraphFormat.HasValue(5))
    {
      if ((double) paragraphFormat.FirstLineIndent < 0.0)
        this.m_writer.WriteAttributeString("hanging", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? (-1f * paragraphFormat.FirstLineIndent).ToString() : this.ToString((float) (-1.0 * (double) paragraphFormat.FirstLineIndent * 20.0))) + (this.IsStrict ? "pt" : ""));
      else
        this.m_writer.WriteAttributeString("firstLine", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paragraphFormat.FirstLineIndent.ToString() : this.ToString(paragraphFormat.FirstLineIndent * 20f)) + (this.IsStrict ? "pt" : ""));
    }
    if (paragraphFormat.HasValue(86))
    {
      if ((double) paragraphFormat.FirstLineIndentChars < 0.0)
        this.m_writer.WriteAttributeString("hangingChars", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) (-1.0 * (double) paragraphFormat.FirstLineIndentChars * 100.0)));
      else
        this.m_writer.WriteAttributeString("firstLineChars", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(paragraphFormat.FirstLineIndentChars * 100f));
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraphSpacing(WParagraphFormat paragraphFormat)
  {
    this.m_writer.WriteStartElement("spacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (paragraphFormat.HasValue(90))
    {
      short num = (short) Math.Round((double) paragraphFormat.BeforeLines * 100.0);
      this.m_writer.WriteAttributeString("beforeLines", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) num));
    }
    if (paragraphFormat.HasValue(91))
    {
      short num = (short) Math.Round((double) paragraphFormat.AfterLines * 100.0);
      this.m_writer.WriteAttributeString("afterLines", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) num));
    }
    if (paragraphFormat.HasValue(8))
      this.m_writer.WriteAttributeString("before", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paragraphFormat.BeforeSpacing.ToString() : this.ToString(paragraphFormat.BeforeSpacing * 20f)) + (this.IsStrict ? "pt" : ""));
    if (paragraphFormat.HasValue(54))
    {
      if (paragraphFormat.SpaceBeforeAuto)
        this.m_writer.WriteAttributeString("beforeAutospacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      else
        this.m_writer.WriteAttributeString("beforeAutospacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    }
    if (paragraphFormat.HasValue(9))
      this.m_writer.WriteAttributeString("after", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paragraphFormat.AfterSpacing.ToString() : this.ToString(paragraphFormat.AfterSpacing * 20f)) + (this.IsStrict ? "pt" : ""));
    if (paragraphFormat.HasValue(55))
    {
      if (paragraphFormat.SpaceAfterAuto)
        this.m_writer.WriteAttributeString("afterAutospacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      else
        this.m_writer.WriteAttributeString("afterAutospacing", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    }
    if (paragraphFormat.HasValue(52))
    {
      this.m_writer.WriteAttributeString("line", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (this.IsStrict ? paragraphFormat.LineSpacing.ToString() : this.ToString(Math.Abs(paragraphFormat.LineSpacing) * 20f)) + (this.IsStrict ? "pt" : ""));
      switch (paragraphFormat.LineSpacingRule)
      {
        case LineSpacingRule.AtLeast:
          this.m_writer.WriteAttributeString("lineRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "atLeast");
          break;
        case LineSpacingRule.Exactly:
          this.m_writer.WriteAttributeString("lineRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "exact");
          break;
        default:
          this.m_writer.WriteAttributeString("lineRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
          break;
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeTabs(TabCollection tabs)
  {
    if (tabs.Count <= 0)
      return;
    this.m_writer.WriteStartElement(nameof (tabs), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    for (int index = 0; index < tabs.Count && index < 64 /*0x40*/; ++index)
      this.SerializeTab(tabs[index]);
    this.m_writer.WriteEndElement();
  }

  private void SerializeTab(Tab tab)
  {
    this.m_writer.WriteStartElement(nameof (tab), this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    int num;
    if ((double) tab.Position == 0.0 && tab.HasKey(1))
    {
      num = (int) Math.Round((double) tab.DeletePosition);
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "clear");
    }
    else
    {
      num = this.IsStrict ? (int) Math.Round((double) tab.Position) : (int) Math.Round((double) tab.Position * 20.0);
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetTabJustification(tab.Justification));
    }
    if (tab.TabLeader != TabLeader.NoLeader)
      this.m_writer.WriteAttributeString("leader", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetTabLeader(tab.TabLeader));
    this.m_writer.WriteAttributeString("pos", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString() + (this.IsStrict ? "pt" : ""));
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraphShading(WParagraphFormat paragraphFormat)
  {
    if (!paragraphFormat.HasShading())
      return;
    this.m_writer.WriteStartElement("shd", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    string textureStyle = this.GetTextureStyle(paragraphFormat.TextureStyle);
    this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
    if (paragraphFormat.ForeColor != Color.Empty)
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(paragraphFormat.ForeColor));
    else
      this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    if (paragraphFormat.BackColor != Color.Empty)
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(paragraphFormat.BackColor));
    else
      this.m_writer.WriteAttributeString("fill", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    this.m_writer.WriteEndElement();
  }

  private void SerializeParagraphBorders(WParagraphFormat paragraphFormat, int multiplier)
  {
    if (paragraphFormat.Borders.IsDefault)
      return;
    Borders borders = paragraphFormat.Borders;
    this.m_writer.WriteStartElement("pBdr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (paragraphFormat.HasValue(59) || paragraphFormat.HasValue(63 /*0x3F*/) || paragraphFormat.Borders.Top.IsBorderDefined && !paragraphFormat.Borders.Top.IsDefault)
      this.SerializeBorder(borders.Top, "top", multiplier);
    if (paragraphFormat.HasValue(57) || paragraphFormat.HasValue(61) || paragraphFormat.Borders.Left.IsBorderDefined && !paragraphFormat.Borders.Left.IsDefault)
      this.SerializeBorder(borders.Left, "left", multiplier);
    if (paragraphFormat.HasValue(60) || paragraphFormat.HasValue(64 /*0x40*/) || paragraphFormat.Borders.Bottom.IsBorderDefined && !paragraphFormat.Borders.Bottom.IsDefault)
      this.SerializeBorder(borders.Bottom, "bottom", multiplier);
    if (paragraphFormat.HasValue(58) || paragraphFormat.HasValue(62) || paragraphFormat.Borders.Right.IsBorderDefined && !paragraphFormat.Borders.Right.IsDefault)
      this.SerializeBorder(borders.Right, "right", multiplier);
    if (paragraphFormat.HasValue(66) || paragraphFormat.HasValue(93) || paragraphFormat.Borders.Horizontal.IsBorderDefined && !paragraphFormat.Borders.Horizontal.IsDefault)
      this.SerializeBorder(borders.Horizontal, "between", multiplier);
    if (paragraphFormat.HasValue(67) || paragraphFormat.HasValue(94) || paragraphFormat.Borders.Vertical.IsBorderDefined && !paragraphFormat.Borders.Vertical.IsDefault)
      this.SerializeBorder(borders.Vertical, "bar", multiplier);
    this.m_writer.WriteEndElement();
  }

  private void SerializeListParagraph(WParagraph paragraph)
  {
    if (paragraph == null)
      return;
    if (paragraph.ListFormat.ListType != ListType.NoList)
      this.SerializeListFormat(paragraph.ListFormat);
    else if (paragraph.ListFormat.IsEmptyList)
    {
      this.SerializeNumPr(0, 0);
    }
    else
    {
      if (paragraph.ListFormat.ListLevelNumber <= 0)
        return;
      this.SerializeNumPr(-1, paragraph.ListFormat.ListLevelNumber);
    }
  }

  private void SerializeListStyle(WParagraphFormat paragraphFormat)
  {
    if (!(paragraphFormat.OwnerBase is WParagraphStyle))
      return;
    WParagraphStyle ownerBase = paragraphFormat.OwnerBase as WParagraphStyle;
    if (ownerBase.ListIndex >= 0)
      this.SerializeNumPr(ownerBase.ListIndex, ownerBase.ListLevel);
    else if (ownerBase.ListFormat.CurrentListStyle != null || ownerBase.ListFormat.IsEmptyList)
    {
      int listId = 0;
      int listLevel = -1;
      if (!ownerBase.ListFormat.IsEmptyList)
      {
        listId = this.GetListId(ownerBase.ListFormat);
        int outlineLevel = (int) ownerBase.ParagraphFormat.OutlineLevel;
        if (ownerBase.ListFormat.PropertiesHash.ContainsKey(0))
          listLevel = ownerBase.ListFormat.ListLevelNumber;
      }
      this.SerializeNumPr(listId, listLevel);
    }
    else
    {
      if (ownerBase.ListFormat.ListLevelNumber <= 0)
        return;
      this.SerializeNumPr(-1, ownerBase.ListFormat.ListLevelNumber);
    }
  }

  private void SerializeListFormat(WListFormat lf)
  {
    string name = (string) null;
    if (lf.CurrentListStyle.IsBuiltInStyle && lf.OwnerParagraph != null)
      name = lf.OwnerParagraph.StyleName;
    int listId = this.GetListId(lf);
    if (name != null && string.IsNullOrEmpty(lf.LFOStyleName))
    {
      WParagraphStyle byName1 = lf.OwnerParagraph.Document.Styles.FindByName(name, StyleType.ParagraphStyle) as WParagraphStyle;
      if (byName1.ListIndex != -1)
        return;
      ListStyle byName2 = lf.OwnerParagraph.Document.ListStyles.FindByName(lf.CustomStyleName);
      byName1.ListIndex = listId;
      if (byName2.Levels.Count > 1)
        byName1.ListLevel = lf.ListLevelNumber;
      byName2.Levels[lf.ListLevelNumber].ParaStyleName = name;
    }
    else
      this.SerializeNumPr(listId, lf.ListLevelNumber);
  }

  private void SerializeFrame(WParagraphFormat paragraphFormat)
  {
    this.m_writer.WriteStartElement("framePr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (paragraphFormat.HasValue(76))
      this.m_writer.WriteAttributeString("w", "w", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) (short) Math.Round((double) paragraphFormat.FrameWidth * 20.0)));
    bool flag = true;
    if (paragraphFormat.HasValue(77) && (double) paragraphFormat.FrameHeight != 0.0)
    {
      ushort num1 = (ushort) Math.Round((double) paragraphFormat.FrameHeight * 20.0);
      flag = ((int) num1 & 32768 /*0x8000*/) != 0;
      float num2 = (float) ((int) num1 & (int) short.MaxValue);
      this.m_writer.WriteAttributeString("w", "h", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString(num2));
    }
    if (paragraphFormat.HasValue(83))
      this.m_writer.WriteAttributeString("w", "hSpace", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) (short) Math.Round((double) paragraphFormat.FrameHorizontalDistanceFromText * 20.0)));
    if (paragraphFormat.HasValue(84))
      this.m_writer.WriteAttributeString("w", "vSpace", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) (short) Math.Round((double) paragraphFormat.FrameVerticalDistanceFromText * 20.0)));
    this.SerializeFrameWrapMode(paragraphFormat.WrapFrameAround);
    if (paragraphFormat.HasValue(71))
    {
      FrameHorzAnchor frameHorizontalPos = (FrameHorzAnchor) paragraphFormat.FrameHorizontalPos;
      this.m_writer.WriteAttributeString("w", "hAnchor", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", frameHorizontalPos.ToString().ToLower());
    }
    if (paragraphFormat.HasValue(72))
    {
      FrameVertAnchor frameVerticalPos = (FrameVertAnchor) paragraphFormat.FrameVerticalPos;
      this.m_writer.WriteAttributeString("w", "vAnchor", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", frameVerticalPos.ToString().ToLower());
    }
    if (paragraphFormat.HasValue(73))
    {
      float frameX = paragraphFormat.FrameX;
      if (paragraphFormat.IsFrameXAlign(frameX))
      {
        PageNumberAlignment pageNumberAlignment = (PageNumberAlignment) frameX;
        this.m_writer.WriteAttributeString("w", "xAlign", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageNumberAlignment.ToString().ToLower());
      }
      else
        this.m_writer.WriteAttributeString("w", "x", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) Math.Round((double) frameX * 20.0)));
    }
    if (paragraphFormat.HasValue(74))
    {
      float frameY = paragraphFormat.FrameY;
      if (paragraphFormat.IsFrameYAlign(frameY))
      {
        FrameVerticalPosition verticalPosition = (FrameVerticalPosition) frameY;
        this.m_writer.WriteAttributeString("w", "yAlign", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", verticalPosition.ToString().ToLower());
      }
      else
        this.m_writer.WriteAttributeString("w", "y", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.ToString((float) Math.Round((double) frameY * 20.0)));
    }
    if (!flag)
      this.m_writer.WriteAttributeString("w", "hRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "exact");
    else if (paragraphFormat.HasValue(77) && (double) paragraphFormat.FrameHeight == 0.0)
      this.m_writer.WriteAttributeString("w", "hRule", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
    if (paragraphFormat.HasValue(39))
    {
      if (paragraphFormat.LockFrameAnchor)
        this.m_writer.WriteAttributeString("w", "anchorLock", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
      else
        this.m_writer.WriteAttributeString("w", "anchorLock", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    }
    if (paragraphFormat.HasValue(43))
    {
      string str = paragraphFormat.DropCap == DropCapType.Margin ? "margin" : (paragraphFormat.DropCap == DropCapType.DropCap ? "drop" : (string) null);
      if (!string.IsNullOrEmpty(str))
        this.m_writer.WriteAttributeString("w", "dropCap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
    }
    if (paragraphFormat.HasValue(44))
      this.m_writer.WriteAttributeString("w", "lines", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", paragraphFormat.DropCapLines.ToString());
    this.m_writer.WriteEndElement();
  }

  private void SerializeFrameWrapMode(FrameWrapMode wrapFrameAround)
  {
    string str = (string) null;
    switch (wrapFrameAround)
    {
      case FrameWrapMode.Auto:
        str = "auto";
        break;
      case FrameWrapMode.NotBeside:
        str = "notBeside";
        break;
      case FrameWrapMode.Around:
        str = "around";
        break;
      case FrameWrapMode.None:
        str = "none";
        break;
      case FrameWrapMode.Tight:
        str = "tight";
        break;
      case FrameWrapMode.Through:
        str = "through";
        break;
    }
    this.m_writer.WriteAttributeString("w", "wrap", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
  }

  private void SerializeBorder(Border border, string tagName, int multiplier)
  {
    BorderStyle borderType = border.BorderType;
    int num = (int) (border.LineWidth * (float) multiplier);
    float space = border.Space;
    if (borderType == BorderStyle.None && !border.HasNoneStyle || borderType == BorderStyle.Cleared && border.HasNoneStyle)
      return;
    if (borderType == BorderStyle.Cleared)
    {
      this.m_writer.WriteStartElement(tagName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "nil");
      this.m_writer.WriteEndElement();
    }
    else
    {
      this.m_writer.WriteStartElement(tagName, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetBorderStyle(borderType));
      if (borderType != BorderStyle.Cleared)
      {
        if (border.Color.IsEmpty || border.Color == Color.Black)
          this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
        else
          this.m_writer.WriteAttributeString("color", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", this.GetRGBCode(border.Color));
        this.m_writer.WriteAttributeString("sz", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
        this.m_writer.WriteAttributeString("space", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", space.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        if (border.Shadow)
          this.m_writer.WriteAttributeString("shadow", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
      }
      this.m_writer.WriteEndElement();
    }
  }

  private void SerializeLanguage(WCharacterFormat characterFormat, bool isThemeLang)
  {
    bool flag1 = characterFormat.HasValue(73);
    bool flag2 = characterFormat.HasValue(74);
    bool flag3 = characterFormat.HasValue(75);
    if (!flag1 && !flag2 && !flag3)
      return;
    if (isThemeLang)
      this.m_writer.WriteStartElement("themeFontLang", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    else
      this.m_writer.WriteStartElement("lang", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (flag1)
    {
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) characterFormat.LocaleIdASCII))
      {
        string str = ((LocaleIDs) characterFormat.LocaleIdASCII).ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      else
      {
        string language = this.GetLanguage(characterFormat.LocaleIdASCII);
        if (language != "en-US")
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", language);
      }
    }
    if (flag2)
    {
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) characterFormat.LocaleIdFarEast))
      {
        string str = ((LocaleIDs) characterFormat.LocaleIdFarEast).ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "eastAsia", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      else
      {
        string language = this.GetLanguage(characterFormat.LocaleIdFarEast);
        if (language != "en-US")
          this.m_writer.WriteAttributeString("w", "eastAsia", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", language);
      }
    }
    if (flag3)
    {
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) characterFormat.LocaleIdBidi))
      {
        string str = ((LocaleIDs) characterFormat.LocaleIdBidi).ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "bidi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      else
      {
        string language = this.GetLanguage(characterFormat.LocaleIdBidi);
        if (language != "en-US")
          this.m_writer.WriteAttributeString("w", "bidi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", language);
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeLanguage(
    WCharacterFormat characterFormat,
    Dictionary<int, object> oldPropertiesHash)
  {
    bool flag1 = oldPropertiesHash.ContainsKey(73);
    bool flag2 = oldPropertiesHash.ContainsKey(74);
    bool flag3 = oldPropertiesHash.ContainsKey(75);
    if (!flag1 && !flag2 && !flag3)
      return;
    this.m_writer.WriteStartElement("lang", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (flag1)
    {
      short key = (short) oldPropertiesHash[73];
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) key))
      {
        string str = ((LocaleIDs) key).ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      else
      {
        string language = this.GetLanguage(key);
        if (language != "en-US")
          this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", language);
      }
    }
    if (flag2)
    {
      short key = (short) oldPropertiesHash[74];
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) key))
      {
        string str = ((LocaleIDs) key).ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "eastAsia", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      else
      {
        string language = this.GetLanguage(key);
        if (language != "en-US")
          this.m_writer.WriteAttributeString("w", "eastAsia", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", language);
      }
    }
    if (flag3)
    {
      short key = (short) oldPropertiesHash[75];
      if (System.Enum.IsDefined(typeof (LocaleIDs), (object) (int) key))
      {
        string str = ((LocaleIDs) key).ToString().Replace('_', '-');
        this.m_writer.WriteAttributeString("w", "bidi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", str);
      }
      else
      {
        string language = this.GetLanguage(key);
        if (language != "en-US")
          this.m_writer.WriteAttributeString("w", "bidi", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", language);
      }
    }
    this.m_writer.WriteEndElement();
  }

  private void SerializeBoolProperty(string tag, bool value)
  {
    this.m_writer.WriteStartElement(tag, this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (!value)
      this.m_writer.WriteAttributeString("val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
    this.m_writer.WriteEndElement();
  }

  private WParagraphFormat GetBaseFormat(WParagraphFormat format)
  {
    if (format != null && format.IsContainFrameKey() || format.BaseFormat == null)
      return format;
    format = format.BaseFormat as WParagraphFormat;
    format = this.GetBaseFormat(format);
    return format;
  }

  private void SerializeContentTypes(string type)
  {
    MemoryStream memoryStream = new MemoryStream();
    this.m_writer = this.CreateWriter((Stream) memoryStream);
    this.m_writer.WriteStartElement("Types", "http://schemas.openxmlformats.org/package/2006/content-types");
    this.SerializeDefaultContentType(memoryStream, "rels", "application/vnd.openxmlformats-package.relationships+xml");
    bool flag = false;
    if (this.AltChunkContentTypes.Count > 0)
    {
      string empty = string.Empty;
      foreach (string key in this.AltChunkContentTypes.Keys)
      {
        if (this.AltChunkContentTypes[key] == "application/xml")
          flag = true;
      }
    }
    if (!flag)
      this.SerializeDefaultContentType(memoryStream, "xml", "application/xml");
    if (this.m_hasEmbedFonts && !string.IsNullOrEmpty(type))
      this.SerializeDefaultContentType(memoryStream, type, "application/vnd.openxmlformats-officedocument.obfuscatedFont");
    if (this.m_hasImages || this.PictureBullets.Count > 0 || this.m_hasOleObject || this.m_hasMetafiles)
    {
      this.SerializeDefaultContentType(memoryStream, "png", "image/png");
      this.SerializeDefaultContentType(memoryStream, "bmp", "image/bmp");
      this.SerializeDefaultContentType(memoryStream, "emf", "image/x-emf");
      this.SerializeDefaultContentType(memoryStream, "wmf", "image/x-wmf");
      this.SerializeDefaultContentType(memoryStream, "gif", "image/gif");
      this.SerializeDefaultContentType(memoryStream, "ico", "image/x-icon");
      this.SerializeDefaultContentType(memoryStream, "tif", "image/tiff");
      this.SerializeDefaultContentType(memoryStream, "tiff", "image/tiff");
      this.SerializeDefaultContentType(memoryStream, "jpeg", "image/jpeg");
      this.SerializeDefaultContentType(memoryStream, "jpg", "image/jpeg");
      this.SerializeDefaultContentType(memoryStream, "svg", "image/svg+xml");
    }
    if (this.m_document.HasMacros && this.IsMacroEnabled && !this.m_isSkipBinExtension)
    {
      this.SerializeDefaultContentType(memoryStream, "bin", "application/vnd.ms-office.vbaProject");
      this.m_isSkipBinExtension = true;
    }
    if (this.m_hasOleObject)
      this.SerializeOleContentType(memoryStream);
    if (this.m_hasChart)
      this.SerializeDefaultContentType(memoryStream, "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    if (this.AltChunkContentTypes.Count > 0)
    {
      string empty = string.Empty;
      foreach (string key in this.AltChunkContentTypes.Keys)
      {
        string chunkContentType = this.AltChunkContentTypes[key];
        this.SerializeDefaultContentType(memoryStream, key, chunkContentType);
      }
    }
    if (this.IsMacroEnabled)
    {
      if (this.m_document.SaveFormatType.ToString().EndsWith("Dotm"))
        this.SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.ms-word.template.macroEnabledTemplate.main+xml");
      else
        this.SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.ms-word.document.macroEnabled.main+xml");
      if (this.m_document.HasMacros)
      {
        this.SerializeOverrideContentType(memoryStream, "word\\vbaData.xml", "application/vnd.ms-word.vbaData+xml");
        if (this.m_document.VbaProjectSignature != null)
          this.SerializeOverrideContentType(memoryStream, "word\\vbaProjectSignature.bin", "application/vnd.ms-office.vbaProjectSignature");
        if (this.m_document.VbaProjectSignatureAgile != null)
          this.SerializeOverrideContentType(memoryStream, "word\\vbaProjectSignatureAgile.bin", "application/vnd.ms-office.vbaProjectSignatureAgile");
      }
    }
    else if (this.m_document.SaveFormatType.ToString().EndsWith("Dotx"))
      this.SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml");
    else
      this.SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml");
    if (this.m_document.CustomXMLContainer != null)
    {
      foreach (Part part in this.m_document.CustomXMLContainer.XmlParts.Values)
      {
        if (part.Name.StartsWithExt("itemProps"))
        {
          string partName = "customXml\\" + part.Name;
          string contentType = this.GetContentType(part.Name);
          this.SerializeOverrideContentType(memoryStream, partName, contentType);
        }
      }
    }
    if (this.m_document.CustomXmlPartContainer != null)
    {
      foreach (Part part in this.m_document.CustomXmlPartContainer.XmlParts.Values)
      {
        if (part.Name.StartsWithExt("itemProps"))
        {
          string partName = "customXml\\" + part.Name;
          string contentType = this.GetContentType(part.Name);
          this.SerializeOverrideContentType(memoryStream, partName, contentType);
        }
      }
    }
    if (this.HasNumbering)
      this.SerializeOverrideContentType(memoryStream, "word\\numbering.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml");
    if (this.m_hasComment)
      this.SerializeOverrideContentType(memoryStream, "word\\comments.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml");
    if (this.m_hasComment && this.m_document.CommentsEx.Count > 0)
      this.SerializeOverrideContentType(memoryStream, "word\\commentsExtended.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.commentsExtended+xml");
    if (this.HasEndnote)
      this.SerializeOverrideContentType(memoryStream, "word\\endnotes.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml");
    if (this.HasFootnote)
      this.SerializeOverrideContentType(memoryStream, "word\\footnotes.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml");
    if (this.HasFontTable)
      this.SerializeOverrideContentType(memoryStream, "word\\fontTable.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml");
    if (this.m_hasDiagrams)
      this.SerializeDiagramType(this.m_document.DocxPackage, memoryStream);
    if (this.AltChunkTargets.Count > 0)
      this.AddAlternateChunkItem(this.AltChunkTargets);
    if (this.FootnoteAlternateChunks.Count > 0)
      this.AddAlternateChunkItem(this.FootnoteAlternateChunks);
    if (this.EndnoteAlternateChunks.Count > 0)
      this.AddAlternateChunkItem(this.EndnoteAlternateChunks);
    if (this.CommentAlternateChunks.Count > 0)
      this.AddAlternateChunkItem(this.CommentAlternateChunks);
    if (this.HeaderFooterAlternateChunks.Count > 0)
    {
      foreach (Dictionary<string, string> altchunkItems in this.m_headerFooterAlternateChunks.Values)
        this.AddAlternateChunkItem(altchunkItems);
    }
    this.SerializeOverrideContentType(memoryStream, "word\\styles.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml");
    this.SerializeOverrideContentType(memoryStream, "word\\settings.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml");
    this.SerializeOverrideContentType(memoryStream, "word\\theme\\theme1.xml", "application/vnd.openxmlformats-officedocument.theme+xml");
    this.SerializeOverrideContentType(memoryStream, "docProps\\core.xml", "application/vnd.openxmlformats-package.core-properties+xml");
    this.SerializeOverrideContentType(memoryStream, "docProps\\app.xml", "application/vnd.openxmlformats-officedocument.extended-properties+xml");
    if (this.m_document.CustomDocumentProperties != null && this.m_document.CustomDocumentProperties.Count > 0)
      this.SerializeOverrideContentType(memoryStream, "docProps\\custom.xml", "application/vnd.openxmlformats-officedocument.custom-properties+xml");
    if (this.m_hasChart)
      this.SerializeChartContentType(memoryStream);
    this.SerializeHFContentTypes(memoryStream);
    this.WriteXmlItemsContentTypes(memoryStream);
    this.m_writer.WriteEndElement();
    this.m_writer.Flush();
    this.m_archive.AddItem("[Content_Types].xml", (Stream) memoryStream, false, FileAttributes.Archive);
  }

  private void AddAlternateChunkItem(Dictionary<string, string> altchunkItems)
  {
    foreach (string key in altchunkItems.Keys)
    {
      Part part = this.m_document.DocxPackage.FindPart("word/" + altchunkItems[key]) ?? this.m_document.DocxPackage.FindPart(altchunkItems[key]);
      if (this.m_archive.Find(altchunkItems[key].Replace("\\", "/")) == -1)
        this.m_archive.AddItem(altchunkItems[key], part.DataStream, false, FileAttributes.Archive);
    }
  }

  private void SerializeDiagramType(Package wordPackage, MemoryStream stream)
  {
    if (!this.m_hasDiagrams)
      return;
    PartContainer partContainer = wordPackage.FindPartContainer("word/diagrams/");
    if (partContainer == null)
      return;
    foreach (Part part in partContainer.XmlParts.Values)
    {
      string partName = "word/diagrams/" + part.Name;
      string contentType = this.GetContentType(part.Name);
      this.SerializeOverrideContentType(stream, partName, contentType);
    }
  }

  private string GetContentType(string partName)
  {
    if (this.StartsWithExt(partName, "data"))
      return "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml";
    if (this.StartsWithExt(partName, "colors") || this.StartsWithExt(partName, "quickStyle"))
      return "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml";
    return this.StartsWithExt(partName, "item") ? "application/vnd.openxmlformats-officedocument.customXmlProperties+xml" : "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml";
  }

  private void SerializeOleContentType(MemoryStream contentStream)
  {
    foreach (string oleContentType in this.OleContentTypes)
    {
      switch (oleContentType)
      {
        case "application/vnd.ms-excel":
          this.SerializeDefaultContentType(contentStream, "xls", oleContentType);
          continue;
        case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
          if (!this.m_hasChart)
          {
            this.SerializeDefaultContentType(contentStream, "xlsx", oleContentType);
            continue;
          }
          continue;
        case "application/vnd.ms-powerpoint":
          this.SerializeDefaultContentType(contentStream, "ppt", oleContentType);
          continue;
        case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
          this.SerializeDefaultContentType(contentStream, "pptx", oleContentType);
          continue;
        case "application/msword":
          this.SerializeDefaultContentType(contentStream, "doc", oleContentType);
          continue;
        case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
          this.SerializeDefaultContentType(contentStream, "docx", oleContentType);
          continue;
        case "application/vnd.ms-word.document.macroEnabled.12":
          this.SerializeDefaultContentType(contentStream, "docm", oleContentType);
          continue;
        case "application/vnd.ms-excel.sheet.binary.macroEnabled.12":
          this.SerializeDefaultContentType(contentStream, "xlsb", oleContentType);
          continue;
        case "application/vnd.ms-excel.sheet.macroEnabled.12":
          this.SerializeDefaultContentType(contentStream, "xlsm", oleContentType);
          continue;
        case "application/vnd.ms-powerpoint.presentation.macroEnabled.12":
          this.SerializeDefaultContentType(contentStream, "pptm", oleContentType);
          continue;
        case "application/vnd.ms-powerpoint.slide.macroEnabled.12":
          this.SerializeDefaultContentType(contentStream, "sldm", oleContentType);
          continue;
        case "application/vnd.openxmlformats-officedocument.presentationml.slide":
          this.SerializeDefaultContentType(contentStream, "sldx", oleContentType);
          continue;
        case "application/vnd.visio":
          this.SerializeDefaultContentType(contentStream, "vsd", oleContentType);
          continue;
        case "application/vnd.ms-visio.drawing":
          this.SerializeDefaultContentType(contentStream, "vsdx", oleContentType);
          continue;
        default:
          if (!this.m_isSkipBinExtension)
          {
            this.SerializeDefaultContentType(contentStream, "bin", oleContentType);
            this.m_isSkipBinExtension = true;
            continue;
          }
          continue;
      }
    }
  }

  private void SerializeHFContentTypes(MemoryStream stream)
  {
    this.SerializeHeaderFootersContentType(HeaderFooterType.EvenFooter, stream);
    this.SerializeHeaderFootersContentType(HeaderFooterType.EvenHeader, stream);
    this.SerializeHeaderFootersContentType(HeaderFooterType.FirstPageFooter, stream);
    this.SerializeHeaderFootersContentType(HeaderFooterType.FirstPageHeader, stream);
    this.SerializeHeaderFootersContentType(HeaderFooterType.OddFooter, stream);
    this.SerializeHeaderFootersContentType(HeaderFooterType.OddHeader, stream);
  }

  private void SerializeHeaderFootersContentType(HeaderFooterType hfType, MemoryStream stream)
  {
    if (!this.HeadersFooters.ContainsKey(hfType))
      return;
    foreach (string key in this.HeadersFooters[hfType].Keys)
    {
      string partName;
      string contentType;
      if (hfType == HeaderFooterType.EvenHeader || hfType == HeaderFooterType.FirstPageHeader || hfType == HeaderFooterType.OddHeader)
      {
        partName = $"word\\header{key.Replace("rId", "")}.xml";
        contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml";
      }
      else
      {
        partName = $"word\\footer{key.Replace("rId", "")}.xml";
        contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml";
      }
      this.SerializeOverrideContentType(stream, partName, contentType);
    }
  }

  private void SerializeChartContentType(MemoryStream memoryStream)
  {
    this.m_chartColorStyleID = 0;
    this.m_chartStyleID = 0;
    this.m_chartDrawingID = 0;
    foreach (string key1 in this.ChartRelationId.Keys)
    {
      WChart wchart = this.ChartRelationId[key1];
      string partName1 = $"word/charts/chart{key1.Replace("rId", "")}.xml";
      string contentType1 = "application/vnd.openxmlformats-officedocument.drawingml.chart+xml";
      this.SerializeOverrideContentType(memoryStream, partName1, contentType1);
      foreach (string key2 in wchart.DocxProps.Keys)
      {
        if (key2.Contains("/chartStyle"))
        {
          string partName2 = $"word/charts/style{(object) ++this.m_chartStyleID}.xml";
          string contentType2 = "application/vnd.ms-office.chartstyle+xml";
          this.SerializeOverrideContentType(memoryStream, partName2, contentType2);
        }
        if (key2.Contains("/chartColorStyle"))
        {
          string partName3 = $"word/charts/colors{(object) ++this.m_chartColorStyleID}.xml";
          string contentType3 = "application/vnd.ms-office.chartcolorstyle+xml";
          this.SerializeOverrideContentType(memoryStream, partName3, contentType3);
        }
        if (key2.Contains("/chartUserShapes"))
        {
          string partName4 = $"word\\drawings\\drawing{(object) ++this.m_chartDrawingID}.xml";
          string contentType4 = "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml";
          this.SerializeOverrideContentType(memoryStream, partName4, contentType4);
        }
      }
    }
  }

  private void WriteXmlItemsContentTypes(MemoryStream stream)
  {
    if (this.ControlsPathNames.Count <= 0)
      return;
    if (!this.m_isSkipBinExtension)
    {
      this.SerializeDefaultContentType(stream, "bin", "application/vnd.ms-office.activeX");
      this.m_isSkipBinExtension = true;
    }
    int index = 0;
    for (int count = this.ControlsPathNames.Count; index < count; ++index)
    {
      if (this.ControlsPathNames[index].EndsWith("bin"))
        this.SerializeOverrideContentType(stream, this.ControlsPathNames[index], "application/vnd.ms-office.activeX");
      else
        this.SerializeOverrideContentType(stream, this.ControlsPathNames[index], "application/vnd.ms-office.activeX+xml");
    }
  }

  private void SerializeDefaultContentType(
    MemoryStream stream,
    string extension,
    string contentType)
  {
    this.m_writer.WriteStartElement("Default");
    this.m_writer.WriteAttributeString("Extension", extension);
    this.m_writer.WriteAttributeString("ContentType", contentType);
    this.m_writer.WriteEndElement();
  }

  private void SerializeOverrideContentType(
    MemoryStream stream,
    string partName,
    string contentType)
  {
    this.m_writer.WriteStartElement("Override");
    this.m_writer.WriteAttributeString("PartName", "/" + partName.Replace("\\", "/"));
    this.m_writer.WriteAttributeString("ContentType", contentType);
    this.m_writer.WriteEndElement();
  }

  private void SerializeGeneralRelations()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    this.ResetRelationShipID();
    this.m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
    this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument", "word\\document.xml");
    this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties", "docProps\\app.xml");
    this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties", "docProps\\core.xml");
    if (this.m_document.CustomDocumentProperties != null && this.m_document.CustomDocumentProperties.Count > 0)
      this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties", "docProps\\custom.xml");
    if (this.m_document.CustomUIPartContainer != null)
    {
      string name = this.m_document.CustomUIPartContainer.Name;
      foreach (KeyValuePair<string, Part> xmlPart in this.m_document.CustomUIPartContainer.XmlParts)
        this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), xmlPart.Key == "customUI14.xml" ? "http://schemas.microsoft.com/office/2007/relationships/ui/extensibility" : "http://schemas.microsoft.com/office/2006/relationships/ui/extensibility", name + xmlPart.Key);
    }
    if (this.m_document.UserCustomizationPartContainer != null)
      this.SerializeRelationShip((Stream) data, this.GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/ui/userCustomization", "userCustomization/customUI.xml");
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("_rels\\.rels", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeRelationShip(
    Stream stream,
    string relationshipID,
    string relationshipType,
    string targetPath)
  {
    this.m_writer.WriteStartElement("Relationship");
    this.m_writer.WriteAttributeString("Id", relationshipID);
    this.m_writer.WriteAttributeString("Type", relationshipType);
    if (relationshipType == "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" || this.StartsWithExt(targetPath, "http://") || this.StartsWithExt(targetPath, "https://") || this.StartsWithExt(targetPath, "file:///"))
    {
      if (!this.StartsWithExt(targetPath, "file:///"))
      {
        Uri result;
        if (Uri.TryCreate(targetPath, UriKind.Absolute, out result))
        {
          try
          {
            this.m_writer.WriteAttributeString("Target", result.AbsoluteUri);
            goto label_6;
          }
          catch
          {
            this.m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
            goto label_6;
          }
        }
      }
      this.m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
label_6:
      this.m_writer.WriteAttributeString("TargetMode", "External");
    }
    else
      this.m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
    this.m_writer.WriteEndElement();
  }

  private void SerializeRelationShip(
    string relationshipID,
    string relationshipType,
    string targetPath)
  {
    this.m_writer.WriteStartElement("Relationship");
    this.m_writer.WriteAttributeString("Id", relationshipID);
    this.m_writer.WriteAttributeString("Type", relationshipType);
    if (!this.StartsWithExt(targetPath, "file:///"))
    {
      Uri result;
      if (Uri.TryCreate(targetPath, UriKind.Absolute, out result))
      {
        try
        {
          this.m_writer.WriteAttributeString("Target", result.AbsoluteUri);
          goto label_5;
        }
        catch
        {
          this.m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
          goto label_5;
        }
      }
    }
    this.m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
label_5:
    this.m_writer.WriteAttributeString("TargetMode", "External");
    this.m_writer.WriteEndElement();
  }

  private void SerializeCoreProperties()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    BuiltinDocumentProperties documentProperties = this.m_document.BuiltinDocumentProperties;
    this.m_writer.WriteStartElement("cp", "coreProperties", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
    this.m_writer.WriteAttributeString("xmlns", "cp", (string) null, "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
    this.m_writer.WriteAttributeString("xmlns", "dc", (string) null, "http://purl.org/dc/elements/1.1/");
    this.m_writer.WriteAttributeString("xmlns", "dcterms", (string) null, "http://purl.org/dc/terms/");
    this.m_writer.WriteAttributeString("xmlns", "dcmitype", (string) null, "http://purl.org/dc/dcmitype/");
    this.m_writer.WriteAttributeString("xmlns", "xsi", (string) null, "http://www.w3.org/2001/XMLSchema-instance");
    if (documentProperties != null)
    {
      if (documentProperties.Title != null)
      {
        this.m_writer.WriteStartElement("dc", "title", "http://purl.org/dc/elements/1.1/");
        this.m_writer.WriteString(this.RemoveInvalidCharacters(documentProperties.Title));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Subject != null)
      {
        this.m_writer.WriteStartElement("dc", "subject", "http://purl.org/dc/elements/1.1/");
        this.m_writer.WriteString(documentProperties.Subject);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Author != null)
      {
        this.m_writer.WriteStartElement("dc", "creator", "http://purl.org/dc/elements/1.1/");
        this.m_writer.WriteString(documentProperties.Author);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Keywords != null)
      {
        this.m_writer.WriteStartElement("keywords", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
        this.m_writer.WriteString(documentProperties.Keywords);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Comments != null)
      {
        this.m_writer.WriteStartElement("dc", "description", "http://purl.org/dc/elements/1.1/");
        this.m_writer.WriteString(documentProperties.Comments);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.LastAuthor != null)
      {
        this.m_writer.WriteStartElement("lastModifiedBy", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
        this.m_writer.WriteString(documentProperties.LastAuthor);
        this.m_writer.WriteEndElement();
      }
      DateTime lastPrinted = documentProperties.LastPrinted;
      if (documentProperties.LastPrinted != DateTime.MinValue)
      {
        this.m_writer.WriteStartElement("lastPrinted", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
        this.m_writer.WriteString(documentProperties.LastPrinted.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", (IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.RevisionNumber != null)
      {
        this.m_writer.WriteStartElement("revision", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
        int num = 1;
        if (documentProperties.RevisionNumber != "NaN")
        {
          try
          {
            num = int.Parse(documentProperties.RevisionNumber);
          }
          catch
          {
          }
        }
        this.m_writer.WriteString(num.ToString());
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.CreateDate != DateTime.Now)
      {
        this.m_writer.WriteStartElement("dcterms", "created", "http://purl.org/dc/terms/");
        this.m_writer.WriteAttributeString("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance", "dcterms:W3CDTF");
        this.m_writer.WriteString(documentProperties.CreateDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", (IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.LastSaveDate != DateTime.Now)
      {
        this.m_writer.WriteStartElement("dcterms", "modified", "http://purl.org/dc/terms/");
        this.m_writer.WriteAttributeString("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance", "dcterms:W3CDTF");
        this.m_writer.WriteString(documentProperties.LastSaveDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", (IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Category != null)
      {
        this.m_writer.WriteStartElement("category", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
        this.m_writer.WriteString(documentProperties.Category);
        this.m_writer.WriteEndElement();
      }
      if (!string.IsNullOrEmpty(documentProperties.ContentStatus))
      {
        this.m_writer.WriteStartElement("contentStatus", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
        this.m_writer.WriteString(documentProperties.ContentStatus);
        this.m_writer.WriteEndElement();
      }
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("docProps\\core.xml", (Stream) data, false, FileAttributes.Archive);
  }

  private void SerializeCustomProperties()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    CustomDocumentProperties documentProperties = this.m_document.CustomDocumentProperties;
    this.m_writer.WriteStartElement("Properties", "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties");
    this.m_writer.WriteAttributeString("xmlns", "vt", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
    int num = 1;
    string empty1 = string.Empty;
    if (documentProperties != null)
    {
      foreach (string key in documentProperties.CustomHash.Keys)
      {
        string str = key;
        DocumentProperty documentProperty = documentProperties.CustomHash[key];
        if (!(str == "_PID_LINKBASE") && !(str == "_PID_HLINKS") && this.isValidType(documentProperty.PropertyType))
        {
          this.m_writer.WriteStartElement("property");
          this.m_writer.WriteAttributeString("fmtid", "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}");
          string empty2 = string.Empty;
          this.m_writer.WriteAttributeString("name", key);
          this.m_writer.WriteAttributeString("pid", (++num).ToString());
          switch (documentProperty.PropertyType)
          {
            case Syncfusion.CompoundFile.DocIO.PropertyType.Int32:
              this.m_writer.WriteStartElement("i4", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(documentProperty.Int32.ToString((IFormatProvider) CultureInfo.InvariantCulture));
              this.m_writer.WriteEndElement();
              break;
            case Syncfusion.CompoundFile.DocIO.PropertyType.Double:
              this.m_writer.WriteStartElement("r8", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(documentProperty.Double.ToString((IFormatProvider) CultureInfo.InvariantCulture));
              this.m_writer.WriteEndElement();
              break;
            case Syncfusion.CompoundFile.DocIO.PropertyType.Bool:
              this.m_writer.WriteStartElement("bool", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(XmlConvert.ToString(documentProperty.Boolean));
              this.m_writer.WriteEndElement();
              break;
            case Syncfusion.CompoundFile.DocIO.PropertyType.Int:
              this.m_writer.WriteStartElement("i4", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(documentProperty.Integer.ToString((IFormatProvider) CultureInfo.InvariantCulture));
              this.m_writer.WriteEndElement();
              break;
            case Syncfusion.CompoundFile.DocIO.PropertyType.AsciiString:
              this.m_writer.WriteStartElement("lpstr", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(this.ConvertToValidXmlString(documentProperty.Text));
              this.m_writer.WriteEndElement();
              break;
            case Syncfusion.CompoundFile.DocIO.PropertyType.String:
              this.m_writer.WriteStartElement("lpwstr", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(this.ConvertToValidXmlString(documentProperty.Text));
              this.m_writer.WriteEndElement();
              break;
            case Syncfusion.CompoundFile.DocIO.PropertyType.DateTime:
              this.m_writer.WriteStartElement("filetime", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
              this.m_writer.WriteString(documentProperty.ToDateTime().ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", (IFormatProvider) CultureInfo.InvariantCulture));
              this.m_writer.WriteEndElement();
              break;
          }
          this.m_writer.WriteEndElement();
        }
      }
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("docProps\\custom.xml", (Stream) data, true, FileAttributes.Archive);
  }

  private bool isValidType(Syncfusion.CompoundFile.DocIO.PropertyType type)
  {
    return type == Syncfusion.CompoundFile.DocIO.PropertyType.String || type == Syncfusion.CompoundFile.DocIO.PropertyType.AsciiString || type == Syncfusion.CompoundFile.DocIO.PropertyType.Int || type == Syncfusion.CompoundFile.DocIO.PropertyType.Int32 || type == Syncfusion.CompoundFile.DocIO.PropertyType.Double || type == Syncfusion.CompoundFile.DocIO.PropertyType.DateTime || type == Syncfusion.CompoundFile.DocIO.PropertyType.Bool;
  }

  private string ConvertToValidXmlString(string text)
  {
    string validXmlString = string.Empty;
    for (int index = 0; index < text.Length; ++index)
    {
      char character = text[index];
      validXmlString = !this.IsValidXmlChar((ushort) character) ? validXmlString + XmlConvert.EncodeName(character.ToString()) : validXmlString + character.ToString();
    }
    return validXmlString;
  }

  private bool IsValidXmlChar(ushort character)
  {
    if (character == (ushort) 9 || character == (ushort) 10 || character == (ushort) 13 || character >= (ushort) 32 /*0x20*/ && character <= (ushort) 55295)
      return true;
    return character >= (ushort) 57344 /*0xE000*/ && character <= (ushort) 65533;
  }

  private string RemoveInvalidCharacters(string inputStr)
  {
    if (inputStr == null)
      return (string) null;
    StringBuilder stringBuilder = new StringBuilder();
    foreach (char ch in inputStr)
    {
      if (ch < 'ý' && ch > '\u001F' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '–')
        stringBuilder.Append(ch);
    }
    return stringBuilder.ToString();
  }

  private void SerializeAppProperties()
  {
    MemoryStream data = new MemoryStream();
    if (!this.IsWord2003ML)
      this.m_writer = this.CreateWriter((Stream) data);
    BuiltinDocumentProperties documentProperties = this.m_document.BuiltinDocumentProperties;
    this.m_writer.WriteStartElement("Properties", "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties");
    this.m_writer.WriteAttributeString("xmlns", "vt", (string) null, this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
    if (documentProperties != null)
    {
      if (documentProperties.Template != null)
      {
        this.m_writer.WriteStartElement("Template");
        this.m_writer.WriteString(documentProperties.Template);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.TotalEditingTime != TimeSpan.MinValue)
      {
        this.m_writer.WriteStartElement("TotalTime");
        this.m_writer.WriteString(Math.Round(documentProperties.TotalEditingTime.TotalMinutes).ToString());
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.PageCount != int.MinValue)
      {
        this.m_writer.WriteStartElement("Pages");
        this.m_writer.WriteString(documentProperties.PageCount.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.WordCount != int.MinValue)
      {
        this.m_writer.WriteStartElement("Words");
        this.m_writer.WriteString(documentProperties.WordCount.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.CharCount != int.MinValue)
      {
        this.m_writer.WriteStartElement("Characters");
        this.m_writer.WriteString(documentProperties.CharCount.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.ApplicationName != null)
      {
        this.m_writer.WriteStartElement("Application");
        this.m_writer.WriteString(documentProperties.ApplicationName);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.DocSecurity != int.MinValue)
      {
        this.m_writer.WriteStartElement("DocSecurity");
        this.m_writer.WriteString(documentProperties.DocSecurity.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.LinesCount != int.MinValue)
      {
        this.m_writer.WriteStartElement("Lines");
        this.m_writer.WriteString(documentProperties.LinesCount.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.ParagraphCount != int.MinValue)
      {
        this.m_writer.WriteStartElement("Paragraphs");
        this.m_writer.WriteString(documentProperties.ParagraphCount.ToString((IFormatProvider) CultureInfo.InvariantCulture));
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Manager != null)
      {
        this.m_writer.WriteStartElement("Manager");
        this.m_writer.WriteString(documentProperties.Manager);
        this.m_writer.WriteEndElement();
      }
      if (documentProperties.Company != null)
      {
        this.m_writer.WriteStartElement("Company");
        this.m_writer.WriteString(documentProperties.Company);
        this.m_writer.WriteEndElement();
      }
      this.m_writer.WriteStartElement("AppVersion");
      if (this.IsWord2007)
        this.m_writer.WriteString("12.0000");
      else if (this.IsWord2010)
        this.m_writer.WriteString("14.0000");
      else if (this.IsWord2013)
        this.m_writer.WriteString("15.0000");
      else
        this.m_writer.WriteString("16.0000");
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
    if (this.IsWord2003ML)
      return;
    this.m_writer.Flush();
    this.m_archive.AddItem("docProps\\app.xml", (Stream) data, true, FileAttributes.Archive);
  }

  internal static string ReplaceInvalidSurrogateCharacters(string text)
  {
    for (int index = 0; index < text.Length; ++index)
    {
      int num1 = (int) text[index];
      if (num1 >= 55296 && num1 <= 56319)
      {
        if (index + 1 != text.Length)
        {
          int num2 = (int) text[index + 1];
          if (num2 < 56320 || num2 > 57343 /*0xDFFF*/)
          {
            text = text.Replace(text[index].ToString(), "");
            --index;
          }
        }
        else
          text = text.Replace(text[index].ToString(), "");
      }
      else if (num1 >= 56320 && num1 <= 57343 /*0xDFFF*/)
      {
        if (index > 0)
        {
          int num3 = (int) text[index - 1];
          if (num3 < 55296 || num3 > 56319)
            text = text.Replace(text[index].ToString(), "");
          else
            ++index;
        }
        else
          text = text.Replace(text[index].ToString(), "");
        --index;
      }
    }
    return text;
  }

  private bool IsDefaultStyle(Style style)
  {
    string name = style.Name;
    return name == "Normal" && style.StyleType == StyleType.ParagraphStyle || name == "Default Paragraph Font" && style.StyleType == StyleType.CharacterStyle || (name == "Table Normal" || name == "Normal Table") && style.StyleType == StyleType.TableStyle || name == "No List" && style.TypeCode == WordStyleType.ListStyle || style.StyleId == 0;
  }

  private string GetTabLeader(TabLeader tabLeader)
  {
    switch (tabLeader)
    {
      case TabLeader.Dotted:
        return "dot";
      case TabLeader.Hyphenated:
        return "hyphen";
      case TabLeader.Single:
        return "underscore";
      case TabLeader.Heavy:
        return "heavy";
      default:
        return "none";
    }
  }

  private string GetTabJustification(TabJustification tabJustification)
  {
    switch (tabJustification)
    {
      case TabJustification.Left:
        return !this.IsStrict ? "left" : "start";
      case TabJustification.Centered:
        return "center";
      case TabJustification.Right:
        return !this.IsStrict ? "right" : "end";
      case TabJustification.Decimal:
        return "decimal";
      case TabJustification.Bar:
        return "bar";
      case TabJustification.List:
        return "num";
      default:
        return "clear";
    }
  }

  private int GetListId(WListFormat lf)
  {
    int listId = 0;
    if (lf.LFOStyleName == string.Empty || lf.CurrentListStyle.Name != string.Empty)
    {
      foreach (ListStyle listStyle in (CollectionImpl) lf.Document.ListStyles)
      {
        if (!(listStyle.Name == lf.CustomStyleName))
          ++listId;
        else
          break;
      }
    }
    if (lf.LFOStyleName != null)
    {
      if (this.m_lstOverId == 0)
        this.m_lstOverId = lf.Document.ListStyles.Count + 1;
      if (!this.ListStyleReferences.ContainsKey(listId))
      {
        listId = this.AddListOverride(listId, lf.LFOStyleName);
      }
      else
      {
        Dictionary<int, string> listStyleReference = this.ListStyleReferences[listId];
        bool flag = false;
        foreach (int key in listStyleReference.Keys)
        {
          if (listStyleReference[key] == lf.LFOStyleName)
          {
            listId = key;
            flag = true;
            break;
          }
        }
        if (!flag)
          listId = this.AddListOverride(listId, lf.LFOStyleName);
      }
    }
    else
      ++listId;
    return listId;
  }

  private int AddListOverride(int listId, string lfoStyleName)
  {
    if (!this.ListStyleReferences.ContainsKey(listId))
      this.ListStyleReferences.Add(listId, new Dictionary<int, string>());
    this.ListStyleReferences[listId].Add(this.m_lstOverId, lfoStyleName);
    int lstOverId = this.m_lstOverId;
    ++this.m_lstOverId;
    return lstOverId;
  }

  private void SerializeNumPr(int listId, int listLevel)
  {
    this.m_writer.WriteStartElement("numPr", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
    if (listLevel != -1)
    {
      this.m_writer.WriteStartElement("ilvl", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.ToString());
      this.m_writer.WriteEndElement();
    }
    if (listId != -1)
    {
      this.m_writer.WriteStartElement("numId", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
      this.m_writer.WriteAttributeString("w", "val", this.IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listId.ToString());
      this.m_writer.WriteEndElement();
    }
    this.m_writer.WriteEndElement();
  }

  private bool HasFont(Dictionary<int, object> oldPropertiesHash)
  {
    return oldPropertiesHash.ContainsKey(2) || oldPropertiesHash.ContainsKey(68) || oldPropertiesHash.ContainsKey(69) || oldPropertiesHash.ContainsKey(70) || oldPropertiesHash.ContainsKey(61) || oldPropertiesHash.ContainsKey(72);
  }

  private bool HasFont(WCharacterFormat characterFormat)
  {
    return characterFormat.HasValue(2) || characterFormat.HasValue(68) || characterFormat.HasValue(69) || characterFormat.HasValue(70) || characterFormat.HasValue(61) || characterFormat.HasValue(72) || characterFormat.Document != null && characterFormat.Document.GrammarSpellingData == null && characterFormat.HasKey(0);
  }

  private XmlWriter CreateWriter(Stream data)
  {
    XmlWriterSettings settings = new XmlWriterSettings();
    XmlWriter writer = XmlWriter.Create(data, settings);
    writer.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"");
    return writer;
  }

  private XmlReader CreateReader(Stream stream)
  {
    stream.Position = 0L;
    XmlReader reader = XmlReader.Create(stream);
    reader.Read();
    while (reader.NodeType == XmlNodeType.XmlDeclaration)
      reader.Read();
    return reader;
  }

  private void ResetRelationShipID() => this.m_relationShipID = 0;

  private string GetNextRelationShipID() => $"rId{++this.m_relationShipID}";

  private int GetNextID() => ++this.m_id;

  private string GetTextureStyle(TextureStyle texttureStyle)
  {
    switch (texttureStyle)
    {
      case TextureStyle.TextureSolid:
        return "solid";
      case TextureStyle.Texture5Percent:
      case TextureStyle.Texture2Pt5Percent:
      case TextureStyle.Texture7Pt5Percent:
        return "pct5";
      case TextureStyle.Texture10Percent:
        return "pct10";
      case TextureStyle.Texture20Percent:
      case TextureStyle.Texture22Pt5Percent:
        return "pct20";
      case TextureStyle.Texture25Percent:
      case TextureStyle.Texture27Pt5Percent:
        return "pct25";
      case TextureStyle.Texture30Percent:
      case TextureStyle.Texture32Pt5Percent:
        return "pct30";
      case TextureStyle.Texture40Percent:
      case TextureStyle.Texture42Pt5Percent:
        return "pct40";
      case TextureStyle.Texture50Percent:
      case TextureStyle.Texture52Pt5Percent:
        return "pct50";
      case TextureStyle.Texture60Percent:
        return "pct60";
      case TextureStyle.Texture70Percent:
      case TextureStyle.Texture72Pt5Percent:
        return "pct70";
      case TextureStyle.Texture75Percent:
      case TextureStyle.Texture77Pt5Percent:
        return "pct75";
      case TextureStyle.Texture80Percent:
      case TextureStyle.Texture82Pt5Percent:
        return "pct80";
      case TextureStyle.Texture90Percent:
      case TextureStyle.Texture92Pt5Percent:
        return "pct90";
      case TextureStyle.TextureDarkHorizontal:
        return "horzStripe";
      case TextureStyle.TextureDarkVertical:
        return "vertStripe";
      case TextureStyle.TextureDarkDiagonalDown:
        return "reverseDiagStripe";
      case TextureStyle.TextureDarkDiagonalUp:
        return "diagStripe";
      case TextureStyle.TextureDarkCross:
        return "horzCross";
      case TextureStyle.TextureDarkDiagonalCross:
        return "diagCross";
      case TextureStyle.TextureHorizontal:
        return "thinHorzStripe";
      case TextureStyle.TextureVertical:
        return "thinVertStripe";
      case TextureStyle.TextureDiagonalDown:
        return "thinReverseDiagStripe";
      case TextureStyle.TextureDiagonalUp:
        return "thinDiagStripe";
      case TextureStyle.TextureCross:
        return "thinHorzCross";
      case TextureStyle.TextureDiagonalCross:
        return "thinDiagCross";
      case TextureStyle.Texture12Pt5Percent:
        return "pct12";
      case TextureStyle.Texture15Percent:
      case TextureStyle.Texture17Pt5Percent:
        return "pct15";
      case TextureStyle.Texture35Percent:
        return "pct35";
      case TextureStyle.Texture37Pt5Percent:
        return "pct37";
      case TextureStyle.Texture45Percent:
      case TextureStyle.Texture47Pt5Percent:
        return "pct45";
      case TextureStyle.Texture55Percent:
      case TextureStyle.Texture57Pt5Percent:
        return "pct55";
      case TextureStyle.Texture62Pt5Percent:
        return "pct62";
      case TextureStyle.Texture65Percent:
      case TextureStyle.Texture67Pt5Percent:
        return "pct65";
      case TextureStyle.Texture85Percent:
        return "pct85";
      case TextureStyle.Texture87Pt5Percent:
        return "pct87";
      case TextureStyle.Texture95Percent:
      case TextureStyle.Texture97Pt5Percent:
        return "pct95";
      case TextureStyle.TextureNil:
        return "nil";
      default:
        return "clear";
    }
  }

  private string GetBorderStyle(BorderStyle borderStyle)
  {
    switch (borderStyle)
    {
      case BorderStyle.None:
        return "none";
      case BorderStyle.Single:
      case BorderStyle.Hairline:
        return "single";
      case BorderStyle.Thick:
        return "thick";
      case BorderStyle.Double:
        return "double";
      case (BorderStyle) 4:
        return "candyCorn";
      case BorderStyle.Dot:
        return "dotted";
      case BorderStyle.DashLargeGap:
        return "dashed";
      case BorderStyle.DotDash:
        return "dotDash";
      case BorderStyle.DotDotDash:
        return "dotDotDash";
      case BorderStyle.Triple:
        return "triple";
      case BorderStyle.ThinThickSmallGap:
        return "thinThickSmallGap";
      case BorderStyle.ThinThinSmallGap:
        return "thickThinSmallGap";
      case BorderStyle.ThinThickThinSmallGap:
        return "thinThickThinSmallGap";
      case BorderStyle.ThinThickMediumGap:
        return "thinThickMediumGap";
      case BorderStyle.ThickThinMediumGap:
        return "thickThinMediumGap";
      case BorderStyle.ThickThickThinMediumGap:
        return "thinThickThinMediumGap";
      case BorderStyle.ThinThickLargeGap:
        return "thinThickLargeGap";
      case BorderStyle.ThickThinLargeGap:
        return "thickThinLargeGap";
      case BorderStyle.ThinThickThinLargeGap:
        return "thinThickThinLargeGap";
      case BorderStyle.Wave:
        return "wave";
      case BorderStyle.DoubleWave:
        return "doubleWave";
      case BorderStyle.DashSmallGap:
        return "dashSmallGap";
      case BorderStyle.DashDotStroker:
        return "dashDotStroked";
      case BorderStyle.Emboss3D:
        return "threeDEmboss";
      case BorderStyle.Engrave3D:
        return "threeDEngrave";
      case BorderStyle.Outset:
        return "outset";
      case BorderStyle.Inset:
        return "inset";
      case BorderStyle.ThinThinSmallGap | BorderStyle.ThickThickThinMediumGap:
        return "firecrackers";
      case BorderStyle.ThinThickThinSmallGap | BorderStyle.ThickThickThinMediumGap:
        return "rings";
      case BorderStyle.ThinThickMediumGap | BorderStyle.ThickThickThinMediumGap:
        return "mapPins";
      case BorderStyle.ThickThinMediumGap | BorderStyle.ThickThickThinMediumGap:
        return "confetti";
      case (BorderStyle) 32 /*0x20*/:
        return "creaturesButterfly";
      case (BorderStyle) 33:
        return "creaturesLadyBug";
      case (BorderStyle) 34:
        return "creaturesFish";
      case (BorderStyle) 35:
        return "birdsFlight";
      case (BorderStyle) 36:
        return "scaredCat";
      case (BorderStyle) 37:
        return "bats";
      case (BorderStyle) 38:
        return "flowersRoses";
      case (BorderStyle) 39:
        return "flowersRedRose";
      case (BorderStyle) 40:
        return "poinsettias";
      case (BorderStyle) 41:
        return "holly";
      case (BorderStyle) 42:
        return "flowersTiny";
      case (BorderStyle) 43:
        return "flowersPansy";
      case (BorderStyle) 44:
        return "flowersModern2";
      case (BorderStyle) 45:
        return "flowersModern1";
      case (BorderStyle) 46:
        return "whiteFlowers";
      case (BorderStyle) 47:
        return "vine";
      case (BorderStyle) 48 /*0x30*/:
        return "flowersDaisies";
      case (BorderStyle) 49:
        return "flowersBlockPrint";
      case (BorderStyle) 50:
        return "decoArchColor";
      case (BorderStyle) 51:
        return "fans";
      case (BorderStyle) 52:
        return "film";
      case (BorderStyle) 53:
        return "lightning1";
      case (BorderStyle) 54:
        return "compass";
      case (BorderStyle) 55:
        return "doubleD";
      case (BorderStyle) 56:
        return "classicalWave";
      case (BorderStyle) 57:
        return "shadowedSquares";
      case (BorderStyle) 58:
        return "twistedLines1";
      case (BorderStyle) 59:
        return "waveline";
      case (BorderStyle) 60:
        return "quadrants";
      case (BorderStyle) 61:
        return "checkedBarColor";
      case (BorderStyle) 62:
        return "swirligig";
      case (BorderStyle) 63 /*0x3F*/:
        return "pushPinNote1";
      case (BorderStyle) 64 /*0x40*/:
        return "pushPinNote2";
      case (BorderStyle) 65:
        return "pumpkin1";
      case (BorderStyle) 66:
        return "eggsBlack";
      case (BorderStyle) 67:
        return "cup";
      case (BorderStyle) 68:
        return "heartGray";
      case (BorderStyle) 69:
        return "gingerbreadMan";
      case (BorderStyle) 70:
        return "babyPacifier";
      case (BorderStyle) 71:
        return "babyRattle";
      case (BorderStyle) 72:
        return "cabins";
      case (BorderStyle) 73:
        return "houseFunky";
      case (BorderStyle) 74:
        return "starsBlack";
      case (BorderStyle) 75:
        return "snowflakes";
      case (BorderStyle) 76:
        return "snowflakeFancy";
      case (BorderStyle) 77:
        return "skyrocket";
      case (BorderStyle) 78:
        return "seattle";
      case (BorderStyle) 79:
        return "musicNotes";
      case (BorderStyle) 80 /*0x50*/:
        return "palmsBlack";
      case (BorderStyle) 81:
        return "mapleLeaf";
      case (BorderStyle) 82:
        return "paperClips";
      case (BorderStyle) 83:
        return "shorebirdTracks";
      case (BorderStyle) 84:
        return "people";
      case (BorderStyle) 85:
        return "peopleWaving";
      case (BorderStyle) 86:
        return "eclipsingSquares2";
      case (BorderStyle) 87:
        return "hypnotic";
      case (BorderStyle) 88:
        return "diamondsGray";
      case (BorderStyle) 89:
        return "decoArch";
      case (BorderStyle) 90:
        return "decoBlocks";
      case (BorderStyle) 91:
        return "circlesLines";
      case (BorderStyle) 92:
        return "papyrus";
      case (BorderStyle) 93:
        return "woodwork";
      case (BorderStyle) 94:
        return "weavingBraid";
      case (BorderStyle) 95:
        return "weavingRibbon";
      case (BorderStyle) 96 /*0x60*/:
        return "weavingAngles";
      case (BorderStyle) 97:
        return "archedScallops";
      case (BorderStyle) 98:
        return "safari";
      case (BorderStyle) 99:
        return "celticKnotwork";
      case (BorderStyle) 100:
        return "crazyMaze";
      case (BorderStyle) 101:
        return "eclipsingSquares1";
      case (BorderStyle) 102:
        return "birds";
      case (BorderStyle) 103:
        return "flowersTeacup";
      case (BorderStyle) 104:
        return "northwest";
      case (BorderStyle) 105:
        return "southwest";
      case (BorderStyle) 106:
        return "tribal6";
      case (BorderStyle) 107:
        return "tribal4";
      case (BorderStyle) 108:
        return "tribal3";
      case (BorderStyle) 109:
        return "tribal2";
      case (BorderStyle) 110:
        return "tribal5";
      case (BorderStyle) 111:
        return "xIllusions";
      case (BorderStyle) 112 /*0x70*/:
        return "zanyTriangles";
      case (BorderStyle) 113:
        return "pyramids";
      case (BorderStyle) 114:
        return "pyramidsAbove";
      case (BorderStyle) 115:
        return "confettiGrays";
      case (BorderStyle) 116:
        return "confettiOutline";
      case (BorderStyle) 117:
        return "confettiWhite";
      case (BorderStyle) 118:
        return "mosaic";
      case (BorderStyle) 119:
        return "lightning2";
      case (BorderStyle) 120:
        return "heebieJeebies";
      case (BorderStyle) 121:
        return "lightBulb";
      case (BorderStyle) 122:
        return "gradient";
      case (BorderStyle) 123:
        return "triangleParty";
      case (BorderStyle) 124:
        return "twistedLines2";
      case (BorderStyle) 125:
        return "moons";
      case (BorderStyle) 126:
        return "ovals";
      case (BorderStyle) 127 /*0x7F*/:
        return "doubleDiamonds";
      case (BorderStyle) 128 /*0x80*/:
        return "chainLink";
      case (BorderStyle) 129:
        return "triangles";
      case (BorderStyle) 130:
        return "tribal1";
      case (BorderStyle) 131:
        return "marqueeToothed";
      case (BorderStyle) 132:
        return "sharksTeeth";
      case (BorderStyle) 133:
        return "sawtooth";
      case (BorderStyle) 134:
        return "sawtoothGray";
      case (BorderStyle) 135:
        return "postageStamp";
      case (BorderStyle) 136:
        return "weavingStrips";
      case (BorderStyle) 137:
        return "zigZag";
      case (BorderStyle) 138:
        return "crossStitch";
      case (BorderStyle) 139:
        return "gems";
      case (BorderStyle) 140:
        return "circlesRectangles";
      case (BorderStyle) 141:
        return "cornerTriangles";
      case (BorderStyle) 142:
        return "creaturesInsects";
      case (BorderStyle) 143:
        return "zigZagStitch";
      case (BorderStyle) 144 /*0x90*/:
        return "checkered";
      case (BorderStyle) 145:
        return "checkedBarBlack";
      case (BorderStyle) 146:
        return "marquee";
      case (BorderStyle) 147:
        return "basicWhiteDots";
      case (BorderStyle) 148:
        return "basicWideMidline";
      case (BorderStyle) 149:
        return "basicWideOutline";
      case (BorderStyle) 150:
        return "basicWideInline";
      case (BorderStyle) 151:
        return "basicThinLines";
      case (BorderStyle) 152:
        return "basicWhiteDashes";
      case (BorderStyle) 153:
        return "basicWhiteSquares";
      case (BorderStyle) 154:
        return "basicBlackSquares";
      case (BorderStyle) 155:
        return "basicBlackDashes";
      case (BorderStyle) 156:
        return "basicBlackDots";
      case (BorderStyle) 157:
        return "starsTop";
      case (BorderStyle) 158:
        return "certificateBanner";
      case (BorderStyle) 159:
        return "handmade1";
      case (BorderStyle) 160 /*0xA0*/:
        return "handmade2";
      case (BorderStyle) 161:
        return "tornPaper";
      case (BorderStyle) 162:
        return "tornPaperBlack";
      case (BorderStyle) 163:
        return "couponCutoutDashes";
      case (BorderStyle) 164:
        return "couponCutoutDots";
      case BorderStyle.TwistedLines1:
        return "twistedLines1";
      case BorderStyle.Cleared:
        return "nil";
      default:
        return "single";
    }
  }

  private string GetUnderlineStyle(UnderlineStyle underlineStyle)
  {
    switch (underlineStyle)
    {
      case UnderlineStyle.Single:
        return "single";
      case UnderlineStyle.Words:
        return "words";
      case UnderlineStyle.Double:
        return "double";
      case UnderlineStyle.Dotted:
        return "dotted";
      case UnderlineStyle.Thick:
        return "thick";
      case UnderlineStyle.Dash:
        return "dash";
      case UnderlineStyle.DotDash:
        return "dotDash";
      case UnderlineStyle.DotDotDash:
        return "dotDotDash";
      case UnderlineStyle.Wavy:
        return "wave";
      case UnderlineStyle.DottedHeavy:
        return "dottedHeavy";
      case UnderlineStyle.DashHeavy:
        return "dashedHeavy";
      case UnderlineStyle.DotDashHeavy:
        return "dashDotHeavy";
      case UnderlineStyle.DotDotDashHeavy:
        return "dashDotDotHeavy";
      case UnderlineStyle.WavyHeavy:
        return "wavyHeavy";
      case UnderlineStyle.DashLong:
        return "dashLong";
      case UnderlineStyle.WavyDouble:
        return "wavyDouble";
      case UnderlineStyle.DashLongHeavy:
        return "dashLongHeavy";
      default:
        return "none";
    }
  }

  private string GetTextEffect(TextEffect textEffect)
  {
    switch (textEffect)
    {
      case TextEffect.LasVegasLights:
        return "lights";
      case TextEffect.BlinkingBackground:
        return "blinkBackground";
      case TextEffect.SparkleText:
        return "sparkle";
      case TextEffect.MarchingBlackAnts:
        return "antsBlack";
      case TextEffect.MarchingRedAnts:
        return "antsRed";
      case TextEffect.Shimmer:
        return "shimmer";
      default:
        return "none";
    }
  }

  private string GetEmphasisType(EmphasisType emphasisType)
  {
    switch (emphasisType)
    {
      case EmphasisType.Dot:
        return "dot";
      case EmphasisType.Comma:
        return "comma";
      case EmphasisType.Circle:
        return "circle";
      case EmphasisType.UnderDot:
        return "underDot";
      default:
        return "none";
    }
  }

  private string GetHighlightColor(Color color)
  {
    if (color.ToArgb() == Color.Black.ToArgb())
      return "black";
    if (color.ToArgb() == Color.Blue.ToArgb())
      return "blue";
    if (color.ToArgb() == Color.Cyan.ToArgb())
      return "cyan";
    if (color.ToArgb() == Color.DarkBlue.ToArgb())
      return "darkBlue";
    if (color.ToArgb() == Color.DarkCyan.ToArgb())
      return "darkCyan";
    if (color.ToArgb() == Color.DarkGray.ToArgb() || color == Color.FromArgb(0, 128 /*0x80*/, 128 /*0x80*/, 128 /*0x80*/))
      return "darkGray";
    if (color.ToArgb() == Color.DarkGreen.ToArgb())
      return "darkGreen";
    if (color.ToArgb() == Color.DarkMagenta.ToArgb())
      return "darkMagenta";
    if (color.ToArgb() == Color.DarkRed.ToArgb())
      return "darkRed";
    if (color.ToArgb() == Color.Green.ToArgb())
      return "green";
    if (color.ToArgb() == Color.Gold.ToArgb())
      return "darkYellow";
    if (color.ToArgb() == Color.LightGray.ToArgb())
      return "lightGray";
    if (color.ToArgb() == Color.Magenta.ToArgb())
      return "magenta";
    if (color.ToArgb() == Color.Red.ToArgb())
      return "red";
    if (color.ToArgb() == Color.White.ToArgb())
      return "white";
    return color.ToArgb() == Color.Yellow.ToArgb() ? "yellow" : "none";
  }

  public string ToString(float value)
  {
    return ((int) Math.Round((double) value)).ToString((IFormatProvider) CultureInfo.InvariantCulture);
  }

  private string GetRGBCode(Color color)
  {
    return color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2");
  }

  private float GetDefFontSize(WordDocument doc, short key)
  {
    Style byName = doc.Styles.FindByName("Default Paragraph Font") as Style;
    doc.Styles.FindByName("Normal");
    float defFontSize = 0.0f;
    if (byName != null && byName.CharacterFormat.HasValue((int) key))
      defFontSize = byName.CharacterFormat.FontSize;
    return defFontSize;
  }

  private string GetPatternType(WListLevel listLevel)
  {
    string empty = string.Empty;
    string patternType;
    switch (listLevel.PatternType)
    {
      case ListPatternType.Arabic:
        patternType = "decimal";
        break;
      case ListPatternType.UpRoman:
        patternType = "upperRoman";
        break;
      case ListPatternType.LowRoman:
        patternType = "lowerRoman";
        break;
      case ListPatternType.UpLetter:
        patternType = "upperLetter";
        break;
      case ListPatternType.LowLetter:
        patternType = "lowerLetter";
        break;
      case ListPatternType.Ordinal:
        patternType = "ordinal";
        break;
      case ListPatternType.Number:
        patternType = "cardinalText";
        break;
      case ListPatternType.OrdinalText:
        patternType = "ordinalText";
        break;
      case ListPatternType.KanjiDigit:
        patternType = "japaneseCounting";
        break;
      case ListPatternType.FarEast:
        patternType = "aiueoFullWidth";
        break;
      case ListPatternType.LeadingZero:
        patternType = "decimalZero";
        break;
      case ListPatternType.Bullet:
        patternType = "bullet";
        break;
      case ListPatternType.ChineseCountingThousand:
        patternType = "chineseCountingThousand";
        break;
      case ListPatternType.Special:
        patternType = "russianLower";
        break;
      default:
        patternType = "none";
        break;
    }
    return patternType;
  }

  private char GetListSymbol(int level)
  {
    switch (level)
    {
      case 1:
        return char.MinValue;
      case 2:
        return '\u0001';
      case 3:
        return '\u0002';
      case 4:
        return '\u0003';
      case 5:
        return '\u0004';
      case 6:
        return '\u0005';
      case 7:
        return '\u0006';
      case 8:
        return '\a';
      default:
        return '\b';
    }
  }

  internal static string UpdateNumberPrefix(string prefix)
  {
    return prefix.Replace("\0", "%1").Replace("\u0001", "%2").Replace("\u0002", "%3").Replace("\u0003", "%4").Replace("\u0004", "%5").Replace("\u0005", "%6").Replace("\u0006", "%7").Replace("\a", "%8").Replace("\b", "%9");
  }

  private string GetPageNumType(PageNumberStyle pageNumberStyle)
  {
    switch (pageNumberStyle)
    {
      case PageNumberStyle.RomanUpper:
        return "upperRoman";
      case PageNumberStyle.RomanLower:
        return "lowerRoman";
      case PageNumberStyle.LetterUpper:
        return "upperLetter";
      case PageNumberStyle.LetterLower:
        return "lowerLetter";
      default:
        return "decimal";
    }
  }

  private int GetNextBookmarkID() => ++this.m_bookmarkId;

  private int GetNextDocPrID() => ++this.m_docPrId;

  private int GetNextShapeID() => ++this.m_shapeID;

  private string ModifyText(string text)
  {
    text = text.Replace(Environment.NewLine, '\r'.ToString());
    text = text.Replace('\n', '\r');
    text = text.Replace('\a'.ToString(), string.Empty);
    text = text.Replace('\b'.ToString(), string.Empty);
    return text;
  }

  private Entity GetBaseEntity(Entity entity)
  {
    Entity baseEntity = entity;
    while (baseEntity.Owner != null)
    {
      baseEntity = baseEntity.Owner;
      if (baseEntity is WSection || baseEntity is HeaderFooter)
        return baseEntity;
    }
    return baseEntity;
  }

  private Entity GetChartBaseEntity(Entity entity)
  {
    Entity chartBaseEntity = entity;
    while (chartBaseEntity.Owner != null)
    {
      chartBaseEntity = chartBaseEntity.Owner;
      switch (chartBaseEntity)
      {
        case WFootnote _:
        case WComment _:
        case HeaderFooter _:
          return chartBaseEntity;
        default:
          continue;
      }
    }
    return chartBaseEntity;
  }

  private bool IsPageBreakNeedToBeSkipped(Entity entity)
  {
    Entity entity1 = entity;
    while (entity1.Owner != null)
    {
      entity1 = entity1.Owner;
      switch (entity1)
      {
        case WTextBox _:
        case WFootnote _:
        case HeaderFooter _:
          return true;
        default:
          continue;
      }
    }
    return false;
  }

  private void UpdateItemRelation(ParagraphItem item, string newID, DictionaryEntry itemRel)
  {
    if (((Entity) item).GetBaseEntity((Entity) item) is HeaderFooter)
    {
      HeaderFooter baseEntity = ((Entity) item).GetBaseEntity((Entity) item) as HeaderFooter;
      this.UpdateHFXmlRels(newID, baseEntity, itemRel);
    }
    else
      this.XmlItemsRelations.Add(newID, itemRel);
  }

  private List<string> FindRelationshipIds(Stream XmlParaItemStream)
  {
    XmlParaItemStream.Position = 0L;
    XmlReader reader = Syncfusion.DocIO.DLS.Convertors.UtilityMethods.CreateReader(XmlParaItemStream);
    List<string> relationshipIds = new List<string>();
    do
    {
      bool flag = false;
      string str1 = string.Empty;
      string str2 = string.Empty;
      switch (reader.LocalName.ToLower())
      {
        case "fill":
        case "chart":
        case "imagedata":
        case "stroke":
        case "control":
        case "oleobject":
        case "hyperlink":
          str1 = reader.GetAttribute("id", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          str2 = reader.GetAttribute("href", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          break;
        case "blip":
          str1 = reader.GetAttribute("embed", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          break;
        case "relids":
          string attribute1 = reader.GetAttribute("dm", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          if (!string.IsNullOrEmpty(attribute1))
            relationshipIds.Add(attribute1);
          string attribute2 = reader.GetAttribute("lo", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          if (!string.IsNullOrEmpty(attribute2))
            relationshipIds.Add(attribute2);
          string attribute3 = reader.GetAttribute("qs", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          if (!string.IsNullOrEmpty(attribute3))
            relationshipIds.Add(attribute3);
          str1 = reader.GetAttribute("cs", this.IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
          if (!string.IsNullOrEmpty(str1))
            relationshipIds.Add(str1);
          flag = true;
          break;
      }
      if (str1 != null && str1 != string.Empty && !flag)
        relationshipIds.Add(str1);
      if (str2 != null && str2 != string.Empty)
        relationshipIds.Add(str2);
      reader.Read();
    }
    while (!reader.EOF);
    return relationshipIds;
  }

  private bool IsDocumentContainsDefaultTableStyle()
  {
    return this.m_document.Styles.FindByName("Normal Table") is Style byName1 && (byName1 == null || byName1.StyleType == StyleType.TableStyle) || this.m_document.Styles.FindByName("NormalTable") is Style byName2 && (byName2 == null || byName2.StyleType == StyleType.TableStyle) || this.m_document.Styles.FindByName("Table Normal") is Style byName3 && (byName3 == null || byName3.StyleType == StyleType.TableStyle) || this.m_document.Styles.FindByName("TableNormal") is Style byName4 && (byName4 == null || byName4.StyleType == StyleType.TableStyle);
  }

  internal void Close()
  {
    if (this.m_archive != null)
    {
      this.m_archive.Close();
      this.m_archive = (ZipArchive) null;
    }
    this.m_document = (WordDocument) null;
    if (this.m_writer != null)
      this.m_writer = (XmlWriter) null;
    if (this.m_lstStyleReferences != null)
    {
      foreach (Dictionary<int, string> dictionary in this.m_lstStyleReferences.Values)
        dictionary.Clear();
      this.m_lstStyleReferences.Clear();
      this.m_lstStyleReferences = (Dictionary<int, Dictionary<int, string>>) null;
    }
    if (this.m_pictureBullets != null)
    {
      this.m_pictureBullets.Clear();
      this.m_pictureBullets = (Dictionary<string, ImageRecord>) null;
    }
    if (this.m_relations != null)
    {
      this.m_relations.Clear();
      this.m_relations = (Dictionary<string, DictionaryEntry>) null;
    }
    if (this.m_hfChartCollection != null)
    {
      this.m_hfChartCollection.Clear();
      this.m_hfChartCollection = (Dictionary<string, WChart>) null;
    }
    if (this.m_endnoteChartCollection != null)
    {
      this.m_endnoteChartCollection.Clear();
      this.m_endnoteChartCollection = (Dictionary<string, WChart>) null;
    }
    if (this.m_footnoteChartCollection != null)
    {
      this.m_footnoteChartCollection.Clear();
      this.m_footnoteChartCollection = (Dictionary<string, WChart>) null;
    }
    if (this.m_commentsChartCollection != null)
    {
      this.m_commentsChartCollection.Clear();
      this.m_commentsChartCollection = (Dictionary<string, WChart>) null;
    }
    if (this.m_chartRelationId != null)
    {
      this.m_chartRelationId.Clear();
      this.m_chartRelationId = (Dictionary<string, WChart>) null;
    }
    if (this.m_documentImages != null)
    {
      this.m_documentImages.Clear();
      this.m_documentImages = (Dictionary<string, ImageRecord>) null;
    }
    if (this.m_externalLinkImages != null)
    {
      this.m_externalLinkImages.Clear();
      this.m_externalLinkImages = (Dictionary<string, string>) null;
    }
    if (this.m_footnoteImages != null)
    {
      this.m_footnoteImages.Clear();
      this.m_footnoteImages = (Dictionary<string, ImageRecord>) null;
    }
    if (this.m_endnoteImages != null)
    {
      this.m_endnoteImages.Clear();
      this.m_endnoteImages = (Dictionary<string, ImageRecord>) null;
    }
    if (this.m_commentImages != null)
    {
      this.m_commentImages.Clear();
      this.m_commentImages = (Dictionary<string, ImageRecord>) null;
    }
    if (this.m_headerFooterImages != null)
    {
      foreach (Dictionary<string, ImageRecord> dictionary in this.m_headerFooterImages.Values)
        dictionary.Clear();
      this.m_headerFooterImages.Clear();
      this.m_headerFooterImages = (Dictionary<string, Dictionary<string, ImageRecord>>) null;
    }
    if (this.m_headerFooterSvgImages != null)
    {
      foreach (Dictionary<string, Stream> dictionary in this.m_headerFooterSvgImages.Values)
        dictionary.Clear();
      this.m_headerFooterSvgImages.Clear();
      this.m_headerFooterSvgImages = (Dictionary<string, Dictionary<string, Stream>>) null;
    }
    if (this.m_bookmarks != null)
    {
      this.m_bookmarks.Clear();
      this.m_bookmarks = (Dictionary<string, int>) null;
    }
    if (this.m_FallBackbookmarks != null)
    {
      this.m_FallBackbookmarks.Clear();
      this.m_FallBackbookmarks = (Dictionary<string, int>) null;
    }
    if (this.m_editableRanges != null)
    {
      this.m_editableRanges.Clear();
      this.m_editableRanges = (List<string>) null;
    }
    if (this.m_headerFooterColl != null)
    {
      foreach (Dictionary<string, HeaderFooter> dictionary in this.m_headerFooterColl.Values)
        dictionary.Clear();
      this.m_headerFooterColl.Clear();
      this.m_headerFooterColl = (Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>>) null;
    }
    if (this.m_symbolFontNames != null)
    {
      this.m_symbolFontNames.Clear();
      this.m_symbolFontNames = (List<string>) null;
    }
    if (this.m_bookMarkCollection != null)
    {
      this.m_bookMarkCollection.Clear();
      this.m_bookMarkCollection = (List<Entity>) null;
    }
    if (this.m_editableRangeCollection != null)
    {
      this.m_editableRangeCollection.Clear();
      this.m_editableRangeCollection = (List<Entity>) null;
    }
    if (this.m_oleIds != null)
    {
      this.m_oleIds.Clear();
      this.m_oleIds = (Dictionary<string, string>) null;
    }
    if (this.m_oleContainers != null)
    {
      this.m_oleContainers.Clear();
      this.m_oleContainers = (Dictionary<string, Stream>) null;
    }
    if (this.m_svgDataHash != null)
    {
      this.m_svgDataHash.Clear();
      this.m_svgDataHash = (Dictionary<string, string>) null;
    }
    if (this.m_svgDataCollections != null)
    {
      this.m_svgDataCollections.Clear();
      this.m_svgDataCollections = (Dictionary<string, Stream>) null;
    }
    if (this.m_hfOleContainers != null)
    {
      foreach (Dictionary<string, Stream> dictionary in this.m_hfOleContainers.Values)
        dictionary.Clear();
      this.m_hfOleContainers.Clear();
      this.m_hfOleContainers = (Dictionary<string, Dictionary<string, Stream>>) null;
    }
    if (this.m_oleTypes != null)
    {
      this.m_oleTypes.Clear();
      this.m_oleTypes = (List<string>) null;
    }
    if (this.m_xmlItemsRef != null)
    {
      this.m_xmlItemsRef.Clear();
      this.m_xmlItemsRef = (Dictionary<string, DictionaryEntry>) null;
    }
    if (this.m_commentsId != null)
    {
      this.m_commentsId.Clear();
      this.m_commentsId = (Dictionary<string, string>) null;
    }
    if (this.m_commentsCollection != null)
    {
      this.m_commentsCollection.Clear();
      this.m_commentsCollection = (Dictionary<string, WComment>) null;
    }
    if (this.m_footnoteColl != null)
    {
      this.m_footnoteColl.Clear();
      this.m_footnoteColl = (Dictionary<int, WFootnote>) null;
    }
    if (this.m_endnoteColl != null)
    {
      this.m_endnoteColl.Clear();
      this.m_endnoteColl = (Dictionary<int, WFootnote>) null;
    }
    if (this.m_hyperlinkTargets != null)
    {
      this.m_hyperlinkTargets.Clear();
      this.m_hyperlinkTargets = (Dictionary<string, string>) null;
    }
    if (this.m_altChunkTargets != null)
    {
      this.m_altChunkTargets.Clear();
      this.m_altChunkTargets = (Dictionary<string, string>) null;
    }
    if (this.m_altChunkContentTypes != null)
    {
      this.m_altChunkContentTypes.Clear();
      this.m_altChunkContentTypes = (Dictionary<string, string>) null;
    }
    if (this.m_footnoteHyperlinks != null)
    {
      this.m_footnoteHyperlinks.Clear();
      this.m_footnoteHyperlinks = (Dictionary<string, string>) null;
    }
    if (this.m_footnoteAlternateChunks != null)
    {
      this.m_footnoteAlternateChunks.Clear();
      this.m_footnoteAlternateChunks = (Dictionary<string, string>) null;
    }
    if (this.m_endnoteHyperlinks != null)
    {
      this.m_endnoteHyperlinks.Clear();
      this.m_endnoteHyperlinks = (Dictionary<string, string>) null;
    }
    if (this.m_endnoteAlternateChunks != null)
    {
      this.m_endnoteAlternateChunks.Clear();
      this.m_endnoteAlternateChunks = (Dictionary<string, string>) null;
    }
    if (this.m_commentHyperlinks != null)
    {
      this.m_commentHyperlinks.Clear();
      this.m_commentHyperlinks = (Dictionary<string, string>) null;
    }
    if (this.m_commentAlternateChunks != null)
    {
      this.m_commentAlternateChunks.Clear();
      this.m_commentAlternateChunks = (Dictionary<string, string>) null;
    }
    if (this.m_hfIncludePicFieldUrl != null)
    {
      this.m_hfIncludePicFieldUrl.Clear();
      this.m_hfIncludePicFieldUrl = (Dictionary<string, string>) null;
    }
    if (this.m_inclPicFieldUrl != null)
    {
      this.m_inclPicFieldUrl.Clear();
      this.m_inclPicFieldUrl = (Dictionary<string, string>) null;
    }
    if (this.m_headerFooterHyperlinks != null)
    {
      foreach (Dictionary<string, string> dictionary in this.m_headerFooterHyperlinks.Values)
        dictionary.Clear();
      this.m_headerFooterHyperlinks.Clear();
      this.m_headerFooterHyperlinks = (Dictionary<string, Dictionary<string, string>>) null;
    }
    if (this.m_headerFooterAlternateChunks != null)
    {
      foreach (Dictionary<string, string> dictionary in this.m_headerFooterAlternateChunks.Values)
        dictionary.Clear();
      this.m_headerFooterAlternateChunks.Clear();
      this.m_headerFooterAlternateChunks = (Dictionary<string, Dictionary<string, string>>) null;
    }
    if (this.m_headerFooterInclPicUrls != null)
    {
      foreach (Dictionary<string, string> dictionary in this.m_headerFooterInclPicUrls.Values)
        dictionary.Clear();
      this.m_headerFooterInclPicUrls.Clear();
      this.m_headerFooterInclPicUrls = (Dictionary<string, Dictionary<string, string>>) null;
    }
    if (this.m_hfRelations != null)
    {
      foreach (Dictionary<string, DictionaryEntry> dictionary in this.m_hfRelations.Values)
        dictionary.Clear();
      this.m_hfRelations.Clear();
      this.m_hfRelations = (Dictionary<string, Dictionary<string, DictionaryEntry>>) null;
    }
    if (this.m_chartsPathNames != null)
    {
      this.m_chartsPathNames.Clear();
      this.m_chartsPathNames = (List<string>) null;
    }
    if (this.m_cntlPathNames != null)
    {
      this.m_cntlPathNames.Clear();
      this.m_cntlPathNames = (List<string>) null;
    }
    if (this.m_splittedTextNode != null)
      this.m_splittedTextNode = (string[]) null;
    this.m_splittedItem = (WTextRange) null;
    if (this.m_fieldStack != null)
    {
      this.m_fieldStack.Clear();
      this.m_fieldStack = (Stack<WField>) null;
    }
    if (this.m_fieldMarkStack != null)
    {
      this.m_fieldMarkStack.Clear();
      this.m_fieldMarkStack = (Stack<WFieldMark>) null;
    }
    if (this.m_settingsRelations != null)
    {
      this.m_settingsRelations.Clear();
      this.m_settingsRelations = (Dictionary<string, DictionaryEntry>) null;
    }
    if (this.m_autoShapeHelper != null)
    {
      this.m_autoShapeHelper.Close();
      this.m_autoShapeHelper = (AutoShapeHelper) null;
    }
    if (this.m_imagesPath != null)
    {
      this.m_imagesPath.Clear();
      this.m_imagesPath = (List<string>) null;
    }
    if (this.m_movingRevisionCollection != null)
    {
      this.m_movingRevisionCollection.Clear();
      this.m_movingRevisionCollection = (List<Revision>) null;
    }
    if (this.m_movingRevisionDetails != null)
    {
      this.m_movingRevisionDetails.Clear();
      this.m_movingRevisionDetails = (Dictionary<int, Dictionary<ParagraphItem, RevisionType>>) null;
    }
    if (this.m_commentMarkCollection == null)
      return;
    this.m_commentMarkCollection.Clear();
    this.m_commentMarkCollection = (List<Entity>) null;
  }

  internal bool StartsWithExt(string text, string value) => text.StartsWithExt(value);
}
