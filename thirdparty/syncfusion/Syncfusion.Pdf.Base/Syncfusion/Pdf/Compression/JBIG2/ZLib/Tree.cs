// Decompiled with JetBrains decompiler
// Type: Syncfusion.Pdf.Compression.JBIG2.ZLib.Tree
// Assembly: Syncfusion.Pdf.Base, Version=19.3460.0.57, Culture=neutral, PublicKeyToken=3d67ed1f87d44c89
// MVID: D80BE54F-56D0-445B-815D-7CBF7AF400A1
// Assembly location: C:\Program Files\PDFgear\Syncfusion.Pdf.Base.dll

using System;

#nullable disable
namespace Syncfusion.Pdf.Compression.JBIG2.ZLib;

internal sealed class Tree
{
  private const int MAX_BITS = 15;
  private const int BL_CODES = 19;
  private const int D_CODES = 30;
  private const int LITERALS = 256 /*0x0100*/;
  private const int LENGTH_CODES = 29;
  private const int L_CODES = 286;
  private const int HEAP_SIZE = 573;
  internal const int MAX_BL_BITS = 7;
  internal const int END_BLOCK = 256 /*0x0100*/;
  internal const int REP_3_6 = 16 /*0x10*/;
  internal const int REPZ_3_10 = 17;
  internal const int REPZ_11_138 = 18;
  internal const int Buf_size = 16 /*0x10*/;
  internal const int DIST_CODE_LEN = 512 /*0x0200*/;
  internal static readonly int[] extra_lbits = new int[29]
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
  };
  internal static readonly int[] extra_dbits = new int[30]
  {
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
  };
  internal static readonly int[] extra_blbits = new int[19]
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
  };
  internal static readonly byte[] bl_order = new byte[19]
  {
    (byte) 16 /*0x10*/,
    (byte) 17,
    (byte) 18,
    (byte) 0,
    (byte) 8,
    (byte) 7,
    (byte) 9,
    (byte) 6,
    (byte) 10,
    (byte) 5,
    (byte) 11,
    (byte) 4,
    (byte) 12,
    (byte) 3,
    (byte) 13,
    (byte) 2,
    (byte) 14,
    (byte) 1,
    (byte) 15
  };
  internal static readonly byte[] _dist_code = new byte[512 /*0x0200*/]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 4,
    (byte) 5,
    (byte) 5,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 0,
    (byte) 0,
    (byte) 16 /*0x10*/,
    (byte) 17,
    (byte) 18,
    (byte) 18,
    (byte) 19,
    (byte) 19,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29
  };
  internal static readonly byte[] _length_code = new byte[256 /*0x0100*/]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 5,
    (byte) 6,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 9,
    (byte) 9,
    (byte) 10,
    (byte) 10,
    (byte) 11,
    (byte) 11,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 16 /*0x10*/,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 28
  };
  internal static readonly int[] base_length = new int[29]
  {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    10,
    12,
    14,
    16 /*0x10*/,
    20,
    24,
    28,
    32 /*0x20*/,
    40,
    48 /*0x30*/,
    56,
    64 /*0x40*/,
    80 /*0x50*/,
    96 /*0x60*/,
    112 /*0x70*/,
    128 /*0x80*/,
    160 /*0xA0*/,
    192 /*0xC0*/,
    224 /*0xE0*/,
    0
  };
  internal static readonly int[] base_dist = new int[30]
  {
    0,
    1,
    2,
    3,
    4,
    6,
    8,
    12,
    16 /*0x10*/,
    24,
    32 /*0x20*/,
    48 /*0x30*/,
    64 /*0x40*/,
    96 /*0x60*/,
    128 /*0x80*/,
    192 /*0xC0*/,
    256 /*0x0100*/,
    384,
    512 /*0x0200*/,
    768 /*0x0300*/,
    1024 /*0x0400*/,
    1536 /*0x0600*/,
    2048 /*0x0800*/,
    3072 /*0x0C00*/,
    4096 /*0x1000*/,
    6144,
    8192 /*0x2000*/,
    12288 /*0x3000*/,
    16384 /*0x4000*/,
    24576 /*0x6000*/
  };
  internal short[] dyn_tree;
  internal int max_code;
  internal StaticTree stat_desc;

  internal static int d_code(int dist)
  {
    return dist >= 256 /*0x0100*/ ? (int) Tree._dist_code[256 /*0x0100*/ + SupportClass.URShift(dist, 7)] : (int) Tree._dist_code[dist];
  }

  internal void gen_bitlen(Deflate s)
  {
    short[] dynTree = this.dyn_tree;
    short[] staticTree = this.stat_desc.static_tree;
    int[] extraBits = this.stat_desc.extra_bits;
    int extraBase = this.stat_desc.extra_base;
    int maxLength = this.stat_desc.max_length;
    int num1 = 0;
    for (int index = 0; index <= 15; ++index)
      s.bl_count[index] = (short) 0;
    dynTree[s.heap[s.heap_max] * 2 + 1] = (short) 0;
    int index1;
    for (index1 = s.heap_max + 1; index1 < 573; ++index1)
    {
      int num2 = s.heap[index1];
      int index2 = (int) dynTree[(int) dynTree[num2 * 2 + 1] * 2 + 1] + 1;
      if (index2 > maxLength)
      {
        index2 = maxLength;
        ++num1;
      }
      dynTree[num2 * 2 + 1] = (short) index2;
      if (num2 <= this.max_code)
      {
        ++s.bl_count[index2];
        int num3 = 0;
        if (num2 >= extraBase)
          num3 = extraBits[num2 - extraBase];
        short num4 = dynTree[num2 * 2];
        s.opt_len += (int) num4 * (index2 + num3);
        if (staticTree != null)
          s.static_len += (int) num4 * ((int) staticTree[num2 * 2 + 1] + num3);
      }
    }
    if (num1 == 0)
      return;
    do
    {
      int index3 = maxLength - 1;
      while (s.bl_count[index3] == (short) 0)
        --index3;
      --s.bl_count[index3];
      s.bl_count[index3 + 1] = (short) ((int) s.bl_count[index3 + 1] + 2);
      --s.bl_count[maxLength];
      num1 -= 2;
    }
    while (num1 > 0);
    for (int index4 = maxLength; index4 != 0; --index4)
    {
      int num5 = (int) s.bl_count[index4];
      while (num5 != 0)
      {
        int num6 = s.heap[--index1];
        if (num6 <= this.max_code)
        {
          if ((int) dynTree[num6 * 2 + 1] != index4)
          {
            s.opt_len = (int) ((long) s.opt_len + ((long) index4 - (long) dynTree[num6 * 2 + 1]) * (long) dynTree[num6 * 2]);
            dynTree[num6 * 2 + 1] = (short) index4;
          }
          --num5;
        }
      }
    }
  }

  internal void build_tree(Deflate s)
  {
    short[] dynTree = this.dyn_tree;
    short[] staticTree = this.stat_desc.static_tree;
    int elems = this.stat_desc.elems;
    int max_code = -1;
    s.heap_len = 0;
    s.heap_max = 573;
    for (int index = 0; index < elems; ++index)
    {
      if (dynTree[index * 2] != (short) 0)
      {
        s.heap[++s.heap_len] = max_code = index;
        s.depth[index] = (byte) 0;
      }
      else
        dynTree[index * 2 + 1] = (short) 0;
    }
    while (s.heap_len < 2)
    {
      int[] heap = s.heap;
      int index1 = ++s.heap_len;
      int num1;
      if (max_code >= 2)
        num1 = 0;
      else
        max_code = num1 = max_code + 1;
      int num2 = num1;
      heap[index1] = num1;
      int index2 = num2;
      dynTree[index2 * 2] = (short) 1;
      s.depth[index2] = (byte) 0;
      --s.opt_len;
      if (staticTree != null)
        s.static_len -= (int) staticTree[index2 * 2 + 1];
    }
    this.max_code = max_code;
    for (int k = s.heap_len / 2; k >= 1; --k)
      s.pqdownheap(dynTree, k);
    int index3 = elems;
    do
    {
      int index4 = s.heap[1];
      s.heap[1] = s.heap[s.heap_len--];
      s.pqdownheap(dynTree, 1);
      int index5 = s.heap[1];
      s.heap[--s.heap_max] = index4;
      s.heap[--s.heap_max] = index5;
      dynTree[index3 * 2] = (short) ((int) dynTree[index4 * 2] + (int) dynTree[index5 * 2]);
      s.depth[index3] = (byte) ((uint) Math.Max(s.depth[index4], s.depth[index5]) + 1U);
      dynTree[index4 * 2 + 1] = dynTree[index5 * 2 + 1] = (short) index3;
      s.heap[1] = index3++;
      s.pqdownheap(dynTree, 1);
    }
    while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[1];
    this.gen_bitlen(s);
    Tree.gen_codes(dynTree, max_code, s.bl_count);
  }

  internal static void gen_codes(short[] tree, int max_code, short[] bl_count)
  {
    short[] numArray = new short[16 /*0x10*/];
    short num = 0;
    for (int index = 1; index <= 15; ++index)
      numArray[index] = num = (short) ((int) num + (int) bl_count[index - 1] << 1);
    for (int index = 0; index <= max_code; ++index)
    {
      int len = (int) tree[index * 2 + 1];
      if (len != 0)
        tree[index * 2] = (short) Tree.bi_reverse((int) numArray[len]++, len);
    }
  }

  internal static int bi_reverse(int code, int len)
  {
    int number = 0;
    do
    {
      int num = number | code & 1;
      code = SupportClass.URShift(code, 1);
      number = num << 1;
    }
    while (--len > 0);
    return SupportClass.URShift(number, 1);
  }
}
