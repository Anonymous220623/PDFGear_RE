<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sfshared="clr-namespace:Syncfusion.Windows.Shared">
  <LinearGradientBrush x:Key="TextBoxBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFABADB3" Offset="0.05"/>
    <GradientStop Color="#FFE2E3EA" Offset="1"/>
    <GradientStop Color="#FFE3E9EF" Offset="0.07"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="TextboxBackground" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="TextboxForeground" Color="#FF000000"/>
  <SolidColorBrush x:Key="WatermarkForeground" Color="#FF000000"/>
  <SolidColorBrush x:Key="GlyphBrushKey1" Color="#FF5F6EA5"/>
  <SolidColorBrush x:Key="TextBoxBackgroundBorderBrush" Color="Transparent"/>
  <LinearGradientBrush x:Key="TextboxMouseOverBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FF5C97C1" Offset="0.05"/>
    <GradientStop Color="#FFC7E2F1" Offset="1"/>
    <GradientStop Color="#FFB8D6EA" Offset="0.07"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="TextboxFocusedBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FF5C97C1" Offset="0.05"/>
    <GradientStop Color="#FFC7E2F1" Offset="1"/>
    <GradientStop Color="#FFB8D6EA" Offset="0.07"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DisabledBackground" Color="#FFF4F4F4"/>
  <SolidColorBrush x:Key="DisabledForeground" Color="#FFBEB6BC"/>
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#FFADB2B5"/>
  <SolidColorBrush x:Key="ReadOnlyBackground" Color="#FFF4F4F4"/>
  <SolidColorBrush x:Key="ReadOnlyForeground" Color="#FF6D6D6D"/>
  <SolidColorBrush x:Key="ReadOnlyBorderBrush" Color="#FFADB2B5"/>
  <LinearGradientBrush x:Key="RepeatButtonBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFF2F2F2" Offset="0.102"/>
    <GradientStop Color="#FFE8E8E8" Offset="0.932"/>
    <GradientStop Color="#FFD1D1D1" Offset="0.966"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="RepeatButtonBorderBrush" Color="#FFABADB3"/>
  <LinearGradientBrush x:Key="RepeatButtonHoverBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFE9F6FD" Offset="0.134"/>
    <GradientStop Color="#FFD2EDFC" Offset="0.966"/>
    <GradientStop Color="#FFE9F5FC" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="RepeatButtonHoverBorderBrush" Color="#FF3C7FB1"/>
  <LinearGradientBrush x:Key="RepeatButtonPressedBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFA6C7D9" Offset="0.113"/>
    <GradientStop Color="#FFC2E4F6" Offset="0.135"/>
    <GradientStop Color="#FFC2E4F6" Offset="0.842"/>
    <GradientStop Color="#FF91CCEB" Offset="0.865"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="RepeatButtonPressedBorderBrush" Color="#FF3C7FB1"/>
  <ContextMenu x:Key="contextmenu">
    <MenuItem Header="Cut" Command="Cut"/>
    <MenuItem Header="Copy" Command="Copy"/>
    <MenuItem Header="Paste" Command="Paste"/>
  </ContextMenu>
  <sfshared:ProgressConverter x:Key="progressConverter"/>
  <sfshared:ClipConverter x:Key="clipConverter"/>
  <sfshared:RadiusConverter x:Key="radiusConverter"/>
  <sfshared:BooleanToVisibilityConverterEx x:Key="booleanToVisibilityConverter"/>
  <ControlTemplate x:Key="RepeatButtonTemplate" TargetType="{x:Type RepeatButton}">
    <Border Name="Chrome" Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1" CornerRadius="0"
            SnapsToDevicePixels="true">
      <Border Name="innerBorder" BorderBrush="{TemplateBinding Control.Background}" BorderThickness="1"
              CornerRadius="0" SnapsToDevicePixels="true">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonHoverBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="innerBorder" Value="{StaticResource RepeatButtonHoverBackground}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonHoverBackground}"
                Property="Border.Background"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonPressedBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="innerBorder" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonPressedBackground}"
                Property="Border.Background"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Chrome" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="{StaticResource RepeatButtonBackground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource RepeatButtonBorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource ForegroundBrush.Blue}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Template" Value="{StaticResource RepeatButtonTemplate}"/>
  </Style>
  <Style x:Key="DefaultIntegerTextBoxStyle" TargetType="{x:Type sfshared:IntegerTextBox}">
    <Setter Property="sfshared:EditorBase.FocusedBorderBrush"
            Value="{StaticResource TextboxFocusedBorderBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="Control.Background" Value="{StaticResource TextboxBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="sfshared:EditorBase.WatermarkTextForeground" Value="{StaticResource WatermarkForeground}"/>
    <Setter Property="sfshared:EditorBase.PositiveForeground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="sfshared:EditorBase.RangeAdornerBackground" Value="LightGray"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="sfshared:EditorBase.CornerRadius" Value="1"/>
    <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource contextmenu}"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.Cursor" Value="IBeam"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type sfshared:IntegerTextBox}">
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}">
              <UIElement.Clip>
                <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}"
                                   RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}">
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource clipConverter}">
                      <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                      <Binding Path="ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </UIElement.Clip>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="RangeAdornerBorder"
                        Background="{TemplateBinding sfshared:EditorBase.RangeAdornerBackground}" Visibility="Collapsed"
                        BorderThickness="0" IsHitTestVisible="false">
                  <UIElement.RenderTransform>
                    <ScaleTransform>
                      <ScaleTransform.ScaleX>
                        <MultiBinding Converter="{StaticResource progressConverter}">
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MaxValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MinValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding>
                      </ScaleTransform.ScaleX>
                    </ScaleTransform>
                  </UIElement.RenderTransform>
                </Border>
                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                              VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding sfshared:EditorBase.ContentElementVisibility}"/>
                <ContentControl x:Name="PART_Watermark" Foreground="{TemplateBinding sfshared:EditorBase.WatermarkTextForeground}"
                                VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                                VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding sfshared:EditorBase.WatermarkBackground}"
                                Margin="{TemplateBinding Control.Padding}" FontFamily="{TemplateBinding Control.FontFamily}"
                                FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                                FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                                Padding="{TemplateBinding Control.Padding}"
                                Visibility="{TemplateBinding sfshared:EditorBase.WatermarkVisibility}"
                                Content="{TemplateBinding sfshared:EditorBase.WatermarkText}"
                                Opacity="{TemplateBinding sfshared:EditorBase.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding sfshared:EditorBase.WatermarkTemplate}" Grid.Row="0"/>
                <Grid x:Name="spinButtonGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Column="1"
                      Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ShowSpinButton, Converter={StaticResource booleanToVisibilityConverter}}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="1*"/>
                  </Grid.RowDefinitions>
                  <RepeatButton x:Name="upbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow"
                                IsTabStop="false" VerticalAlignment="Stretch" Padding="{TemplateBinding Control.Padding}"
                                Style="{StaticResource RepeatButtonStyle}" SnapsToDevicePixels="true" Margin="0" Width="17">
                    <Path x:Name="upbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6" Width="7"
                          Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                      <FrameworkElement.LayoutTransform>
                        <RotateTransform Angle="180"/>
                      </FrameworkElement.LayoutTransform>
                    </Path>
                  </RepeatButton>
                  <RepeatButton x:Name="downbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow" Grid.Row="1"
                                Padding="{TemplateBinding Control.Padding}" IsTabStop="false"
                                Style="{StaticResource RepeatButtonStyle}" Margin="0" SnapsToDevicePixels="true"
                                VerticalAlignment="Stretch" Width="17">
                    <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6"
                          Width="7" Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                  </RepeatButton>
                </Grid>
              </Grid>
            </Border>
            <Border x:Name="MouseOver_Border" BorderBrush="{StaticResource TextboxMouseOverBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding sfshared:EditorBase.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyNegativeForeground" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=NegativeForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyZeroColor" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=ZeroColor}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsNull" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=PositiveForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledBackground}" Property="Control.Background"/>
              <Setter Value="{StaticResource DisabledBorderBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
              <Setter TargetName="upbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter TargetName="downbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter Value="{StaticResource ReadOnlyBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Border" Property="UIElement.Opacity" Value="1.0"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="sfshared:SkinStorage.EnableTouch" Value="true">
              <Setter Property="Control.Padding" Value="1,9"/>
              <Setter Property="Control.FontSize" Value="18"/>
              <Setter Property="sfshared:EditorBase.EnableTouch" Value="true"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1.5"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.EnableRangeAdorner" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RangeAdornerBorder" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="sfshared:EditorBase.EnableRangeAdorner" Value="false">
              <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultIntegerTextBoxStyle}" TargetType="{x:Type sfshared:IntegerTextBox}"/>
  <Style x:Key="DefaultDoubleTextBoxStyle" TargetType="{x:Type sfshared:DoubleTextBox}">
    <Setter Property="sfshared:EditorBase.FocusedBorderBrush"
            Value="{StaticResource TextboxFocusedBorderBrush}"/>
    <Setter Property="Control.Background" Value="{StaticResource TextboxBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="sfshared:EditorBase.WatermarkTextForeground" Value="{StaticResource WatermarkForeground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="sfshared:EditorBase.PositiveForeground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="sfshared:EditorBase.RangeAdornerBackground" Value="LightGray"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="sfshared:EditorBase.CornerRadius" Value="1"/>
    <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource contextmenu}"/>
    <Setter Property="FrameworkElement.Cursor" Value="IBeam"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type sfshared:DoubleTextBox}">
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}">
              <UIElement.Clip>
                <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}"
                                   RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}">
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource clipConverter}">
                      <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                      <Binding Path="ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </UIElement.Clip>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="RangeAdornerBorder"
                        Background="{TemplateBinding sfshared:EditorBase.RangeAdornerBackground}" Visibility="Collapsed"
                        BorderThickness="0" IsHitTestVisible="false">
                  <UIElement.RenderTransform>
                    <ScaleTransform>
                      <ScaleTransform.ScaleX>
                        <MultiBinding Converter="{StaticResource progressConverter}">
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MaxValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MinValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding>
                      </ScaleTransform.ScaleX>
                    </ScaleTransform>
                  </UIElement.RenderTransform>
                </Border>
                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                              VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding sfshared:EditorBase.ContentElementVisibility}"/>
                <ContentControl x:Name="PART_Watermark" Foreground="{TemplateBinding sfshared:EditorBase.WatermarkTextForeground}"
                                VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                                VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding sfshared:EditorBase.WatermarkBackground}"
                                Margin="{TemplateBinding Control.Padding}" FontFamily="{TemplateBinding Control.FontFamily}"
                                FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                                FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                                Padding="{TemplateBinding Control.Padding}"
                                Visibility="{TemplateBinding sfshared:EditorBase.WatermarkVisibility}"
                                Content="{TemplateBinding sfshared:EditorBase.WatermarkText}"
                                Opacity="{TemplateBinding sfshared:EditorBase.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding sfshared:EditorBase.WatermarkTemplate}" Grid.Row="0"/>
                <Grid x:Name="spinButtonGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Column="1"
                      Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ShowSpinButton, Converter={StaticResource booleanToVisibilityConverter}}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="1*"/>
                  </Grid.RowDefinitions>
                  <RepeatButton x:Name="upbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow"
                                IsTabStop="false" VerticalAlignment="Stretch" Style="{StaticResource RepeatButtonStyle}"
                                SnapsToDevicePixels="true" Padding="{TemplateBinding Control.Padding}" Margin="0" Width="17">
                    <Path x:Name="upbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6" Width="7"
                          Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                      <FrameworkElement.LayoutTransform>
                        <RotateTransform Angle="180"/>
                      </FrameworkElement.LayoutTransform>
                    </Path>
                  </RepeatButton>
                  <RepeatButton x:Name="downbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow" Grid.Row="1"
                                IsTabStop="false" Style="{StaticResource RepeatButtonStyle}"
                                Padding="{TemplateBinding Control.Padding}" Margin="0" SnapsToDevicePixels="true"
                                VerticalAlignment="Stretch" Width="17">
                    <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6"
                          Width="7" Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                  </RepeatButton>
                </Grid>
                <Border/>
              </Grid>
            </Border>
            <Border x:Name="MouseOver_Border" BorderBrush="{StaticResource TextboxMouseOverBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding sfshared:EditorBase.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyNegativeForeground" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=NegativeForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyZeroColor" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=ZeroColor}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsNull" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=PositiveForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledBackground}" Property="Control.Background"/>
              <Setter Value="{StaticResource DisabledBorderBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
              <Setter TargetName="upbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter TargetName="downbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter Value="{StaticResource ReadOnlyBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="sfshared:SkinStorage.EnableTouch" Value="true">
              <Setter Property="Control.Padding" Value="1,9"/>
              <Setter Property="Control.FontSize" Value="18"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1.5"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.EnableRangeAdorner" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RangeAdornerBorder" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="sfshared:EditorBase.EnableRangeAdorner" Value="false">
              <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultDoubleTextBoxStyle}" TargetType="{x:Type sfshared:DoubleTextBox}"/>
  <Style x:Key="DefaultCurrencyTextBoxStyle" TargetType="{x:Type sfshared:CurrencyTextBox}">
    <Setter Property="sfshared:EditorBase.FocusedBorderBrush"
            Value="{StaticResource TextboxFocusedBorderBrush}"/>
    <Setter Property="Control.Background" Value="{StaticResource TextboxBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="sfshared:EditorBase.WatermarkTextForeground" Value="{StaticResource WatermarkForeground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="sfshared:EditorBase.PositiveForeground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="sfshared:EditorBase.RangeAdornerBackground" Value="LightGray"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="sfshared:EditorBase.CornerRadius" Value="1"/>
    <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource contextmenu}"/>
    <Setter Property="FrameworkElement.Cursor" Value="IBeam"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type sfshared:CurrencyTextBox}">
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}">
              <UIElement.Clip>
                <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}"
                                   RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}">
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource clipConverter}">
                      <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                      <Binding Path="ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </UIElement.Clip>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="RangeAdornerBorder"
                        Background="{TemplateBinding sfshared:EditorBase.RangeAdornerBackground}" Visibility="Collapsed"
                        BorderThickness="0" IsHitTestVisible="false">
                  <UIElement.RenderTransform>
                    <ScaleTransform>
                      <ScaleTransform.ScaleX>
                        <MultiBinding Converter="{StaticResource progressConverter}">
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MaxValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MinValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding>
                      </ScaleTransform.ScaleX>
                    </ScaleTransform>
                  </UIElement.RenderTransform>
                </Border>
                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                              VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding sfshared:EditorBase.ContentElementVisibility}"/>
                <ContentControl x:Name="PART_Watermark" Foreground="{TemplateBinding sfshared:EditorBase.WatermarkTextForeground}"
                                VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                                VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding sfshared:EditorBase.WatermarkBackground}"
                                Margin="{TemplateBinding Control.Padding}" FontFamily="{TemplateBinding Control.FontFamily}"
                                FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                                FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                                Padding="{TemplateBinding Control.Padding}"
                                Visibility="{TemplateBinding sfshared:EditorBase.WatermarkVisibility}"
                                Content="{TemplateBinding sfshared:EditorBase.WatermarkText}"
                                Opacity="{TemplateBinding sfshared:EditorBase.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding sfshared:EditorBase.WatermarkTemplate}" Grid.Row="0"/>
                <Grid x:Name="spinButtonGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Column="1"
                      Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ShowSpinButton, Converter={StaticResource booleanToVisibilityConverter}}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="1*"/>
                  </Grid.RowDefinitions>
                  <RepeatButton x:Name="upbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow"
                                IsTabStop="false" VerticalAlignment="Stretch" Style="{StaticResource RepeatButtonStyle}"
                                SnapsToDevicePixels="true" Padding="{TemplateBinding Control.Padding}" Margin="0" Width="17">
                    <Path x:Name="upbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6" Width="7"
                          Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                      <FrameworkElement.LayoutTransform>
                        <RotateTransform Angle="180"/>
                      </FrameworkElement.LayoutTransform>
                    </Path>
                  </RepeatButton>
                  <RepeatButton x:Name="downbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow" Grid.Row="1"
                                IsTabStop="false" Style="{StaticResource RepeatButtonStyle}"
                                Padding="{TemplateBinding Control.Padding}" Margin="0" SnapsToDevicePixels="true"
                                VerticalAlignment="Stretch" Width="17">
                    <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6"
                          Width="7" Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                  </RepeatButton>
                </Grid>
              </Grid>
            </Border>
            <Border x:Name="MouseOver_Border" BorderBrush="{StaticResource TextboxMouseOverBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding sfshared:EditorBase.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyNegativeForeground" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=NegativeForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyZeroColor" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=ZeroColor}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsNull" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=PositiveForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledBackground}" Property="Control.Background"/>
              <Setter Value="{StaticResource DisabledBorderBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
              <Setter TargetName="upbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter TargetName="downbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter Value="{StaticResource ReadOnlyBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Border" Property="UIElement.Opacity" Value="1.5"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.EnableRangeAdorner" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RangeAdornerBorder" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="sfshared:SkinStorage.EnableTouch" Value="true">
              <Setter Property="Control.Padding" Value="1,9"/>
              <Setter Property="Control.FontSize" Value="18"/>
            </Trigger>
            <Trigger Property="sfshared:EditorBase.EnableRangeAdorner" Value="false">
              <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultCurrencyTextBoxStyle}"
         TargetType="{x:Type sfshared:CurrencyTextBox}"/>
  <Style x:Key="DefaultPercentTextBoxStyle" TargetType="{x:Type sfshared:PercentTextBox}">
    <Setter Property="sfshared:EditorBase.FocusedBorderBrush"
            Value="{StaticResource TextboxFocusedBorderBrush}"/>
    <Setter Property="Control.Background" Value="{StaticResource TextboxBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="sfshared:EditorBase.WatermarkTextForeground" Value="{StaticResource WatermarkForeground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="sfshared:EditorBase.PositiveForeground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="sfshared:EditorBase.RangeAdornerBackground" Value="LightGray"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource contextmenu}"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="FrameworkElement.Cursor" Value="IBeam"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type sfshared:PercentTextBox}">
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}">
              <UIElement.Clip>
                <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}"
                                   RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}">
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource clipConverter}">
                      <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                      <Binding Path="ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </UIElement.Clip>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border x:Name="RangeAdornerBorder"
                        Background="{TemplateBinding sfshared:EditorBase.RangeAdornerBackground}" Visibility="Collapsed"
                        BorderThickness="0" IsHitTestVisible="false">
                  <UIElement.RenderTransform>
                    <ScaleTransform>
                      <ScaleTransform.ScaleX>
                        <MultiBinding Converter="{StaticResource progressConverter}">
                          <Binding Path="PercentValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MaxValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MinValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding>
                      </ScaleTransform.ScaleX>
                    </ScaleTransform>
                  </UIElement.RenderTransform>
                </Border>
                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                              VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding sfshared:EditorBase.ContentElementVisibility}"/>
                <ContentControl x:Name="PART_Watermark" Foreground="{TemplateBinding sfshared:EditorBase.WatermarkTextForeground}"
                                VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                                VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding sfshared:EditorBase.WatermarkBackground}"
                                Margin="{TemplateBinding Control.Padding}" FontFamily="{TemplateBinding Control.FontFamily}"
                                FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                                FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                                Padding="{TemplateBinding Control.Padding}"
                                Visibility="{TemplateBinding sfshared:EditorBase.WatermarkVisibility}"
                                Content="{TemplateBinding sfshared:EditorBase.WatermarkText}"
                                Opacity="{TemplateBinding sfshared:EditorBase.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding sfshared:EditorBase.WatermarkTemplate}" Grid.Row="0"/>
                <Grid x:Name="spinButtonGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Column="1"
                      Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ShowSpinButton, Converter={StaticResource booleanToVisibilityConverter}}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="1*"/>
                  </Grid.RowDefinitions>
                  <RepeatButton x:Name="upbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow"
                                IsTabStop="false" VerticalAlignment="Stretch" Style="{StaticResource RepeatButtonStyle}"
                                SnapsToDevicePixels="true" Padding="{TemplateBinding Control.Padding}" Margin="0" Width="17">
                    <Path x:Name="upbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6" Width="7"
                          Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                      <FrameworkElement.LayoutTransform>
                        <RotateTransform Angle="180"/>
                      </FrameworkElement.LayoutTransform>
                    </Path>
                  </RepeatButton>
                  <RepeatButton x:Name="downbutton" Focusable="{TemplateBinding UIElement.Focusable}" Cursor="Arrow" Grid.Row="1"
                                IsTabStop="false" Style="{StaticResource RepeatButtonStyle}"
                                Padding="{TemplateBinding Control.Padding}" Margin="0" SnapsToDevicePixels="true"
                                VerticalAlignment="Stretch" Width="17">
                    <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6"
                          Width="7" Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                  </RepeatButton>
                </Grid>
              </Grid>
            </Border>
            <Border x:Name="MouseOver_Border" BorderBrush="{StaticResource TextboxMouseOverBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding sfshared:EditorBase.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyNegativeForeground" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=NegativeForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.ApplyZeroColor" Value="true"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=ZeroColor}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.IsNegative" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsZero" Value="false"/>
                <Condition Property="sfshared:EditorBase.IsNull" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=PositiveForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledBackground}" Property="Control.Background"/>
              <Setter Value="{StaticResource DisabledBorderBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
              <Setter TargetName="upbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter TargetName="downbutton" Property="UIElement.IsEnabled" Value="false"/>
              <Setter Value="{StaticResource ReadOnlyBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Border" Property="UIElement.Opacity" Value="1.5"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="sfshared:EditorBase.EnableRangeAdorner" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RangeAdornerBorder" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="sfshared:SkinStorage.EnableTouch" Value="true">
              <Setter Property="Control.Padding" Value="1,9"/>
              <Setter Property="Control.FontSize" Value="18"/>
            </Trigger>
            <Trigger Property="sfshared:EditorBase.EnableRangeAdorner" Value="false">
              <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultPercentTextBoxStyle}" TargetType="{x:Type sfshared:PercentTextBox}"/>
  <Style x:Key="DefaultMaskedTextBoxStyle" TargetType="{x:Type sfshared:MaskedTextBox}">
    <Setter Property="sfshared:MaskedTextBox.FocusedBorderBrush"
            Value="{StaticResource TextboxFocusedBorderBrush}"/>
    <Setter Property="Control.Background" Value="{StaticResource TextboxBackground}"/>
    <Setter Property="sfshared:MaskedTextBox.WatermarkTextForeground"
            Value="{StaticResource WatermarkForeground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource contextmenu}"/>
    <Setter Property="FrameworkElement.Cursor" Value="IBeam"/>
    <Setter Property="sfshared:MaskedTextBox.CornerRadius" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="2,0,0,0"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type sfshared:MaskedTextBox}">
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding sfshared:MaskedTextBox.CornerRadius}">
              <Grid>
                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                              VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding sfshared:MaskedTextBox.ContentElementVisibility}"/>
                <ContentControl x:Name="PART_Watermark" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}"
                                VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                Foreground="{TemplateBinding sfshared:MaskedTextBox.WatermarkTextForeground}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding sfshared:MaskedTextBox.WatermarkBackground}"
                                FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                                FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}"
                                FontWeight="{TemplateBinding Control.FontWeight}" Margin="{TemplateBinding Control.Padding}"
                                Cursor="IBeam" Visibility="{TemplateBinding sfshared:MaskedTextBox.WatermarkVisibility}"
                                Content="{TemplateBinding sfshared:MaskedTextBox.WatermarkText}"
                                Opacity="{TemplateBinding sfshared:MaskedTextBox.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding sfshared:MaskedTextBox.WatermarkTemplate}" Grid.Row="0"/>
              </Grid>
            </Border>
            <Border x:Name="MouseOver_Border" BorderBrush="{StaticResource TextboxMouseOverBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:MaskedTextBox.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding sfshared:MaskedTextBox.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding sfshared:MaskedTextBox.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource DisabledBackground}" Property="Control.Background"/>
              <Setter Value="{StaticResource DisabledBorderBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{StaticResource DisabledForeground}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
              <Setter Value="{StaticResource ReadOnlyBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="MouseOver_Border" Property="Border.BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="sfshared:SkinStorage.EnableTouch" Value="true">
              <Setter TargetName="Border" Property="Border.Padding" Value="1,9"/>
              <Setter Property="Control.FontSize" Value="18"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="MouseOver_Border" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Border" Property="UIElement.Opacity" Value="1.5"/>
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource DefaultMaskedTextBoxStyle}" TargetType="{x:Type sfshared:MaskedTextBox}"/>
  <Style x:Key="SelectionThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="{DynamicResource {x:Static JetSystemColors.ControlBrushKey}}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid>
            <Ellipse Fill="LightBlue"/>
            <Ellipse Margin="1" Fill="White"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExtendedScrollingAdornerStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="{DynamicResource {x:Static JetSystemColors.ControlBrushKey}}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"/>
    <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>