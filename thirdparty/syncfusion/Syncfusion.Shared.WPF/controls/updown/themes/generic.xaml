<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Syncfusion.Windows.Shared"
                    xmlns:utilsOuter="clr-namespace:Syncfusion.Windows.Shared">
  <LinearGradientBrush x:Key="TextBoxBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFA3AEB9" Offset="0"/>
    <GradientStop Color="#FF8399A9" Offset="0.375"/>
    <GradientStop Color="#FF718597" Offset="0.375"/>
    <GradientStop Color="#FF617584" Offset="1"/>
  </LinearGradientBrush>
  <utilsOuter:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
  <utilsOuter:ClipConverter x:Key="clipConverter"/>
  <utilsOuter:RadiusConverter x:Key="radiusConverter"/>
  <utilsOuter:ProgressConverter x:Key="progressConverter"/>
  <utilsOuter:BooleanToVisibilityConverterEx x:Key="booleanToVisibilityConverter"/>
  <SolidColorBrush x:Key="TextboxBackground" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="TextboxForeground" Color="Black"/>
  <SolidColorBrush x:Key="WatermarkForeground" Color="#FF000000"/>
  <LinearGradientBrush x:Key="TextboxMouseOverBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FF5794BF" Offset="0"/>
    <GradientStop Color="#FFC7E2F1" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="TextboxFocusedBorderBrush" Color="#FF6DBDD1"/>
  <SolidColorBrush x:Key="ReadOnlyBackground" Color="#5EC9C9C9"/>
  <SolidColorBrush x:Key="ButtonBorderBrush.Blue" Color="#FF6593CF"/>
  <SolidColorBrush x:Key="ForegroundBrush.Blue" Color="Black"/>
  <LinearGradientBrush x:Key="ToggleButtonBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFEFEFEF" Offset="0.432"/>
    <GradientStop Color="#FFE5E5E5" Offset="0.516"/>
    <GradientStop Color="#FFD9D9D9" Offset="0.526"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ButtonMouseOverBorderBrush.Blue" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFDBCE99" Offset="0"/>
    <GradientStop Color="#FFCEC0A4" Offset="0.996"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ButtonPressedBorderBrush.Blue" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFA78E66" Offset="0"/>
    <GradientStop Color="#FFB9AE93" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ButtonPressedBrush.Blue" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF3B277" Offset="0"/>
    <GradientStop Color="#FFF4B378" Offset="0.4"/>
    <GradientStop Color="#FFF4A770" Offset="0.4"/>
    <GradientStop Color="#FFF37E24" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ButtonMouseOverBrush.Blue" EndPoint="0,1" StartPoint="0,0">
    <GradientBrush.GradientStops>
      <GradientStop Color="#FFFFE69E" Offset="1"/>
      <GradientStop Color="#FFFFE8A7" Offset="0.4"/>
      <GradientStop Color="#FFFFD767" Offset="0.4"/>
      <GradientStop Color="#FFFFFCDE"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Luna.Normalcolor.Background" Color="#FFFFFF"/>
  <SolidColorBrush x:Key="Luna.Normalcolor.BorderBrush" Color="#FFABADB3"/>
  <SolidColorBrush x:Key="Luna.Normalcolor.Foreground" Color="Black"/>
  <SolidColorBrush x:Key="Luna.Normalcolor.FocusedBackground" Color="#FFFFFF"/>
  <SolidColorBrush x:Key="Luna.Normalcolor.FocusedBorderBrush" Color="#7F9DB9"/>
  <SolidColorBrush x:Key="Luna.Normalcolor.FocusedForeground" Color="Black"/>
  <SolidColorBrush x:Key="GlyphBrushKey1" Color="#FF5F6EA5"/>
  <SolidColorBrush x:Key="RangeAdornerBackground" Color="LightGray"/>
  <LinearGradientBrush x:Key="RepeatButtonBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFF2F2F2" Offset="0.102"/>
    <GradientStop Color="#FFE8E8E8" Offset="0.932"/>
    <GradientStop Color="#FFD1D1D1" Offset="0.966"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="RepeatButtonBorderBrush" Color="#FFABADB3"/>
  <LinearGradientBrush x:Key="RepeatButtonHoverBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFE9F6FD" Offset="0.134"/>
    <GradientStop Color="#FFD2EDFC" Offset="0.966"/>
    <GradientStop Color="#FFE9F5FC" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="RepeatButtonHoverBorderBrush" Color="#FF3C7FB1"/>
  <LinearGradientBrush x:Key="RepeatButtonPressedBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFA6C7D9" Offset="0.113"/>
    <GradientStop Color="#FFC2E4F6" Offset="0.135"/>
    <GradientStop Color="#FFC2E4F6" Offset="0.842"/>
    <GradientStop Color="#FF91CCEB" Offset="0.865"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="RepeatButtonPressedBorderBrush" Color="#FF3C7FB1"/>
  <Style x:Key="NumericUpDownDoubleTextBoxStyle" TargetType="{x:Type utilsOuter:DoubleTextBox}">
    <Setter Property="utilsOuter:EditorBase.FocusedBorderBrush"
            Value="{StaticResource TextboxFocusedBorderBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="Control.Background" Value="{StaticResource TextboxBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="utilsOuter:EditorBase.WatermarkTextForeground"
            Value="{StaticResource WatermarkForeground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource TextBoxBorderBrush}"/>
    <Setter Property="utilsOuter:EditorBase.RangeAdornerBackground" Value="LightGray"/>
    <Setter Property="utilsOuter:EditorBase.PositiveForeground" Value="{StaticResource TextboxForeground}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type utilsOuter:DoubleTextBox}">
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="{TemplateBinding utilsOuter:EditorBase.CornerRadius}">
              <Grid>
                <Border x:Name="RangeAdornerBorder"
                        Background="{TemplateBinding utilsOuter:EditorBase.RangeAdornerBackground}" Visibility="Collapsed"
                        BorderThickness="0" IsHitTestVisible="false">
                  <UIElement.RenderTransform>
                    <ScaleTransform>
                      <ScaleTransform.ScaleX>
                        <MultiBinding Converter="{StaticResource progressConverter}">
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MaxValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="MinValue" RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding>
                      </ScaleTransform.ScaleX>
                    </ScaleTransform>
                  </UIElement.RenderTransform>
                </Border>
                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Visibility="{TemplateBinding utilsOuter:EditorBase.ContentElementVisibility}"/>
                <ContentControl x:Name="PART_Watermark"
                                Foreground="{TemplateBinding utilsOuter:EditorBase.WatermarkTextForeground}" IsTabStop="false"
                                IsHitTestVisible="false" Background="{TemplateBinding utilsOuter:EditorBase.WatermarkBackground}"
                                FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                                FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}"
                                FontWeight="{TemplateBinding Control.FontWeight}" Padding="{TemplateBinding Control.Padding}"
                                Visibility="{TemplateBinding utilsOuter:EditorBase.WatermarkVisibility}"
                                Content="{TemplateBinding utilsOuter:EditorBase.WatermarkText}"
                                Opacity="{TemplateBinding utilsOuter:EditorBase.WatermarkOpacity}"
                                ContentTemplate="{TemplateBinding utilsOuter:EditorBase.WatermarkTemplate}" Grid.Row="0"
                                Margin="2,0,0,0"/>
              </Grid>
            </Border>
            <Border x:Name="MouseOver_Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{TemplateBinding utilsOuter:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding utilsOuter:EditorBase.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding utilsOuter:EditorBase.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
            <Border/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="utilsOuter:EditorBase.ApplyNegativeForeground" Value="true"/>
                <Condition Property="utilsOuter:EditorBase.IsNegative" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=NegativeForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="utilsOuter:EditorBase.ApplyZeroColor" Value="true"/>
                <Condition Property="utilsOuter:EditorBase.IsZero" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=ZeroColor}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="utilsOuter:EditorBase.IsNegative" Value="false"/>
                <Condition Property="utilsOuter:EditorBase.IsZero" Value="false"/>
                <Condition Property="utilsOuter:EditorBase.IsNull" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding RelativeSource={RelativeSource Self}, Path=PositiveForeground}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="utilsOuter:SkinStorage.EnableTouch" Value="true">
              <Setter Property="Control.Padding" Value="1,9"/>
              <Setter Property="Control.FontSize" Value="18"/>
              <Setter Property="utilsOuter:EditorBase.EnableTouch" Value="true"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="utilsOuter:EditorBase.EnableRangeAdorner" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RangeAdornerBorder" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="utilsOuter:EditorBase.EnableRangeAdorner" Value="false">
              <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RepeatButtonTemplate" TargetType="{x:Type RepeatButton}">
    <Border Name="Chrome" Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1" CornerRadius="0"
            SnapsToDevicePixels="true">
      <Border Name="innerBorder" BorderBrush="{TemplateBinding Control.Background}" BorderThickness="1"
              CornerRadius="0" SnapsToDevicePixels="true">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="utilsOuter:SkinStorage.EnableTouch" Value="false"/>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonHoverBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="innerBorder" Property="Border.BorderBrush" Value="#FFFBFBFB"/>
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonHoverBackground}"
                Property="Border.Background"/>
      </MultiTrigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonPressedBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="innerBorder" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="Chrome" Value="{StaticResource RepeatButtonPressedBackground}"
                Property="Border.Background"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Chrome" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="{StaticResource RepeatButtonBackground}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource RepeatButtonBorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource ForegroundBrush.Blue}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Template" Value="{StaticResource RepeatButtonTemplate}"/>
  </Style>
  <ContextMenu x:Key="defaultcontextmenu">
    <MenuItem Header="Cut" Command="Cut"/>
    <MenuItem Header="Copy" Command="Copy"/>
    <MenuItem Header="Paste" Command="Paste"/>
  </ContextMenu>
  <Style TargetType="{x:Type utilsOuter:UpDown}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{StaticResource Luna.Normalcolor.Background}"/>
    <Setter Property="utilsOuter:UpDown.NegativeBackground"
            Value="{StaticResource Luna.Normalcolor.Background}"/>
    <Setter Property="utilsOuter:UpDown.NegativeBorderBrush" Value="{StaticResource RepeatButtonBorderBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource RepeatButtonBorderBrush}"/>
    <Setter Property="utilsOuter:UpDown.RangeAdornerBackground" Value="{StaticResource RangeAdornerBackground}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource Luna.Normalcolor.Foreground}"/>
    <Setter Property="FrameworkElement.ContextMenu" Value="{DynamicResource defaultcontextmenu}"/>
    <Setter Property="utilsOuter:UpDown.FocusedBackground"
            Value="{StaticResource Luna.Normalcolor.FocusedBackground}"/>
    <Setter Property="utilsOuter:UpDown.FocusedBorderBrush"
            Value="{StaticResource TextboxMouseOverBorderBrush}"/>
    <Setter Property="utilsOuter:UpDown.FocusedForeground" Value="{StaticResource Luna.Normalcolor.Foreground}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type utilsOuter:UpDown}">
          <Grid>
            <Border x:Name="Border" CornerRadius="{TemplateBinding utilsOuter:UpDown.CornerRadius}"
                    Width="{TemplateBinding FrameworkElement.Width}" SnapsToDevicePixels="true"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}">
              <UIElement.Clip>
                <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}"
                                   RadiusY="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Border}}, Path=CornerRadius, Converter={StaticResource radiusConverter}}">
                  <RectangleGeometry.Rect>
                    <MultiBinding Converter="{StaticResource clipConverter}">
                      <Binding Path="ActualWidth" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                      <Binding Path="ActualHeight" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Border}}"/>
                    </MultiBinding>
                  </RectangleGeometry.Rect>
                </RectangleGeometry>
              </UIElement.Clip>
              <Grid ClipToBounds="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition/>
                  <RowDefinition/>
                </Grid.RowDefinitions>
                <utilsOuter:DoubleTextBox x:Name="textBox" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                          Visibility="Collapsed" EnterToMoveNext="false" IsTabStop="{TemplateBinding Control.IsTabStop}"
                                          TabIndex="{TemplateBinding Control.TabIndex}" BorderThickness="0" BorderBrush="Transparent"
                                          NumberFormat="{TemplateBinding utilsOuter:UpDown.NumberFormatInfo}" Grid.Column="0"
                                          Grid.RowSpan="2" Style="{StaticResource NumericUpDownDoubleTextBoxStyle}"
                                          Culture="{TemplateBinding utilsOuter:UpDown.Culture}"
                                          Background="{TemplateBinding Control.Background}"
                                          PositiveForeground="{TemplateBinding Control.Foreground}"
                                          Focusable="{TemplateBinding UIElement.Focusable}"
                                          GroupSeperatorEnabled="{TemplateBinding utilsOuter:UpDown.GroupSeperatorEnabled}"
                                          ContextMenu="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}"
                                          TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextAlignment, Mode=TwoWay}"
                                          EnableTouch="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableTouch, Mode=TwoWay}"
                                          EnableRangeAdorner="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableRangeAdorner, Mode=TwoWay}"
                                          EnableExtendedScrolling="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableExtendedScrolling, Mode=TwoWay}"
                                          RangeAdornerBackground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RangeAdornerBackground, Mode=TwoWay}"
                                          ApplyZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ApplyZeroColor, Mode=TwoWay}"
                                          ApplyNegativeForeground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableNegativeColors, Mode=TwoWay}"
                                          ZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZeroColor, Mode=TwoWay}"/>
                <utilsOuter:DoubleTextBox x:Name="DoubleTextBox" Grid.Column="0" Grid.RowSpan="2" Padding="{TemplateBinding Control.Padding}"
                                          EnterToMoveNext="false" Background="{TemplateBinding Control.Background}"
                                          PositiveForeground="{TemplateBinding Control.Foreground}"
                                          CornerRadius="{TemplateBinding utilsOuter:UpDown.CornerRadius}" BorderThickness="0"
                                          BorderBrush="Transparent" VerticalAlignment="Stretch" HorizontalContentAlignment="Center"
                                          HorizontalAlignment="Stretch" VerticalContentAlignment="Center"
                                          IsTabStop="{TemplateBinding Control.IsTabStop}" TabIndex="{TemplateBinding Control.TabIndex}"
                                          WatermarkTextIsVisible="true" WatermarkText="{TemplateBinding utilsOuter:UpDown.NullValueText}"
                                          WatermarkTextForeground="{TemplateBinding Control.Foreground}"
                                          Focusable="{TemplateBinding UIElement.Focusable}"
                                          Style="{StaticResource NumericUpDownDoubleTextBoxStyle}"
                                          GroupSeperatorEnabled="{TemplateBinding utilsOuter:UpDown.GroupSeperatorEnabled}"
                                          TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextAlignment, Mode=TwoWay}"
                                          ContextMenu="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextMenu}"
                                          MinValue="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MinValue, Mode=TwoWay}"
                                          MaxValue="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxValue, Mode=TwoWay}"
                                          RangeAdornerBackground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RangeAdornerBackground, Mode=TwoWay}"
                                          NumberFormat="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberFormatInfo, Mode=TwoWay}"
                                          UseNullOption="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=UseNullOption, Mode=TwoWay}"
                                          NullValue="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NullValue, Mode=TwoWay}"
                                          Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                          Culture="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Culture, Mode=TwoWay}"
                                          Step="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Step, Mode=TwoWay}"
                                          ZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZeroColor, Mode=TwoWay}"
                                          MaxValidation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxValidation, Mode=TwoWay}"
                                          MinValidation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MinValidation, Mode=TwoWay}"
                                          IsScrollingOnCircle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsScrollingOnCircle, Mode=TwoWay}"
                                          NumberDecimalDigits="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberDecimalDigits, Mode=TwoWay}"
                                          IsReadOnly="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsReadOnly, Mode=TwoWay}"
                                          MaxValueOnExceedMaxDigit="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxValueOnExceedMaxDigit, Mode=TwoWay}"
                                          MinValueOnExceedMinDigit="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MinValueOnExceedMinDigit, Mode=TwoWay}"
                                          ApplyZeroColor="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ApplyZeroColor, Mode=TwoWay}"
                                          ApplyNegativeForeground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableNegativeColors, Mode=TwoWay}"
                                          EnableTouch="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableTouch, Mode=TwoWay}"
                                          EnableRangeAdorner="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableRangeAdorner, Mode=TwoWay}"
                                          EnableExtendedScrolling="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=EnableExtendedScrolling, Mode=TwoWay}"/>
                <RepeatButton x:Name="upbutton" Focusable="{TemplateBinding UIElement.Focusable}" IsTabStop="false"
                              Command="local:UpDown.m_upValue" Margin=".5,1,.5,0" Grid.Row="0" Grid.Column="1"
                              Style="{StaticResource RepeatButtonStyle}" Width="15">
                  <Path x:Name="upbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6" Width="6"
                        Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Center" VerticalAlignment="Center"
                        RenderTransformOrigin=".5,.5" Margin="-1">
                    <UIElement.RenderTransform>
                      <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="180"/>
                        <TranslateTransform/>
                      </TransformGroup>
                    </UIElement.RenderTransform>
                  </Path>
                </RepeatButton>
                <RepeatButton x:Name="downbutton" Focusable="{TemplateBinding UIElement.Focusable}" IsTabStop="false"
                              Command="local:UpDown.m_downValue" Margin=".5,0,.5,.5" Grid.Row="2" Grid.Column="1"
                              Style="{StaticResource RepeatButtonStyle}" Width="15">
                  <Path x:Name="downbuttonpath" Stretch="Uniform" Fill="{StaticResource GlyphBrushKey1}" Height="6"
                        Width="6" Data="M 0,0 L 3.5,4 7,0 Z" HorizontalAlignment="Center" VerticalAlignment="Center"
                        Margin="-1"/>
                </RepeatButton>
              </Grid>
            </Border>
            <Border x:Name="Focused_Border" BorderBrush="{TemplateBinding utilsOuter:UpDown.FocusedBorderBrush}"
                    CornerRadius="{TemplateBinding utilsOuter:UpDown.CornerRadius}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Visibility="Collapsed"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="Border" Property="Border.CornerRadius" Value="0">
              <Setter TargetName="Border" Value="{x:Null}" Property="UIElement.Clip"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="utilsOuter:UpDown.IsFocused" Value="true">
              <Setter TargetName="Focused_Border" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="utilsOuter:SkinStorage.EnableTouch" Value="true">
              <Setter Property="Control.Padding" Value="1,8"/>
              <Setter Property="Control.FontSize" Value="18"/>
              <Setter TargetName="upbutton" Property="FrameworkElement.Width" Value="40"/>
              <Setter TargetName="downbutton" Property="FrameworkElement.Width" Value="40"/>
              <Setter TargetName="upbutton" Property="FrameworkElement.Height" Value="40"/>
              <Setter TargetName="downbutton" Property="FrameworkElement.Height" Value="40"/>
              <Setter TargetName="upbuttonpath" Property="FrameworkElement.Width" Value="12"/>
              <Setter TargetName="downbuttonpath" Property="FrameworkElement.Width" Value="12"/>
              <Setter TargetName="downbuttonpath" Property="FrameworkElement.Height" Value="8"/>
              <Setter TargetName="upbuttonpath" Property="FrameworkElement.Height" Value="8"/>
            </Trigger>
            <Trigger Property="utilsOuter:UpDown.IsUpdownFocused" Value="true">
              <Setter Value="{Binding Path=FocusedBackground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Background"/>
              <Setter Value="{Binding Path=FocusedBorderBrush, RelativeSource={RelativeSource Self}}"
                      Property="Control.BorderBrush"/>
              <Setter Value="{Binding Path=FocusedForeground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="utilsOuter:UpDown.IsValueNegative" Value="true">
              <Setter Value="{Binding Path=NegativeBackground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Background"/>
              <Setter Value="{Binding Path=NegativeBorderBrush, RelativeSource={RelativeSource Self}}"
                      Property="Control.BorderBrush"/>
              <Setter Value="{Binding Path=NegativeForeground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                <Condition Property="utilsOuter:UpDown.EnableFocusedColors" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{Binding Path=FocusedBackground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Background"/>
              <Setter Value="{Binding Path=FocusedBorderBrush, RelativeSource={RelativeSource Self}}"
                      Property="Control.BorderBrush"/>
              <Setter Value="{Binding Path=FocusedForeground, RelativeSource={RelativeSource Self}}"
                      Property="Control.Foreground"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="utilsOuter:UpDown.EnableRangeAdorner" Value="true"/>
                <Condition Property="utilsOuter:UpDown.IsFocused" Value="false"/>
                <Condition Property="utilsOuter:UpDown.IsKeyboardFocused" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{StaticResource RangeAdornerBackground}" Property="utilsOuter:UpDown.RangeAdornerBackground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>