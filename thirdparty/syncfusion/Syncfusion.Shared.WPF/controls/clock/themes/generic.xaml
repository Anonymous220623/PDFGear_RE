<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Syncfusion.Windows.Shared"
                    xmlns:utilsOuter="clr-namespace:Syncfusion.Windows.Shared">
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <SolidColorBrush x:Key="Aero.ClockPointColor" Color="#A1A1A1"/>
  <RadialGradientBrush x:Key="Aero.CenteredEllipseColor">
    <GradientBrush.GradientStops>
      <GradientStop Color="#3C3C3C" Offset="1"/>
      <GradientStop Color="#E7F2FB" Offset="0"/>
    </GradientBrush.GradientStops>
  </RadialGradientBrush>
  <SolidColorBrush x:Key="Aero.FirstBorderFrameColor" Color="#BDE0E8"/>
  <SolidColorBrush x:Key="Aero.ThirdBorderFrameBackgroundColor" Color="#EFF3F4"/>
  <SolidColorBrush x:Key="Aero.ThirdBorderFrameBrushColor" Color="#BDE0E8"/>
  <SolidColorBrush x:Key="Aero.DialBorderColor" Color="#FFFFFF"/>
  <LinearGradientBrush x:Key="Aero.HourHandColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#949697" Offset="0.5"/>
      <GradientStop Color="#BFC0C1" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Aero.MinuteHandColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#BFC0C1" Offset="0.5"/>
      <GradientStop Color="#949697" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Aero.SecondHandColor" Color="#66575B5B"/>
  <LinearGradientBrush x:Key="Aero.HourHandMouseOverColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#78CAF1" Offset="0.5"/>
      <GradientStop Color="#AEDFF7" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Aero.MinuteHandMouseOverColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#AEDFF7" Offset="0.5"/>
      <GradientStop Color="#78CAF1" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Aero.SecondHandMouseOverColor" Color="#78CAF1"/>
  <LinearGradientBrush x:Key="Aero.HourHandPressedColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#78CAF1" Offset="0.5"/>
      <GradientStop Color="#AEDFF7" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Aero.MinuteHandPressedColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#AEDFF7" Offset="0.5"/>
      <GradientStop Color="#78CAF1" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Aero.SecondHandPressedColor" Color="#78CAF1"/>
  <SolidColorBrush x:Key="Aero.RectangleStyle" Color="#F4F4F4"/>
  <SolidColorBrush x:Key="Aero.ArrowBorderColor" Color="#949694"/>
  <SolidColorBrush x:Key="Aero.ArrowFill" Color="#464646"/>
  <SolidColorBrush x:Key="Aero.ArrowBorderColorOver" Color="#9CDFFF"/>
  <LinearGradientBrush x:Key="Aero.RectangleOverStyle" StartPoint="0.5,1" EndPoint="0.5,0">
    <GradientStop Color="#F3FAFF" Offset="1"/>
    <GradientStop Color="#DAF4FF" Offset="0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.TextBlockBackground" Color="#FFFFFF"/>
  <SolidColorBrush x:Key="Default.TextBlockForeground" Color="#000000"/>
  <SolidColorBrush x:Key="Aero.ClockPanelBorderColor" Color="#5E9EAA"/>
  <SolidColorBrush x:Key="Aero.ClockPanelInnerBorderColor" Color="#FFFFFF"/>
  <LinearGradientBrush x:Key="Aero.ClockPanelBackgroundColor" StartPoint="0.5,0" EndPoint="0.5,1">
    <GradientStop Color="#92CEDA" Offset="1"/>
    <GradientStop Color="#7AB8C4" Offset="0.45"/>
    <GradientStop Color="#5D9DA9" Offset="0.5"/>
    <GradientStop Color="#7FBCC7" Offset="0"/>
  </LinearGradientBrush>
  <RadialGradientBrush x:Key="Aero.SecondBorderFrameRadialBrush">
    <GradientBrush.GradientStops>
      <GradientStop Color="#8EB1B9" Offset="1"/>
      <GradientStop Color="#C0D1D5" Offset="0.9"/>
    </GradientBrush.GradientStops>
  </RadialGradientBrush>
  <LinearGradientBrush x:Key="Aero.SecondInnerBorderFrameColor" StartPoint="0,0" EndPoint="1,1">
    <GradientBrush.GradientStops>
      <GradientStop Color="#C3E2E9" Offset="0"/>
      <GradientStop Color="#FCFDFD" Offset="0.2"/>
      <GradientStop Color="#F3F9FA" Offset="0.4"/>
      <GradientStop Color="#D7E1E2" Offset="1"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Aero.SecondBorderFrameColor" StartPoint="0,0" EndPoint="1,1">
    <GradientBrush.GradientStops>
      <GradientStop Color="#C3E2E9" Offset="0"/>
      <GradientStop Color="#F7F9FA" Offset="0.3"/>
      <GradientStop Color="#F8FAFA" Offset="0.43"/>
      <GradientStop Color="Transparent" Offset="0.93"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.ThirdBorderFrameBackgroundColor" Color="#FDF0D4"/>
  <RadialGradientBrush x:Key="Default.CenteredEllipseColor">
    <GradientBrush.GradientStops>
      <GradientStop Color="#4A4C4E" Offset="1"/>
      <GradientStop Color="#E7F2FB" Offset="0"/>
    </GradientBrush.GradientStops>
  </RadialGradientBrush>
  <SolidColorBrush x:Key="Default.ClockPointColor" Color="#A1A1A1"/>
  <SolidColorBrush x:Key="Default.FirstBorderFrameColor" Color="#9DC5FA"/>
  <SolidColorBrush x:Key="Default.ThirdBorderFrameBrushColor" Color="#C4D3EE"/>
  <SolidColorBrush x:Key="Default.DialBorderColor" Color="#FFFFFF"/>
  <LinearGradientBrush x:Key="Default.HourHandColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#1D72DB" Offset="0.5"/>
      <GradientStop Color="#77AAE9" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Default.MinuteHandColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#77AAE9" Offset="0.5"/>
      <GradientStop Color="#1D72DB" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.SecondHandColor" Color="#77AAE9"/>
  <LinearGradientBrush x:Key="Default.HourHandMouseOverColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#EC7902" Offset="0.5"/>
      <GradientStop Color="#F3B06B" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Default.MinuteHandMouseOverColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#F3B06B" Offset="0.5"/>
      <GradientStop Color="#EC7902" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.SecondHandMouseOverColor" Color="#EC7902"/>
  <LinearGradientBrush x:Key="Default.HourHandPressedColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#EC7902" Offset="0.5"/>
      <GradientStop Color="#F3B06B" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Default.MinuteHandPressedColor" StartPoint="0,0.5" EndPoint="1,0.5">
    <GradientBrush.GradientStops>
      <GradientStop Color="#F3B06B" Offset="0.5"/>
      <GradientStop Color="#EC7902" Offset="0.6"/>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.SecondHandPressedColor" Color="#EC7902"/>
  <LinearGradientBrush x:Key="Default.RectangleStyle" StartPoint="0.5,1" EndPoint="0.5,0">
    <GradientStop Color="#BDD7FD" Offset="1"/>
    <GradientStop Color="#82AAE3" Offset="0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.ArrowBorderColor" Color="#C2D5F6"/>
  <SolidColorBrush x:Key="Default.ArrowFill" Color="#FFFFFF"/>
  <SolidColorBrush x:Key="Default.ArrowBorderColorOver" Color="#FF9934"/>
  <LinearGradientBrush x:Key="Default.RectangleOverStyle" StartPoint="0.5,1" EndPoint="0.5,0">
    <GradientStop Color="#FFCC62" Offset="1"/>
    <GradientStop Color="#FF9934" Offset="0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Default.ClockPanelBorderColor" Color="#0B60CD"/>
  <SolidColorBrush x:Key="Default.ClockPanelInnerBorderColor" Color="#FFFFFF"/>
  <LinearGradientBrush x:Key="Default.ClockPanelBackgroundColor" StartPoint="0.5,0" EndPoint="0.5,1">
    <GradientStop Color="#63A3F2" Offset="1"/>
    <GradientStop Color="#83B4EF" Offset="0.4"/>
    <GradientStop Color="#4C95EF" Offset="0.5"/>
    <GradientStop Color="#599EF2" Offset="0"/>
  </LinearGradientBrush>
  <Geometry x:Key="DownArrowGeometry">
    M 0 0 L 3.5 3 L 7 0 Z
  </Geometry>
  <Geometry x:Key="UpArrowGeometry">
    M 0 3 L 3.5 0 L 7 3 Z
  </Geometry>
  <Style x:Key="InnerClockGeneralStyle" TargetType="{x:Type FrameworkElement}">
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=InnerClockGeneralWidth, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=InnerClockGeneralHeight, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="FirstBorderFrameStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderBrush" Value="{StaticResource Default.FirstBorderFrameColor}"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.BorderThickness"
            Value="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="SecondBorderFrameStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{StaticResource Aero.SecondInnerBorderFrameColor}"/>
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="SecondInnerBorderFrameStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{StaticResource Aero.SecondInnerBorderFrameColor}"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=SecondInnerBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=SecondInnerBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="ThirdBorderFrameStyle" TargetType="{x:Type Border}">
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="Border.Background" Value="{StaticResource Default.ThirdBorderFrameBackgroundColor}"/>
    <Setter Property="Border.BorderBrush" Value="{StaticResource Default.ThirdBorderFrameBrushColor}"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=ThirdBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=ThirdBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.BorderThickness"
            Value="{Binding Path=InnerBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="InnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderBrush" Value="{StaticResource Default.DialBorderColor}"/>
    <Setter Property="Border.BorderThickness"
            Value="{Binding Path=DialBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=ClockCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="CenteredEllipseStyle" TargetType="{x:Type Ellipse}">
    <Setter Property="Shape.Fill" Value="{StaticResource Default.CenteredEllipseColor}"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=CenteredEllipseRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=CenteredEllipseRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Panel.ZIndex" Value="4"/>
    <Setter Property="Canvas.Top" Value="60"/>
    <Setter Property="Canvas.Left" Value="57"/>
  </Style>
  <Style x:Key="ClockPointStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="Shape.Fill"
            Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Width" Value="2"/>
    <Setter Property="FrameworkElement.Height" Value="8"/>
    <Setter Property="Canvas.Top" Value="5"/>
    <Setter Property="Canvas.Left" Value="60"/>
    <Style.Triggers>
      <Trigger Property="utilsOuter:SkinStorage.VisualStyle" Value="Default">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ClockPointLittleStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="Shape.Fill"
            Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Width" Value="1"/>
    <Setter Property="FrameworkElement.Height" Value="3"/>
    <Setter Property="Canvas.Top" Value="5"/>
    <Setter Property="Canvas.Left" Value="60"/>
    <Style.Triggers>
      <Trigger Property="utilsOuter:SkinStorage.VisualStyle" Value="Default">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=ClockPointBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HourHandStyle" TargetType="{x:Type Path}">
    <Setter Property="Shape.Stroke" Value="{StaticResource Default.HourHandColor}"/>
    <Setter Property="Shape.Fill" Value="{StaticResource Default.HourHandColor}"/>
    <Setter Property="Path.Data" Value="M 5,5 L 0,28 3.5,38 8,28 Z"/>
    <Setter Property="Panel.ZIndex" Value="2"/>
    <Setter Property="Canvas.Top" Value="27"/>
    <Setter Property="Canvas.Left" Value="58"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Shape.Fill" Value="{StaticResource Default.HourHandMouseOverColor}"/>
        <Setter Property="Shape.Stroke" Value="{StaticResource Default.HourHandMouseOverColor}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Path=IsPressedHourHand, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                   Value="True">
        <Setter Property="Shape.Fill" Value="{StaticResource Default.HourHandPressedColor}"/>
        <Setter Property="Shape.Stroke" Value="{StaticResource Default.HourHandPressedColor}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="HourHandDefaultStyle" TargetType="{x:Type Path}" BasedOn="{StaticResource HourHandStyle}">
    <Setter Property="Shape.Stroke"
            Value="{Binding Path=HourHandBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Shape.Fill"
            Value="{Binding Path=HourHandBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=HourHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
        <Setter Property="Shape.Stroke"
                Value="{Binding Path=HourHandMouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Path=IsPressedHourHand, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                   Value="True">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=HourHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
        <Setter Property="Shape.Stroke" Value="{StaticResource Default.HourHandPressedColor}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MinuteHandStyle" TargetType="{x:Type Path}">
    <Setter Property="Shape.Stroke" Value="{StaticResource Default.MinuteHandColor}"/>
    <Setter Property="Shape.Fill" Value="{StaticResource Default.MinuteHandColor}"/>
    <Setter Property="Path.Data" Value="M 5,5 L 0,40 3.5,48 8,40 Z"/>
    <Setter Property="Panel.ZIndex" Value="1"/>
    <Setter Property="Canvas.Top" Value="16"/>
    <Setter Property="Canvas.Left" Value="57"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Shape.Fill" Value="{StaticResource Default.MinuteHandMouseOverColor}"/>
        <Setter Property="Shape.Stroke" Value="{StaticResource Default.MinuteHandMouseOverColor}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Path=IsPressedMinuteHand, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                   Value="True">
        <Setter Property="Shape.Fill" Value="{StaticResource Default.MinuteHandPressedColor}"/>
        <Setter Property="Shape.Stroke" Value="{StaticResource Default.MinuteHandPressedColor}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MinuteHandDefaultStyle" TargetType="{x:Type Path}"
         BasedOn="{StaticResource MinuteHandStyle}">
    <Setter Property="Shape.Stroke"
            Value="{Binding Path=MinuteHandBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Shape.Fill"
            Value="{Binding Path=MinuteHandBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=MinuteHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
        <Setter Property="Shape.Stroke"
                Value="{Binding Path=MinuteHandMouseOverBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Path=IsPressedMinuteHand, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                   Value="True">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=MinuteHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
        <Setter Property="Shape.Stroke" Value="{StaticResource Default.MinuteHandPressedColor}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SecondHandStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="Shape.Fill" Value="{StaticResource Default.SecondHandColor}"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=SecondHandThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=SecondHandHeight, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Panel.ZIndex" Value="3"/>
    <Setter Property="Canvas.Top" Value="12"/>
    <Setter Property="Canvas.Left" Value="61"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Shape.Fill" Value="{StaticResource Default.SecondHandMouseOverColor}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                   Value="True">
        <Setter Property="Shape.Fill" Value="{StaticResource Default.SecondHandPressedColor}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SecondHandDefaultStyle" TargetType="{x:Type Rectangle}"
         BasedOn="{StaticResource SecondHandStyle}">
    <Setter Property="Shape.Fill"
            Value="{Binding Path=SecondHandBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=SecondHandMouseOverBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Path=IsPressedSecondHand, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                   Value="True">
        <Setter Property="Shape.Fill"
                Value="{Binding Path=SecondHandPressedBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TimeTextBlockStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FrameworkElement.Width" Value="62"/>
    <Setter Property="FrameworkElement.Margin" Value="5,0,5,0"/>
    <Setter Property="TextBlock.FontSize" Value="11"/>
    <Setter Property="TextBlock.Foreground" Value="{StaticResource Default.TextBlockForeground}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="TextBlock.TextAlignment" Value="Center"/>
  </Style>
  <Style x:Key="TimeTextBlockSmallStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="10"/>
    <Setter Property="TextBlock.Foreground" Value="{StaticResource Default.TextBlockForeground}"/>
    <Setter Property="FrameworkElement.Margin" Value="1,0,1,0"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
  </Style>
  <Style x:Key="ContentPresenterStyle" TargetType="{x:Type ContentPresenter}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
  </Style>
  <Style x:Key="RectangleStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="FrameworkElement.Width" Value="Auto"/>
    <Setter Property="FrameworkElement.Height" Value="8"/>
    <Setter Property="Rectangle.RadiusX" Value="0"/>
    <Setter Property="Rectangle.RadiusY" Value="0"/>
    <Setter Property="Shape.Fill" Value="{StaticResource Default.RectangleStyle}"/>
  </Style>
  <Style x:Key="PathStyle" TargetType="{x:Type Path}">
    <Setter Property="FrameworkElement.Margin" Value="0,-3,0,-3"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Canvas.Top" Value="5"/>
    <Setter Property="Canvas.Left" Value="5"/>
  </Style>
  <Style x:Key="ArrowBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="Border.CornerRadius" Value="0"/>
    <Setter Property="Border.BorderBrush" Value="{StaticResource Default.ArrowBorderColor}"/>
  </Style>
  <Style x:Key="FrameBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=FrameCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.BorderThickness"
            Value="{Binding Path=FrameBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.BorderBrush" Value="{StaticResource Default.ClockPanelBorderColor}"/>
    <Setter Property="Border.Background" Value="{StaticResource Default.ClockPanelInnerBorderColor}"/>
    <Setter Property="FrameworkElement.Width"
            Value="{Binding Path=FrameWidth, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <Style x:Key="FrameInnerBorderStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius"
            Value="{Binding Path=FrameCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.BorderThickness"
            Value="{Binding Path=FrameInnerBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
    <Setter Property="Border.Padding" Value="10,5,10,0"/>
    <Setter Property="FrameworkElement.Width" Value="Auto"/>
    <Setter Property="Border.Background"
            Value="{Binding Path=FrameBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
  </Style>
  <DataTemplate x:Key="TwelfthPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="337"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="343"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="349"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="355"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="0"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="EleventhPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="307"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="313"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="319"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="325"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="330"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="TenthPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="277"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="283"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="289"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="295"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="300"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="NinethPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="247"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="253"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="259"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="265"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="270"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="EighthPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="217"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="223"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="229"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="235"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="240"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="SeventhPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="187"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="193"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="199"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="205"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="210"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="SixthPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="157"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="163"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="169"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="175"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="180"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="FifthPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="127"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="133"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="139"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="145"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="150"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="FourthPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="97"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="103"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="109"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="115"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="120"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="ThirdPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="67"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="73"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="79"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="85"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="90"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="SecondPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="37"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="43"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="49"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="55"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="60"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <DataTemplate x:Key="FirstPartTemplate">
    <Canvas>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="7"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="13"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="19"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointLittleStyle}">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="25"/>
        </UIElement.RenderTransform>
      </Rectangle>
      <Rectangle Style="{StaticResource ClockPointStyle}" Canvas.Left="61">
        <UIElement.RenderTransform>
          <RotateTransform CenterX="2" CenterY="60" Angle="30"/>
        </UIElement.RenderTransform>
      </Rectangle>
    </Canvas>
  </DataTemplate>
  <ControlTemplate x:Key="ScrollBarButtonDownTemplate" TargetType="{x:Type RepeatButton}">
    <Grid FocusManager.IsFocusScope="true">
      <Button Name="TopButton" Command="local:Clock.m_AMPMSelect"/>
      <ContentPresenter Style="{StaticResource ContentPresenterStyle}">
        <ContentPresenter.Content>
          <Canvas Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}">
            <Border Name="DownBorder" Style="{StaticResource ArrowBorderStyle}"
                    Height="{TemplateBinding FrameworkElement.Height}"
                    BorderBrush="{Binding Path=AMPMSelectorButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
              <Rectangle Name="DownRect" Height="{TemplateBinding FrameworkElement.Height}"
                         Width="{TemplateBinding FrameworkElement.Width}" Style="{StaticResource RectangleStyle}"
                         Fill="{Binding Path=AMPMSelectorButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
            </Border>
            <Path Name="DownPath" Data="{StaticResource DownArrowGeometry}" Style="{StaticResource PathStyle}"
                  Fill="{Binding Path=AMPMSelectorButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
          </Canvas>
        </ContentPresenter.Content>
      </ContentPresenter>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="FrameworkElement.Width" Value="10">
        <Setter TargetName="DownPath" Property="Canvas.Top" Value="4"/>
        <Setter TargetName="DownPath" Property="Canvas.Left" Value="1"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="DownBorder"
                Value="{Binding Path=AMPMMouseOverButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="DownRect"
                Value="{Binding Path=AMPMMouseOverButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                Property="Shape.Fill"/>
        <Setter TargetName="DownPath"
                Value="{Binding Path=AMPMMouseOverButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                Property="Shape.Fill"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ScrollBarButtonUpTemplate" TargetType="{x:Type RepeatButton}">
    <Grid FocusManager.IsFocusScope="true">
      <ContentPresenter Style="{StaticResource ContentPresenterStyle}">
        <ContentPresenter.Content>
          <Canvas Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}">
            <Border Name="UpBorder" Style="{StaticResource ArrowBorderStyle}"
                    Height="{TemplateBinding FrameworkElement.Height}"
                    BorderBrush="{Binding Path=AMPMSelectorButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
              <Rectangle Name="UpRect" Height="{TemplateBinding FrameworkElement.Height}"
                         Width="{TemplateBinding FrameworkElement.Width}" Style="{StaticResource RectangleStyle}"
                         Fill="{Binding Path=AMPMSelectorButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
            </Border>
            <Path Name="UpPath" Data="{StaticResource UpArrowGeometry}" Style="{StaticResource PathStyle}"
                  Fill="{Binding Path=AMPMSelectorButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
          </Canvas>
        </ContentPresenter.Content>
      </ContentPresenter>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="FrameworkElement.Width" Value="10">
        <Setter TargetName="UpPath" Property="Canvas.Top" Value="4"/>
        <Setter TargetName="UpPath" Property="Canvas.Left" Value="1"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="UpBorder"
                Value="{Binding Path=AMPMMouseOverButtonsBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="UpRect"
                Value="{Binding Path=AMPMMouseOverButtonsBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                Property="Shape.Fill"/>
        <Setter TargetName="UpPath"
                Value="{Binding Path=AMPMMouseOverButtonsArrowBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                Property="Shape.Fill"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type utilsOuter:Clock}">
    <Setter Property="utilsOuter:Clock.ClockPointBrush" Value="{StaticResource Default.ClockPointColor}"/>
    <Setter Property="utilsOuter:Clock.CenterCircleBrush" Value="{StaticResource Default.CenteredEllipseColor}"/>
    <Setter Property="utilsOuter:Clock.BorderBrush" Value="{StaticResource Default.FirstBorderFrameColor}"/>
    <Setter Property="utilsOuter:Clock.DialCenterBackground"
            Value="{StaticResource Default.ThirdBorderFrameBackgroundColor}"/>
    <Setter Property="utilsOuter:Clock.InnerBorderBrush"
            Value="{StaticResource Default.ThirdBorderFrameBrushColor}"/>
    <Setter Property="utilsOuter:Clock.DialBackground" Value="{StaticResource Default.DialBorderColor}"/>
    <Setter Property="utilsOuter:Clock.HourHandBrush" Value="{StaticResource Default.HourHandColor}"/>
    <Setter Property="utilsOuter:Clock.MinuteHandBrush" Value="{StaticResource Default.MinuteHandColor}"/>
    <Setter Property="utilsOuter:Clock.SecondHandBrush" Value="{StaticResource Default.SecondHandColor}"/>
    <Setter Property="utilsOuter:Clock.HourHandMouseOverBrush"
            Value="{StaticResource Default.HourHandMouseOverColor}"/>
    <Setter Property="utilsOuter:Clock.MinuteHandMouseOverBrush"
            Value="{StaticResource Default.MinuteHandMouseOverColor}"/>
    <Setter Property="utilsOuter:Clock.SecondHandMouseOverBrush"
            Value="{StaticResource Default.SecondHandMouseOverColor}"/>
    <Setter Property="utilsOuter:Clock.HourHandPressedBrush"
            Value="{StaticResource Default.HourHandPressedColor}"/>
    <Setter Property="utilsOuter:Clock.MinuteHandPressedBrush"
            Value="{StaticResource Default.MinuteHandPressedColor}"/>
    <Setter Property="utilsOuter:Clock.SecondHandPressedBrush"
            Value="{StaticResource Default.SecondHandPressedColor}"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorButtonsBackground"
            Value="{StaticResource Default.RectangleStyle}"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorButtonsBorderBrush"
            Value="{StaticResource Default.RectangleStyle}"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorBorderBrush"
            Value="{StaticResource Default.ArrowBorderColor}"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorButtonsArrowBrush"
            Value="{StaticResource Default.ArrowFill}"/>
    <Setter Property="utilsOuter:Clock.AMPMMouseOverButtonsArrowBrush"
            Value="{StaticResource Default.ArrowFill}"/>
    <Setter Property="utilsOuter:Clock.AMPMMouseOverButtonsBorderBrush"
            Value="{StaticResource Default.ArrowBorderColorOver}"/>
    <Setter Property="utilsOuter:Clock.AMPMMouseOverButtonsBackground"
            Value="{StaticResource Default.RectangleOverStyle}"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorBackground"
            Value="{StaticResource Default.TextBlockBackground}"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorForeground"
            Value="{StaticResource Default.TextBlockForeground}"/>
    <Setter Property="utilsOuter:Clock.FrameBorderBrush" Value="{StaticResource Default.ClockPanelBorderColor}"/>
    <Setter Property="utilsOuter:Clock.FrameInnerBorderBrush"
            Value="{StaticResource Default.ClockPanelInnerBorderColor}"/>
    <Setter Property="utilsOuter:Clock.FrameBackground"
            Value="{StaticResource Default.ClockPanelBackgroundColor}"/>
    <Setter Property="utilsOuter:Clock.BorderThickness" Value="2"/>
    <Setter Property="utilsOuter:Clock.ClockCornerRadius" Value="90"/>
    <Setter Property="utilsOuter:Clock.InnerBorderThickness" Value="2"/>
    <Setter Property="utilsOuter:Clock.DialBorderThickness" Value="25"/>
    <Setter Property="utilsOuter:Clock.FrameCornerRadius" Value="0"/>
    <Setter Property="utilsOuter:Clock.FrameInnerBorderThickness" Value="1"/>
    <Setter Property="utilsOuter:Clock.AMPMSelectorCornerRadius" Value="0"/>
    <Style.Triggers>
      <Trigger Property="utilsOuter:Clock.CanResize" Value="true">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type utilsOuter:Clock}">
              <Viewbox Height="{TemplateBinding FrameworkElement.ActualHeight}">
                <Border Name="FrameBorder" Style="{StaticResource FrameBorderStyle}"
                        Background="{Binding Path=FrameInnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                        BorderBrush="{Binding Path=FrameBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                  <Border Name="FrameInnerBorder" Style="{StaticResource FrameInnerBorderStyle}">
                    <Grid HorizontalAlignment="Center">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                        <RowDefinition Height="30"/>
                      </Grid.RowDefinitions>
                      <Border Name="FirstBorder" Grid.Row="0" Grid.Column="0" Style="{StaticResource FirstBorderFrameStyle}"
                              BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                        <Border Style="{StaticResource SecondBorderFrameStyle}"
                                Background="{StaticResource Aero.SecondBorderFrameRadialBrush}">
                          <Border Name="SecondBorder" Style="{StaticResource SecondBorderFrameStyle}"
                                  Background="{Binding Path=ClockFrameBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                            <Border Name="SecondInnerBorder" Style="{StaticResource SecondInnerBorderFrameStyle}"
                                    Background="{Binding Path=ClockFrameBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                              <Border Name="ThirdBorder" Style="{StaticResource ThirdBorderFrameStyle}"
                                      BorderBrush="{Binding Path=InnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                      Background="{Binding Path=DialCenterBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                                <Border Name="InnerBorder" Style="{StaticResource InnerBorderStyle}"
                                        BorderBrush="{Binding Path=DialBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                              </Border>
                            </Border>
                          </Border>
                        </Border>
                      </Border>
                      <Canvas Style="{StaticResource InnerClockGeneralStyle}" FlowDirection="LeftToRight">
                        <Ellipse Name="CenteredEllipse" Style="{StaticResource CenteredEllipseStyle}"
                                 Fill="{Binding Path=CenterCircleBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                        <ContentPresenter ContentTemplate="{StaticResource FirstPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource SecondPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource ThirdPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource FourthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource FifthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource SixthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource SeventhPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource EighthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource NinethPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource TenthPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource EleventhPartTemplate}"/>
                        <ContentPresenter ContentTemplate="{StaticResource TwelfthPartTemplate}"/>
                        <Path x:Name="HourHand" Style="{StaticResource HourHandDefaultStyle}">
                          <UIElement.RenderTransform>
                            <RotateTransform x:Name="HourHandRotateTransform" CenterX="4" CenterY="39"
                                             Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource hoursConverter}}"/>
                          </UIElement.RenderTransform>
                        </Path>
                        <Path x:Name="MinuteHand" Style="{StaticResource MinuteHandDefaultStyle}">
                          <UIElement.RenderTransform>
                            <RotateTransform x:Name="MinuteHandRotateTransform" CenterX="4.7" CenterY="49"
                                             Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource minutesConverter}}"/>
                          </UIElement.RenderTransform>
                        </Path>
                        <Rectangle x:Name="SecondHand" Style="{StaticResource SecondHandDefaultStyle}">
                          <UIElement.RenderTransform>
                            <RotateTransform x:Name="SecondHandRotateTransform" CenterX="0.5" CenterY="55"
                                             Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource secondsConverter}}"/>
                          </UIElement.RenderTransform>
                        </Rectangle>
                        <StackPanel Name="SmallAmPmPanel" Width="26" ZIndex="0" Canvas.Top="76" Canvas.Left="45"
                                    Visibility="{TemplateBinding IsInsideAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                          <Border Name="SmallAmPmPanelBorder"
                                  CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                  BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                  BorderBrush="{Binding Path=AMPMSelectorBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                            <Grid Name="SmallAmPmPanelGrid"
                                  Background="{Binding Path=AMPMSelectorBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="12"/>
                              </Grid.ColumnDefinitions>
                              <TextBlock Name="SmallTimeTextBlock" Grid.Column="0" Style="{StaticResource TimeTextBlockSmallStyle}"
                                         Foreground="{Binding Path=AMPMSelectorForeground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                         Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}"/>
                              <Grid Column="1" Row="0" RowSpan="3">
                                <Grid.ColumnDefinitions>
                                  <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                  <RowDefinition/>
                                  <RowDefinition/>
                                </Grid.RowDefinitions>
                                <RepeatButton Name="UpInnerRepeatButton" Grid.Row="0" Margin="-1,0,0,0" Width="10" Height="8"
                                              Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonUpTemplate}"/>
                                <RepeatButton Name="DownInnerRepeatButton" Grid.Row="1" Margin="-1,0,0,0" Width="10" Height="8"
                                              Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonDownTemplate}"/>
                              </Grid>
                            </Grid>
                          </Border>
                        </StackPanel>
                      </Canvas>
                      <StackPanel Name="BigAmPmPanel" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Width="90"
                                  Visibility="{TemplateBinding IsDigitalAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Border Name="BigAmPmPanelBorder"
                                CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                BorderBrush="{Binding Path=AMPMSelectorBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                          <StackPanel Name="BigAmPmContainer" Orientation="Horizontal"
                                      Background="{Binding Path=AMPMSelectorBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                            <TextBlock Name="TimeTextBlock" Grid.Column="0" Style="{StaticResource TimeTextBlockStyle}"
                                       Foreground="{Binding Path=AMPMSelectorForeground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                       Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Grid Name="BigAmPmSelectorGrid" Width="16" Column="1" Row="0" RowSpan="3">
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                              </Grid.ColumnDefinitions>
                              <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                              </Grid.RowDefinitions>
                              <RepeatButton Name="UpRepeatButton" Grid.Row="0" Width="15" Height="10" Command="local:Clock.m_AMPMSelect"
                                            Template="{StaticResource ScrollBarButtonUpTemplate}"/>
                              <RepeatButton Name="DownRepeatButton" Grid.Row="1" Width="15" Height="10" Command="local:Clock.m_AMPMSelect"
                                            Template="{StaticResource ScrollBarButtonDownTemplate}"/>
                            </Grid>
                          </StackPanel>
                        </Border>
                      </StackPanel>
                    </Grid>
                  </Border>
                </Border>
              </Viewbox>
              <ControlTemplate.Triggers>
                <Trigger Property="utilsOuter:Clock.IsDigitalAmPmVisible" Value="false">
                  <Setter TargetName="BigAmPmPanel" Property="FrameworkElement.Width" Value="75"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.IsDigitalAmPmVisible" Value="true">
                  <Setter TargetName="BigAmPmPanel" Property="FrameworkElement.Width" Value="90"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.ClockFrameBrush" Value="Transparent">
                  <Setter TargetName="SecondInnerBorder" Value="{StaticResource Aero.SecondInnerBorderFrameColor}"
                          Property="Border.Background"/>
                  <Setter TargetName="SecondBorder" Value="{StaticResource Aero.SecondBorderFrameColor}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Bottom">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="96"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="49"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Top">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="16"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="48"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Left">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="10"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Right">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="87"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="utilsOuter:Clock.CanResize" Value="false">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type utilsOuter:Clock}">
              <Border Name="FrameBorder" Style="{StaticResource FrameBorderStyle}"
                      Background="{Binding Path=FrameInnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                      BorderBrush="{Binding Path=FrameBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                <Border Name="FrameInnerBorder" Style="{StaticResource FrameInnerBorderStyle}">
                  <Grid HorizontalAlignment="Center">
                    <FrameworkElement.Resources>
                      <utilsOuter:SecondsConverter x:Key="secondsConverter"/>
                      <utilsOuter:MinutesConverter x:Key="minutesConverter"/>
                      <utilsOuter:HoursConverter x:Key="hoursConverter"/>
                    </FrameworkElement.Resources>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="{Binding Path=FirstBorderFrameRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                      <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Border Name="FirstBorder" Grid.Row="0" Grid.Column="0" Style="{StaticResource FirstBorderFrameStyle}"
                            BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                      <Border Style="{StaticResource SecondBorderFrameStyle}"
                              Background="{StaticResource Aero.SecondBorderFrameRadialBrush}">
                        <Border Name="SecondBorder" Style="{StaticResource SecondBorderFrameStyle}"
                                Background="{Binding Path=ClockFrameBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                          <Border Name="SecondInnerBorder" Style="{StaticResource SecondInnerBorderFrameStyle}"
                                  Background="{Binding Path=ClockFrameBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                            <Border Name="ThirdBorder" Style="{StaticResource ThirdBorderFrameStyle}"
                                    BorderBrush="{Binding Path=InnerBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                    Background="{Binding Path=DialCenterBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                              <Border Name="InnerBorder" Style="{StaticResource InnerBorderStyle}"
                                      BorderBrush="{Binding Path=DialBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                            </Border>
                          </Border>
                        </Border>
                      </Border>
                    </Border>
                    <Canvas Style="{StaticResource InnerClockGeneralStyle}" FlowDirection="LeftToRight">
                      <Ellipse Name="CenteredEllipse" Style="{StaticResource CenteredEllipseStyle}"
                               Fill="{Binding Path=CenterCircleBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"/>
                      <ContentPresenter ContentTemplate="{StaticResource FirstPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource SecondPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource ThirdPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource FourthPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource FifthPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource SixthPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource SeventhPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource EighthPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource NinethPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource TenthPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource EleventhPartTemplate}"/>
                      <ContentPresenter ContentTemplate="{StaticResource TwelfthPartTemplate}"/>
                      <Path x:Name="HourHand" Style="{StaticResource HourHandDefaultStyle}">
                        <UIElement.RenderTransform>
                          <RotateTransform x:Name="HourHandRotateTransform" CenterX="4" CenterY="39"
                                           Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource hoursConverter}}"/>
                        </UIElement.RenderTransform>
                      </Path>
                      <Path x:Name="MinuteHand" Style="{StaticResource MinuteHandDefaultStyle}">
                        <UIElement.RenderTransform>
                          <RotateTransform x:Name="MinuteHandRotateTransform" CenterX="4.7" CenterY="49"
                                           Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource minutesConverter}}"/>
                        </UIElement.RenderTransform>
                      </Path>
                      <Rectangle x:Name="SecondHand" Style="{StaticResource SecondHandDefaultStyle}">
                        <UIElement.RenderTransform>
                          <RotateTransform x:Name="SecondHandRotateTransform" CenterX="0.5" CenterY="55"
                                           Angle="{Binding Path=DateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource secondsConverter}}"/>
                        </UIElement.RenderTransform>
                      </Rectangle>
                      <StackPanel Name="SmallAmPmPanel" Width="26" ZIndex="0" Canvas.Top="76" Canvas.Left="45"
                                  Visibility="{TemplateBinding IsInsideAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Border Name="SmallAmPmPanelBorder"
                                CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                BorderBrush="{Binding Path=AMPMSelectorBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                          <Grid Name="SmallAmPmPanelGrid"
                                Background="{Binding Path=AMPMSelectorBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="16"/>
                              <ColumnDefinition Width="12"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Name="SmallTimeTextBlock" Grid.Column="0" Style="{StaticResource TimeTextBlockSmallStyle}"
                                       Foreground="{Binding Path=AMPMSelectorForeground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                       Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Grid Column="1" Row="0" RowSpan="3">
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                              </Grid.ColumnDefinitions>
                              <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                              </Grid.RowDefinitions>
                              <RepeatButton Name="UpInnerRepeatButton" Grid.Row="0" Margin="-1,0,0,0" Width="10" Height="8"
                                            Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonUpTemplate}"/>
                              <RepeatButton Name="DownInnerRepeatButton" Grid.Row="1" Margin="-1,0,0,0" Width="10" Height="8"
                                            Command="local:Clock.m_AMPMSelect" Template="{StaticResource ScrollBarButtonDownTemplate}"/>
                            </Grid>
                          </Grid>
                        </Border>
                      </StackPanel>
                    </Canvas>
                    <StackPanel Name="BigAmPmPanel" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Width="90"
                                Visibility="{TemplateBinding IsDigitalAmPmVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                      <Border Name="BigAmPmPanelBorder"
                              CornerRadius="{Binding Path=AMPMSelectorCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                              BorderThickness="{Binding Path=AMPMSelectorBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                              BorderBrush="{Binding Path=AMPMSelectorBorderBrush, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                        <StackPanel Name="BigAmPmContainer" Orientation="Horizontal"
                                    Background="{Binding Path=AMPMSelectorBackground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}">
                          <TextBlock Name="TimeTextBlock" Grid.Column="0" Style="{StaticResource TimeTextBlockStyle}"
                                     Foreground="{Binding Path=AMPMSelectorForeground, RelativeSource={RelativeSource AncestorType={x:Type utilsOuter:Clock}}}"
                                     Text="{Binding Path=LongTime, RelativeSource={RelativeSource TemplatedParent}}"/>
                          <Grid Name="BigAmPmSelectorGrid" Width="16" Column="1" Row="0" RowSpan="3">
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                              <RowDefinition/>
                              <RowDefinition/>
                            </Grid.RowDefinitions>
                            <RepeatButton Name="UpRepeatButton" Grid.Row="0" Width="15" Height="10" Command="local:Clock.m_AMPMSelect"
                                          Template="{StaticResource ScrollBarButtonUpTemplate}"/>
                            <RepeatButton Name="DownRepeatButton" Grid.Row="1" Width="15" Height="10" Command="local:Clock.m_AMPMSelect"
                                          Template="{StaticResource ScrollBarButtonDownTemplate}"/>
                          </Grid>
                        </StackPanel>
                      </Border>
                    </StackPanel>
                  </Grid>
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="utilsOuter:Clock.IsDigitalAmPmVisible" Value="false">
                  <Setter TargetName="BigAmPmPanel" Property="FrameworkElement.Width" Value="75"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.IsDigitalAmPmVisible" Value="true">
                  <Setter TargetName="BigAmPmPanel" Property="FrameworkElement.Width" Value="90"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.ClockFrameBrush" Value="Transparent">
                  <Setter TargetName="SecondInnerBorder" Value="{StaticResource Aero.SecondInnerBorderFrameColor}"
                          Property="Border.Background"/>
                  <Setter TargetName="SecondBorder" Value="{StaticResource Aero.SecondBorderFrameColor}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Bottom">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="96"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="49"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Top">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="16"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="48"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Left">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="10"/>
                </Trigger>
                <Trigger Property="utilsOuter:Clock.AMPMSelectorPosition" Value="Right">
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Top" Value="56"/>
                  <Setter TargetName="SmallAmPmPanel" Property="Canvas.Left" Value="87"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>