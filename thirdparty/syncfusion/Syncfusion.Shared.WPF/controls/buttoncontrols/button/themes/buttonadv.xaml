<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:skin="clr-namespace:Syncfusion.Windows.Shared"
                    xmlns:local="clr-namespace:Syncfusion.Windows.Tools.Controls">
  <SolidColorBrush x:Key="ButtonAdvBorderBrush" Color="#FF707070"/>
  <LinearGradientBrush x:Key="ButtonAdvBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFECECEC" Offset="0.469"/>
    <GradientStop Color="#FFDBDBDB" Offset="0.531"/>
    <GradientStop Color="#FFD0D0D0" Offset="0.954"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ButtonAdvForeground" Color="#FF1B293E"/>
  <LinearGradientBrush x:Key="ButtonAdvInnerBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="White" Offset="0"/>
    <GradientStop Color="#FFE8E8E8" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ButtonAdvHoverBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFDBF1FC" Offset="0.465"/>
    <GradientStop Color="#FFBCE5FC" Offset="0.526"/>
    <GradientStop Color="#FFAADBF6" Offset="0.991"/>
    <GradientStop Color="#FFD6EDFA" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ButtonAdvHoverBorderBrush" Color="#FF3C7FB1"/>
  <SolidColorBrush x:Key="ButtonAdvHoverForeground" Color="#FF000000"/>
  <LinearGradientBrush x:Key="ButtonHoverInnerBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFFEFFFF" Offset="0"/>
    <GradientStop Color="#FFD6EDFA" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ButtonAdvPressedBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FF8CA1AC" Offset="0.036"/>
    <GradientStop Color="#FFB0CDDD" Offset="0.048"/>
    <GradientStop Color="#FFB0CDDD" Offset="0.084"/>
    <GradientStop Color="#FFC2E4F6" Offset="0.096"/>
    <GradientStop Color="#FFC2E4F6" Offset="0.468"/>
    <GradientStop Color="#FFA8D9F2" Offset="0.532"/>
    <GradientStop Color="#FF91CCEB" Offset="0.964"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ButtonAdvPressedBorderBrush" Color="#FF2C628B"/>
  <LinearGradientBrush x:Key="DefaultButtonAdvCheckedBackground" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFC2E4F6" Offset="0.453"/>
    <GradientStop Color="#FFA9DAF3" Offset="0.462"/>
    <GradientStop Color="#FF96CFED" Offset="0.864"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DefaultButtonAdvCheckedBorderBrush" Color="#FF2C628B"/>
  <DataTemplate x:Key="LargeIconTemplate">
    <Image x:Name="LargeImage" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"
           Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"
           Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
  </DataTemplate>
  <DataTemplate x:Key="SmallIconTemplate">
    <Image x:Name="smallimage" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"
           Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"
           Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
  </DataTemplate>
  <ControlTemplate x:Key="LargeModeTemplate" TargetType="{x:Type local:ButtonAdv}">
    <Border x:Name="ItemBorder" Background="{TemplateBinding Control.Background}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            BorderBrush="{TemplateBinding Control.BorderBrush}" MinHeight="22" SnapsToDevicePixels="true"
            CornerRadius="3">
      <Border x:Name="InnerBorder" Background="Transparent"
              BorderBrush="{StaticResource ButtonAdvInnerBorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
        <StackPanel Margin="2,0,2,0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
          <Border Name="PART_ImageBorderLarge">
            <ContentPresenter x:Name="LargeIconContent" Margin="2"
                              ContentTemplate="{TemplateBinding local:ButtonAdv.IconTemplate}"
                              ContentTemplateSelector="{TemplateBinding local:ButtonAdv.IconTemplateSelector}"
                              Content="{Binding}"/>
          </Border>
          <TextBlock x:Name="PART_LargeText" Focusable="false"
                     VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                     HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                     Text="{TemplateBinding local:ButtonAdv.Label}" Margin="2,0,2,0"/>
        </StackPanel>
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="skin:SkinStorage.EnableTouch" Value="true">
        <Setter Property="FrameworkElement.MinHeight" Value="30"/>
        <Setter Property="FrameworkElement.MinWidth" Value="30"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="skin:SkinStorage.EnableTouch" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvHoverBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvHoverBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="PART_LargeText" Value="{StaticResource ButtonAdvHoverForeground}"
                Property="TextElement.Foreground"/>
        <Setter TargetName="InnerBorder" Value="{StaticResource ButtonHoverInnerBorderBrush}"
                Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="skin:SkinStorage.EnableTouch" Value="false"/>
        </MultiTrigger.Conditions>
      </MultiTrigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvPressedBackgroundBrush}"
                Property="Border.Background"/>
        <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvPressedBorderBrush}"
                Property="Border.BorderBrush"/>
        <Setter TargetName="PART_LargeText" Value="{StaticResource ButtonAdvHoverForeground}"
                Property="TextElement.Foreground"/>
        <Setter TargetName="InnerBorder" Value="{StaticResource ButtonAdvPressedBackgroundBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="local:ButtonAdv.IsCheckable" Value="true"/>
          <Condition Property="local:ButtonAdv.IsChecked" Value="true"/>
          <Condition Property="UIElement.IsEnabled" Value="true"/>
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Value="{StaticResource DefaultButtonAdvCheckedBorderBrush}" TargetName="ItemBorder"
                  Property="Border.BorderBrush"/>
          <Setter Value="{StaticResource DefaultButtonAdvCheckedBackground}" TargetName="InnerBorder"
                  Property="Border.Background"/>
          <Setter TargetName="InnerBorder" Property="Border.BorderThickness" Value="1,1,0,0"/>
          <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="2,2,0,0"/>
        </MultiTrigger.Setters>
      </MultiTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="ItemBorder" Property="UIElement.Opacity" Value="0.5"/>
      </Trigger>
      <Trigger Property="local:ButtonAdv.IsMultiLine" Value="true">
        <Setter TargetName="PART_LargeText" Property="TextBlock.TextWrapping" Value="Wrap"/>
      </Trigger>
      <Trigger Property="local:ButtonAdv.IsMultiLine" Value="false">
        <Setter TargetName="PART_LargeText" Property="TextBlock.TextWrapping" Value="NoWrap"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Value="{x:Null}" Property="local:ButtonAdv.IconTemplate"/>
          <Condition Value="{x:Null}" Property="local:ButtonAdv.IconTemplateSelector"/>
          <Condition Property="local:ButtonAdv.SizeMode" Value="Large"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="LargeIconContent" Value="{StaticResource LargeIconTemplate}"
                Property="ContentPresenter.ContentTemplate"/>
        <Setter TargetName="LargeIconContent"
                Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"
                Property="FrameworkElement.Tag"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type local:ButtonAdv}">
    <Setter Property="Control.Foreground" Value="{StaticResource ButtonAdvForeground}"/>
    <Setter Property="local:ButtonAdv.SmallIcon"
            Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt16.png"/>
    <Setter Property="local:ButtonAdv.LargeIcon"
            Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt32.png"/>
    <Setter Property="local:ButtonAdv.Label" Value="Button"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="{StaticResource ButtonAdvBackgroundBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource ButtonAdvBorderBrush}"/>
    <Setter Property="Control.Padding" Value="2,0,4,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ButtonAdv}">
          <Border x:Name="ItemBorder" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" MinHeight="22"
                  SnapsToDevicePixels="true" CornerRadius="3">
            <FrameworkElement.Resources>
              <local:HorizontalContentToTextAlignmentConverter x:Key="TextAlignmentConverter"/>
            </FrameworkElement.Resources>
            <Border x:Name="InnerBorder" Background="Transparent"
                    BorderBrush="{StaticResource ButtonAdvInnerBorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
              <Grid HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Border Name="PART_ImageBorder" Grid.Column="0">
                  <ContentPresenter x:Name="SmallIconContent" Margin="2"
                                    ContentTemplate="{TemplateBinding local:ButtonAdv.IconTemplate}"
                                    ContentTemplateSelector="{TemplateBinding local:ButtonAdv.IconTemplateSelector}"
                                    Content="{Binding}"/>
                </Border>
                <AccessText x:Name="PART_NormalText" Grid.Column="1" Text="{TemplateBinding local:ButtonAdv.Label}"
                            Margin="2,0,2,0" Foreground="{TemplateBinding Control.Foreground}"
                            FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            TextAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalContentAlignment, Converter={StaticResource TextAlignmentConverter}}"/>
              </Grid>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="skin:SkinStorage.EnableTouch" Value="true">
              <Setter Property="FrameworkElement.MinHeight" Value="30"/>
              <Setter Property="FrameworkElement.MinWidth" Value="30"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="skin:SkinStorage.EnableTouch" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvHoverBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvHoverBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="PART_NormalText" Value="{StaticResource ButtonAdvHoverForeground}"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="InnerBorder" Value="{StaticResource ButtonHoverInnerBorderBrush}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="skin:SkinStorage.EnableTouch" Value="false"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="local:ButtonAdv.IsMultiLine" Value="true">
              <Setter TargetName="PART_NormalText" Property="TextBlock.TextWrapping" Value="Wrap"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvPressedBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="ItemBorder" Value="{StaticResource ButtonAdvPressedBorderBrush}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="PART_NormalText" Value="{StaticResource ButtonAdvHoverForeground}"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="InnerBorder" Value="{StaticResource ButtonAdvPressedBackgroundBrush}"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="local:ButtonAdv.IsCheckable" Value="true"/>
                <Condition Property="local:ButtonAdv.IsChecked" Value="true"/>
                <Condition Property="UIElement.IsEnabled" Value="true"/>
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter Value="{StaticResource DefaultButtonAdvCheckedBorderBrush}" TargetName="ItemBorder"
                        Property="Border.BorderBrush"/>
                <Setter Value="{StaticResource DefaultButtonAdvCheckedBackground}" TargetName="InnerBorder"
                        Property="Border.Background"/>
                <Setter TargetName="InnerBorder" Property="Border.BorderThickness" Value="1,1,0,0"/>
                <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="2,2,0,0"/>
              </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ItemBorder" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Value="{x:Null}" Property="local:ButtonAdv.IconTemplate"/>
                <Condition Value="{x:Null}" Property="local:ButtonAdv.IconTemplateSelector"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="SmallIconContent" Value="{StaticResource SmallIconTemplate}"
                      Property="ContentPresenter.ContentTemplate"/>
              <Setter TargetName="SmallIconContent"
                      Value="{Binding SmallIcon, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="FrameworkElement.Tag"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="local:ButtonAdv.SizeMode" Value="Large">
        <Setter Property="Control.Template" Value="{StaticResource LargeModeTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>