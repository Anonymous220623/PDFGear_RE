<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:langs="clr-namespace:HandyControl.Properties.Langs"
                    xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:converter="clr-namespace:HandyControl.Tools.Converter"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:interactivity="clr-namespace:HandyControl.Interactivity"
                    xmlns:hc="clr-namespace:HandyControl.Controls"
                    xmlns:tools="clr-namespace:HandyControl.Tools"
                    xmlns:shapes="clr-namespace:HandyControl.Expression.Shapes"
                    xmlns:ex="clr-namespace:HandyControl.Tools.Extension">
  <langs:LangProvider x:Key="Langs"/>
  <converter:Boolean2BooleanReConverter x:Key="Boolean2BooleanReConverter"/>
  <converter:Boolean2VisibilityReConverter x:Key="Boolean2VisibilityReConverter"/>
  <converter:BooleanArr2VisibilityConverter x:Key="BooleanArr2VisibilityConverter"/>
  <converter:BooleanArr2BooleanConverter x:Key="BooleanArr2BooleanConverter"/>
  <converter:Long2FileSizeConverter x:Key="Long2FileSizeConverter"/>
  <converter:String2VisibilityConverter x:Key="String2VisibilityConverter"/>
  <converter:String2VisibilityReConverter x:Key="String2VisibilityReConverter"/>
  <BooleanToVisibilityConverter x:Key="Boolean2VisibilityConverter"/>
  <converter:TreeViewItemMarginConverter x:Key="TreeViewItemMarginConverter"/>
  <converter:Color2HexStringConverter x:Key="Color2HexStringConverter"/>
  <converter:Object2BooleanConverter x:Key="Object2BooleanConverter"/>
  <converter:Object2BooleanReConverter x:Key="Object2BooleanReConverter"/>
  <converter:Boolean2StringConverter x:Key="Boolean2StringConverter"/>
  <converter:Int2StringConverter x:Key="Int2StringConverter"/>
  <converter:BorderClipConverter x:Key="BorderClipConverter"/>
  <converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter"/>
  <converter:BorderCircularConverter x:Key="BorderCircularConverter"/>
  <converter:Object2VisibilityConverter x:Key="Object2VisibilityConverter"/>
  <converter:Object2VisibilityReConverter x:Key="Object2VisibilityReConverter"/>
  <converter:Number2PercentageConverter x:Key="Number2PercentageConverter"/>
  <converter:RectangleCircularConverter x:Key="RectangleCircularConverter"/>
  <converter:ThicknessSplitConverter x:Key="ThicknessSplitConverter"/>
  <converter:CornerRadiusSplitConverter x:Key="CornerRadiusSplitConverter"/>
  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
  <converter:Double2GridLengthConverter x:Key="Double2GridLengthConverter"/>
  <converter:DoubleMinConverter x:Key="DoubleMinConverter"/>
  <converter:Object2StringConverter x:Key="Object2StringConverter"/>
  <converter:DataGridSelectAllButtonVisibilityConverter x:Key="DataGridSelectAllButtonVisibilityConverter"/>
  <Color x:Key="EffectShadowColor">#88000000</Color>
  <system:Double x:Key="LargeFontSize">24</system:Double>
  <system:Double x:Key="HeadFontSize">20</system:Double>
  <system:Double x:Key="SubHeadFontSize">16</system:Double>
  <system:Double x:Key="TextFontSize">12</system:Double>
  <Geometry x:Key="CalendarGeometry" o:Freeze="True">
    M377.897477 116.291025l265.298718 0 0 47.459125-265.298718 0 0-47.459125ZM888.317416 116.291025 748.229288 116.291025l0 47.459125 123.54866 0c18.167626 0 32.894732 14.727106 32.894732 32.894732l0 92.92987L115.42936 289.574752l0-92.92987c0-18.167626 14.727106-32.894732 32.894732-32.894732l123.54866 0 0-47.459125L131.776437 116.291025c-35.244356 0-63.814389 28.571056-63.814389 63.815412l0.004093 713.966329c0 35.243333 28.571056 63.814389 63.814389 63.814389l756.540979 0c35.244356 0 63.814389-28.571056 63.814389-63.815412l-0.004093-713.966329C952.131805 144.861058 923.560749 116.291025 888.317416 116.291025zM904.67268 337.033877l0 540.498398c0 18.167626-14.727106 32.894732-32.894732 32.894732L148.324092 910.427007c-18.167626 0-32.894732-14.727106-32.894732-32.894732L115.42936 337.033877 904.67268 337.033877zM300.659736 64.801927l47.459125 0 0 170.241292-47.459125 0 0-170.241292ZM672.97481 64.801927l47.450938 0 0 170.241292-47.450938 0 0-170.241292ZM358.384138 547.939214l0 231.021432 52.863464 0L411.247602 459.226591l-34.580198 0-2.651514 3.804835c-18.000819 25.896006-41.448959 48.758786-69.681285 67.955908l-3.886703 2.643327 0 53.742526 13.441772-8.069156C330.690097 569.215794 345.588103 558.712075 358.384138 547.939214zM618.031888 726.552576c-10.287791 6.395971-24.435678 8.069156-42.059902 4.948946-16.094309-2.842881-27.898712-18.373321-35.082666-46.159464l-2.261615-8.753781-48.312603 13.424375 1.68956 8.129534c6.270098 30.168514 18.347737 52.052967 35.884976 65.017855 17.120734 12.705979 35.542152 19.777364 54.731087 21.043255 3.358652 0.225138 6.655903 0.337707 9.897892 0.337707 14.859119 0 28.430857-2.374184 40.452211-7.072408 14.417029-5.641758 26.88866-13.338413 37.076162-22.86278 10.365566-9.723922 18.230051-22.143362 23.378552-36.920612 4.918246-14.170401 7.739636-28.296797 8.385373-42.025108 0.60685-13.658723-0.667228-26.650218-3.791531-38.619382l-0.008187-0.017397c-3.111-11.777796-8.133628-23.738773-14.946104-35.551363-7.353831-12.679372-19.028268-22.750211-34.710165-29.952586-15.037183-6.872854-30.927843-10.685876-47.24729-11.32752-11.414505-0.415482-23.487027 1.386646-36.04462 5.434017 3.813022-14.568486 7.648557-31.884681 11.465673-51.775637l113.87693 0 0-49.357449L535.645647 464.492778l-1.495122 7.028404c-24.621928 115.77116-31.589954 145.497585-33.102473 150.039235l-3.432334 10.338958 45.829943 5.391036 3.054716-4.20292c8.146931-11.214951 18.247448-18.139996 30.879746-21.164011 13.004799-3.137607 24.743707-3.180588 34.879018-0.129966 9.857981 2.95545 17.822756 8.771178 24.327202 17.758284 6.512633 9.03111 10.084143 20.392401 10.617311 33.757421 0.519864 13.849067-1.603598 26.442477-6.314102 37.440476C636.315153 711.429431 628.843637 719.871089 618.031888 726.552576z
  </Geometry>
  <Geometry x:Key="DeleteGeometry" o:Freeze="True">
    M512 620.544l253.3376 253.3376a76.6976 76.6976 0 1 0 108.544-108.544L620.6464 512l253.2352-253.3376a76.6976 76.6976 0 1 0-108.544-108.544L512 403.3536 258.6624 150.1184a76.6976 76.6976 0 1 0-108.544 108.544L403.3536 512 150.1184 765.3376a76.6976 76.6976 0 1 0 108.544 108.544L512 620.6464z
  </Geometry>
  <Geometry x:Key="DeleteFillCircleGeometry" o:Freeze="True">
    M7.4038057,6.4038057 C7.1478834,6.4038057 6.8919611,6.5014372 6.6966991,6.6966991 6.3061748,7.0872235 6.3061748,7.7203884 6.6966991,8.1109123 L10.585787,12 6.6966991,15.889088 C6.3061748,16.279612 6.3061748,16.912777 6.6966991,17.303301 7.0872235,17.693825 7.7203879,17.693825 8.1109123,17.303301 L12,13.414213 15.889088,17.303301 C16.279612,17.693825 16.912777,17.693825 17.303301,17.303301 17.693825,16.912777 17.693825,16.279612 17.303301,15.889088 L13.414213,12 17.303301,8.1109123 C17.693825,7.7203884 17.693825,7.0872235 17.303301,6.6966991 16.912777,6.3061748 16.279612,6.3061748 15.889088,6.6966991 L12,10.585787 8.1109123,6.6966991 C7.9156504,6.5014372 7.6597281,6.4038057 7.4038057,6.4038057 z M12,0 C18.627417,0 24,5.3725829 24,12 24,18.627417 18.627417,24 12,24 5.3725829,24 0,18.627417 0,12 0,5.3725829 5.3725829,0 12,0 z
  </Geometry>
  <Geometry x:Key="CloseGeometry" o:Freeze="True">
    M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z
  </Geometry>
  <Geometry x:Key="DownGeometry" o:Freeze="True">
    M512 801.6896L5.12 282.0096l58.1632-59.5968L512 682.3936l448.7168-460.0832 58.1632 59.5968-506.88 519.7824z
  </Geometry>
  <Geometry x:Key="UpGeometry" o:Freeze="True">
    M50.000001,0 L100,51.262779 94.262627,57.141584 50.000001,11.767713 5.7373757,57.151686 0,51.27288 z
  </Geometry>
  <Geometry x:Key="ClockGeometry" o:Freeze="True">
    M498.506684 256.571517 425.359734 256.571517 425.359734 622.190635 720.166063 622.190635 720.166063 549.725206 498.506684 549.725206ZM512.714268 80.162738c-245.740844 0-445.181175 197.577914-445.181175 441.024505s199.439308 441.024505 445.181175 441.024505c245.738797 0 445.178105-197.577914 445.178105-441.024505S758.453065 80.162738 512.714268 80.162738zM512.714268 874.005824c-195.880249 0-356.145349-158.768003-356.145349-352.818581s160.2651-352.821651 356.145349-352.821651c195.877179 0 356.14228 158.77005 356.14228 352.821651S708.591447 874.005824 512.714268 874.005824z
  </Geometry>
  <Geometry x:Key="LeftGeometry" o:Freeze="True">
    M394.24 512L683.52 248.32c10.24-10.24 10.24-25.6 0-35.84-10.24-10.24-25.6-10.24-35.84 0l-307.2 279.04c-5.12 5.12-7.68 12.8-7.68 20.48 0 7.68 2.56 15.36 7.68 20.48l307.2 279.04c10.24 10.24 25.6 10.24 35.84 0 10.24-10.24 10.24-25.6 0-35.84L394.24 512z
  </Geometry>
  <Geometry x:Key="RightGeometry" o:Freeze="True">
    M4.1666641,0 C5.2083321,0 6.25,0.41666794 7.0833321,1.25 L57.083331,46.666664 C57.916664,47.499998 58.33333,48.749998 58.333329,49.999998 58.33333,51.249997 57.916664,52.499997 57.083331,53.333331 L7.0833321,98.749996 C5.4166641,100.41666 2.9166641,100.41666 1.2499962,98.749996 -0.41666794,97.083328 -0.41666794,94.583328 1.2499962,92.916664 L48.333331,49.999998 1.2499962,7.0833321 C-0.41666794,5.4166641 -0.41666794,2.9166641 1.2499962,1.25 2.0833282,0.41666794 3.1249962,0 4.1666641,0 z
  </Geometry>
  <Geometry x:Key="RotateLeftGeometry" o:Freeze="True">
    M165.238899 508.178506C164.450369 456.442676 171.767779 404.485842 187.244542 353.863631 266.138632 95.812692 533.436225-51.353028 784.380224 25.368251 1035.324219 102.08953 1174.62994 373.566359 1095.735851 631.617298 1016.84176 889.66824 749.544168 1036.833959 498.600172 960.11268 424.134741 937.346313 357.837833 896.870788 303.973868 842.276436 291.310328 829.441176 291.396506 808.495802 304.166356 795.493625 316.936205 782.491452 337.554042 782.356136 350.217582 795.191397 396.640587 842.243889 453.73137 877.098901 517.975091 896.740177 734.436966 962.919213 965.320335 835.802028 1033.557737 612.607541 1101.795139 389.413057 981.467179 154.919792 765.005305 88.740755 548.543428 22.561718 317.660056 149.678904 249.422655 372.873388 235.597198 418.094418 229.294871 464.461039 230.4403 510.559881L311.240978 429.759202C323.584094 417.416085 343.892513 417.712357 356.601099 430.420946 369.309686 443.129535 369.605959 463.437952 357.262842 475.781068L230.778782 602.265128C229.273826 605.769679 227.098877 609.041396 224.251145 611.889128 211.908029 624.232245 191.59961 623.935974 178.891024 611.227385L40.825428 473.16179C28.11684 460.453206 27.820569 440.144784 40.163685 427.801668 52.506801 415.458551 72.815218 415.754827 85.523806 428.463411L165.238899 508.178506Z
  </Geometry>
  <Geometry x:Key="RotateRightGeometry" o:Freeze="True">
    M13.1117823382705,0.00108644926083379C18.7165758868546,0.0742913923738762 23.9197352191299,3.84162509632329 25.6893389483779,9.62980814885544 26.1165926715226,11.0273168346189 26.3185999652236,12.461670228202 26.296833302626,13.8899238456496L28.4974711200089,11.6892569876356C28.8483088275283,11.3384168617557 29.4089472552627,11.330238049977 29.7496950885147,11.6709881771838 30.0904429217666,12.0117402117628 30.0822642108291,12.572387459387 29.7314265033096,12.923229492639L25.9199488421768,16.7347560556155C25.5691111346572,17.0855980888674 25.0084688922257,17.0937769006462 24.6677210589736,16.7530248660672 24.5891077777236,16.674408708165 24.5290644427627,16.5840870073788 24.4875185748428,16.4873374624474L20.9957621356339,12.9955379708416C20.6550143023818,12.6547878436347 20.6631930133193,12.0941405960106 21.0140307208389,11.7432985627585 21.3648684283584,11.3924565295065 21.9255068560928,11.3842777177278 22.2662546893447,11.7250297523068L24.4968645831436,13.9556652415401C24.5284846087783,12.6830303030582 24.3545000811904,11.4030042974954 23.9728319903702,10.1546044295501 22.0890505572647,3.99295504901009 15.7152140399307,0.483677352708723 9.73950221742095,2.3106585349176 3.76379420960845,4.13763876344051 0.441986348280352,10.6112083411418 2.32576778138575,16.7728577216819 4.20954921449125,22.9345051948497 10.5833819171279,26.4437838448372 16.5590937396377,24.6168036163144 18.3326227923721,24.0745720467974 19.9086878558486,23.1123447593618 21.1902544757217,21.8133823630949 21.5398485919327,21.4590441166922 22.1090319415421,21.4627806587338 22.4615595599502,21.8217271162507 22.8140871783584,22.1806735737676 22.8164675494522,22.7589048852417 22.4668734332412,23.1132431316444 20.9798891803115,24.6204085496776 19.1496775409072,25.7378005615073 17.0939638873428,26.3663063881084 10.1663286944717,28.484321088751 2.78723170960845,24.4215726325395 0.609260823377952,17.2976520950044 -1.56871387754975,10.1737353722136 2.27700069154205,2.6791733248245 9.20463588441315,0.561156716809679 10.5035670062393,0.164028483596132 11.8183710833877,-0.0158071458708005 13.1117823382705,0.00108644926083379z
  </Geometry>
  <Geometry x:Key="EnlargeGeometry" o:Freeze="True">
    M750.3 198.7C598 46.4 351.1 46.4 198.7 198.7s-152.3 399.2 0 551.5C345.1 896.6 578.8 902.3 732 767.3l172.1 172.1 35.4-35.4-172.1-171.9c135-153.2 129.3-387-17.1-533.4z m39.3 403.8c-17.1 42.1-42.2 80-74.7 112.4-32.5 32.5-70.3 57.6-112.4 74.7-40.7 16.5-83.8 24.9-128 24.9s-87.2-8.4-128-24.9c-42.1-17.1-80-42.2-112.4-74.7s-57.6-70.3-74.7-112.4c-16.5-40.7-24.9-83.8-24.9-128s8.4-87.2 24.9-128c17.1-42.1 42.2-80 74.7-112.4s70.3-57.6 112.4-74.7c40.7-16.5 83.8-24.9 128-24.9s87.2 8.4 128 24.9c42.1 17.1 80 42.2 112.4 74.7 32.5 32.5 57.6 70.3 74.7 112.4 16.5 40.7 24.9 83.8 24.9 128s-8.4 87.3-24.9 128zM671 502H496v175h-50V502H271v-50h175V277h50v175h175v50z
  </Geometry>
  <Geometry x:Key="ReduceGeometry" o:Freeze="True">
    M750.3 198.7C598 46.4 351.1 46.4 198.7 198.7s-152.3 399.2 0 551.5C345.1 896.6 578.8 902.3 732 767.3l172.1 172.1 35.4-35.4-172.1-171.9c135-153.2 129.3-387-17.1-533.4z m39.3 403.8c-17.1 42.1-42.2 80-74.7 112.4-32.5 32.5-70.3 57.6-112.4 74.7-40.7 16.5-83.8 24.9-128 24.9s-87.2-8.4-128-24.9c-42.1-17.1-80-42.2-112.4-74.7s-57.6-70.3-74.7-112.4c-16.5-40.7-24.9-83.8-24.9-128s8.4-87.2 24.9-128c17.1-42.1 42.2-80 74.7-112.4s70.3-57.6 112.4-74.7c40.7-16.5 83.8-24.9 128-24.9s87.2 8.4 128 24.9c42.1 17.1 80 42.2 112.4 74.7 32.5 32.5 57.6 70.3 74.7 112.4 16.5 40.7 24.9 83.8 24.9 128s-8.4 87.3-24.9 128zM671 502H271v-50h400v50z
  </Geometry>
  <Geometry x:Key="DownloadGeometry" o:Freeze="True">
    M868.100096 742.600704l-0.049152 0L216.246272 742.600704l-0.049152 0c-13.98784 0-25.327616 11.33568-25.327616 25.352192 0 13.993984 11.360256 25.327616 25.327616 25.327616l0.049152 0 651.804672 0 0.049152 0c13.996032 0 25.33376-11.333632 25.33376-25.327616C893.431808 753.936384 882.096128 742.600704 868.100096 742.600704L868.100096 742.600704 868.100096 742.600704M523.15136 688.433152c4.728832 4.757504 11.237376 7.733248 18.47296 7.733248l0 0 0 0c7.231488 0 13.740032-2.951168 18.42176-7.757824l314.836992-314.83904c4.732928-4.704256 7.714816-11.214848 7.7312-18.395136 0-14.342144-11.712512-25.9584-25.972736-25.9584-7.213056-0.02048-13.694976 2.930688-18.376704 7.636992L567.578624 607.51872 567.578624 117.52448c-0.024576-0.026624-0.024576-0.026624-0.024576-0.0512 0.024576-14.344192-11.59168-25.980928-25.901056-25.980928-14.348288 0-25.960448 11.634688-25.960448 25.980928 0 0 0 0.024576 0.024576 0.0512l0 489.967616L245.055488 336.826368c-4.683776-4.704256-11.2128-7.6288-18.374656-7.60832-14.342144-0.02048-25.954304 11.614208-26.005504 25.9072 0 7.20896 2.951168 13.768704 7.684096 18.423808L523.15136 688.433152 523.15136 688.433152 523.15136 688.433152M523.15136 688.433152 523.15136 688.433152z
  </Geometry>
  <Geometry x:Key="SaveGeometry" o:Freeze="True">
    M608 320C625.664 320 640 305.696 640 288L640 160C640 142.304 625.664 128 608 128 590.336 128 576 142.304 576 160L576 288C576 305.696 590.336 320 608 320L608 320ZM960 896C960 931.328 931.328 960 896 960L128 960C92.672 960 64 931.328 64 896L64 128C64 92.672 92.672 64 128 64L192 64 192 384C192 419.328 220.672 448 256 448L768 448C803.328 448 832 419.328 832 384L832 64 896 64C931.328 64 960 92.672 960 128L960 896 960 896ZM256 64 768 64 768 352C768 369.696 753.664 384 736 384L288 384C270.336 384 256 369.696 256 352L256 64 256 64ZM896 0 128 0C57.312 0 0 57.312 0 128L0 896C0 966.688 57.312 1024 128 1024L896 1024C966.688 1024 1024 966.688 1024 896L1024 128C1024 57.312 966.688 0 896 0L896 0Z
  </Geometry>
  <Geometry x:Key="WindowsGeometry" o:Freeze="True">
    M426.276571 574.829714l0 372.004571-389.705143-53.686857 0-318.317714 389.705143 0zM426.276571 150.308571l0 376.539429-389.705143 0 0-322.852571zM987.428571 574.829714l0 449.170286-518.290286-71.460571 0-377.709714 518.290286 0zM987.428571 73.142857l0 453.705143-518.290286 0 0-382.317714z
  </Geometry>
  <Geometry x:Key="FullScreenGeometry" o:Freeze="True">
    M942 82v320h-50V167.4l-274 274-35.4-35.4 274-274H622V82h320zM406 582.6l-274 274V622H82v320h320v-50H167.4l274-274-35.4-35.4zM132 132h302V82H82v352h50V132z m760 760H590v50h352V590h-50v302z
  </Geometry>
  <Geometry x:Key="FullScreenReturnGeometry" o:Freeze="True">
    M94.186081,59.07 L100,59.07 100,100 59.07,100 59.07,94.186081 94.186081,94.186081 z M4.5814285,58.208999 L41.791,58.208999 41.791,95.418571 35.977005,95.418571 35.977005,68.139304 4.1163101,100 0,95.88369 31.860695,64.022995 4.5814285,64.022995 z M95.88369,0 L100,4.1163101 68.139304,35.977005 95.418571,35.977005 95.418571,41.791 58.208999,41.791 58.208999,4.5814285 64.022995,4.5814285 64.022995,31.860695 z M0,0 L40.929998,0 40.929998,5.8139191 5.8139191,5.8139191 5.8139191,40.929998 0,40.929998 z
  </Geometry>
  <Geometry x:Key="SearchGeometry" o:Freeze="True">
    M716.6003 213.800623c-138.851102-138.915088-364.020238-138.915088-502.935326 0s-138.915088 364.084225 0 502.935326a355.573996 355.573996 0 0 0 502.935326 0 355.573996 355.573996 0 0 0 0-502.935326z m-580.359212 580.359212a465.183184 465.183184 0 1 1 657.783099 0 465.183184 465.183184 0 0 1-657.783099 0z m868.939152 211.156054a63.474789 63.474789 0 0 1-89.837303 0l-89.773316-89.837303a63.410803 63.410803 0 1 1 89.773316-89.773316l89.837303 89.773316a63.346816 63.346816 0 0 1 0 89.837303z
  </Geometry>
  <Geometry x:Key="UpDownGeometry" o:Freeze="True">
    M454.464 143.68l-253.44 253.44c-12.032 12.032-12.032 31.36 0 43.392 11.968 11.968 31.36 11.968 43.328 0l237.376-237.376 237.376 237.376c11.968 11.968 31.36 11.968 43.328 0 12.032-12.032 12.032-31.36 0-43.392l-253.44-253.44C491.264 126.016 478.016 124.032 454.464 143.68zM507.968 947.648l252.48-253.376c11.968-11.968 11.968-31.36 0-43.392-11.968-11.968-31.296-11.968-43.264 0l-236.48 237.376L244.16 650.88c-11.968-11.968-31.296-11.968-43.264 0-11.968 12.032-11.968 31.424 0 43.392l252.48 253.376C465.984 960 491.136 964.48 507.968 947.648z
  </Geometry>
  <Geometry x:Key="WindowMinGeometry" o:Freeze="True">
    M0,4 L10,4 L10,5 L0,5 z
  </Geometry>
  <Geometry x:Key="WindowRestoreGeometry" o:Freeze="True">
    M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z
  </Geometry>
  <Geometry x:Key="WindowMaxGeometry" o:Freeze="True">
    M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z
  </Geometry>
  <Geometry x:Key="CheckedGeometry" o:Freeze="True">M 0,2 3,5 8,0</Geometry>
  <Geometry x:Key="AlignLeftGeometry" o:Freeze="True">
    M0,8 L4,8 4,10 0,10 z M0,4 L8,4 8,6 0,6 z M0,0 L12,0 12,2 0,2 z
  </Geometry>
  <Geometry x:Key="AlignRightGeometry" o:Freeze="True">
    M8,8 L12,8 12,10 8,10 z M4,4 L12,4 12,6 4,6 z M0,0 L12,0 12,2 0,2 z
  </Geometry>
  <Geometry x:Key="AlignHCenterGeometry" o:Freeze="True">
    M4,8 L8,8 8,10 4,10 z M2,4 L10,4 10,6 2,6 z M0,0 L12,0 12,2 0,2 z
  </Geometry>
  <Geometry x:Key="AlignHStretchGeometry" o:Freeze="True">
    M0,8 L12,8 12,10 0,10 z M0,4 L12,4 12,6 0,6 z M0,0 L12,0 12,2 0,2 z
  </Geometry>
  <Geometry x:Key="AlignTopGeometry" o:Freeze="True">
    M8,0 L10,0 10,4 8,4 z M4,0 L6,0 6,8 4,8 z M0,0 L2,0 2,12 0,12 z
  </Geometry>
  <Geometry x:Key="AlignBottomGeometry" o:Freeze="True">
    M8,8 L10,8 10,12 8,12 z M4,4 L6,4 6,12 4,12 z M0,0 L2,0 2,12 0,12 z
  </Geometry>
  <Geometry x:Key="AlignVCenterGeometry" o:Freeze="True">
    M8,4 L10,4 10,8 8,8 z M4,2 L6,2 6,10 4,10 z M0,0 L2,0 2,12 0,12 z
  </Geometry>
  <Geometry x:Key="AlignVStretchGeometry" o:Freeze="True">
    M8,0 L10,0 10,12 8,12 z M4,0 L6,0 6,12 4,12 z M0,0 L2,0 2,12 0,12 z
  </Geometry>
  <Geometry x:Key="PageModeGeometry" o:Freeze="True">
    M1.0000002,12 L1.0000002,13 11,13 11,12 z M1.0000002,10 L1.0000002,11 11,11 11,10 z M1.0000002,8 L1.0000002,9 11,9 11,8 z M1.0000002,6 L1.0000002,7 11,7 11,6 z M1.0000002,4 L1.0000002,5 11,5 11,4 z M1.0000002,2 L1.0000002,3 11,3 11,2 z M0,0 L12,0 12,14 0,14 z
  </Geometry>
  <Geometry x:Key="TwoPageModeGeometry" o:Freeze="True">
    M8.99999988079071,12L8.99999988079071,13 13,13 13,12z M1,12L1,13 5,13 5,12z M9.00000011920929,10L9.00000011920929,11 13,11 13,10z M1,10L1,11 5,11 5,10z M9.00000011920929,8L9.00000011920929,9 13,9 13,8z M1,8L1,9 5,9 5,8z M9.00000011920929,6L9.00000011920929,7 13,7 13,6z M1,6L1,7 5,7 5,6z M9.00000011920929,4L9.00000011920929,5 13,5 13,4z M1,4L1,5 5,5 5,4z M8.99999988079071,2L8.99999988079071,3 13,3 13,2z M1,2L1,3 5,3 5,2z M7.99999994039536,0L14,0 14,14 7.99999994039536,14z M0,0L6,0 6,14 0,14z
  </Geometry>
  <Geometry x:Key="ScrollModeGeometry" o:Freeze="True">
    M1,12L1,13 8,13 8,12z M1,10L1,11 8,11 8,10z M1,8L1,9 8,9 8,8z M1,6L1,7 8,7 8,6z M11.0000002384186,5L11.0000002384186,9 13,9 13,5z M1,4L1,5 8,5 8,4z M1,2L1,3 8,3 8,2z M10.0000000298023,0L14,0 14,14 10.0000000298023,14z M0,0L9.00000011920929,0 9.00000011920929,14 0,14z
  </Geometry>
  <Geometry x:Key="EyeOpenGeometry" o:Freeze="True">
    M928 406.4c-100.8-137.6-249.6-224-416-224s-315.2 86.4-416 224c-44.8 60.8-44.8 150.4 0 211.2 102.4 137.6 251.2 224 416 224 166.4 0 315.2-86.4 416-224 46.4-60.8 46.4-150.4 0-211.2zM512 721.6c-115.2 0-209.6-94.4-209.6-209.6 0-115.2 94.4-209.6 209.6-209.6 115.2 0 209.6 94.4 209.6 209.6 1.6 115.2-92.8 209.6-209.6 209.6z m0-360c-83.2 0-150.4 67.2-150.4 150.4s67.2 150.4 150.4 150.4 150.4-67.2 150.4-150.4-67.2-150.4-150.4-150.4z m0 0
  </Geometry>
  <Geometry x:Key="EyeCloseGeometry" o:Freeze="True">
    M950.4 361.6c8-20.8 0-43.2-19.2-54.4-9.6-4.8-20.8-6.4-32-3.2s-19.2 11.2-24 22.4c-56 132.8-208 228.8-361.6 228.8-155.2 0-307.2-97.6-363.2-232-4.8-11.2-12.8-19.2-24-24-9.6-4.8-20.8-3.2-32 0-20.8 9.6-30.4 35.2-20.8 56 25.6 60.8 67.2 118.4 123.2 164.8l-67.2 70.4c-14.4 16-14.4 40 0 57.6 8 8 17.6 14.4 28.8 14.4s22.4-3.2 30.4-11.2l76.8-81.6c35.2 20.8 73.6 38.4 113.6 49.6l-28.8 83.2c-8 22.4 3.2 46.4 24 54.4 4.8 1.6 9.6 3.2 14.4 3.2 6.4 0 11.2-1.6 17.6-3.2 9.6-4.8 17.6-12.8 22.4-24l33.6-96c41.6 4.8 81.6 3.2 123.2-3.2l32 94.4c3.2 11.2 11.2 19.2 22.4 24 9.6 4.8 20.8 4.8 32 1.6 20.8-8 32-32 24-54.4l-28.8-84.8c30.4-9.6 59.2-22.4 86.4-38.4l62.4 65.6c14.4 16 43.2 16 57.6 0 16-16 16-43.2 0-60.8l-51.2-54.4c56-43.2 100.8-100.8 128-164.8z
  </Geometry>
  <Geometry x:Key="AudioGeometry" o:Freeze="True">
    M627.52666696 962L550.66666696 890.47999971c116.82-92.99999971 191.09999971-230.94 191.09999971-385.2 0-146.99999971-67.61999971-279-174.96-371.57999942L643.84666667 62C770.86666638 172.99999971 850.66666667 330.2 850.66666667 505.09999971c0 182.27999971-86.58 345.42-223.13999971 456.90000029zM405.64666638 782l-76.32-77.22a227.88 227.88 0 0 0 116.40000058-199.26A228.06 228.06 0 0 0 347.86666638 317.84000029L422.86666696 242A334.37999971 334.37999971 0 0 1 550.66666696 505.52 334.62 334.62 0 0 1 405.64666638 782zM205.66666638 596.6C164.26666638 596.6 130.66666667 562.51999971 130.66666667 520.64 130.66666667 478.76000029 164.26666638 444.79999971 205.66666638 444.79999971s74.99999971 33.95999971 75.00000058 75.90000058c0 41.87999971-33.59999971 75.84000029-75.00000058 75.83999942z
  </Geometry>
  <Geometry x:Key="BubbleTailGeometry" o:Freeze="True">
    M0,0L28,0 28,14.0000006258488 28,15.0010000765324 28.0151405334473,15.0010000765324 28.0455417633057,15.8010965883732C28.4084091186524,22.9596563875675,30.92209815979,29.5507589876652,34.9532623291016,34.9410597383976L34.9984359741211,34.9999815523624 34.0966339111328,34.9885679781437C15.1841707229614,34.5094191133976,2.0535663480814E-07,19.0279375612736,0,0z
  </Geometry>
  <Geometry x:Key="StarGeometry" o:Freeze="True">
    M535.9 165.2l96.5 195.4c3.9 7.9 11.4 13.3 20.1 14.6l215.7 31.3c21.9 3.2 30.6 30 14.8 45.5L726.8 604.1c-6.3 6.1-9.1 14.9-7.7 23.6L756 842.5c3.7 21.8-19.1 38.4-38.7 28.1L524.4 769.2c-7.8-4.1-17-4.1-24.8 0L306.7 870.6c-19.6 10.3-42.4-6.3-38.7-28.1l36.8-214.8c1.5-8.6-1.4-17.5-7.7-23.6L141.1 452c-15.8-15.4-7.1-42.3 14.8-45.5l215.7-31.3c8.7-1.3 16.2-6.7 20.1-14.6l96.5-195.4c9.7-19.9 37.9-19.9 47.7 0z
  </Geometry>
  <Geometry x:Key="AddGeometry" o:Freeze="True">
    M8,0 C8.5522847,0 9,0.44771525 9,1 L9,7 15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L9,9 9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,9 1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 L7,7 7,1 C7,0.44771525 7.4477153,0 8,0 z
  </Geometry>
  <Geometry x:Key="RemoveGeometry" o:Freeze="True">
    M10.899495,0 C11.155417,0 11.411339,0.097630501 11.606602,0.29289246 11.997126,0.68341732 11.997126,1.3165817 11.606602,1.7071066 L7.3639612,5.9497471 11.606602,10.192388 C11.997126,10.582912 11.997126,11.216077 11.606602,11.606601 11.216077,11.997126 10.582912,11.997126 10.192388,11.606601 L5.9497476,7.3639607 1.7071068,11.606601 C1.3165827,11.997126 0.68341756,11.997126 0.29289341,11.606601 -0.097630978,11.216077 -0.097630978,10.582912 0.29289341,10.192388 L4.5355338,5.9497471 0.29289341,1.7071066 C-0.097630978,1.3165817 -0.097630978,0.68341732 0.29289341,0.29289246 0.48815536,0.097630501 0.74407768,0 1,0 1.2559223,0 1.5118446,0.097630501 1.7071068,0.29289246 L5.9497476,4.5355334 10.192388,0.29289246 C10.38765,0.097630501 10.643572,0 10.899495,0 z
  </Geometry>
  <Geometry x:Key="SubGeometry" o:Freeze="True">
    M62.5797 488.9508c0.2632 42.5185 34.985 77.2116 77.5035 77.5035l743.0216-0.6728c42.5185 0.3215 76.7437-33.9333 76.4518-76.4805l0 0c-0.2918-42.5175-34.985-77.2106-77.5045-77.5035l-743.0216-0.087C96.513 411.4473 62.2879 446.4323 62.5797 488.9508L62.5797 488.9508z
  </Geometry>
  <Geometry x:Key="WarningGeometry" o:Freeze="True">
    M943.644188 827.215696l-351.176649-608.204749c-42.945473-74.36249-113.147387-74.36249-156.092861 0l-351.176649 608.204749c-42.946498 74.431167-7.811716 135.14955 78.012605 135.14955l702.420949 0C951.455904 962.36422 986.555836 901.645838 943.644188 827.215696zM466.187532 391.579035c12.621133-13.644108 28.66175-20.466675 48.233578-20.466675 19.580028 0 35.612444 6.75389 48.241778 20.194018 12.544256 13.473954 18.820484 30.325365 18.820484 50.587035 0 17.430551-26.19759 145.621205-34.929778 238.882082l-63.105666 0c-7.666162-93.259852-36.090106-221.450507-36.090106-238.882082C447.358847 421.938226 453.643275 405.155491 466.187532 391.579035zM561.76804 835.026386c-13.268949 12.928641-29.062535 19.375023-47.345906 19.375023-18.275171 0-34.076957-6.447407-47.346931-19.375023-13.235123-12.89379-19.818859-28.517221-19.818859-46.869269 0-18.249546 6.583736-34.043131 19.818859-47.278254 13.268949-13.235123 29.07176-19.852685 47.346931-19.852685 18.283371 0 34.076957 6.617562 47.345906 19.852685 13.235123 13.235123 19.827059 29.028709 19.827059 47.278254C581.595099 806.51019 575.003163 822.132597 561.76804 835.026386z
  </Geometry>
  <Geometry x:Key="InfoGeometry" o:Freeze="True">
    M505.6512 39.0144c-261.2224 3.4816-470.1184 218.112-466.6368 479.4368 3.4816 261.12 218.112 470.1184 479.3344 466.6368 261.2224-3.4816 470.1184-218.112 466.7392-479.3344C981.504 244.4288 766.8736 35.5328 505.6512 39.0144zM558.08 196.608c48.128 0 62.2592 27.9552 62.2592 59.8016 0 39.8336-31.9488 76.6976-86.3232 76.6976-45.568 0-67.1744-22.9376-65.9456-60.8256C468.0704 240.4352 494.7968 196.608 558.08 196.608zM434.7904 807.6288c-32.8704 0-56.9344-19.968-33.8944-107.6224l37.6832-155.5456c6.5536-24.8832 7.68-34.9184 0-34.9184-9.8304 0-52.5312 17.2032-77.7216 34.2016l-16.384-26.9312c79.9744-66.7648 171.8272-105.8816 211.2512-105.8816 32.8704 0 38.2976 38.912 21.9136 98.6112l-43.2128 163.5328c-7.68 28.8768-4.4032 38.912 3.2768 38.912 9.9328 0 42.1888-11.9808 73.9328-36.9664l18.6368 24.8832C552.5504 777.728 467.6608 807.6288 434.7904 807.6288z
  </Geometry>
  <Geometry x:Key="ErrorGeometry" o:Freeze="True">
    M495.469714 0C224.621714 0 0 224.621714 0 495.469714c0 270.884571 224.621714 495.506286 495.469714 495.506286 270.884571 0 495.506286-224.621714 495.506286-495.506286C990.976 224.621714 766.354286 0 495.469714 0z m211.419429 634.221714c19.821714 19.821714 19.821714 46.226286 0 66.048s-46.226286 19.821714-66.048 0l-138.752-138.715428-145.334857 145.334857a51.858286 51.858286 0 0 1-72.667429 0 51.858286 51.858286 0 0 1 0-72.667429l145.334857-145.334857-138.752-138.752c-19.821714-19.821714-19.821714-46.226286 0-66.048s46.262857-19.821714 66.084572 0l138.715428 138.715429 145.371429-145.334857a51.858286 51.858286 0 0 1 72.667428 0 51.858286 51.858286 0 0 1 0 72.667428l-145.371428 145.334857 138.752 138.752z
  </Geometry>
  <Geometry x:Key="SuccessGeometry" o:Freeze="True">
    M512.66048 64.64c-247.424 0-448 200.57728-448 448s200.576 448 448 448 448-200.57728 448-448c0-247.424-200.57728-448-448-448z m250.71232 334.86336L480.98176 681.89312c-15.49568 15.49696-40.61952 15.49696-56.11648 0l-162.9184-162.9184c-15.49568-15.49568-15.49568-40.61824 0-56.1152s40.61952-15.49568 56.11648 0l134.85952 134.85952L707.25504 343.3856c15.49568-15.49568 40.61952-15.49568 56.11648 0s15.49696 40.6208 0.00128 56.11776z
  </Geometry>
  <Geometry x:Key="FatalGeometry" o:Freeze="True">
    M716.8 375.466667l34.133333 34.133333c17.066667 17.066667 42.666667 17.066667 59.733334 0 17.066667-17.066667 17.066667-42.666667 0-59.733333l-34.133334-34.133334 34.133334-34.133333c17.066667-17.066667 17.066667-42.666667 0-59.733333-17.066667-17.066667-42.666667-17.066667-59.733334 0l-34.133333 34.133333-34.133333-34.133333c-17.066667-17.066667-42.666667-17.066667-59.733334 0-17.066667 17.066667-17.066667 42.666667 0 59.733333l34.133334 34.133333-34.133334 34.133334c-17.066667 17.066667-17.066667 42.666667 0 59.733333 17.066667 17.066667 42.666667 17.066667 59.733334 0l34.133333-34.133333z m-426.666667 0l34.133334 34.133333c17.066667 17.066667 42.666667 17.066667 59.733333 0 17.066667-17.066667 17.066667-42.666667 0-59.733333l-34.133333-34.133334 34.133333-34.133333c17.066667-17.066667 17.066667-42.666667 0-59.733333-17.066667-17.066667-42.666667-17.066667-59.733333 0l-34.133334 34.133333-34.133333-34.133333c-17.066667-17.066667-42.666667-17.066667-59.733333 0-17.066667 17.066667-17.066667 42.666667 0 59.733333l34.133333 34.133333-34.133333 34.133334c-17.066667 17.066667-17.066667 42.666667 0 59.733333 17.066667 17.066667 42.666667 17.066667 59.733333 0l34.133333-34.133333zM0 85.333333c0-51.2 42.666667-85.333333 85.333333-85.333333h853.333334c51.2 0 85.333333 42.666667 85.333333 85.333333v853.333334c0 51.2-42.666667 85.333333-85.333333 85.333333H85.333333c-51.2 0-85.333333-42.666667-85.333333-85.333333V85.333333z m512 469.333334c-136.533333 0-230.4 68.266667-290.133333 196.266666-8.533333 17.066667 0 42.666667 17.066666 59.733334s42.666667 0 59.733334-17.066667c51.2-93.866667 110.933333-145.066667 221.866666-145.066667 102.4 0 170.666667 51.2 221.866667 145.066667 8.533333 17.066667 34.133333 25.6 59.733333 17.066667 17.066667-8.533333 25.6-34.133333 17.066667-59.733334-76.8-128-170.666667-196.266667-307.2-196.266666z
  </Geometry>
  <Geometry x:Key="AskGeometry" o:Freeze="True">
    M512 0 30.11843 240.941297l0 542.117406 481.88157 240.941297 481.88157-240.941297L993.88157 240.941297 512 0zM575.776472 768.799969 460.188012 768.799969 460.188012 656.222073l115.588459 0L575.776472 768.799969zM623.335603 509.329685c-52.375829 36.723353-59.600363 55.988096-59.600363 84.885211l0 19.866447L468.616977 614.081343l0-26.489278c0-45.754021 13.846342-80.67124 61.406497-116.791866 46.957428-36.723353 57.79423-62.0082 57.79423-84.282484 0-25.284848-21.67258-54.181962-55.386393-54.181962-42.743457 0-70.436142 26.489278-82.477374 85.486914l-105.956088-21.67258c24.683144-111.976192 82.477374-157.127486 205.289345-157.127486 98.12985 0 157.72919 63.212631 157.72919 131.842639C707.017407 423.240044 688.956071 461.76953 623.335603 509.329685z
  </Geometry>
  <Geometry x:Key="AllGeometry" o:Freeze="True">
    M 721.005 638.949 C 758.74 638.949 789.333 669.56 789.333 707.312 C 789.333 745.047 758.74 775.657 721.005 775.657 C 683.253 775.657 652.66 745.047 652.66 707.312 C 652.66 669.56 683.253 638.949 721.005 638.949 Z M 512.017 638.949 C 549.77 638.949 580.38 669.56 580.38 707.312 C 580.38 745.047 549.77 775.657 512.017 775.657 C 474.265 775.657 443.672 745.047 443.672 707.312 C 443.672 669.56 474.265 638.949 512.017 638.949 Z M 303.029 638.949 C 340.781 638.949 371.392 669.56 371.392 707.312 C 371.392 745.047 340.781 775.657 303.029 775.657 C 265.277 775.657 234.667 745.047 234.667 707.312 C 234.667 669.56 265.277 638.949 303.029 638.949 Z M 721.005 443.655 C 758.74 443.655 789.333 474.265 789.333 512.017 C 789.333 549.769 758.74 580.363 721.005 580.363 C 683.253 580.363 652.66 549.769 652.66 512.017 C 652.66 474.265 683.253 443.655 721.005 443.655 Z M 512.017 443.655 C 549.77 443.655 580.38 474.265 580.38 512.017 C 580.38 549.769 549.77 580.363 512.017 580.363 C 474.265 580.363 443.672 549.769 443.672 512.017 C 443.672 474.265 474.265 443.655 512.017 443.655 Z M 303.029 443.655 C 340.781 443.655 371.392 474.265 371.392 512.017 C 371.392 549.769 340.781 580.363 303.029 580.363 C 265.277 580.363 234.667 549.769 234.667 512.017 C 234.667 474.265 265.277 443.655 303.029 443.655 Z M 721.005 248.343 C 758.74 248.343 789.333 278.953 789.333 316.688 C 789.333 354.44 758.74 385.051 721.005 385.051 C 683.253 385.051 652.66 354.44 652.66 316.688 C 652.66 278.953 683.253 248.343 721.005 248.343 Z M 512.017 248.343 C 549.77 248.343 580.38 278.953 580.38 316.688 C 580.38 354.44 549.77 385.051 512.017 385.051 C 474.265 385.051 443.672 354.44 443.672 316.688 C 443.672 278.953 474.265 248.343 512.017 248.343 Z M 303.029 248.343 C 340.781 248.343 371.392 278.953 371.392 316.688 C 371.392 354.44 340.781 385.051 303.029 385.051 C 265.277 385.051 234.667 354.44 234.667 316.688 C 234.667 278.953 265.277 248.343 303.029 248.343 Z
  </Geometry>
  <Geometry x:Key="DragVerticalGeometry" o:Freeze="True">
    M2,12 C3.1045694,12 4,12.895431 4,14 4,15.104569 3.1045694,16 2,16 0.89543051,16 0,15.104569 0,14 0,12.895431 0.89543051,12 2,12 z M2,6 C3.1045694,6 4,6.8954306 4,8 4,9.1045694 3.1045694,10 2,10 0.89543051,10 0,9.1045694 0,8 0,6.8954306 0.89543051,6 2,6 z M2,0 C3.1045694,0 4,0.89543056 4,2 4,3.1045694 3.1045694,4 2,4 0.89543051,4 0,3.1045694 0,2 0,0.89543056 0.89543051,0 2,0 z
  </Geometry>
  <Geometry x:Key="DragHorizontalGeometry" o:Freeze="True">
    M14,0 C15.104569,0 16,0.89543051 16,2 16,3.1045694 15.104569,4 14,4 12.895431,4 12,3.1045694 12,2 12,0.89543051 12.895431,0 14,0 z M8,0 C9.1045694,0 10,0.89543051 10,2 10,3.1045694 9.1045694,4 8,4 6.8954306,4 6,3.1045694 6,2 6,0.89543051 6.8954306,0 8,0 z M2,0 C3.1045694,0 4,0.89543051 4,2 4,3.1045694 3.1045694,4 2,4 0.89543056,4 0,3.1045694 0,2 0,0.89543051 0.89543056,0 2,0 z
  </Geometry>
  <Geometry x:Key="DropperGeometry" o:Freeze="True">
    M798.165333 97.834667a42.624 42.624 0 0 0-60.330666 0l-140.629334 140.629333-55.381333-55.296-60.330667 60.330667 55.381334 55.296-353.706667 353.706666a42.709333 42.709333 0 0 0-11.221333 19.84l-42.666667 170.666667a42.538667 42.538667 0 0 0 51.712 51.712l170.666667-42.666667c7.509333-1.877333 14.378667-5.76 19.84-11.221333l353.792-353.792 55.210666 55.125333 60.330667-60.330666-55.210667-55.125334 140.544-140.544a42.624 42.624 0 0 0 0-60.330666l-128-128zM319.488 772.138667l-90.197333 22.570666 22.570666-90.197333 345.386667-345.386667 67.669333 67.584-345.429333 345.429334z
  </Geometry>
  <Style x:Key="PathBaseStyle" TargetType="{x:Type Path}">
    <Setter Property="Shape.Stretch" Value="Uniform"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
  </Style>
  <system:Double x:Key="DefaultControlHeight">28</system:Double>
  <system:Double x:Key="SmallControlHeight">20</system:Double>
  <Thickness x:Key="DefaultControlPadding">10,5</Thickness>
  <Thickness x:Key="DefaultInputPadding">8,0</Thickness>
  <CornerRadius x:Key="DefaultCornerRadius">4</CornerRadius>
  <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">30</system:Double>
  <interactivity:FluidMoveBehavior x:Key="BehaviorXY200" x:Shared="false" AppliesTo="Children" Duration="0:0:.2">
    <interactivity:FluidMoveBehavior.EaseX>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseX>
    <interactivity:FluidMoveBehavior.EaseY>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseY>
  </interactivity:FluidMoveBehavior>
  <interactivity:FluidMoveBehavior x:Key="BehaviorX200" x:Shared="false" AppliesTo="Children" Duration="0:0:.2">
    <interactivity:FluidMoveBehavior.EaseX>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseX>
  </interactivity:FluidMoveBehavior>
  <interactivity:FluidMoveBehavior x:Key="BehaviorY200" x:Shared="false" AppliesTo="Children" Duration="0:0:.2">
    <interactivity:FluidMoveBehavior.EaseY>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseY>
  </interactivity:FluidMoveBehavior>
  <interactivity:FluidMoveBehavior x:Key="BehaviorXY400" x:Shared="false" AppliesTo="Children" Duration="0:0:.4">
    <interactivity:FluidMoveBehavior.EaseX>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseX>
    <interactivity:FluidMoveBehavior.EaseY>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseY>
  </interactivity:FluidMoveBehavior>
  <interactivity:FluidMoveBehavior x:Key="BehaviorX400" x:Shared="false" AppliesTo="Children" Duration="0:0:.4">
    <interactivity:FluidMoveBehavior.EaseX>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseX>
  </interactivity:FluidMoveBehavior>
  <interactivity:FluidMoveBehavior x:Key="BehaviorY400" x:Shared="false" AppliesTo="Children" Duration="0:0:.4">
    <interactivity:FluidMoveBehavior.EaseY>
      <PowerEase/>
    </interactivity:FluidMoveBehavior.EaseY>
  </interactivity:FluidMoveBehavior>
  <Style TargetType="{x:Type hc:BlendEffectBox}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:BlendEffectBox}">
          <ContentPresenter ContentSource="ActualContent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BorderCircular" TargetType="{x:Type Border}">
    <Setter Property="hc:BorderElement.Circular" Value="True"/>
  </Style>
  <Style TargetType="{x:Type hc:Col}">
    <Setter Property="UIElement.Focusable" Value="False"/>
  </Style>
  <Style TargetType="{x:Type ContentControl}">
    <Setter Property="UIElement.Focusable" Value="False"/>
  </Style>
  <Style TargetType="{x:Type hc:FlipClock}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:FlipClock}">
          <StackPanel Orientation="Horizontal">
            <hc:FlipNumber Margin="-20" Number="{Binding NumberList[0], RelativeSource={RelativeSource TemplatedParent}}"/>
            <hc:FlipNumber Margin="-20" Number="{Binding NumberList[1], RelativeSource={RelativeSource TemplatedParent}}"/>
            <hc:FlipNumber Margin="0,-20,-20,-20"
                           Number="{Binding NumberList[2], RelativeSource={RelativeSource TemplatedParent}}"/>
            <hc:FlipNumber Margin="-20" Number="{Binding NumberList[3], RelativeSource={RelativeSource TemplatedParent}}"/>
            <hc:FlipNumber Margin="0,-20,-20,-20"
                           Number="{Binding NumberList[4], RelativeSource={RelativeSource TemplatedParent}}"/>
            <hc:FlipNumber Margin="-20" Number="{Binding NumberList[5], RelativeSource={RelativeSource TemplatedParent}}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:FloatingBlock}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:FloatingBlock}">
          <ContentPresenter ContentTemplate="{TemplateBinding hc:FloatingBlock.ContentTemplate}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type GridSplitter}">
    <Setter Property="UIElement.Focusable" Value="False"/>
  </Style>
  <Style TargetType="{x:Type hc:Notification}">
    <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True"/>
    <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False"/>
    <Setter Property="Window.SizeToContent" Value="WidthAndHeight"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Window.ShowActivated" Value="False"/>
    <Setter Property="Window.ShowInTaskbar" Value="False"/>
    <Setter Property="Window.Topmost" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Notification}">
          <ContentPresenter Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RectangleCircular" TargetType="{x:Type Rectangle}">
    <Setter Property="hc:RectangleAttach.Circular" Value="True"/>
  </Style>
  <Style x:Key="SnapRect4ScreenshotStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="FrameworkElement.Height" Value="5"/>
    <Setter Property="FrameworkElement.Width" Value="5"/>
    <Setter Property="Shape.Fill" Value="DodgerBlue"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="UIElement.Visibility" Value="Collapsed"/>
    <Style.Triggers>
      <Trigger Property="hc:TipElement.Placement" Value="LeftTop">
        <Setter Property="FrameworkElement.Margin" Value="-3, -3, 0, 0"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="Top">
        <Setter Property="FrameworkElement.Margin" Value="0, -3, 0, 0"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="RightTop">
        <Setter Property="FrameworkElement.Margin" Value="0, -3, -3, 0"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="Right">
        <Setter Property="FrameworkElement.Margin" Value="0, 0, -3, 0"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="RightBottom">
        <Setter Property="FrameworkElement.Margin" Value="0, 0, -3, -3"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="Bottom">
        <Setter Property="FrameworkElement.Margin" Value="0, 0, 0, -3"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="LeftBottom">
        <Setter Property="FrameworkElement.Margin" Value="-3, 0, 0, -3"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
      </Trigger>
      <Trigger Property="hc:TipElement.Placement" Value="Left">
        <Setter Property="FrameworkElement.Margin" Value="-3, 0, 0, 0"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
      </Trigger>
      <DataTrigger Binding="{Binding IsSelecting}" Value="True">
        <Setter Property="UIElement.Visibility" Value="Visible"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding IsDrawing}" Value="True">
        <Setter Property="UIElement.Visibility" Value="Visible"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TargetArea4ScreenshotStyle" TargetType="{x:Type Border}">
    <Setter Property="UIElement.IsHitTestVisible" Value="False"/>
    <Setter Property="Border.BorderThickness" Value="5"/>
    <Setter Property="Border.BorderBrush" Value="DodgerBlue"/>
    <Setter Property="Border.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsSelecting}" Value="True">
        <Setter Property="Border.BorderThickness" Value="1"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding IsDrawing}" Value="True">
        <Setter Property="UIElement.IsHitTestVisible" Value="True"/>
        <Setter Property="Border.BorderThickness" Value="1"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type hc:SimpleItemsControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SimpleItemsControl}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <StackPanel x:Name="PART_Panel"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:Sprite}">
    <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True"/>
    <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False"/>
    <Setter Property="Window.SizeToContent" Value="WidthAndHeight"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Window.ShowActivated" Value="False"/>
    <Setter Property="Window.ShowInTaskbar" Value="False"/>
    <Setter Property="Window.Topmost" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Sprite}">
          <ContentPresenter Margin="{TemplateBinding Control.Padding}" hc:WindowAttach.IsDragElement="True"
                            HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Storyboard x:Key="Right2LeftTransition" x:Shared="false">
    <DoubleAnimation From="50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Left2RightTransition" x:Shared="false">
    <DoubleAnimation From="-50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Bottom2TopTransition" x:Shared="false">
    <DoubleAnimation From="50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Top2BottomTransition" x:Shared="false">
    <DoubleAnimation From="-50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Right2LeftWithFadeTransition" x:Shared="false">
    <DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)"/>
    <DoubleAnimation From="50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Left2RightWithFadeTransition" x:Shared="false">
    <DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)"/>
    <DoubleAnimation From="-50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Bottom2TopWithFadeTransition" x:Shared="false">
    <DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)"/>
    <DoubleAnimation From="50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="Top2BottomWithFadeTransition" x:Shared="false">
    <DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)"/>
    <DoubleAnimation From="-50" To="0" Duration="0:0:0.4"
                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
      <DoubleAnimation.EasingFunction>
        <CubicEase EasingMode="EaseOut"/>
      </DoubleAnimation.EasingFunction>
    </DoubleAnimation>
  </Storyboard>
  <Storyboard x:Key="FadeTransition" x:Shared="false">
    <DoubleAnimation From="0" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.Opacity)"/>
  </Storyboard>
  <Style TargetType="{x:Type hc:TransitioningContentControl}">
    <Setter Property="UIElement.Focusable" Value="False"/>
  </Style>
  <Style x:Key="SliderRepeatButtonHorizontalStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" Height="{TemplateBinding FrameworkElement.Height}"
                  Width="{TemplateBinding FrameworkElement.Width}">
            <Rectangle StrokeThickness="0" Fill="{TemplateBinding Control.Background}" Height="2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderRepeatButtonVerticalStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" Height="{TemplateBinding FrameworkElement.Height}"
                  Width="{TemplateBinding FrameworkElement.Width}">
            <Rectangle StrokeThickness="0" Fill="{TemplateBinding Control.Background}" Width="2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CompareSliderRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                            Height="{TemplateBinding FrameworkElement.ActualHeight}"
                            Width="{TemplateBinding FrameworkElement.ActualWidth}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PreviewSliderRepeatButtonHorizontalStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" Height="{TemplateBinding FrameworkElement.Height}"
                  Width="{TemplateBinding FrameworkElement.Width}">
            <Rectangle Fill="{TemplateBinding Control.Background}" Height="2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PreviewSliderRepeatButtonVerticalStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" Height="{TemplateBinding FrameworkElement.Height}"
                  Width="{TemplateBinding FrameworkElement.Width}">
            <Rectangle Fill="{TemplateBinding Control.Background}" Width="2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarBaseRepeatButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                     Width="{TemplateBinding FrameworkElement.Width}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToggleBlockBaseStyle" TargetType="{x:Type hc:ToggleBlock}">
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ToggleBlock}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <hc:SimplePanel Margin="{TemplateBinding Control.Padding}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}">
              <ContentPresenter Name="ContentPresenterChecked" ContentSource="CheckedContent" Visibility="Collapsed"/>
              <ContentPresenter Name="ContentPresenterUnChecked" ContentSource="UnCheckedContent"/>
              <ContentPresenter Name="ContentPresenterIndeterminate" ContentSource="IndeterminateContent" Visibility="Collapsed"/>
            </hc:SimplePanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:ToggleBlock.IsChecked" Value="True">
              <Setter TargetName="ContentPresenterChecked" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentPresenterUnChecked" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterIndeterminate" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="hc:ToggleBlock.IsChecked" Value="False">
              <Setter TargetName="ContentPresenterChecked" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterUnChecked" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentPresenterIndeterminate" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:ToggleBlock.IsChecked">
              <Setter TargetName="ContentPresenterChecked" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterUnChecked" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterIndeterminate" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="GroupBoxBaseTopTemplate" TargetType="{x:Type GroupBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}" Margin="0,0,0,6"
              MinHeight="{Binding Path=(hc:TitleElement.MinHeight), RelativeSource={RelativeSource TemplatedParent}}"
              Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter TextElement.Foreground="{TemplateBinding Control.Foreground}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" ContentSource="Header"
                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          Margin="{Binding Path=(hc:TitleElement.Padding), RelativeSource={RelativeSource TemplatedParent}}"/>
      </Border>
      <Border Grid.Row="1" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="GroupBoxBaseLeftTemplate" TargetType="{x:Type GroupBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Border BorderThickness="{TemplateBinding Control.BorderThickness}" ClipToBounds="False"
              BorderBrush="{TemplateBinding Control.BorderBrush}" Margin="0,0,6,0"
              MinWidth="{Binding Path=(hc:TitleElement.MinWidth), RelativeSource={RelativeSource TemplatedParent}}"
              Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter TextElement.Foreground="{TemplateBinding Control.Foreground}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" ContentSource="Header"
                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          RenderTransformOrigin="0.5,0.5"
                          Margin="{Binding Path=(hc:TitleElement.Padding), RelativeSource={RelativeSource TemplatedParent}}">
          <FrameworkElement.LayoutTransform>
            <TransformGroup>
              <RotateTransform Angle="-90"/>
            </TransformGroup>
          </FrameworkElement.LayoutTransform>
        </ContentPresenter>
      </Border>
      <Border Grid.Column="1" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="GroupBoxTabTopTemplate" TargetType="{x:Type GroupBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border Grid.Row="1" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,0,1,1'}">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
      <Border Grid.Row="0" BorderBrush="{TemplateBinding Control.BorderBrush}"
              MinHeight="{Binding Path=(hc:TitleElement.MinHeight), RelativeSource={RelativeSource TemplatedParent}}"
              BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='1,1,1,0'}"
              Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}">
        <ContentPresenter TextElement.Foreground="{TemplateBinding Control.Foreground}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" ContentSource="Header"
                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          Margin="{Binding Path=(hc:TitleElement.Padding), RelativeSource={RelativeSource TemplatedParent}}"/>
      </Border>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="GroupBoxTabLeftTemplate" TargetType="{x:Type GroupBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Border Grid.Column="1" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,1,1,0'}">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
      <Border Grid.Column="0" BorderBrush="{TemplateBinding Control.BorderBrush}"
              MinWidth="{Binding Path=(hc:TitleElement.MinWidth), RelativeSource={RelativeSource TemplatedParent}}"
              BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='1,1,0,1'}"
              Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,0,0,1'}">
        <ContentPresenter TextElement.Foreground="{TemplateBinding Control.Foreground}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" ContentSource="Header"
                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          Margin="{Binding Path=(hc:TitleElement.Padding), RelativeSource={RelativeSource TemplatedParent}}">
          <FrameworkElement.LayoutTransform>
            <TransformGroup>
              <RotateTransform Angle="-90"/>
            </TransformGroup>
          </FrameworkElement.LayoutTransform>
        </ContentPresenter>
      </Border>
    </Grid>
  </ControlTemplate>
  <ItemsPanelTemplate x:Key="ButtonGroupHorizontalUniformItemsPanelTemplate">
    <UniformGrid Rows="1" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="ButtonGroupVerticalUniformItemsPanelTemplate">
    <UniformGrid Columns="1" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="ButtonGroupHorizontalStackItemsPanelTemplate">
    <StackPanel Orientation="Horizontal" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="ButtonGroupVerticalStackItemsPanelTemplate">
    <StackPanel FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <tools:ButtonGroupItemStyleSelector x:Key="ButtonGroupItemStyleSelector"/>
  <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
    <GradientStop Color="#00FFFFFF" Offset="0"/>
    <GradientStop Color="#60FFFFFF" Offset="0.4"/>
    <GradientStop Color="#60FFFFFF" Offset="0.6"/>
    <GradientStop Color="#00FFFFFF" Offset="1"/>
  </LinearGradientBrush>
  <ControlTemplate x:Key="CircleProgressBarTemplate" TargetType="{x:Type hc:CircleProgressBar}">
    <hc:SimplePanel x:Name="TemplateRoot">
      <shapes:Arc ArcThickness="{TemplateBinding hc:CircleProgressBar.ArcThickness}" Stretch="None" EndAngle="360"
                  Width="{TemplateBinding FrameworkElement.ActualWidth}"
                  Height="{TemplateBinding FrameworkElement.ActualHeight}"
                  Stroke="{TemplateBinding Control.BorderBrush}" Fill="{TemplateBinding Control.Background}"
                  StrokeThickness="0"/>
      <shapes:Arc x:Name="PART_Indicator" ArcThickness="{TemplateBinding hc:CircleProgressBar.ArcThickness}"
                  Stretch="None" Width="{TemplateBinding FrameworkElement.ActualWidth}" StrokeThickness="0"
                  Height="{TemplateBinding FrameworkElement.ActualHeight}"
                  Fill="{TemplateBinding Control.Foreground}"/>
      <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
                 Foreground="{TemplateBinding Control.Foreground}"
                 Text="{TemplateBinding hc:CircleProgressBar.Text}"
                 Visibility="{Binding ShowText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
    </hc:SimplePanel>
  </ControlTemplate>
  <ItemsPanelTemplate x:Key="UniformHorizontalItemsPanelTemplate">
    <UniformGrid Rows="1" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="UniformVerticalItemsPanelTemplate">
    <UniformGrid Columns="1" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="StackHorizontalItemsPanelTemplate">
    <StackPanel Orientation="Horizontal" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="StackVerticalItemsPanelTemplate">
    <StackPanel FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="VirtualizingStackHorizontalItemsPanelTemplate">
    <VirtualizingStackPanel Orientation="Horizontal" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="VirtualizingStackVerticalItemsPanelTemplate">
    <VirtualizingStackPanel FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="WrapHorizontalItemsPanelTemplate">
    <WrapPanel HorizontalAlignment="Center" VerticalAlignment="Center" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="WrapVerticalItemsPanelTemplate">
    <WrapPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center"
               FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <ItemsPanelTemplate x:Key="DockItemsPanelTemplate">
    <DockPanel LastChildFill="True" FocusVisualStyle="{x:Null}"/>
  </ItemsPanelTemplate>
  <LinearGradientBrush x:Key="ResizeGripperForeground" EndPoint="1,0.75" StartPoint="0,0.25">
    <GradientStop Color="#FFFFFF" Offset="0.3"/>
    <GradientStop Color="#BBC5D7" Offset="0.75"/>
    <GradientStop Color="#6D83A9" Offset="1"/>
  </LinearGradientBrush>
  <SineEase x:Key="SineEaseOut" EasingMode="EaseOut"/>
  <ControlTemplate x:Key="BadgeDotTemplate" TargetType="{x:Type hc:Badge}">
    <hc:SimplePanel>
      <ContentPresenter/>
      <Border Margin="{TemplateBinding hc:Badge.BadgeMargin}" Width="10" Height="10" CornerRadius="5"
              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
              Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Visibility="{TemplateBinding ShowBadge, Converter={StaticResource Boolean2VisibilityConverter}}"/>
    </hc:SimplePanel>
  </ControlTemplate>
  <Style x:Key="ColorPickerSliderRepeatButtonBaseStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                     Width="{TemplateBinding FrameworkElement.Width}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ColorPickerSliderThumbTemplate" TargetType="{x:Type Thumb}">
    <Border Width="13" Height="13" Background="White" CornerRadius="6.5"/>
  </ControlTemplate>
  <LinearGradientBrush x:Key="ColorPickerRainbowBrush">
    <GradientStop Color="#ff0000"/>
    <GradientStop Color="#ff00ff" Offset="0.167"/>
    <GradientStop Color="#0000ff" Offset="0.334"/>
    <GradientStop Color="#00ffff" Offset="0.501"/>
    <GradientStop Color="#00ff00" Offset="0.668"/>
    <GradientStop Color="#ffff00" Offset="0.835"/>
    <GradientStop Color="#ff0000" Offset="1"/>
  </LinearGradientBrush>
  <DrawingBrush x:Key="ColorPickerOpacityBrush" Viewport="0,0,12,11" ViewportUnits="Absolute" Stretch="None"
                TileMode="Tile">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#d0cec7">
          <GeometryDrawing.Geometry>
            <GeometryGroup>
              <RectangleGeometry Rect="0,0,6,5"/>
              <RectangleGeometry Rect="6,6,6,5"/>
            </GeometryGroup>
          </GeometryDrawing.Geometry>
        </GeometryDrawing>
        <GeometryDrawing Brush="#e7e7e2">
          <GeometryDrawing.Geometry>
            <RectangleGeometry Rect="0,5,12,1"/>
          </GeometryDrawing.Geometry>
        </GeometryDrawing>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <Style x:Key="CoverFlowBaseStyle" TargetType="{x:Type hc:CoverFlow}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CoverFlow}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <Viewport3D x:Name="PART_Viewport3D">
              <Viewport3D.Camera>
                <PerspectiveCamera x:Name="PART_Camera" Position="0,0,3" UpDirection="0,1,0" LookDirection="0,0,-1" FieldOfView="90"/>
              </Viewport3D.Camera>
              <Viewport3D.Children>
                <ModelVisual3D>
                  <ModelVisual3D.Content>
                    <DirectionalLight Color="White" Direction="1,0,-4"/>
                  </ModelVisual3D.Content>
                </ModelVisual3D>
                <ModelVisual3D>
                  <ModelVisual3D.Content>
                    <DirectionalLight Color="White" Direction="-1,0,-4"/>
                  </ModelVisual3D.Content>
                </ModelVisual3D>
                <ModelVisual3D x:Name="PART_VisualParent"/>
              </Viewport3D.Children>
            </Viewport3D>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CoverViewItemBaseStyle" TargetType="{x:Type hc:CoverViewItem}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CoverViewItem}">
          <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding hc:HeaderedSelectableItem.HeaderTemplate}"
                              Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
    <Setter Property="Canvas.Right" Value="-9"/>
    <Setter Property="FrameworkElement.Width" Value="18"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent" Padding="{TemplateBinding Control.Padding}">
            <Rectangle Fill="{TemplateBinding Control.Background}" HorizontalAlignment="Center" Width="1"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DrawingBrush x:Key="SortByCategoryDrawingBrush" o:Freeze="True">
    <DrawingBrush.Drawing>
      <DrawingGroup o:Freeze="True">
        <GeometryDrawing o:Freeze="True" Brush="#00FFFFFF" Geometry="F1 M 16,16 L 0,16 0,0 16,0 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FFF6F6F6"
                         Geometry="F1 M 0.9999,-0.000199999999999534 L 0.9999,15.9998 10.9999,15.9998 10.9999,13.4148 11.9999,14.4138 15.9999,10.4138 15.9999,5.5858 14.0009,7.5858 14.0009,3.0008 10.9999,3.0008 10.9999,-0.000199999999999534 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FF424242"
                         Geometry="F1 M 10,12.4141 L 10,15.0001 2,15.0001 2,1.0001 10,1.0001 10,3.0001 10,7.5861 8.414,6.0001 9,6.0001 9,3.0001 3,3.0001 3,6.0001 8,6.0001 8,7.0001 3,7.0001 3,10.0001 8,10.0001 8,10.4141 8.586,11.0001 3,11.0001 3,14.0001 9,14.0001 9,11.4141 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FFEFEFF0"
                         Geometry="F1 M 8.5859,11 L 2.9999,11 2.9999,14 8.9999,14 8.9999,11.414 M 7.9999,7 L 2.9999,7 2.9999,10 7.9999,10 M 7.9999,6 L 2.9999,6 2.9999,3 8.9999,3 8.9999,6 8.4139,6 7.9999,5.586 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FF00529C"
                         Geometry="F1 M 13,10 L 13,4 11,4 11,10 9,8 9,10 12,13 15,10 15,8 Z"/>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <DrawingBrush x:Key="SortByNameDrawingBrush" o:Freeze="True">
    <DrawingBrush.Drawing>
      <DrawingGroup o:Freeze="True">
        <GeometryDrawing o:Freeze="True" Brush="#00FFFFFF" Geometry="F1 M 16,16 L 0,16 0,0 16,0 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FFF6F6F6"
                         Geometry="F1 M 0,-0.000199999999999534 L 0,8.9998 1,8.9998 1,12.0008 2.586,12.0008 1,13.5858 1,15.9998 8,15.9998 8,13.0008 6.449,13.0008 8,12.0008 8,10.9998 12,14.9998 16,10.9998 16,4.9998 14,6.9998 14,3.0008 10,3.0008 10,6.9998 9,5.9998 9,-0.000199999999999534 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FF424242"
                         Geometry="F1 M 7,7 L 5,2 4,2 2,7 3,7 3.399,6 5.601,6 6,7 M 8,8 L 1,8 1,1 8,1 M 4.5,3.25 L 5.2,5 3.8,5 M 2,11 L 5,11 2,14 2,15 7,15 7,14 4.013,14 7,11.051 6.952,11 7,11 7,10 2,10 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FFEFEFF0"
                         Geometry="F1 M 3.7998,5 L 4.4998,3.25 5.1998,5 M 5.9998,7 L 6.9998,7 4.9998,2 3.9998,2 1.9998,7 2.9998,7 3.3998,6 5.6008,6 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="#FF00529C"
                         Geometry="F1 M 15,8 L 15,10 12,13 9,10 9,8 11,10 11,4 13,4 13,10 Z"/>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <ContextMenu x:Key="TabItemMenu" x:Shared="false">
    <MenuItem Command="interactivity:ControlCommands.Close" Header="{x:Static langs:Lang.Close}"/>
    <MenuItem Command="interactivity:ControlCommands.CloseAll" Header="{x:Static langs:Lang.CloseAll}"/>
    <MenuItem Command="interactivity:ControlCommands.CloseOther" Header="{x:Static langs:Lang.CloseOther}"/>
  </ContextMenu>
  <Style x:Key="ToolBarTrayBaseStyle" TargetType="{x:Type ToolBarTray}">
    <Setter Property="ToolBarTray.Background" Value="Transparent"/>
  </Style>
  <PathGeometry x:Key="TreeArrow"
                Figures="M508.893248 762.931659a65.039498 65.039498 0 0 1-46.420659-19.485839L97.125746 371.004022c-25.143018-25.634319-24.752868-66.816849 0.881451-91.959868 25.648769-25.164693 66.809624-24.745643 91.959867 0.881451l318.933409 325.125238 318.933408-325.125238a65.025048 65.025048 0 0 1 92.841318 91.078417L555.313907 743.44582a65.025048 65.025048 0 0 1-46.420659 19.485839z"/>
  <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Height" Value="8"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Width" Value="8"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridComboBoxColumnStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.Focusable" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <TextBlock IsHitTestVisible="False" Text="{TemplateBinding ComboBox.Text}" TextTrimming="CharacterEllipsis"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridTextColumnStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
  </Style>
  <Style x:Key="CarouselItemBaseStyle" TargetType="{x:Type hc:CarouselItem}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CarouselItem}">
          <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType=hc:Carousel}}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:GrowlWindow}">
    <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True"/>
    <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False"/>
    <Setter Property="FrameworkElement.Width" Value="340"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="340"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Window.ShowActivated" Value="False"/>
    <Setter Property="Window.ShowInTaskbar" Value="False"/>
    <Setter Property="Window.Topmost" Value="True"/>
  </Style>
  <Style x:Key="ListBoxItemCustom" TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <tools:ComboBoxItemCapsuleStyleSelector x:Key="ComboBoxItemCapsuleStyleSelector"/>
  <hc:HorizontalAlignmentPathTemplateSelector x:Key="HorizontalAlignmentPathTemplateSelector"/>
  <hc:VerticalAlignmentPathTemplateSelector x:Key="VerticalAlignmentPathTemplateSelector"/>
  <Geometry x:Key="NailGeometry">
    M956.553 366.486L657.514 67.447c-7.888-7.888-18.204-11.772-28.52-11.772s-20.632 3.884-28.52 11.772L404.958 263.085c-14.806-1.7-29.734-2.428-44.662-2.428-88.837 0-177.675 29.249-250.614 87.746-18.69 14.927-20.268 42.962-3.277 59.953l220.516 220.517L65.506 890.046c-3.156 3.155-5.219 7.403-5.583 11.893l-4.126 45.147c-1.093 11.408 8.01 21.117 19.296 21.117 0.607 0 1.214 0 1.82-0.121l45.148-4.126c4.49-0.364 8.738-2.428 11.893-5.583L395.37 696.957l220.517 220.517c7.888 7.888 18.204 11.772 28.52 11.772 11.772 0 23.423-5.097 31.433-15.05 68.327-85.317 96.726-192.117 85.197-295.397l195.516-195.515c15.655-15.535 15.655-41.021 0-56.798zM699.142 557.268l-29.734 29.734 4.612 41.75c4.49 40.898 1.213 81.555-9.952 120.998-6.554 23.059-15.535 45.026-26.943 65.779L208.593 386.753c15.655-8.616 31.918-15.898 48.909-21.724 33.01-11.408 67.599-17.112 102.794-17.112 11.651 0 23.423 0.607 35.074 1.942l41.75 4.612 29.733-29.734 162.262-162.262 232.41 232.41-162.383 162.383z
  </Geometry>
  <Geometry x:Key="DialogBoxLauncherGeometry">
    M0,0 8,0 8,1 1,1 1,8 0,8 M 3.7,3 8,7.3 8,4 9,4 9,9 4,9 4,8 7.3,8 3,3.7
  </Geometry>
  <Style TargetType="{x:Type hc:RibbonTab}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:RibbonTab}">
          <hc:SimplePanel x:Name="PART_RootContainer" Visibility="Collapsed">
            <Border x:Name="mainBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0,0,0,3"
                    Background="{TemplateBinding Control.Background}" Margin="0"/>
            <ScrollViewer hc:ScrollViewerAttach.Orientation="Horizontal" HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Disabled">
              <ItemsPresenter/>
            </ScrollViewer>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="LightPrimaryBrush" o:Freeze="True" Color="{DynamicResource LightPrimaryColor}"/>
  <LinearGradientBrush x:Key="PrimaryBrush" o:Freeze="True" EndPoint="1,0" StartPoint="0,0">
    <GradientStop o:Freeze="True" Color="{DynamicResource PrimaryColor}" Offset="0"/>
    <GradientStop o:Freeze="True" Color="{DynamicResource DarkPrimaryColor}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DarkPrimaryBrush" o:Freeze="True" Color="{DynamicResource DarkPrimaryColor}"/>
  <SolidColorBrush x:Key="PrimaryTextBrush" o:Freeze="True" Color="{DynamicResource PrimaryTextColor}"/>
  <SolidColorBrush x:Key="SecondaryTextBrush" o:Freeze="True" Color="{DynamicResource SecondaryTextColor}"/>
  <SolidColorBrush x:Key="ThirdlyTextBrush" o:Freeze="True" Color="{DynamicResource ThirdlyTextColor}"/>
  <SolidColorBrush x:Key="ReverseTextBrush" o:Freeze="True" Color="{DynamicResource ReverseTextColor}"/>
  <SolidColorBrush x:Key="TextIconBrush" o:Freeze="True" Color="{DynamicResource TextIconColor}"/>
  <SolidColorBrush x:Key="BorderBrush" o:Freeze="True" Color="{DynamicResource BorderColor}"/>
  <SolidColorBrush x:Key="SecondaryBorderBrush" o:Freeze="True" Color="{DynamicResource SecondaryBorderColor}"/>
  <SolidColorBrush x:Key="BackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundColor}"/>
  <SolidColorBrush x:Key="RegionBrush" o:Freeze="True" Color="{DynamicResource RegionColor}"/>
  <SolidColorBrush x:Key="SecondaryRegionBrush" o:Freeze="True" Color="{DynamicResource SecondaryRegionColor}"/>
  <SolidColorBrush x:Key="ThirdlyRegionBrush" o:Freeze="True" Color="{DynamicResource ThirdlyRegionColor}"/>
  <LinearGradientBrush x:Key="TitleBrush" o:Freeze="True" EndPoint="1,0" StartPoint="0,0">
    <GradientStop o:Freeze="True" Color="{DynamicResource TitleColor}" Offset="0"/>
    <GradientStop o:Freeze="True" Color="{DynamicResource SecondaryTitleColor}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DefaultBrush" o:Freeze="True" Color="{DynamicResource DefaultColor}"/>
  <SolidColorBrush x:Key="DarkDefaultBrush" o:Freeze="True" Color="{DynamicResource DarkDefaultColor}"/>
  <SolidColorBrush x:Key="LightDangerBrush" o:Freeze="True" Color="{DynamicResource LightDangerColor}"/>
  <LinearGradientBrush x:Key="DangerBrush" o:Freeze="True" EndPoint="1,0" StartPoint="0,0">
    <GradientStop o:Freeze="True" Color="{DynamicResource DangerColor}" Offset="0"/>
    <GradientStop o:Freeze="True" Color="{DynamicResource DarkDangerColor}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DarkDangerBrush" o:Freeze="True" Color="{DynamicResource DarkDangerColor}"/>
  <SolidColorBrush x:Key="LightWarningBrush" o:Freeze="True" Color="{DynamicResource LightWarningColor}"/>
  <LinearGradientBrush x:Key="WarningBrush" o:Freeze="True" EndPoint="1,0" StartPoint="0,0">
    <GradientStop o:Freeze="True" Color="{DynamicResource WarningColor}" Offset="0"/>
    <GradientStop o:Freeze="True" Color="{DynamicResource DarkWarningColor}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DarkWarningBrush" o:Freeze="True" Color="{DynamicResource DarkWarningColor}"/>
  <SolidColorBrush x:Key="LightInfoBrush" o:Freeze="True" Color="{DynamicResource LightInfoColor}"/>
  <LinearGradientBrush x:Key="InfoBrush" o:Freeze="True" EndPoint="1,0" StartPoint="0,0">
    <GradientStop o:Freeze="True" Color="{DynamicResource InfoColor}" Offset="0"/>
    <GradientStop o:Freeze="True" Color="{DynamicResource DarkInfoColor}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DarkInfoBrush" o:Freeze="True" Color="{DynamicResource DarkInfoColor}"/>
  <SolidColorBrush x:Key="LightSuccessBrush" o:Freeze="True" Color="{DynamicResource LightSuccessColor}"/>
  <LinearGradientBrush x:Key="SuccessBrush" o:Freeze="True" EndPoint="1,0" StartPoint="0,0">
    <GradientStop o:Freeze="True" Color="{DynamicResource SuccessColor}" Offset="0"/>
    <GradientStop o:Freeze="True" Color="{DynamicResource DarkSuccessColor}" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DarkSuccessBrush" o:Freeze="True" Color="{DynamicResource DarkSuccessColor}"/>
  <SolidColorBrush x:Key="AccentBrush" o:Freeze="True" Color="{DynamicResource AccentColor}"/>
  <SolidColorBrush x:Key="DarkAccentBrush" o:Freeze="True" Color="{DynamicResource DarkAccentColor}"/>
  <SolidColorBrush x:Key="DarkMaskBrush" o:Freeze="True" Color="{DynamicResource DarkMaskColor}"/>
  <SolidColorBrush x:Key="DarkOpacityBrush" o:Freeze="True" Color="{DynamicResource DarkOpacityColor}"/>
  <DropShadowEffect x:Key="EffectShadow1" o:Freeze="True" BlurRadius="5" ShadowDepth="1" Direction="270"
                    Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance"/>
  <DropShadowEffect x:Key="EffectShadow2" o:Freeze="True" BlurRadius="8" ShadowDepth="1.5" Direction="270"
                    Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance"/>
  <DropShadowEffect x:Key="EffectShadow3" o:Freeze="True" BlurRadius="14" ShadowDepth="4.5" Direction="270"
                    Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance"/>
  <DropShadowEffect x:Key="EffectShadow4" o:Freeze="True" BlurRadius="25" ShadowDepth="8" Direction="270"
                    Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance"/>
  <DropShadowEffect x:Key="EffectShadow5" o:Freeze="True" BlurRadius="35" ShadowDepth="13" Direction="270"
                    Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance"/>
  <Style x:Key="SearchPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource SearchGeometry}"/>
  </Style>
  <Style x:Key="FullScreenReturnPathStyle" BasedOn="{StaticResource PathBaseStyle}"
         TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource FullScreenReturnGeometry}"/>
  </Style>
  <Style x:Key="FullScreenPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource FullScreenGeometry}"/>
  </Style>
  <Style x:Key="WindowsPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource WindowsGeometry}"/>
  </Style>
  <Style x:Key="SavePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource SaveGeometry}"/>
  </Style>
  <Style x:Key="DownloadPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource DownloadGeometry}"/>
  </Style>
  <Style x:Key="EnlargePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource EnlargeGeometry}"/>
  </Style>
  <Style x:Key="ReducePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource ReduceGeometry}"/>
  </Style>
  <Style x:Key="RotatePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource RotateLeftGeometry}"/>
  </Style>
  <Style x:Key="CalendarPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource CalendarGeometry}"/>
  </Style>
  <Style x:Key="DeletePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource DeleteGeometry}"/>
  </Style>
  <Style x:Key="ClosePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource CloseGeometry}"/>
  </Style>
  <Style x:Key="DownPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource DownGeometry}"/>
  </Style>
  <Style x:Key="ClockPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource ClockGeometry}"/>
  </Style>
  <Style x:Key="LeftPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource LeftGeometry}"/>
  </Style>
  <Style x:Key="RightPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="UIElement.RenderTransformOrigin" Value="0.5, 0.5"/>
    <Setter Property="UIElement.RenderTransform">
      <Setter.Value>
        <TransformGroup>
          <ScaleTransform ScaleY="1" ScaleX="-1"/>
          <SkewTransform AngleY="0" AngleX="0"/>
          <RotateTransform Angle="0"/>
          <TranslateTransform/>
        </TransformGroup>
      </Setter.Value>
    </Setter>
    <Setter Property="Path.Data" Value="{StaticResource LeftGeometry}"/>
  </Style>
  <Style x:Key="UpDownPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
    <Setter Property="Path.Data" Value="{StaticResource UpDownGeometry}"/>
  </Style>
  <Style x:Key="BorderRegion" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Border.Padding" Value="10"/>
    <Setter Property="Border.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Border.BorderThickness" Value="1"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource BorderBrush}"/>
  </Style>
  <Style x:Key="BorderTipBaseStyle" TargetType="{x:Type Border}">
    <Setter Property="Border.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Border.Padding" Value="10"/>
    <Setter Property="Border.BorderThickness" Value="5,0,0,0"/>
  </Style>
  <Style x:Key="BorderTipPrimary" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource LightPrimaryBrush}"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="BorderTipDanger" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource LightDangerBrush}"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="BorderTipWarning" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource LightWarningBrush}"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="BorderTipInfo" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource LightInfoBrush}"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="BorderTipSuccess" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
    <Setter Property="Border.Background" Value="{DynamicResource LightSuccessBrush}"/>
    <Setter Property="Border.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="BorderVerticallySplitter" TargetType="{x:Type Border}">
    <Setter Property="FrameworkElement.Width" Value="1"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="Border.Background" Value="{DynamicResource ThirdlyTextBrush}"/>
  </Style>
  <Style x:Key="BorderHorizontallySplitter" TargetType="{x:Type Border}">
    <Setter Property="FrameworkElement.Height" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="Border.Background" Value="{DynamicResource ThirdlyTextBrush}"/>
  </Style>
  <Style x:Key="BorderClip" TargetType="{x:Type Border}">
    <Setter Property="UIElement.Clip">
      <Setter.Value>
        <MultiBinding Converter="{StaticResource BorderClipConverter}">
          <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
          <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
          <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}"/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BorderCircularClip" BasedOn="{StaticResource BorderCircular}" TargetType="{x:Type Border}">
    <Setter Property="UIElement.Clip">
      <Setter.Value>
        <MultiBinding Converter="{StaticResource BorderCircularClipConverter}">
          <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
          <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
          <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}"/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:FlipNumber}">
    <Setter Property="hc:FlipNumber.FontSize" Value="70"/>
    <Setter Property="hc:FlipNumber.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="hc:FlipNumber.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="FrameworkElement.Width" Value="120"/>
    <Setter Property="FrameworkElement.Height" Value="180"/>
    <Setter Property="Viewport3D.Camera">
      <Setter.Value>
        <PerspectiveCamera Position="0 0 120" LookDirection="0 0 -1"/>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RectangleFocusVisual" TargetType="{x:Type Rectangle}">
    <Setter Property="FrameworkElement.Margin" Value="-2"/>
    <Setter Property="UIElement.Opacity" Value=".6"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="Shape.Stroke" Value="{DynamicResource SecondaryBorderBrush}"/>
    <Setter Property="Shape.StrokeThickness" Value="2"/>
    <Setter Property="Shape.StrokeDashArray" Value="1 1"/>
  </Style>
  <Style x:Key="RectangleFocusVisualCircular" BasedOn="{StaticResource RectangleFocusVisual}"
         TargetType="{x:Type Rectangle}">
    <Setter Property="hc:RectangleAttach.Circular" Value="True"/>
  </Style>
  <Style x:Key="TextBoxBaseBaseStyle" TargetType="{x:Type TextBoxBase}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.Padding" Value="2,7"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Control.Padding}" Focusable="false"
                          HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RichTextBoxBaseStyle" BasedOn="{StaticResource TextBoxBaseBaseStyle}"
         TargetType="{x:Type RichTextBox}">
    <Setter Property="FrameworkElement.MinWidth" Value="10"/>
  </Style>
  <Style BasedOn="{StaticResource RichTextBoxBaseStyle}" TargetType="{x:Type RichTextBox}"/>
  <Style x:Key="MaskRect4ScreenshotStyle" TargetType="{x:Type Rectangle}">
    <Setter Property="UIElement.IsHitTestVisible" Value="False"/>
    <Setter Property="Shape.Fill" Value="{DynamicResource DarkOpacityBrush}"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
  </Style>
  <Style x:Key="Window4ScreenshotStyle" TargetType="{x:Type hc:ScreenshotWindow}">
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="Window.WindowStyle" Value="None"/>
    <Setter Property="Window.WindowState" Value="Maximized"/>
    <Setter Property="Window.Topmost" Value="True"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True"/>
    <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ScreenshotWindow}">
          <AdornerDecorator>
            <hc:SimplePanel>
              <InkCanvas Name="PART_Canvas" EditingMode="None" Background="Transparent"/>
              <Rectangle Name="PART_MaskAreaLeft" Style="{StaticResource MaskRect4ScreenshotStyle}"/>
              <Rectangle Name="PART_MaskAreaTop" Style="{StaticResource MaskRect4ScreenshotStyle}"/>
              <Rectangle Name="PART_MaskAreaRight" Style="{StaticResource MaskRect4ScreenshotStyle}"/>
              <Rectangle Name="PART_MaskAreaBottom" Style="{StaticResource MaskRect4ScreenshotStyle}"/>
              <Border Name="PART_TargetArea" Style="{StaticResource TargetArea4ScreenshotStyle}">
                <hc:SimplePanel>
                  <Rectangle hc:TipElement.Placement="LeftTop" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="Top" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="RightTop" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="Right" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="RightBottom" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="Bottom" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="LeftBottom" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <Rectangle hc:TipElement.Placement="Left" Style="{StaticResource SnapRect4ScreenshotStyle}"/>
                  <TextBlock Text="{TemplateBinding hc:ScreenshotWindow.SizeStr}" Background="#CC212121" Foreground="White"
                             HorizontalAlignment="Left" VerticalAlignment="Top" Padding="8,2"/>
                </hc:SimplePanel>
              </Border>
              <Border x:Name="PART_Magnifier" IsHitTestVisible="False" Visibility="Collapsed" HorizontalAlignment="Left"
                      VerticalAlignment="Top" Width="122" Height="122" BorderThickness="1" BorderBrush="#FF333333"
                      CornerRadius="1">
                <UIElement.Effect>
                  <DropShadowEffect BlurRadius="2" Opacity=".2" Direction="-45" RenderingBias="Performance" ShadowDepth="3"/>
                </UIElement.Effect>
                <hc:SimplePanel>
                  <Border Margin="0,0,0,32" Background="{TemplateBinding hc:ScreenshotWindow.PreviewBrush}"
                          BorderThickness="2" BorderBrush="White">
                    <hc:SimplePanel>
                      <Path Data="M 56,0 L 60,0 60,40 116,40 116,44 60,44 60,84 56,84 56,44 0,44 0,40 56,40 Z" Fill="#CC4CC6FF"/>
                    </hc:SimplePanel>
                  </Border>
                  <Border Height="32" VerticalAlignment="Bottom" Background="#CC000000">
                    <StackPanel VerticalAlignment="Center" Margin="5,0,0,0">
                      <TextBlock Foreground="White" Text="{TemplateBinding hc:ScreenshotWindow.SizeStr}"/>
                    </StackPanel>
                  </Border>
                </hc:SimplePanel>
              </Border>
            </hc:SimplePanel>
          </AdornerDecorator>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Style="{StaticResource RectangleFocusVisual}" RadiusX="4" RadiusY="4"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisualRadius0">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Style="{StaticResource RectangleFocusVisual}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisualMargin0">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}"
                     StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisualRadius0Margin0">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}"
                     StrokeThickness="2" StrokeDashArray="1 1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="InputElementErrorTemplate">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <AdornedElementPlaceholder x:Name="adornedElementPlaceholder"/>
      <hc:TransitioningContentControl TransitionMode="Top2Bottom" Grid.Row="1" ClipToBounds="True">
        <TextBlock Foreground="{DynamicResource DangerBrush}" Margin="2,2,0,0"
                   Text="{Binding Path=AdornedElement.(Validation.Errors)[0].ErrorContent, ElementName=adornedElementPlaceholder}"/>
      </hc:TransitioningContentControl>
    </Grid>
  </ControlTemplate>
  <Style x:Key="InputElementBaseStyle" TargetType="{x:Type Control}">
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,7,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="8,0,0,5"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource InputElementErrorTemplate}"/>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BaseStyle" TargetType="{x:Type Control}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.FontSize" Value="{StaticResource TextFontSize}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
  </Style>
  <Style x:Key="ButtonBaseBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ButtonBase}">
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
  </Style>
  <Style x:Key="ButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <hc:SimplePanel>
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          Margin="{TemplateBinding Control.Padding}">
                <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                      Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                      SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
                <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                  Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </StackPanel>
            </Border>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonDashedBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <hc:DashedBorder BorderDashArray="3,2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                           BorderBrush="{TemplateBinding Control.BorderBrush}" Background="Transparent"
                           CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}">
              <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                    Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                    SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
              <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </StackPanel>
          </hc:DashedBorder>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.Margin" Value="-1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="BorderRoot" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}">
              <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                    Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                    SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
              <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="contentPresenter" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType=hc:ButtonGroup}}"
                   Value="Vertical">
        <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TextBlockBaseStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
  </Style>
  <Style x:Key="TextBlockBoldBaseStyle" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontWeight" Value="Bold"/>
  </Style>
  <Style x:Key="HighlightTextBlockBaseStyle" TargetType="{x:Type hc:HighlightTextBlock}">
    <Setter Property="hc:HighlightTextBlock.HighlightBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="hc:HighlightTextBlock.HighlightTextBrush" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style x:Key="LabelBaseStyle" TargetType="{x:Type Label}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="SliderThumb" TargetType="{x:Type Thumb}">
    <hc:AxleCanvas>
      <Border Name="BorderDot" Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" Property="UIElement.Effect"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CompareSliderThumbHorizontal" TargetType="{x:Type Thumb}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="Storyboard1">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                       Storyboard.TargetName="PathLeft">
          <EasingDoubleKeyFrame KeyTime="0" Value="-2"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                       Storyboard.TargetName="PathRight">
          <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="Storyboard2">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                       Storyboard.TargetName="PathLeft">
          <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                       Storyboard.TargetName="PathRight">
          <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <hc:SimplePanel>
      <Border Width="1" HorizontalAlignment="Center">
        <Border.Background>
          <DrawingBrush RenderOptions.CachingHint="Cache" Viewport="0,0,1,8" ViewportUnits="Absolute" Stretch="None"
                        TileMode="Tile">
            <DrawingBrush.Drawing>
              <DrawingGroup>
                <GeometryDrawing Brush="{DynamicResource BorderBrush}">
                  <GeometryDrawing.Geometry>
                    <GeometryGroup>
                      <RectangleGeometry Rect="0,0,1,4"/>
                    </GeometryGroup>
                  </GeometryDrawing.Geometry>
                </GeometryDrawing>
              </DrawingGroup>
            </DrawingBrush.Drawing>
          </DrawingBrush>
        </Border.Background>
      </Border>
      <Border x:Name="grip" Width="30" Height="30" CornerRadius="15" BorderThickness="1"
              BorderBrush="{DynamicResource BorderBrush}" Background="White">
        <hc:SimplePanel Width="30" Height="30" Margin="-1,-1,0,0">
          <Path x:Name="PathLeft" Data="{StaticResource LeftGeometry}" StrokeThickness="1"
                Stroke="{DynamicResource PrimaryBrush}" Margin="6,8" HorizontalAlignment="Left" Stretch="Uniform"
                Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <TranslateTransform/>
              </TransformGroup>
            </UIElement.RenderTransform>
          </Path>
          <Path x:Name="PathRight" Data="{StaticResource RightGeometry}" StrokeThickness="1"
                Stroke="{DynamicResource PrimaryBrush}" Margin="6,8" HorizontalAlignment="Right" Stretch="Uniform"
                Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <TranslateTransform/>
              </TransformGroup>
            </UIElement.RenderTransform>
          </Path>
        </hc:SimplePanel>
      </Border>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="grip" Value="{DynamicResource PrimaryBrush}" Property="Border.Background"/>
        <Setter TargetName="PathLeft" Property="Shape.Stroke" Value="White"/>
        <Setter TargetName="PathRight" Property="Shape.Stroke" Value="White"/>
      </Trigger>
      <Trigger Property="Thumb.IsDragging" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource Storyboard2}"/>
        </TriggerBase.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CompareSliderHorizontal" TargetType="{x:Type hc:CompareSlider}">
    <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
      <hc:CompareTrack x:Name="PART_Track">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                        Style="{StaticResource CompareSliderRepeatButtonTransparent}">
            <ContentPresenter ContentSource="TargetContent" HorizontalAlignment="Left"
                              Width="{TemplateBinding FrameworkElement.ActualWidth}"/>
          </RepeatButton>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource CompareSliderRepeatButtonTransparent}">
            <ContentPresenter ContentSource="SourceContent" HorizontalAlignment="Right"
                              Width="{TemplateBinding FrameworkElement.ActualWidth}"/>
          </RepeatButton>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="Thumb" Focusable="False" OverridesDefaultStyle="True"
                 Template="{StaticResource CompareSliderThumbHorizontal}" Width="30" Margin="-15,0"/>
        </Track.Thumb>
      </hc:CompareTrack>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="CompareSliderThumbVertical" TargetType="{x:Type Thumb}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="Storyboard1">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)"
                                       Storyboard.TargetName="PathUp">
          <EasingDoubleKeyFrame KeyTime="0" Value="-2"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)"
                                       Storyboard.TargetName="PathDown">
          <EasingDoubleKeyFrame KeyTime="0" Value="2"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="Storyboard2">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)"
                                       Storyboard.TargetName="PathUp">
          <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)"
                                       Storyboard.TargetName="PathDown">
          <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <hc:SimplePanel>
      <Border Height="1" VerticalAlignment="Center">
        <Border.Background>
          <DrawingBrush RenderOptions.CachingHint="Cache" Viewport="0,0,8,1" ViewportUnits="Absolute" Stretch="None"
                        TileMode="Tile">
            <DrawingBrush.Drawing>
              <DrawingGroup>
                <GeometryDrawing Brush="{DynamicResource BorderBrush}">
                  <GeometryDrawing.Geometry>
                    <GeometryGroup>
                      <RectangleGeometry Rect="0,0,4,1"/>
                    </GeometryGroup>
                  </GeometryDrawing.Geometry>
                </GeometryDrawing>
              </DrawingGroup>
            </DrawingBrush.Drawing>
          </DrawingBrush>
        </Border.Background>
      </Border>
      <Border x:Name="grip" Width="30" Height="30" CornerRadius="15" BorderThickness="1"
              BorderBrush="{DynamicResource BorderBrush}" Background="White">
        <hc:SimplePanel Width="30" Height="30" Margin="-1,-1,0,0">
          <Path x:Name="PathUp" Data="{StaticResource UpGeometry}" StrokeThickness="1"
                Stroke="{DynamicResource PrimaryBrush}" Margin="9,6" VerticalAlignment="Top" Stretch="Uniform"
                Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <TranslateTransform/>
              </TransformGroup>
            </UIElement.RenderTransform>
          </Path>
          <Path x:Name="PathDown" Data="{StaticResource DownGeometry}" StrokeThickness="1"
                Stroke="{DynamicResource PrimaryBrush}" Margin="9,6" VerticalAlignment="Bottom" Stretch="Uniform"
                Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <TranslateTransform/>
              </TransformGroup>
            </UIElement.RenderTransform>
          </Path>
        </hc:SimplePanel>
      </Border>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <Trigger SourceName="grip" Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="grip" Value="{DynamicResource PrimaryBrush}" Property="Border.Background"/>
        <Setter TargetName="PathUp" Property="Shape.Stroke" Value="White"/>
        <Setter TargetName="PathDown" Property="Shape.Stroke" Value="White"/>
      </Trigger>
      <Trigger Property="Thumb.IsDragging" Value="true">
        <Setter TargetName="grip" Value="{DynamicResource PrimaryBrush}" Property="Border.Background"/>
        <Setter TargetName="PathUp" Property="Shape.Stroke" Value="White"/>
        <Setter TargetName="PathDown" Property="Shape.Stroke" Value="White"/>
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource Storyboard2}"/>
        </TriggerBase.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CompareSliderVertical" TargetType="{x:Type hc:CompareSlider}">
    <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
      <hc:CompareTrack x:Name="PART_Track">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                        Style="{StaticResource CompareSliderRepeatButtonTransparent}">
            <ContentPresenter ContentSource="TargetContent" VerticalAlignment="Bottom"
                              Height="{TemplateBinding FrameworkElement.ActualHeight}"/>
          </RepeatButton>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource CompareSliderRepeatButtonTransparent}">
            <ContentPresenter ContentSource="SourceContent" VerticalAlignment="Top"
                              Height="{TemplateBinding FrameworkElement.ActualHeight}"/>
          </RepeatButton>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="Thumb" Focusable="False" OverridesDefaultStyle="True"
                 Template="{StaticResource CompareSliderThumbVertical}" Height="30" Margin="0,-15"/>
        </Track.Thumb>
      </hc:CompareTrack>
    </Border>
  </ControlTemplate>
  <Style x:Key="CompareSliderBaseStyle" TargetType="{x:Type hc:CompareSlider}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.MinWidth" Value="30"/>
    <Setter Property="FrameworkElement.MinHeight" Value="30"/>
    <Setter Property="Control.Template" Value="{StaticResource CompareSliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="Slider.Orientation" Value="Vertical">
        <Setter Property="Control.Template" Value="{StaticResource CompareSliderVertical}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="PreviewSliderThumb" TargetType="{x:Type Thumb}">
    <Border Name="BorderDot" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
            BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
            CornerRadius="9"/>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" Property="UIElement.Effect"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="PreviewSliderHorizontal" TargetType="{x:Type hc:PreviewSlider}">
    <hc:SimplePanel>
      <Border x:Name="TrackBackground" Background="{TemplateBinding Control.Background}" Height="2"
              VerticalAlignment="center" Margin="9,0"/>
      <Track x:Name="PART_Track" VerticalAlignment="center" Margin="9,0">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}"
                        Style="{StaticResource PreviewSliderRepeatButtonHorizontalStyle}"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource PreviewSliderRepeatButtonHorizontalStyle}"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="PART_Thumb" Margin="-9,0" Focusable="False" Height="18" OverridesDefaultStyle="True"
                 Template="{StaticResource PreviewSliderThumb}" VerticalAlignment="Center" Width="18"/>
        </Track.Thumb>
      </Track>
    </hc:SimplePanel>
  </ControlTemplate>
  <ControlTemplate x:Key="PreviewSliderVertical" TargetType="{x:Type hc:PreviewSlider}">
    <hc:SimplePanel>
      <Border x:Name="TrackBackground" Background="{TemplateBinding Control.Background}" Width="2"
              HorizontalAlignment="center" Margin="0,9"/>
      <Track x:Name="PART_Track" HorizontalAlignment="center" Margin="0,9">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}"
                        Style="{StaticResource PreviewSliderRepeatButtonVerticalStyle}"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource PreviewSliderRepeatButtonVerticalStyle}"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="PART_Thumb" Margin="0,-9" Focusable="False" Height="18" OverridesDefaultStyle="True"
                 Template="{StaticResource PreviewSliderThumb}" HorizontalAlignment="Center" Width="18"/>
        </Track.Thumb>
      </Track>
    </hc:SimplePanel>
  </ControlTemplate>
  <Style x:Key="PreviewSliderBaseStyle" TargetType="{x:Type hc:PreviewSlider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Slider.IsMoveToPointEnabled" Value="True"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template" Value="{StaticResource PreviewSliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="Slider.Orientation" Value="Vertical">
        <Setter Property="Control.Template" Value="{StaticResource PreviewSliderVertical}"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RangeSliderThumb" TargetType="{x:Type hc:RangeThumb}">
    <Border Name="BorderDot" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
            BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
            CornerRadius="9"/>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" Property="UIElement.Effect"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ToggleButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <hc:SimplePanel>
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          Margin="{TemplateBinding Control.Padding}">
                <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                      Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                      SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
                <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                  Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </StackPanel>
            </Border>
            <Border x:Name="BorderChecked" Margin="-1" Visibility="Collapsed" BorderThickness="4"
                    BorderBrush="{DynamicResource DarkMaskBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="BorderChecked" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToggleButtonIconBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="FrameworkElement.Width" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="8"/>
    <Setter Property="hc:IconElement.Geometry" Value="{x:Null}"/>
    <Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{x:Null}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <hc:SimplePanel>
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <ContentControl HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                <Path x:Name="PathIcon" Width="{TemplateBinding hc:IconElement.Width}"
                      Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                      SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
              </ContentControl>
            </Border>
            <Border x:Name="BorderChecked" Visibility="Collapsed" BorderThickness="4"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="PathIcon"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}"
                      Property="Path.Data"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToggleButtonSwitchBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="hc:VisualElement.HighlightBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource SecondaryBorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="6,0,0,0"/>
    <Setter Property="FrameworkElement.Height" Value="24"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardChecked">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                             Storyboard.TargetName="thumb">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="32">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseInOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="lightBorder">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="innerBorder">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardUnChecked">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                             Storyboard.TargetName="thumb">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseInOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="lightBorder">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="innerBorder">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Viewbox>
              <hc:SimplePanel Width="80" Height="48">
                <Border Name="innerBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Background="{TemplateBinding Control.Background}" CornerRadius="24">
                  <hc:ToggleBlock HorizontalAlignment="Right" Margin="0 0 12 0"
                                  IsChecked="{Binding Path=(hc:ToggleButtonAttach.ShowLabel), RelativeSource={RelativeSource TemplatedParent}}">
                    <hc:ToggleBlock.CheckedContent>
                      <Ellipse Width="16" Height="16" StrokeThickness="2"
                               Stroke="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </hc:ToggleBlock.CheckedContent>
                  </hc:ToggleBlock>
                </Border>
                <Border x:Name="lightBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}" Opacity="0" CornerRadius="24"
                        Background="{Binding Path=(hc:VisualElement.HighlightBrush), RelativeSource={RelativeSource TemplatedParent}}">
                  <hc:ToggleBlock HorizontalAlignment="Left" Margin="18 0 0 0"
                                  IsChecked="{Binding Path=(hc:ToggleButtonAttach.ShowLabel), RelativeSource={RelativeSource TemplatedParent}}">
                    <hc:ToggleBlock.CheckedContent>
                      <Rectangle Width="3" Height="16" RadiusX="1.5" RadiusY="1.5" Fill="{DynamicResource TextIconBrush}"/>
                    </hc:ToggleBlock.CheckedContent>
                  </hc:ToggleBlock>
                </Border>
                <Border Name="thumb" Margin="2" HorizontalAlignment="Left" CornerRadius="22"
                        Effect="{StaticResource EffectShadow2}" Background="White" Width="44" Height="44"
                        RenderTransformOrigin="0.5,0.5">
                  <UIElement.RenderTransform>
                    <TransformGroup>
                      <TranslateTransform/>
                    </TransformGroup>
                  </UIElement.RenderTransform>
                </Border>
              </hc:SimplePanel>
            </Viewbox>
            <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardChecked}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToggleButtonGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.Margin" Value="-1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="BorderRoot" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}">
              <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                    Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                    SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
              <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:VisualElement.HighlightBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="contentPresenter" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType=hc:ButtonGroup}}"
                   Value="Vertical">
        <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ScrollBarBaseThumbVertical" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardMouseEnter">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="8"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                             Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardMouseLeave">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="2"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                             Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="-2"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border Width="{TemplateBinding FrameworkElement.Width}" Background="Transparent">
            <Rectangle x:Name="rectangle" RadiusX="1" RadiusY="1" HorizontalAlignment="Right"
                       Height="{TemplateBinding FrameworkElement.Height}" SnapsToDevicePixels="True" Width="2"
                       Fill="{TemplateBinding Control.Background}">
              <UIElement.RenderTransform>
                <TransformGroup>
                  <TranslateTransform X="-2"/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="true">
              <Setter TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}" Property="Shape.Fill"/>
            </Trigger>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard Storyboard="{StaticResource StoryboardMouseEnter}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard Storyboard="{StaticResource StoryboardMouseLeave}"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarBaseThumbHorizontal" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardMouseEnter">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="8"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)"
                                             Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardMouseLeave">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Height" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="2"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusX)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Rectangle.RadiusY)" Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)"
                                             Storyboard.TargetName="rectangle">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="-2"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border Height="{TemplateBinding FrameworkElement.Height}" Background="Transparent">
            <Rectangle x:Name="rectangle" RadiusX="1" RadiusY="1" VerticalAlignment="Bottom" Height="2"
                       SnapsToDevicePixels="True" Width="{TemplateBinding FrameworkElement.Width}"
                       Fill="{TemplateBinding Control.Background}">
              <UIElement.RenderTransform>
                <TransformGroup>
                  <TranslateTransform Y="-2"/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="true">
              <Setter TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}" Property="Shape.Fill"/>
            </Trigger>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard Storyboard="{StaticResource StoryboardMouseEnter}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard Storyboard="{StaticResource StoryboardMouseLeave}"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarBaseStyle" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Width" Value="8"/>
    <Setter Property="FrameworkElement.MinWidth" Value="8"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="true">
            <Border Background="{TemplateBinding Control.Background}"/>
            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Background="{TemplateBinding Control.Foreground}"
                       Style="{StaticResource ScrollBarBaseThumbVertical}"/>
              </Track.Thumb>
            </Track>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
        <Setter Property="FrameworkElement.MinWidth" Value="0"/>
        <Setter Property="FrameworkElement.Height" Value="8"/>
        <Setter Property="FrameworkElement.MinHeight" Value="8"/>
        <Setter Property="Control.BorderThickness" Value="0,1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <hc:SimplePanel x:Name="Bg" SnapsToDevicePixels="true">
                <Border Background="{TemplateBinding Control.Background}"/>
                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarBaseRepeatButton}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Background="{TemplateBinding Control.Foreground}"
                           Style="{StaticResource ScrollBarBaseThumbHorizontal}"/>
                  </Track.Thumb>
                </Track>
              </hc:SimplePanel>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ScrollViewerNativeBaseControlTemplate" TargetType="{x:Type ScrollViewer}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="StoryboardMouseOver">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="StoryboardCommon">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False"
                              CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                              Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
      <ScrollBar x:Name="PART_VerticalScrollBar" Opacity=".3" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                 Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                 Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollBar x:Name="PART_HorizontalScrollBar" Opacity=".3" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Orientation="Horizontal"
                 Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}"/>
        </TriggerBase.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ScrollViewerNativeAutoHideBaseControlTemplate" TargetType="{x:Type ScrollViewer}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="StoryboardMouseOver">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="StoryboardCommon">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False"
                              CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                              Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
      <ScrollBar x:Name="PART_VerticalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                 Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                 Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollBar x:Name="PART_HorizontalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Orientation="Horizontal"
                 Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}"/>
        </TriggerBase.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollViewerNativeBaseStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="{Binding Path=(hc:ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template" Value="{StaticResource ScrollViewerNativeAutoHideBaseControlTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:ScrollViewerAttach.AutoHide" Value="False">
        <Setter Property="Control.Template" Value="{StaticResource ScrollViewerNativeBaseControlTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ScrollViewerBaseControlTemplate" TargetType="{x:Type hc:ScrollViewer}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="StoryboardMouseOver">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="StoryboardCommon">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False"
                              CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                              Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
      <ScrollBar x:Name="PART_VerticalScrollBar" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                 Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                 Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Orientation="Horizontal"
                 Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}"/>
        </TriggerBase.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ScrollViewerAutoHideBaseControlTemplate" TargetType="{x:Type hc:ScrollViewer}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="StoryboardMouseOver">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="StoryboardCommon">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
          <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False"
                              CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                              Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
      <ScrollBar x:Name="PART_VerticalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                 Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                 Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollBar x:Name="PART_HorizontalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}"
                 AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0"
                 Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0" Orientation="Horizontal"
                 Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                 ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                 Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}"/>
        </TriggerBase.ExitActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollViewerBaseStyle" TargetType="{x:Type hc:ScrollViewer}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="{Binding Path=(hc:ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template" Value="{StaticResource ScrollViewerAutoHideBaseControlTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:ScrollViewerAttach.AutoHide" Value="False">
        <Setter Property="Control.Template" Value="{StaticResource ScrollViewerBaseControlTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RepeatButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <hc:SimplePanel>
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          Margin="{TemplateBinding Control.Padding}">
                <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                      Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                      SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
                <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                  Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </StackPanel>
            </Border>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RepeatButtonDashedBaseStyle" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <hc:DashedBorder BorderDashArray="3,2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                           BorderBrush="{TemplateBinding Control.BorderBrush}" Background="Transparent"
                           CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}">
              <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                    Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                    SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
              <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </StackPanel>
          </hc:DashedBorder>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GroupBoxBaseStyle" TargetType="{x:Type GroupBox}">
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="hc:TitleElement.TitlePlacement" Value="Top"/>
    <Setter Property="hc:TitleElement.Padding" Value="4 0"/>
    <Setter Property="hc:TitleElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="hc:TitleElement.MinWidth" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="4"/>
    <Setter Property="Control.Template" Value="{StaticResource GroupBoxBaseTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource GroupBoxBaseLeftTemplate}"/>
        <Setter Property="hc:TitleElement.Padding" Value="0 4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="GroupBoxOriginalTopTemplate" TargetType="{x:Type GroupBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <StackPanel Orientation="Horizontal" Margin="8,6">
        <ContentPresenter TextElement.Foreground="{TemplateBinding Control.Foreground}" Margin="1,0,0,0"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" ContentSource="Header"
                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        <ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
      </StackPanel>
      <Border Grid.Row="1" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="GroupBoxOriginalLeftTemplate" TargetType="{x:Type GroupBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <StackPanel Orientation="Horizontal" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                  Margin="0,8,6,8">
        <ContentPresenter TextElement.Foreground="{TemplateBinding Control.Foreground}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" ContentSource="Header"
                          RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        <ContentPresenter TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
      </StackPanel>
      <Border Grid.Column="1" Background="{TemplateBinding Control.Background}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
      </Border>
    </Grid>
  </ControlTemplate>
  <Style x:Key="GroupBoxOriginalBaseStyle" BasedOn="{StaticResource GroupBoxBaseStyle}"
         TargetType="{x:Type GroupBox}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Template" Value="{StaticResource GroupBoxOriginalTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource GroupBoxOriginalLeftTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="GroupBoxTabBaseStyle" BasedOn="{StaticResource GroupBoxBaseStyle}"
         TargetType="{x:Type GroupBox}">
    <Setter Property="Control.Template" Value="{StaticResource GroupBoxTabTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource GroupBoxTabLeftTemplate}"/>
        <Setter Property="hc:TitleElement.Padding" Value="0 4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonGroupBaseStyle" TargetType="{x:Type hc:ButtonGroup}">
    <Setter Property="ItemsControl.ItemContainerStyleSelector"
            Value="{StaticResource ButtonGroupItemStyleSelector}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="hc:ButtonGroup.Layout" Value="Uniform"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="ItemsControl.ItemsPanel"
            Value="{StaticResource ButtonGroupHorizontalUniformItemsPanelTemplate}"/>
    <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource PrimaryBrush}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:ButtonGroup.Layout" Value="Uniform"/>
          <Condition Property="hc:ButtonGroup.Orientation" Value="Vertical"/>
        </MultiTrigger.Conditions>
        <Setter Property="ItemsControl.ItemsPanel"
                Value="{StaticResource ButtonGroupVerticalUniformItemsPanelTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:ButtonGroup.Layout" Value="Stack"/>
          <Condition Property="hc:ButtonGroup.Orientation" Value="Horizontal"/>
        </MultiTrigger.Conditions>
        <Setter Property="ItemsControl.ItemsPanel"
                Value="{StaticResource ButtonGroupHorizontalStackItemsPanelTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:ButtonGroup.Layout" Value="Stack"/>
          <Condition Property="hc:ButtonGroup.Orientation" Value="Vertical"/>
        </MultiTrigger.Conditions>
        <Setter Property="ItemsControl.ItemsPanel"
                Value="{StaticResource ButtonGroupVerticalStackItemsPanelTemplate}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ElementGroupBaseStyle" TargetType="{x:Type hc:ElementGroup}">
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="hc:ElementGroup.Layout" Value="Uniform"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformHorizontalItemsPanelTemplate}"/>
    <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource PrimaryBrush}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:ElementGroup.Layout" Value="Uniform"/>
          <Condition Property="hc:ElementGroup.Orientation" Value="Vertical"/>
        </MultiTrigger.Conditions>
        <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformVerticalItemsPanelTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:ElementGroup.Layout" Value="Stack"/>
          <Condition Property="hc:ElementGroup.Orientation" Value="Horizontal"/>
        </MultiTrigger.Conditions>
        <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource StackHorizontalItemsPanelTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:ElementGroup.Layout" Value="Stack"/>
          <Condition Property="hc:ElementGroup.Orientation" Value="Vertical"/>
        </MultiTrigger.Conditions>
        <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource StackVerticalItemsPanelTemplate}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ProgressBarBaseStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="hc:VisualElement.Text">
      <Setter.Value>
        <MultiBinding Converter="{StaticResource Number2PercentageConverter}" StringFormat="{0:F0} %">
          <Binding Path="Value" RelativeSource="{RelativeSource Self}"/>
          <Binding Path="Maximum" RelativeSource="{RelativeSource Self}"/>
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="Animation">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
              </DoubleAnimationUsingKeyFrames>
              <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
              </PointAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="TemplateRoot" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:SimplePanel>
              <Rectangle x:Name="PART_Track"/>
              <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
                         Foreground="{TemplateBinding Control.Foreground}"
                         Visibility="{Binding Visibility, ElementName=PART_GlowRect}"
                         Text="{Binding Path=(hc:VisualElement.Text), RelativeSource={RelativeSource TemplatedParent}}"/>
              <Border x:Name="PART_Indicator" Style="{StaticResource BorderClip}" HorizontalAlignment="Left"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <hc:SimplePanel>
                  <Border x:Name="Indicator" Background="{TemplateBinding Control.Foreground}">
                    <Border Width="{Binding ActualWidth, ElementName=TemplateRoot}">
                      <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
                                 Foreground="{DynamicResource TextIconBrush}"
                                 Text="{Binding Path=(hc:VisualElement.Text), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                  </Border>
                  <Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}"
                             HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100"/>
                  <Rectangle x:Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Control.Foreground}"
                             RenderTransformOrigin="0.5,0.5">
                    <UIElement.RenderTransform>
                      <TransformGroup>
                        <ScaleTransform/>
                      </TransformGroup>
                    </UIElement.RenderTransform>
                  </Rectangle>
                </hc:SimplePanel>
              </Border>
            </hc:SimplePanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter Value="{x:Static system:Double.NaN}" Property="FrameworkElement.Height"/>
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}"/>
              </TriggerBase.EnterActions>
              <Setter TargetName="Indicator" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_GlowRect" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Animation" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressBarStripeBaseStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="OnLoaded">
              <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                             Storyboard.TargetProperty="(Border.Background).(Brush.Transform).(TransformGroup.Children)[1].(TranslateTransform.X)"
                                             Storyboard.TargetName="Indicator">
                <LinearDoubleKeyFrame KeyTime="0" Value="0"/>
                <LinearDoubleKeyFrame KeyTime="0:0:.25" Value="21"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <hc:SimplePanel x:Name="TemplateRoot" SnapsToDevicePixels="true">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Rectangle x:Name="PART_Track"/>
            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
              <Border x:Name="Indicator" Background="{TemplateBinding Control.Foreground}"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Decorator>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter Value="{x:Static system:Double.NaN}" Property="FrameworkElement.Height"/>
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="Indicator">
              <BeginStoryboard Storyboard="{StaticResource OnLoaded}"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="CircleProgressBarIndeterminateTemplate" TargetType="{x:Type hc:CircleProgressBar}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"
                                       Storyboard.TargetName="TemplateRoot">
          <LinearDoubleKeyFrame KeyTime="0:0:1.568" Value="360"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"
                                       Storyboard.TargetName="arc">
          <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="135"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="270"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.999" Value="405"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:2.666" Value="540"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:3.333" Value="675"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:3.999" Value="810"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:4.666" Value="945"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:5.332" Value="1080"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(shapes:Arc.StartAngle)"
                                       Storyboard.TargetName="arc">
          <SplineDoubleKeyFrame KeyTime="0" Value="-5"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="-130"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="-5"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(shapes:Arc.EndAngle)"
                                       Storyboard.TargetName="arc">
          <SplineDoubleKeyFrame KeyTime="0" Value="5"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="130"/>
          <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="5"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <hc:SimplePanel x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
      <UIElement.RenderTransform>
        <TransformGroup>
          <RotateTransform/>
        </TransformGroup>
      </UIElement.RenderTransform>
      <shapes:Arc ArcThickness="{TemplateBinding hc:CircleProgressBar.ArcThickness}" Stretch="None" EndAngle="360"
                  Width="{TemplateBinding FrameworkElement.ActualWidth}"
                  Height="{TemplateBinding FrameworkElement.ActualHeight}"
                  Stroke="{TemplateBinding Control.BorderBrush}" Fill="{TemplateBinding Control.Background}"
                  StrokeThickness="0"/>
      <shapes:Arc x:Name="arc" RenderTransformOrigin="0.5,0.5" StartAngle="-5" EndAngle="5"
                  ArcThickness="{TemplateBinding hc:CircleProgressBar.ArcThickness}" Stretch="None"
                  Width="{TemplateBinding FrameworkElement.ActualWidth}" StrokeThickness="0"
                  Height="{TemplateBinding FrameworkElement.ActualHeight}"
                  Fill="{TemplateBinding Control.Foreground}">
        <UIElement.RenderTransform>
          <TransformGroup>
            <RotateTransform/>
          </TransformGroup>
        </UIElement.RenderTransform>
      </shapes:Arc>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:CircleProgressBar.IsIndeterminate" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}"/>
        </TriggerBase.EnterActions>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ProgressBarCircleBaseStyle" TargetType="{x:Type hc:CircleProgressBar}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.Height" Value="100"/>
    <Setter Property="FrameworkElement.Width" Value="100"/>
    <Setter Property="hc:CircleProgressBar.ArcThickness" Value="4"/>
    <Setter Property="hc:CircleProgressBar.Text"
            Value="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat='{0:F0} %'}"/>
    <Setter Property="Control.Template" Value="{StaticResource CircleProgressBarTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:CircleProgressBar.IsIndeterminate" Value="True">
        <Setter Property="Control.Template" Value="{StaticResource CircleProgressBarIndeterminateTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ProgressBarWaveBaseStyle" TargetType="{x:Type hc:WaveProgressBar}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="FrameworkElement.Width" Value="100"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:WaveProgressBar.Text"
            Value="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat='{0:F0} %'}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:WaveProgressBar}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardOnLoaded" RepeatBehavior="Forever">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
                                             Storyboard.TargetName="PART_Wave">
                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="-400"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <StackPanel>
            <Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <Viewbox>
                <Border x:Name="PART_Clip" Style="{StaticResource BorderCircularClip}" CornerRadius="100" Width="200"
                        Height="200">
                  <Path x:Name="PART_Wave" Stroke="{TemplateBinding hc:WaveProgressBar.WaveStroke}"
                        StrokeThickness="{TemplateBinding hc:WaveProgressBar.WaveThickness}" HorizontalAlignment="Left"
                        VerticalAlignment="Top" Width="600" Height="250"
                        Fill="{TemplateBinding hc:WaveProgressBar.WaveFill}" Stretch="Fill" RenderTransformOrigin="0.5,0.5"
                        UseLayoutRounding="False" Margin="0,0,-400,-20">
                    <Path.Data>
                      <PathGeometry>
                        <PathFigure StartPoint="0,1">
                          <PolyBezierSegment Points="0.5,1 0.5,0 1,0"/>
                          <PolyBezierSegment Points="1.5,0 1.5,1 2,1"/>
                          <PolyBezierSegment Points="2.5,1 2.5,0 3,0"/>
                          <PolyLineSegment Points="3,0 3,10 0,10 0,1"/>
                        </PathFigure>
                      </PathGeometry>
                    </Path.Data>
                  </Path>
                </Border>
              </Viewbox>
            </Border>
            <TextBlock Margin="0,10,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                       Foreground="{TemplateBinding Control.Foreground}" Text="{TemplateBinding hc:WaveProgressBar.Text}"
                       Visibility="{Binding ShowText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
          </StackPanel>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="PART_Wave">
              <BeginStoryboard x:Name="BeginStoryboardWave" Storyboard="{StaticResource StoryboardOnLoaded}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded" SourceName="PART_Wave">
              <StopStoryboard BeginStoryboardName="BeginStoryboardWave"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="-4" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}"
                           StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="White"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="6,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardCheckedTrue">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.StrokeDashOffset)" Storyboard.TargetName="path">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardCheckedFalse">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.StrokeDashOffset)" Storyboard.TargetName="path">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="8"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border Height="16" Width="16" Background="{TemplateBinding Control.Background}" CornerRadius="2"/>
            <hc:SimplePanel x:Name="markGrid" Grid.Column="0" Height="16" Width="16">
              <Path x:Name="path" FlowDirection="LeftToRight" UseLayoutRounding="True" StrokeDashOffset="8"
                    StrokeDashArray="8,8" Width="12" Height="12" Data="{StaticResource CheckedGeometry}"
                    StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}"/>
              <Rectangle x:Name="indeterminateMark" RadiusX="2" RadiusY="2" Fill="{DynamicResource PrimaryBrush}" Margin="2"
                         Opacity="0"/>
            </hc:SimplePanel>
            <Border x:Name="border" Height="16" Width="16" CornerRadius="2"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="UIElement.Opacity" Value=".8"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="false"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}"/>
              </TriggerBase.ExitActions>
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0"/>
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.Background"/>
              <Setter Value="{DynamicResource DarkPrimaryBrush}" Property="Control.BorderBrush"/>
              <Setter TargetName="border" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter Value="{DynamicResource BorderBrush}" TargetName="path" Property="Shape.Stroke"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RadioButtonBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="-4" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}"
                           StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="6,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardCheckedTrue">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="optionMark">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             Storyboard.TargetName="optionMark">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardCheckedFalse">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="optionMark">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             Storyboard.TargetName="optionMark">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Border Height="16" Width="16" Background="{TemplateBinding Control.Background}" CornerRadius="8"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <Ellipse x:Name="optionMark" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0"
                       Fill="White" Width="8" Height="8" RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="0" ScaleY="0"/>
                  </TransformGroup>
                </UIElement.RenderTransform>
              </Ellipse>
            </Border>
            <Border x:Name="border" Grid.Column="0" Height="16" Width="16"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="8"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="UIElement.Opacity" Value=".8"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="false"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </MultiTrigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}"/>
              </TriggerBase.ExitActions>
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.Background"/>
              <Setter Value="{DynamicResource DarkPrimaryBrush}" Property="Control.BorderBrush"/>
              <Setter TargetName="border" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <hc:SimplePanel>
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          Margin="{TemplateBinding Control.Padding}">
                <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                      Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                      SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
                <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                  Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </StackPanel>
            </Border>
            <Border x:Name="BorderChecked" Margin="-1" Visibility="Collapsed" BorderThickness="4"
                    BorderBrush="{DynamicResource DarkMaskBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="BorderChecked" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RadioButtonIconBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="hc:VisualElement.HighlightBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <Border Name="BorderHighlight" BorderThickness="3,0,0,0" BorderBrush="Transparent">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          Margin="{TemplateBinding Control.Padding}">
                <Path x:Name="PathMain" Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True"
                      Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"
                      Height="{Binding Path=(hc:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                      Width="{Binding Path=(hc:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"/>
                <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                  Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </StackPanel>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="BorderHighlight"
                      Value="{Binding Path=(hc:VisualElement.HighlightBrush), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RadioGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.Margin" Value="-1,0,0,0"/>
    <Setter Property="hc:IconElement.Width" Value="16"/>
    <Setter Property="hc:IconElement.Height" Value="16"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Border x:Name="BorderRoot" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}">
              <Path x:Name="PathMain" SnapsToDevicePixels="True" Stretch="Uniform"
                    Data="{TemplateBinding hc:IconElement.Geometry}"
                    Height="{Binding Path=(hc:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}"
                    Width="{Binding Path=(hc:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}"
                    Fill="{Binding Path=(TextElement.Foreground), ElementName=contentPresenter}"/>
              <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:VisualElement.HighlightBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="contentPresenter" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
      </Trigger>
      <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType=hc:ButtonGroup}}"
                   Value="Vertical">
        <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonDefault" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonDefault.Small" BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}"/>
  <Style x:Key="ButtonPrimary" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ButtonPrimary.Small" BasedOn="{StaticResource ButtonPrimary}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonSuccess" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ButtonSuccess.Small" BasedOn="{StaticResource ButtonSuccess}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonInfo" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ButtonInfo.Small" BasedOn="{StaticResource ButtonInfo}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonWarning" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ButtonWarning.Small" BasedOn="{StaticResource ButtonWarning}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDanger" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="ButtonDanger.Small" BasedOn="{StaticResource ButtonDanger}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonIcon" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentControl HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <Path Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                    Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}"
                    Data="{TemplateBinding hc:IconElement.Geometry}"/>
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonIcon.Small" BasedOn="{StaticResource ButtonIcon}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonIconCircular" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="Control.Padding" Value="6"/>
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentControl HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <Path Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                    Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}"
                    Data="{TemplateBinding hc:IconElement.Geometry}"/>
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonIconCircular.Small" BasedOn="{StaticResource ButtonIconCircular}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="20"/>
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDashed" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ButtonDashed.Small" BasedOn="{StaticResource ButtonDashed}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDashedPrimary" BasedOn="{StaticResource ButtonDashedBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ButtonDashedPrimary.Small" BasedOn="{StaticResource ButtonDashedPrimary}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDashedSuccess" BasedOn="{StaticResource ButtonDashedBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ButtonDashedSuccess.Small" BasedOn="{StaticResource ButtonDashedSuccess}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDashedInfo" BasedOn="{StaticResource ButtonDashedBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ButtonDashedInfo.Small" BasedOn="{StaticResource ButtonDashedInfo}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDashedWarning" BasedOn="{StaticResource ButtonDashedBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ButtonDashedWarning.Small" BasedOn="{StaticResource ButtonDashedWarning}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonDashedDanger" BasedOn="{StaticResource ButtonDashedBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="ButtonDashedDanger.Small" BasedOn="{StaticResource ButtonDashedDanger}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{x:Null}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="Chrome" SnapsToDevicePixels="true"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
              <Setter TargetName="Chrome"
                      Value="{Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
              <Setter TargetName="Chrome"
                      Value="{Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonGroupItemDefault" BasedOn="{StaticResource ButtonGroupItemBaseStyle}"
         TargetType="{x:Type Button}"/>
  <Style x:Key="ButtonGroupItemHorizontalFirst" BasedOn="{StaticResource ButtonGroupItemBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="ButtonGroupItemHorizontalLast" BasedOn="{StaticResource ButtonGroupItemBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0"/>
  </Style>
  <Style x:Key="ButtonGroupItemSingle" BasedOn="{StaticResource ButtonGroupItemBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
  </Style>
  <Style x:Key="ButtonGroupItemVerticalFirst" BasedOn="{StaticResource ButtonGroupItemBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="ButtonGroupItemVerticalLast" BasedOn="{StaticResource ButtonGroupItemBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4"/>
  </Style>
  <Style x:Key="TextBlockDefault" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}"/>
  <Style x:Key="TextBlockDefaultAccent" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource AccentBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultPrimary" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultDanger" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultWarning" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultInfo" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultSuccess" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultSecLight" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
  </Style>
  <Style x:Key="TextBlockDefaultThiLight" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
  </Style>
  <Style x:Key="TextBlockLarge" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{StaticResource LargeFontSize}"/>
  </Style>
  <Style x:Key="TextBlockTitle" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{StaticResource HeadFontSize}"/>
  </Style>
  <Style x:Key="TextBlockSubTitle" BasedOn="{StaticResource TextBlockBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{StaticResource SubHeadFontSize}"/>
  </Style>
  <Style x:Key="TextBlockLargeBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{StaticResource LargeFontSize}"/>
  </Style>
  <Style x:Key="TextBlockTitleBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{StaticResource HeadFontSize}"/>
  </Style>
  <Style x:Key="TextBlockSubTitleBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}"
         TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.FontSize" Value="{StaticResource SubHeadFontSize}"/>
  </Style>
  <Style x:Key="TextBlockDefaultBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}"
         TargetType="{x:Type TextBlock}"/>
  <Style BasedOn="{StaticResource HighlightTextBlockBaseStyle}" TargetType="{x:Type hc:HighlightTextBlock}"/>
  <Style x:Key="LabelDefault" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
  </Style>
  <Style BasedOn="{StaticResource LabelDefault}" TargetType="{x:Type Label}"/>
  <Style x:Key="LabelDefault.Small" BasedOn="{StaticResource LabelDefault}" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="LabelPrimary" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="LabelPrimary.Small" BasedOn="{StaticResource LabelPrimary}" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="LabelSuccess" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="LabelSuccess.Small" BasedOn="{StaticResource LabelSuccess}" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="LabelInfo" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="LabelInfo.Small" BasedOn="{StaticResource LabelInfo}" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="LabelWarning" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="LabelWarning.Small" BasedOn="{StaticResource LabelWarning}" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="LabelDanger" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="LabelDanger.Small" BasedOn="{StaticResource LabelDanger}" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style BasedOn="{StaticResource CompareSliderBaseStyle}" TargetType="{x:Type hc:CompareSlider}"/>
  <Style BasedOn="{StaticResource PreviewSliderBaseStyle}" TargetType="{x:Type hc:PreviewSlider}"/>
  <Style x:Key="ToggleButtonDefault" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToggleButtonDefault.Small" BasedOn="{StaticResource ToggleButtonDefault}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style BasedOn="{StaticResource ToggleButtonDefault}" TargetType="{x:Type ToggleButton}"/>
  <Style x:Key="ToggleButtonPrimary" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonPrimary.Small" BasedOn="{StaticResource ToggleButtonPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonSuccess" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonSuccess.Small" BasedOn="{StaticResource ToggleButtonSuccess}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonInfo" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonInfo.Small" BasedOn="{StaticResource ToggleButtonInfo}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonWarning" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonWarning.Small" BasedOn="{StaticResource ToggleButtonWarning}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonDanger" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonDanger.Small" BasedOn="{StaticResource ToggleButtonDanger}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIcon" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToggleButtonIcon.Small" BasedOn="{StaticResource ToggleButtonIcon}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIconPrimary" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonIconPrimary.Small" BasedOn="{StaticResource ToggleButtonIconPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIconSuccess" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonIconSuccess.Small" BasedOn="{StaticResource ToggleButtonIconSuccess}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIconInfo" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonIconInfo.Small" BasedOn="{StaticResource ToggleButtonIconInfo}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIconWarning" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonIconWarning.Small" BasedOn="{StaticResource ToggleButtonIconWarning}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIconDanger" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonIconDanger.Small" BasedOn="{StaticResource ToggleButtonIconDanger}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonIconTransparent" BasedOn="{StaticResource ToggleButtonIconBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentControl Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <Path x:Name="PathIcon" Width="{TemplateBinding hc:IconElement.Width}"
                    Height="{TemplateBinding hc:IconElement.Height}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                    Data="{TemplateBinding hc:IconElement.Geometry}"/>
            </ContentControl>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="PathIcon"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}"
                      Property="Path.Data"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToggleButtonIconTransparent.Small" BasedOn="{StaticResource ToggleButtonIconTransparent}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="ToggleButtonSwitch" BasedOn="{StaticResource ToggleButtonSwitchBaseStyle}"
         TargetType="{x:Type ToggleButton}"/>
  <Style x:Key="ToggleButtonSwitch.Small" BasedOn="{StaticResource ToggleButtonSwitch}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="16"/>
  </Style>
  <Style x:Key="ToggleButtonFlip" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.Width" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardChecked">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="CheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="UnCheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="UnCheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardUnChecked">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="CheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="UnCheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="UnCheckedElement">
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                  <EasingDoubleKeyFrame.EasingFunction>
                    <PowerEase EasingMode="EaseOut"/>
                  </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Viewbox>
            <hc:SimplePanel Height="28" Width="28">
              <Border Name="UnCheckedElement" Style="{StaticResource BorderCircularClip}" RenderTransformOrigin="0.5,0.5"
                      SnapsToDevicePixels="true" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                <UIElement.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1"/>
                  </TransformGroup>
                </UIElement.RenderTransform>
                <ContentPresenter Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Border>
              <Border Name="CheckedElement" Style="{StaticResource BorderCircularClip}" RenderTransformOrigin="0.5,0.5"
                      SnapsToDevicePixels="true" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                <UIElement.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="0"/>
                  </TransformGroup>
                </UIElement.RenderTransform>
                <ContentPresenter Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
            </hc:SimplePanel>
          </Viewbox>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardChecked}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToggleButtonFlip.Small" BasedOn="{StaticResource ToggleButtonFlip}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="FrameworkElement.Width" Value="20"/>
  </Style>
  <Style x:Key="ToggleButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Chrome" SnapsToDevicePixels="true"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:SimplePanel>
              <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Control.Padding}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Control.Padding}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Visibility="Collapsed"
                                Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}"/>
            </hc:SimplePanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="CheckedElement" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True"/>
                <Condition Property="ToggleButton.IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="UnCheckedElement" Property="UIElement.Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToggleButtonGroupItemDefault" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}"
         TargetType="{x:Type ToggleButton}"/>
  <Style x:Key="ToggleButtonGroupItemHorizontalFirst"
         BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="ToggleButtonGroupItemHorizontalLast"
         BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0"/>
  </Style>
  <Style x:Key="ToggleButtonGroupItemSingle" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
  </Style>
  <Style x:Key="ToggleButtonGroupItemVerticalFirst"
         BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="ToggleButtonGroupItemVerticalLast" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4"/>
  </Style>
  <Style x:Key="ToggleButtonLoadingPrimary" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Chrome" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
              <hc:SimplePanel>
                <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Control.Padding}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Control.Padding}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Visibility="Collapsed"
                                  Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}"/>
              </hc:SimplePanel>
              <Viewbox Margin="0,4">
                <hc:LoadingCircle x:Name="Loading" Width="22" Height="22" Foreground="{TemplateBinding Control.Foreground}"
                                  DotDiameter="3" IsRunning="{TemplateBinding ToggleButton.IsChecked}" Visibility="Collapsed"/>
              </Viewbox>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="Loading" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="CheckedElement" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True"/>
                <Condition Property="ToggleButton.IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="UnCheckedElement" Property="UIElement.Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToggleButtonLoading" BasedOn="{StaticResource ToggleButtonLoadingPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToggleButtonLoadingSuccess" BasedOn="{StaticResource ToggleButtonLoadingPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonLoadingInfo" BasedOn="{StaticResource ToggleButtonLoadingPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonLoadingWarning" BasedOn="{StaticResource ToggleButtonLoadingPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ToggleButtonLoadingDanger" BasedOn="{StaticResource ToggleButtonLoadingPrimary}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDefault" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RepeatButtonDefault.Small" BasedOn="{StaticResource RepeatButtonDefault}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style BasedOn="{StaticResource RepeatButtonDefault}" TargetType="{x:Type RepeatButton}"/>
  <Style x:Key="RepeatButtonPrimary" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonPrimary.Small" BasedOn="{StaticResource RepeatButtonPrimary}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonSuccess" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonSuccess.Small" BasedOn="{StaticResource RepeatButtonSuccess}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonInfo" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonInfo.Small" BasedOn="{StaticResource RepeatButtonInfo}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonWarning" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonWarning.Small" BasedOn="{StaticResource RepeatButtonWarning}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDanger" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDanger.Small" BasedOn="{StaticResource RepeatButtonDanger}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonIcon" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentControl HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <Path Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                    Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}"
                    Data="{TemplateBinding hc:IconElement.Geometry}"/>
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RepeatButtonIcon.Small" BasedOn="{StaticResource RepeatButtonIcon}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonIconCircular" BasedOn="{StaticResource RepeatButtonBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Width" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="Control.Padding" Value="6"/>
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <ContentControl HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <Path Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                    Width="{TemplateBinding hc:IconElement.Width}" Height="{TemplateBinding hc:IconElement.Height}"
                    Data="{TemplateBinding hc:IconElement.Geometry}"/>
            </ContentControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RepeatButtonIconCircular.Small" BasedOn="{StaticResource RepeatButtonIconCircular}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Width" Value="20"/>
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDashed" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RepeatButtonDashed.Small" BasedOn="{StaticResource RepeatButtonDashed}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDashedPrimary" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDashedPrimary.Small" BasedOn="{StaticResource RepeatButtonDashedPrimary}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDashedSuccess" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDashedSuccess.Small" BasedOn="{StaticResource RepeatButtonDashedSuccess}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDashedInfo" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDashedInfo.Small" BasedOn="{StaticResource RepeatButtonDashedInfo}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDashedWarning" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDashedWarning.Small" BasedOn="{StaticResource RepeatButtonDashedWarning}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonDashedDanger" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="RepeatButtonDashedDanger.Small" BasedOn="{StaticResource RepeatButtonDashedDanger}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RepeatButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="{x:Null}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border x:Name="Chrome" SnapsToDevicePixels="true"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
              <Setter TargetName="Chrome"
                      Value="{Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
              <Setter TargetName="Chrome"
                      Value="{Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ScrollViewerNativeBaseStyle}" TargetType="{x:Type ScrollViewer}"/>
  <Style BasedOn="{StaticResource ScrollViewerBaseStyle}" TargetType="{x:Type hc:ScrollViewer}"/>
  <Style x:Key="ScrollViewerUpDownRepeatButtonStyle" BasedOn="{StaticResource RepeatButtonIcon}"
         TargetType="{x:Type RepeatButton}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.Height" Value="10"/>
    <Setter Property="Control.Padding" Value="0,2"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="ButtonBase.ClickMode" Value="Hover"/>
  </Style>
  <ControlTemplate x:Key="ScrollViewerUpDownControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <RepeatButton Style="{StaticResource ScrollViewerUpDownRepeatButtonStyle}"
                    hc:IconElement.Geometry="{StaticResource UpGeometry}" Command="{x:Static ScrollBar.LineUpCommand}"
                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
        <UIElement.Visibility>
          <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}"
                        ConverterParameter="0">
            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
          </MultiBinding>
        </UIElement.Visibility>
      </RepeatButton>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="False"
                              CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                              Margin="{TemplateBinding Control.Padding}" Grid.Row="1"/>
      <RepeatButton Style="{StaticResource ScrollViewerUpDownRepeatButtonStyle}"
                    hc:IconElement.Geometry="{StaticResource DownGeometry}" Grid.Row="2"
                    Command="{x:Static ScrollBar.LineDownCommand}"
                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
        <UIElement.Visibility>
          <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}"
                        ConverterParameter="100">
            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
          </MultiBinding>
        </UIElement.Visibility>
      </RepeatButton>
    </Grid>
  </ControlTemplate>
  <Style x:Key="ScrollViewerUpDown" TargetType="{x:Type ScrollViewer}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template" Value="{StaticResource ScrollViewerUpDownControlTemplate}"/>
  </Style>
  <Style x:Key="CalendarButtonStyle" TargetType="{x:Type CalendarButton}">
    <Setter Property="FrameworkElement.MinWidth" Value="10"/>
    <Setter Property="FrameworkElement.MinHeight" Value="10"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="FrameworkElement.Width" Value="40"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarButton}">
          <hc:SimplePanel>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unselected"/>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Duration="0:0:.2" To="1" Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="SelectedBackground"/>
                    <ColorAnimation Duration="0" To="White"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active"/>
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="SelectedBackground" Fill="{DynamicResource DangerBrush}" Opacity="0" RadiusY="16"
                       RadiusX="16"/>
            <Rectangle x:Name="Background" Fill="{TemplateBinding Control.Background}" Opacity="0" RadiusY="16"
                       RadiusX="16"/>
            <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <TextElement.Foreground>
                <SolidColorBrush Color="{DynamicResource PrimaryTextColor}"/>
              </TextElement.Foreground>
            </ContentPresenter>
            <Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusY="16" RadiusX="16"
                       Stroke="{DynamicResource PrimaryBrush}" Visibility="Collapsed"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter TargetName="CalendarButtonFocusVisual" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarDayButtonStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type CalendarDayButton}">
    <Setter Property="FrameworkElement.MinWidth" Value="10"/>
    <Setter Property="FrameworkElement.MinHeight" Value="10"/>
    <Setter Property="FrameworkElement.Width" Value="32"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarDayButton}">
          <hc:SimplePanel>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.1"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unselected"/>
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Duration="0:0:.2" To="1" Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="SelectedBackground"/>
                    <ColorAnimation Duration="0" To="White"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active"/>
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="RegularDay"/>
                <VisualState x:Name="Today">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="TodayBackground"/>
                    <ColorAnimation Duration="0" To="White"
                                    Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                    Storyboard.TargetName="NormalText"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="TodayBackground" RadiusX="16" RadiusY="16" Fill="{DynamicResource DangerBrush}" Opacity="0"/>
            <Rectangle x:Name="SelectedBackground" Fill="{DynamicResource PrimaryBrush}" Opacity="0" RadiusY="16"
                       RadiusX="16"/>
            <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <TextElement.Foreground>
                <SolidColorBrush Color="{DynamicResource PrimaryTextColor}"/>
              </TextElement.Foreground>
            </ContentPresenter>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type CalendarItem}">
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarItem}">
          <FrameworkTemplate.Resources>
            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
              <TextBlock Foreground="{DynamicResource PrimaryTextBrush}" FontWeight="Bold" HorizontalAlignment="Center"
                         Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}"/>
            </DataTemplate>
          </FrameworkTemplate.Resources>
          <hc:SimplePanel x:Name="PART_Root">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Border Margin="4" Grid.ColumnSpan="3"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"/>
              <Button x:Name="PART_PreviousButton" Width="50" HorizontalAlignment="Left" Grid.Column="0" Height="50"
                      Padding="16" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}"
                      hc:IconElement.Geometry="{StaticResource LeftGeometry}"
                      Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"/>
              <Button x:Name="PART_HeaderButton" Focusable="False" Grid.Column="1" FontSize="20"
                      HorizontalAlignment="Center" Grid.Row="0" Style="{StaticResource ButtonCustom}"
                      Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"/>
              <Button x:Name="PART_NextButton" Width="50" HorizontalAlignment="Right" Height="50" Padding="16"
                      Grid.Column="2" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}"
                      hc:IconElement.Geometry="{StaticResource RightGeometry}"
                      Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"/>
              <Grid x:Name="PART_MonthView" Width="240" Height="240" Margin="10,6,10,10" ColumnSpan="3" Column="0"
                    HorizontalAlignment="Center" VerticalAlignment="Center" Row="1" Visibility="Visible">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                </Grid.RowDefinitions>
              </Grid>
              <Grid x:Name="PART_YearView" Width="240" Height="240" Margin="10,6,10,10" ColumnSpan="3" Column="0"
                    HorizontalAlignment="Center" VerticalAlignment="Center" Row="1" Visibility="Hidden">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                  <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition/>
                  <RowDefinition/>
                  <RowDefinition/>
                </Grid.RowDefinitions>
              </Grid>
            </Grid>
            <Rectangle x:Name="PART_DisabledVisual" Visibility="Collapsed"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <DataTrigger Value="Year" Binding="{Binding DisplayMode, RelativeSource={RelativeSource AncestorType=Calendar}}">
              <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Value="Decade"
                         Binding="{Binding DisplayMode, RelativeSource={RelativeSource AncestorType=Calendar}}">
              <Setter TargetName="PART_MonthView" Property="UIElement.Visibility" Value="Hidden"/>
              <Setter TargetName="PART_YearView" Property="UIElement.Visibility" Value="Visible"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarBaseStyle" TargetType="{x:Type Calendar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.Language"
            Value="{Binding Lang, Source={x:Static tools:ConfigHelper.Instance}}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="8 0"/>
    <Setter Property="Calendar.CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}"/>
    <Setter Property="Calendar.CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Effect="{StaticResource EffectShadow2}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <CalendarItem x:Name="PART_CalendarItem" Margin="{TemplateBinding Control.BorderThickness}"/>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Calendar}" BasedOn="{StaticResource CalendarBaseStyle}"/>
  <Style BasedOn="{StaticResource ToggleBlockBaseStyle}" TargetType="{x:Type hc:ToggleBlock}"/>
  <Style x:Key="ToggleBlockIcon" BasedOn="{StaticResource ToggleBlockBaseStyle}"
         TargetType="{x:Type hc:ToggleBlock}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ToggleBlock}">
          <ContentControl Margin="{TemplateBinding Control.Padding}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
            <Path x:Name="PathIcon" Width="{TemplateBinding hc:IconElement.Width}"
                  Height="{TemplateBinding hc:IconElement.Height}"
                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                  Fill="{TemplateBinding Control.Foreground}" SnapsToDevicePixels="True" Stretch="Uniform"
                  Data="{TemplateBinding hc:IconElement.Geometry}"/>
          </ContentControl>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:ToggleBlock.IsChecked" Value="True">
              <Setter TargetName="PathIcon"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}"
                      Property="Path.Data"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="{x:Type GroupBox}"/>
  <Style x:Key="GroupBox.Small" BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="{x:Type GroupBox}">
    <Setter Property="hc:TitleElement.MinHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MinWidth" Value="20"/>
  </Style>
  <Style x:Key="GroupBoxOriginal" BasedOn="{StaticResource GroupBoxOriginalBaseStyle}"
         TargetType="{x:Type GroupBox}"/>
  <Style x:Key="GroupBoxTab" BasedOn="{StaticResource GroupBoxTabBaseStyle}" TargetType="{x:Type GroupBox}"/>
  <Style x:Key="GroupBoxTab.Small" BasedOn="{StaticResource GroupBoxTab}" TargetType="{x:Type GroupBox}">
    <Setter Property="hc:TitleElement.MinHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MinWidth" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource ButtonGroupBaseStyle}" TargetType="{x:Type hc:ButtonGroup}"/>
  <Style x:Key="ButtonGroupSolid" BasedOn="{StaticResource ButtonGroupBaseStyle}"
         TargetType="{x:Type hc:ButtonGroup}">
    <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ProgressBarSuccess" BasedOn="{StaticResource ProgressBarBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ProgressBarInfo" BasedOn="{StaticResource ProgressBarBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ProgressBarWarning" BasedOn="{StaticResource ProgressBarBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ProgressBarDanger" BasedOn="{StaticResource ProgressBarBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="ProgressBarPrimaryStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
          <Brush.Transform>
            <TransformGroup>
              <RotateTransform Angle="20"/>
              <TranslateTransform x:Name="MyTransform" X="0"/>
            </TransformGroup>
          </Brush.Transform>
          <DrawingBrush.Drawing>
            <GeometryDrawing>
              <GeometryDrawing.Brush>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="{DynamicResource DarkPrimaryColor}" Offset="0"/>
                  <GradientStop Color="{DynamicResource DarkPrimaryColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1"/>
                </LinearGradientBrush>
              </GeometryDrawing.Brush>
              <GeometryDrawing.Geometry>
                <RectangleGeometry Rect="0,0,20,32"/>
              </GeometryDrawing.Geometry>
            </GeometryDrawing>
          </DrawingBrush.Drawing>
        </DrawingBrush>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressBarSuccessStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
          <Brush.Transform>
            <TransformGroup>
              <RotateTransform Angle="20"/>
              <TranslateTransform x:Name="MyTransform" X="0"/>
            </TransformGroup>
          </Brush.Transform>
          <DrawingBrush.Drawing>
            <GeometryDrawing>
              <GeometryDrawing.Brush>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="{DynamicResource DarkSuccessColor}" Offset="0"/>
                  <GradientStop Color="{DynamicResource DarkSuccessColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1"/>
                </LinearGradientBrush>
              </GeometryDrawing.Brush>
              <GeometryDrawing.Geometry>
                <RectangleGeometry Rect="0,0,20,32"/>
              </GeometryDrawing.Geometry>
            </GeometryDrawing>
          </DrawingBrush.Drawing>
        </DrawingBrush>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressBarInfoStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
          <Brush.Transform>
            <TransformGroup>
              <RotateTransform Angle="20"/>
              <TranslateTransform x:Name="MyTransform" X="0"/>
            </TransformGroup>
          </Brush.Transform>
          <DrawingBrush.Drawing>
            <GeometryDrawing>
              <GeometryDrawing.Brush>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="{DynamicResource DarkInfoColor}" Offset="0"/>
                  <GradientStop Color="{DynamicResource DarkInfoColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1"/>
                </LinearGradientBrush>
              </GeometryDrawing.Brush>
              <GeometryDrawing.Geometry>
                <RectangleGeometry Rect="0,0,20,32"/>
              </GeometryDrawing.Geometry>
            </GeometryDrawing>
          </DrawingBrush.Drawing>
        </DrawingBrush>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressBarWarningStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
          <Brush.Transform>
            <TransformGroup>
              <RotateTransform Angle="20"/>
              <TranslateTransform x:Name="MyTransform" X="0"/>
            </TransformGroup>
          </Brush.Transform>
          <DrawingBrush.Drawing>
            <GeometryDrawing>
              <GeometryDrawing.Brush>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="{DynamicResource DarkWarningColor}" Offset="0"/>
                  <GradientStop Color="{DynamicResource DarkWarningColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1"/>
                </LinearGradientBrush>
              </GeometryDrawing.Brush>
              <GeometryDrawing.Geometry>
                <RectangleGeometry Rect="0,0,20,32"/>
              </GeometryDrawing.Geometry>
            </GeometryDrawing>
          </DrawingBrush.Drawing>
        </DrawingBrush>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressBarDangerStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}"
         TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
          <Brush.Transform>
            <TransformGroup>
              <RotateTransform Angle="20"/>
              <TranslateTransform x:Name="MyTransform" X="0"/>
            </TransformGroup>
          </Brush.Transform>
          <DrawingBrush.Drawing>
            <GeometryDrawing>
              <GeometryDrawing.Brush>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="{DynamicResource DarkDangerColor}" Offset="0"/>
                  <GradientStop Color="{DynamicResource DarkDangerColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5"/>
                  <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1"/>
                </LinearGradientBrush>
              </GeometryDrawing.Brush>
              <GeometryDrawing.Geometry>
                <RectangleGeometry Rect="0,0,20,32"/>
              </GeometryDrawing.Geometry>
            </GeometryDrawing>
          </DrawingBrush.Drawing>
        </DrawingBrush>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="{x:Type hc:CircleProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ProgressBarSuccessCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}"
         TargetType="{x:Type hc:CircleProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ProgressBarInfoCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}"
         TargetType="{x:Type hc:CircleProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ProgressBarWarningCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}"
         TargetType="{x:Type hc:CircleProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ProgressBarDangerCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}"
         TargetType="{x:Type hc:CircleProgressBar}">
    <Setter Property="Control.Foreground" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="{x:Type hc:WaveProgressBar}">
    <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkPrimaryBrush}"/>
  </Style>
  <Style x:Key="ProgressBarSuccessWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}"
         TargetType="{x:Type hc:WaveProgressBar}">
    <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkSuccessBrush}"/>
  </Style>
  <Style x:Key="ProgressBarInfoWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}"
         TargetType="{x:Type hc:WaveProgressBar}">
    <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkInfoBrush}"/>
  </Style>
  <Style x:Key="ProgressBarWarningWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}"
         TargetType="{x:Type hc:WaveProgressBar}">
    <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkWarningBrush}"/>
  </Style>
  <Style x:Key="ProgressBarDangerWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}"
         TargetType="{x:Type hc:WaveProgressBar}">
    <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkDangerBrush}"/>
  </Style>
  <Style x:Key="ProgressBarFlat" TargetType="{x:Type ProgressBar}">
    <Setter Property="FrameworkElement.Height" Value="4"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="Animation">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
              </DoubleAnimationUsingKeyFrames>
              <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
              </PointAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <hc:SimplePanel x:Name="TemplateRoot" SnapsToDevicePixels="true" ClipToBounds="True">
            <Rectangle x:Name="PART_Track" Fill="{TemplateBinding Control.Background}" StrokeThickness="0"
                       Stroke="{TemplateBinding Control.BorderBrush}"/>
            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
              <Rectangle x:Name="Indicator" Fill="{TemplateBinding Control.Foreground}"/>
            </Decorator>
            <Rectangle x:Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Control.Foreground}"
                       RenderTransformOrigin="0.5,0.5">
              <UIElement.RenderTransform>
                <TransformGroup>
                  <ScaleTransform/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Rectangle>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}"/>
              </TriggerBase.EnterActions>
              <Setter TargetName="Indicator" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Animation" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="ProgressBar.Orientation" Value="Vertical">
              <Setter Value="{x:Static system:Double.NaN}" Property="FrameworkElement.Height"/>
              <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource CheckBoxBaseStyle}" TargetType="{x:Type CheckBox}"/>
  <Style BasedOn="{StaticResource RadioButtonBaseStyle}" TargetType="{x:Type RadioButton}"/>
  <Style x:Key="RadioButtonSameAsButtonDefault" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonDefault.Small"
         BasedOn="{StaticResource RadioButtonSameAsButtonDefault}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonPrimary" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonPrimary.Small"
         BasedOn="{StaticResource RadioButtonSameAsButtonPrimary}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonSuccess" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonSuccess.Small"
         BasedOn="{StaticResource RadioButtonSameAsButtonSuccess}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonInfo" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonInfo.Small" BasedOn="{StaticResource RadioButtonSameAsButtonInfo}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonWarning" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonWarning.Small"
         BasedOn="{StaticResource RadioButtonSameAsButtonWarning}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonDanger" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="RadioButtonSameAsButtonDanger.Small"
         BasedOn="{StaticResource RadioButtonSameAsButtonDanger}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioButtonIcon" BasedOn="{StaticResource RadioButtonIconBaseStyle}"
         TargetType="{x:Type RadioButton}"/>
  <Style x:Key="RadioButtonIcon.Small" BasedOn="{StaticResource RadioButtonIcon}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="RadioGroupItemDefault" BasedOn="{StaticResource RadioGroupItemBaseStyle}"
         TargetType="{x:Type RadioButton}"/>
  <Style x:Key="RadioGroupItemHorizontalFirst" BasedOn="{StaticResource RadioGroupItemBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="RadioGroupItemHorizontalLast" BasedOn="{StaticResource RadioGroupItemBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0"/>
  </Style>
  <Style x:Key="RadioGroupItemSingle" BasedOn="{StaticResource RadioGroupItemBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
  </Style>
  <Style x:Key="RadioGroupItemVerticalFirst" BasedOn="{StaticResource RadioGroupItemBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="RadioGroupItemVerticalLast" BasedOn="{StaticResource RadioGroupItemBaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4"/>
  </Style>
  <Style TargetType="{x:Type ResizeGrip}">
    <Setter Property="FrameworkElement.MinWidth" Value="11"/>
    <Setter Property="FrameworkElement.MinHeight" Value="11"/>
    <Setter Property="FrameworkElement.Width" Value="11"/>
    <Setter Property="FrameworkElement.Height" Value="11"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ResizeGrip}">
          <hc:SimplePanel Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <Path Width="11" Height="11" Data="M 9,0 L 11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3 Z"
                  HorizontalAlignment="Right" VerticalAlignment="Bottom">
              <Shape.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" Viewport="0,0,3,3" ViewportUnits="Absolute"
                              ViewboxUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="{StaticResource ResizeGripperForeground}">
                        <GeometryDrawing.Geometry>
                          <RectangleGeometry Rect="0,0,2,2"/>
                        </GeometryDrawing.Geometry>
                      </GeometryDrawing>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Shape.Fill>
            </Path>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Window}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
  </Style>
  <ControlTemplate x:Key="WindowWin10Template" TargetType="{x:Type hc:Window}">
    <Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding Control.BorderThickness}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            Background="{TemplateBinding Control.Background}">
      <Grid Margin="{TemplateBinding Control.Padding}">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid Name="PART_NonClientArea" Background="{TemplateBinding hc:Window.NonClientAreaBackground}"
              TextElement.Foreground="{TemplateBinding hc:Window.NonClientAreaForeground}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <StackPanel Name="ButtonPanel" WindowChrome.IsHitTestVisibleInChrome="True" UseLayoutRounding="True"
                      VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
            <Button Name="ButtonMin" Background="{TemplateBinding hc:Window.OtherButtonBackground}"
                    Foreground="{TemplateBinding hc:Window.OtherButtonForeground}"
                    Command="SystemCommands.MinimizeWindowCommand" IsTabStop="False" Height="29"
                    Style="{StaticResource ButtonIcon}" Width="45"
                    hc:IconElement.Geometry="{StaticResource WindowMinGeometry}" BorderThickness="1,0,1,0"
                    hc:IconElement.Width="10" hc:IconElement.Height="10"/>
            <Button Name="ButtonMax" Background="{TemplateBinding hc:Window.OtherButtonBackground}"
                    Foreground="{TemplateBinding hc:Window.OtherButtonForeground}"
                    Command="SystemCommands.MaximizeWindowCommand" IsTabStop="False" Height="29"
                    Style="{StaticResource ButtonIcon}" Width="46"
                    hc:IconElement.Geometry="{StaticResource WindowMaxGeometry}" BorderThickness="1,0,1,0"
                    hc:IconElement.Width="10" hc:IconElement.Height="10"/>
            <Button Name="ButtonRestore" Background="{TemplateBinding hc:Window.OtherButtonBackground}"
                    Foreground="{TemplateBinding hc:Window.OtherButtonForeground}"
                    Command="SystemCommands.RestoreWindowCommand" IsTabStop="False" Height="29"
                    Style="{StaticResource ButtonIcon}" Width="46"
                    hc:IconElement.Geometry="{StaticResource WindowRestoreGeometry}" BorderThickness="1,0,1,0"
                    hc:IconElement.Width="10" hc:IconElement.Height="10"/>
            <Button Name="ButtonClose" Background="{TemplateBinding hc:Window.CloseButtonBackground}"
                    Foreground="{TemplateBinding hc:Window.CloseButtonForeground}"
                    Command="SystemCommands.CloseWindowCommand" IsTabStop="False" Height="29"
                    Style="{StaticResource ButtonIcon}" Width="46"
                    hc:IconElement.Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0"
                    hc:IconElement.Width="10" hc:IconElement.Height="10"/>
          </StackPanel>
          <Grid Column="0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Button Name="ButtonIcon" Command="{x:Static SystemCommands.ShowSystemMenuCommand}"
                    Background="Transparent" Margin="10,0,0,0" WindowChrome.IsHitTestVisibleInChrome="True"
                    Style="{StaticResource ButtonCustom}" VerticalAlignment="Center"
                    Visibility="{TemplateBinding Icon, Converter={StaticResource Object2VisibilityConverter}}">
              <interactivity:Interaction.Triggers>
                <interactivity:EventTrigger EventName="MouseDoubleClick">
                  <interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}"/>
                </interactivity:EventTrigger>
              </interactivity:Interaction.Triggers>
              <Image IsHitTestVisible="False" Source="{TemplateBinding Window.Icon}" VerticalAlignment="Center"
                     Width="16" Height="16"/>
            </Button>
            <TextBlock Grid.Column="1" Text="{TemplateBinding Window.Title}" Padding="10,0,0,0" VerticalAlignment="Center">
              <UIElement.Visibility>
                <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                  <MultiBinding.Bindings>
                    <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}"/>
                    <Binding Path="Title" Converter="{StaticResource Object2BooleanConverter}"
                             RelativeSource="{RelativeSource TemplatedParent}"/>
                  </MultiBinding.Bindings>
                </MultiBinding>
              </UIElement.Visibility>
            </TextBlock>
            <ContentPresenter x:Name="ContentPresenterMain" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Column="2"
                              Content="{TemplateBinding hc:Window.NonClientAreaContent}"/>
          </Grid>
        </Grid>
        <AdornerDecorator Grid.Row="1">
          <ContentPresenter ClipToBounds="True"/>
        </AdornerDecorator>
        <ResizeGrip x:Name="ResizeGrip" Width="10" Height="10" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                    Grid.Row="1" IsTabStop="False" Visibility="Collapsed"
                    WindowChrome.ResizeGripDirection="BottomRight"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Window.IsActive" Value="False">
        <Setter TargetName="ContentPresenterMain" Property="UIElement.Opacity" Value=".8"/>
        <Setter TargetName="ButtonPanel" Property="UIElement.Opacity" Value=".8"/>
      </Trigger>
      <Trigger Property="Window.WindowState" Value="Maximized">
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Window.WindowState" Value="Normal">
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="Window.ResizeMode" Value="NoResize">
        <Setter TargetName="ButtonMin" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="Window.ResizeMode" Value="CanMinimize">
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonClose"
                Value="{Binding CloseButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonClose"
                Value="{Binding CloseButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="ButtonMax" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonMax"
                Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonMax"
                Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="ButtonRestore" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonRestore"
                Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonRestore"
                Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="ButtonMin" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonMin"
                Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonMin"
                Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger Property="Window.WindowStyle" Value="None">
        <Setter Property="hc:Window.ShowNonClientArea" Value="False"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip"/>
          <Condition Property="Window.WindowState" Value="Normal"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeGrip" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="WindowWin10ExtendContentToNonClientTemplate" TargetType="{x:Type hc:Window}">
    <Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding Control.BorderThickness}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            Background="{TemplateBinding Control.Background}">
      <hc:SimplePanel Margin="{TemplateBinding Control.Padding}">
        <AdornerDecorator>
          <hc:SimplePanel>
            <ContentPresenter ClipToBounds="True"/>
            <Grid Name="PART_NonClientArea" Background="{TemplateBinding hc:Window.NonClientAreaBackground}"
                  TextElement.Foreground="{TemplateBinding hc:Window.NonClientAreaForeground}"
                  VerticalAlignment="Top">
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <StackPanel Name="ButtonPanel" WindowChrome.IsHitTestVisibleInChrome="True" UseLayoutRounding="True"
                          VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                <Button Name="ButtonMin" Background="{TemplateBinding hc:Window.OtherButtonBackground}"
                        Foreground="{TemplateBinding hc:Window.OtherButtonForeground}"
                        Command="SystemCommands.MinimizeWindowCommand" IsTabStop="False" Height="29"
                        Style="{StaticResource ButtonIcon}" Width="45"
                        hc:IconElement.Geometry="{StaticResource WindowMinGeometry}" BorderThickness="1,0,1,0"
                        hc:IconElement.Width="10" hc:IconElement.Height="10"/>
                <Button Name="ButtonMax" Background="{TemplateBinding hc:Window.OtherButtonBackground}"
                        Foreground="{TemplateBinding hc:Window.OtherButtonForeground}"
                        Command="SystemCommands.MaximizeWindowCommand" IsTabStop="False" Height="29"
                        Style="{StaticResource ButtonIcon}" Width="46"
                        hc:IconElement.Geometry="{StaticResource WindowMaxGeometry}" BorderThickness="1,0,1,0"
                        hc:IconElement.Width="10" hc:IconElement.Height="10"/>
                <Button Name="ButtonRestore" Background="{TemplateBinding hc:Window.OtherButtonBackground}"
                        Foreground="{TemplateBinding hc:Window.OtherButtonForeground}"
                        Command="SystemCommands.RestoreWindowCommand" IsTabStop="False" Height="29"
                        Style="{StaticResource ButtonIcon}" Width="46"
                        hc:IconElement.Geometry="{StaticResource WindowRestoreGeometry}" BorderThickness="1,0,1,0"
                        hc:IconElement.Width="10" hc:IconElement.Height="10"/>
                <Button Name="ButtonClose" Background="{TemplateBinding hc:Window.CloseButtonBackground}"
                        Foreground="{TemplateBinding hc:Window.CloseButtonForeground}"
                        Command="SystemCommands.CloseWindowCommand" IsTabStop="False" Height="29"
                        Style="{StaticResource ButtonIcon}" Width="46"
                        hc:IconElement.Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0"
                        hc:IconElement.Width="10" hc:IconElement.Height="10"/>
              </StackPanel>
              <Grid Column="0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Button Name="ButtonIcon" Command="{x:Static SystemCommands.ShowSystemMenuCommand}"
                        Background="Transparent" Margin="10,0,0,0" WindowChrome.IsHitTestVisibleInChrome="True"
                        Style="{StaticResource ButtonCustom}" VerticalAlignment="Center"
                        Visibility="{TemplateBinding Icon, Converter={StaticResource Object2VisibilityConverter}}">
                  <interactivity:Interaction.Triggers>
                    <interactivity:EventTrigger EventName="MouseDoubleClick">
                      <interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}"/>
                    </interactivity:EventTrigger>
                  </interactivity:Interaction.Triggers>
                  <Image IsHitTestVisible="False" Source="{TemplateBinding Window.Icon}" VerticalAlignment="Center"
                         Width="16" Height="16"/>
                </Button>
                <TextBlock Grid.Column="1" Text="{TemplateBinding Window.Title}" Padding="10,0,0,0" VerticalAlignment="Center">
                  <UIElement.Visibility>
                    <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                      <MultiBinding.Bindings>
                        <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}"/>
                        <Binding Path="Title" Converter="{StaticResource Object2BooleanConverter}"
                                 RelativeSource="{RelativeSource TemplatedParent}"/>
                      </MultiBinding.Bindings>
                    </MultiBinding>
                  </UIElement.Visibility>
                </TextBlock>
              </Grid>
            </Grid>
          </hc:SimplePanel>
        </AdornerDecorator>
        <ResizeGrip x:Name="ResizeGrip" Width="10" Height="10" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                    Grid.Row="1" IsTabStop="False" Visibility="Collapsed"
                    WindowChrome.ResizeGripDirection="BottomRight"/>
      </hc:SimplePanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Window.IsActive" Value="False">
        <Setter TargetName="ButtonPanel" Property="UIElement.Opacity" Value=".8"/>
      </Trigger>
      <Trigger Property="Window.WindowState" Value="Maximized">
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Window.WindowState" Value="Normal">
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="Window.ResizeMode" Value="NoResize">
        <Setter TargetName="ButtonMin" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="Window.ResizeMode" Value="CanMinimize">
        <Setter TargetName="ButtonMax" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="ButtonRestore" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonClose"
                Value="{Binding CloseButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonClose"
                Value="{Binding CloseButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="ButtonMax" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonMax"
                Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonMax"
                Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="ButtonRestore" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonRestore"
                Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonRestore"
                Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="ButtonMin" Property="UIElement.IsMouseOver" Value="True">
        <Setter TargetName="ButtonMin"
                Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Background"/>
        <Setter TargetName="ButtonMin"
                Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                Property="Control.Foreground"/>
      </Trigger>
      <Trigger Property="Window.WindowStyle" Value="None">
        <Setter Property="hc:Window.ShowNonClientArea" Value="False"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip"/>
          <Condition Property="Window.WindowState" Value="Normal"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeGrip" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="WindowWin10" TargetType="{x:Type hc:Window}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="#262e2f"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="hc:Window.NonClientAreaBackground" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:Window.NonClientAreaForeground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:Window.CloseButtonBackground" Value="Transparent"/>
    <Setter Property="hc:Window.CloseButtonForeground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:Window.CloseButtonHoverBackground" Value="#e81123"/>
    <Setter Property="hc:Window.CloseButtonHoverForeground" Value="White"/>
    <Setter Property="hc:Window.OtherButtonBackground" Value="Transparent"/>
    <Setter Property="hc:Window.OtherButtonForeground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="hc:Window.OtherButtonHoverBackground" Value="{DynamicResource DarkMaskBrush}"/>
    <Setter Property="hc:Window.OtherButtonHoverForeground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template" Value="{StaticResource WindowWin10Template}"/>
    <Style.Triggers>
      <Trigger Property="hc:WindowAttach.ExtendContentToNonClientArea" Value="true">
        <Setter Property="Control.Template" Value="{StaticResource WindowWin10ExtendContentToNonClientTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="WindowBlur" BasedOn="{StaticResource WindowWin10}" TargetType="{x:Type hc:BlurWindow}">
    <Setter Property="Control.Background" Value="Transparent"/>
  </Style>
  <Style x:Key="WindowGlow" BasedOn="{StaticResource WindowWin10}" TargetType="{x:Type hc:GlowWindow}">
    <Setter Property="hc:GlowWindow.ActiveGlowColor" Value="#262e2f"/>
    <Setter Property="hc:GlowWindow.InactiveGlowColor" Value="{DynamicResource BorderColor}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
  </Style>
  <Style TargetType="{x:Type hc:ImageBrowser}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.MinWidth" Value="400"/>
    <Setter Property="FrameworkElement.MinHeight" Value="250"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="Black"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ImageBrowser}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="Storyboard1">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_PanelTop">
                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="Storyboard2">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_PanelTop">
                <EasingDoubleKeyFrame KeyTime="0:0:.4" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <hc:ImageViewer x:Name="PART_ImageViewer" ShowImgMap="True" BorderThickness="0" Background="#dd000000"/>
            <hc:SimplePanel x:Name="PART_PanelTop" Opacity="0" Background="{DynamicResource DarkOpacityBrush}"
                            VerticalAlignment="Top" Grid.Row="0">
              <StackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
                <TextBlock Foreground="White" Margin="10,0,0,0" Text="{Binding ImgPath, ElementName=PART_ImageViewer}"/>
                <TextBlock Foreground="White" Margin="30,0,0,0"
                           Text="{Binding ImgSize, ElementName=PART_ImageViewer, Converter={StaticResource Long2FileSizeConverter}}"/>
              </StackPanel>
              <Button Command="interactivity:ControlCommands.Close" Foreground="{DynamicResource TextIconBrush}"
                      WindowChrome.IsHitTestVisibleInChrome="True" Background="Red" Padding="14"
                      hc:IconElement.Geometry="{StaticResource DeleteGeometry}" Style="{StaticResource ButtonIcon}"
                      HorizontalAlignment="Right" VerticalAlignment="Top" Width="40" Height="40"/>
            </hc:SimplePanel>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_ImageViewer" Property="hc:ImageViewer.ShowCloseButton" Value="True">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource Storyboard2}"/>
              </TriggerBase.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="hc:Window.IsFullScreen" Value="True">
        <Setter Property="Window.WindowState" Value="Maximized"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TagBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:Tag}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="hc:Tag.ShowCloseButton"
            Value="{Binding Path=(hc:TagContainer.ShowCloseButton), RelativeSource={RelativeSource AncestorType=hc:TagContainer}}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Tag}">
          <Border Style="{StaticResource BorderCircular}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Border Style="{StaticResource BorderCircularClip}"
                      Visibility="{Binding HasHeader, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                      BorderBrush="{Binding Path=(hc:TitleElement.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding hc:Tag.HeaderTemplate}"
                                  ContentTemplateSelector="{TemplateBinding hc:Tag.HeaderTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding hc:Tag.HeaderStringFormat}" VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  TextElement.Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
              <ContentPresenter Margin="{TemplateBinding Control.Padding}" Grid.Column="1"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              <Button Name="ButtonClose" Focusable="False" Padding="0" BorderThickness="0" hc:IconElement.Width="8"
                      Command="interactivity:ControlCommands.Close" Margin="0,0,6,0" Width="16" Grid.Column="2"
                      Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource DeleteGeometry}"
                      Foreground="{TemplateBinding Control.Foreground}"
                      Visibility="{TemplateBinding ShowCloseButton, Converter={StaticResource Boolean2VisibilityConverter}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{StaticResource DeleteFillCircleGeometry}" TargetName="ButtonClose"
                      Property="hc:IconElement.Geometry"/>
              <Setter TargetName="ButtonClose" Property="hc:IconElement.Width" Value="14"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource DarkMaskBrush}"/>
      </Trigger>
      <Trigger Property="hc:Tag.IsSelected" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TagContainerBaseStyle" TargetType="{x:Type hc:TagContainer}"
         BasedOn="{StaticResource BaseStyle}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TagBaseStyle}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel hc:PanelElement.FluidMoveBehavior="{StaticResource BehaviorXY200}"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:TagContainer}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:ScrollViewer Focusable="false">
              <ItemsPresenter Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </hc:ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <hc:ToggleBlock Grid.Column="1" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                      HorizontalContentAlignment="Stretch"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <hc:ToggleBlock.UnCheckedContent>
          <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        </hc:ToggleBlock.UnCheckedContent>
        <hc:ToggleBlock.CheckedContent>
          <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        </hc:ToggleBlock.CheckedContent>
      </hc:ToggleBlock>
      <hc:ToggleBlock Grid.Column="0" Grid.ColumnSpan="2" Background="Transparent" VerticalContentAlignment="Stretch"
                      HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Margin="{TemplateBinding Control.Padding}"
                        ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                        Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                        ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
             PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
             IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Decorator Margin="8 0">
          <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                  Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                  BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                  MinWidth="{Binding ActualWidth, ElementName=border}">
            <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
              <hc:ToggleBlock.CheckedContent>
                <ScrollViewer Margin="2">
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </ScrollViewer>
              </hc:ToggleBlock.CheckedContent>
              <hc:ToggleBlock.UnCheckedContent>
                <hc:Empty/>
              </hc:ToggleBlock.UnCheckedContent>
            </hc:ToggleBlock>
          </Border>
        </Decorator>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTopTemplate" TargetType="{x:Type ComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="1" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <hc:ToggleBlock Grid.Column="0" Grid.ColumnSpan="2" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Margin="{TemplateBinding Control.Padding}"
                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                          ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                          ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxLeftTemplate" TargetType="{x:Type ComboBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="1" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <hc:ToggleBlock Grid.Column="0" Grid.ColumnSpan="2" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Margin="{TemplateBinding Control.Padding}"
                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                          ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                          ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0,0,0" Padding="{TemplateBinding Control.Padding}"
                        Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <hc:ToggleBlock Grid.Column="1" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                      HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <hc:ToggleBlock.UnCheckedContent>
          <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        </hc:ToggleBlock.UnCheckedContent>
        <hc:ToggleBlock.CheckedContent>
          <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        </hc:ToggleBlock.CheckedContent>
      </hc:ToggleBlock>
      <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
               Background="{TemplateBinding Control.Background}"
               HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
               Style="{StaticResource ComboBoxEditableTextBox}"
               VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
               IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
             PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
             IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Decorator Margin="8 0">
          <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                  Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                  BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                  MinWidth="{Binding ActualWidth, ElementName=border}">
            <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
              <hc:ToggleBlock.CheckedContent>
                <ScrollViewer Margin="2">
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </ScrollViewer>
              </hc:ToggleBlock.CheckedContent>
              <hc:ToggleBlock.UnCheckedContent>
                <hc:Empty/>
              </hc:ToggleBlock.UnCheckedContent>
            </hc:ToggleBlock>
          </Border>
        </Decorator>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxEditableTopTemplate" TargetType="{x:Type ComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="1" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Style="{StaticResource ComboBoxEditableTextBox}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxEditableLeftTemplate" TargetType="{x:Type ComboBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="1" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Style="{StaticResource ComboBoxEditableTextBox}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ComboBoxItemBaseStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False"/>
                <Condition Property="UIElement.IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Border.Background"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryBrush}" Property="Border.Background"/>
              <Setter Property="Control.Foreground" Value="White"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type ComboBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ComboBoxItemBaseStyle}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template" Value="{StaticResource ComboBoxTemplate}"/>
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ComboBoxExtendBaseStyle" BasedOn="{StaticResource ComboBoxBaseStyle}"
         TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Template" Value="{StaticResource ComboBoxTopTemplate}"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="False"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Left"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxLeftTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="True"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Top"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTopTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="True"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Left"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableLeftTemplate}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ComboBoxPlusTopTemplate" TargetType="{x:Type hc:ComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="2" Padding="1 0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <hc:ToggleBlock Grid.Column="0" Grid.ColumnSpan="3" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Margin="{TemplateBinding Control.Padding}"
                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                          ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                          ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxPlusLeftTemplate" TargetType="{x:Type hc:ComboBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="2" Padding="1 0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <hc:ToggleBlock Grid.Column="0" Grid.ColumnSpan="3" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Margin="{TemplateBinding Control.Padding}"
                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                          ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                          ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxPlusEditableTopTemplate" TargetType="{x:Type hc:ComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel Grid.ColumnSpan="2" LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="2" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Style="{StaticResource ComboBoxEditableTextBox}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxPlusEditableTopAutoCompleteTemplate" TargetType="{x:Type hc:ComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel Grid.ColumnSpan="2" LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="2" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Style="{StaticResource ComboBoxEditableTextBox}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
        <Popup x:Name="PART_Popup_AutoComplete" StaysOpen="False" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder_AutoComplete" BorderThickness="0,1,0,0"
                    Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <StackPanel Name="PART_AutoCompletePanel" KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxPlusEditableLeftTemplate" TargetType="{x:Type hc:ComboBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="2" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Style="{StaticResource ComboBoxEditableTextBox}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxPlusEditableLeftAutoCompleteTemplate" TargetType="{x:Type hc:ComboBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <hc:ToggleBlock Grid.Column="2" Padding="1,0" Background="Transparent" VerticalContentAlignment="Stretch"
                        HorizontalContentAlignment="Stretch" ToggleGesture="LeftClick"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <hc:ToggleBlock.UnCheckedContent>
            <Path Data="{StaticResource DownGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.UnCheckedContent>
          <hc:ToggleBlock.CheckedContent>
            <Path Data="{StaticResource UpGeometry}" VerticalAlignment="Center" HorizontalAlignment="Right"
                  Width="14" Stretch="Uniform" Fill="{TemplateBinding Control.BorderBrush}"
                  Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
          </hc:ToggleBlock.CheckedContent>
        </hc:ToggleBlock>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Padding="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 Style="{StaticResource ComboBoxEditableTextBox}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
        <Popup x:Name="PART_Popup_AutoComplete" AllowsTransparency="true"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder_AutoComplete" BorderThickness="0,1,0,0"
                    Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <ScrollViewer Margin="2">
                    <StackPanel Name="PART_AutoCompletePanel" KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{x:Static system:Double.MaxValue}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualHeight, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ComboBoxPlusBaseStyle" BasedOn="{StaticResource ComboBoxExtendBaseStyle}"
         TargetType="{x:Type hc:ComboBox}">
    <Setter Property="Control.Template" Value="{StaticResource ComboBoxPlusTopTemplate}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="False"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Left"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxPlusLeftTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="True"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Top"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxPlusEditableTopTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="True"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Top"/>
          <Condition Property="hc:ComboBox.AutoComplete" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxPlusEditableTopAutoCompleteTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="True"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Left"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxPlusEditableLeftTemplate}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ComboBox.IsEditable" Value="True"/>
          <Condition Property="hc:TitleElement.TitlePlacement" Value="Left"/>
          <Condition Property="hc:ComboBox.AutoComplete" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxPlusEditableLeftAutoCompleteTemplate}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuItemBaseStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="Control.Padding"
            Value="{Binding Path=(hc:MenuAttach.ItemPadding), RelativeSource={RelativeSource AncestorType=MenuBase}}"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,2"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Bd" MinWidth="240" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid x:Name="Grid" Margin="{TemplateBinding Control.Padding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="26"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                <ColumnDefinition Width="20"/>
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="Icon" Margin="0,0,10,0" ContentSource="Icon" HorizontalAlignment="Right" Height="16"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                Width="16"/>
              <Border x:Name="GlyphPanel" Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2"
                      Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right"
                      Height="16" Visibility="Hidden" VerticalAlignment="Center" Width="16">
                <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}"
                      StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}"/>
              </Border>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1"
                                ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" ContentSource="Header"
                                Margin="0,3" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              <TextBlock x:Name="InputGestureText" Margin="0,0,10,0" Grid.Column="3" VerticalAlignment="Center"
                         HorizontalAlignment="Left" Text="{TemplateBinding MenuItem.InputGestureText}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsChecked" Value="True">
              <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <Border x:Name="templateRoot" MinWidth="44" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="1,1,1,0" Background="{TemplateBinding Control.Background}"
                      SnapsToDevicePixels="True">
                <Grid VerticalAlignment="Center" Margin="{TemplateBinding Control.Padding}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="Icon" Margin="0,0,10,0" ContentSource="Icon" HorizontalAlignment="Right" Height="16"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                    Width="16"/>
                  <Border x:Name="GlyphPanel" Margin="0,0,10,0" Grid.Column="0" CornerRadius="2"
                          Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right"
                          Height="16" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
                    <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}"
                          StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}"/>
                  </Border>
                  <ContentPresenter x:Name="menuHeaderContainer"
                                    ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" Grid.Column="1"
                                    ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                    ContentSource="Header" RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  <Popup x:Name="PART_Popup" Grid.Column="0" AllowsTransparency="True" Focusable="False" Placement="Bottom"
                         PlacementTarget="{Binding ElementName=templateRoot}"
                         IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                    <hc:SimplePanel Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8">
                      <Border x:Name="SubMenuBorder" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}"
                              Background="{DynamicResource RegionBrush}"
                              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,0,1,1'}">
                        <ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="2,2,2,0">
                          <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                          Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                          KeyboardNavigation.TabNavigation="Cycle"/>
                        </ScrollViewer>
                      </Border>
                      <Border Height="1" Background="{DynamicResource RegionBrush}" VerticalAlignment="Top" BorderThickness="1,0"
                              BorderBrush="{DynamicResource BorderBrush}" HorizontalAlignment="Left"
                              hc:MenuTopLineAttach.Popup="{Binding ElementName=PART_Popup}"/>
                    </hc:SimplePanel>
                  </Popup>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                  <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="MenuItem.IsChecked" Value="True">
                  <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                  <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="MenuItem.IsHighlighted" Value="True">
                  <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryRegionBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}"
                          Property="TextElement.Foreground"/>
                </Trigger>
                <Trigger Property="MenuItem.IsSubmenuOpen" Value="True">
                  <Setter TargetName="templateRoot" Value="{DynamicResource BorderBrush}" Property="Border.BorderBrush"/>
                  <Setter TargetName="templateRoot" Value="{DynamicResource RegionBrush}" Property="Border.Background"/>
                  <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}"
                          Property="TextElement.Foreground"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="MenuItem.Role" Value="TopLevelItem">
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <Border x:Name="templateRoot" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,0"
                      Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
                <Grid Margin="{TemplateBinding Control.Padding}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="Icon" Margin="0,0,10,0" HorizontalAlignment="Left" ContentSource="Icon" Height="16"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                    Width="16"/>
                  <Border x:Name="GlyphPanel" Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2"
                          Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right"
                          Height="16" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
                    <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}"
                          StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}"/>
                  </Border>
                  <ContentPresenter x:Name="menuHeaderContainer"
                                    ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" Grid.Column="1"
                                    ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                    ContentSource="Header" HorizontalAlignment="Left" RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                  <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="MenuItem.IsChecked" Value="True">
                  <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                  <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="MenuItem.IsHighlighted" Value="True">
                  <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryRegionBrush}"
                          Property="Border.Background"/>
                  <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}"
                          Property="TextElement.Foreground"/>
                </Trigger>
                <Trigger Property="MenuItem.IsSubmenuOpen" Value="True">
                  <Setter TargetName="templateRoot" Property="Border.Background" Value="White"/>
                  <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}"
                          Property="TextElement.Foreground"/>
                </Trigger>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.IsHighlighted" Value="True"/>
                    <Condition Property="UIElement.IsEnabled" Value="False"/>
                  </MultiTrigger.Conditions>
                  <Setter TargetName="templateRoot" Property="Border.Background" Value="#0A000000"/>
                  <Setter TargetName="templateRoot" Property="Border.BorderBrush" Value="#21000000"/>
                </MultiTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
        <Setter Property="DockPanel.Dock" Value="Top"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <Border x:Name="Bd" MinWidth="240" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid x:Name="Grid" Margin="{TemplateBinding Control.Padding}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="26"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="Icon" Margin="0,0,10,0" ContentSource="Icon" HorizontalAlignment="Right" Height="16"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                    Width="16"/>
                  <Border x:Name="GlyphPanel" Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2"
                          Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right"
                          Height="16" Visibility="Hidden" VerticalAlignment="Center" Width="16">
                    <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}"
                          StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}"/>
                  </Border>
                  <ContentPresenter x:Name="ContentPresenter" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                                    Margin="0,3" ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                    ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}" Grid.Column="1"
                                    ContentSource="Header" RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  <Path x:Name="Path" Grid.Column="4" Width="10" Height="10" HorizontalAlignment="Left"
                        Data="{StaticResource RightGeometry}" Stretch="Uniform" Fill="{TemplateBinding Control.Foreground}"
                        VerticalAlignment="Center"/>
                  <Popup x:Name="PART_Popup" Grid.Column="1" AllowsTransparency="True" Focusable="False" Placement="Right"
                         IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                         VerticalOffset="{Binding Path=(hc:MenuAttach.PopupVerticalOffset), RelativeSource={RelativeSource AncestorType=MenuBase}}"
                         HorizontalOffset="{Binding Path=(hc:MenuAttach.PopupHorizontalOffset), RelativeSource={RelativeSource AncestorType=MenuBase}}">
                    <Border x:Name="SubMenuBorder" Effect="{StaticResource EffectShadow2}" Margin="8" BorderThickness="1"
                            BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                      <ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="2,2,2,0">
                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                        Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                        KeyboardNavigation.TabNavigation="Cycle"/>
                      </ScrollViewer>
                    </Border>
                  </Popup>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="MenuItem.IsChecked" Value="True">
                  <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuBaseStyle" TargetType="{x:Type Menu}">
    <Setter Property="hc:MenuAttach.ItemPadding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="hc:MenuAttach.PopupVerticalOffset" Value="-9"/>
    <Setter Property="hc:MenuAttach.PopupHorizontalOffset" Value="10"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WatermarkTextBoxBaseStyle" TargetType="{x:Type hc:WatermarkTextBox}">
    <Setter Property="Control.Background" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="TextBoxBase.CaretBrush"
            Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:WatermarkTextBox}">
          <hc:SimplePanel>
            <TextBlock x:Name="PART_Watermark" Text="{TemplateBinding hc:WatermarkTextBox.Watermark}"
                       VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                       Foreground="{DynamicResource ThirdlyTextBrush}" Margin="{TemplateBinding Control.Padding}"
                       Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TextBoxBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type TextBox}">
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <hc:SimplePanel x:Name="root">
            <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
              <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="TextBoxExtendTopTemplate" TargetType="{x:Type TextBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Row="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <TextBlock x:Name="Placeholder" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 Margin="{TemplateBinding Control.Padding}" Grid.Row="1" HorizontalAlignment="Stretch"
                 Style="{StaticResource TextBlockDefaultThiLight}"
                 Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                 Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                    VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Grid.Row="1"
                    Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="Placeholder" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TextBoxExtendLeftTemplate" TargetType="{x:Type TextBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Column="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <TextBlock x:Name="Placeholder" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 Margin="{TemplateBinding Control.Padding}" Grid.Column="1" HorizontalAlignment="Stretch"
                 Style="{StaticResource TextBlockDefaultThiLight}"
                 Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                 Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}" Grid.Column="1"
                    Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="Placeholder" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="TextBoxExtendBaseStyle" BasedOn="{StaticResource TextBoxBaseStyle}"
         TargetType="{x:Type TextBox}">
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Template" Value="{StaticResource TextBoxExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource TextBoxExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="TextBoxPlusTopTemplate" TargetType="{x:Type hc:TextBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True" Grid.Row="0"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0,0,0" Grid.Column="0"
                      Padding="{TemplateBinding Control.Padding}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="TextBoxBase.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TextBoxPlusLeftTemplate" TargetType="{x:Type hc:TextBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True" Grid.Column="0"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0,0,0" Grid.Column="0"
                      Padding="{TemplateBinding Control.Padding}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="TextBoxBase.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="TextBoxPlusBaseStyle" BasedOn="{StaticResource TextBoxExtendBaseStyle}"
         TargetType="{x:Type hc:TextBox}">
    <Setter Property="Control.Template" Value="{StaticResource TextBoxPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource TextBoxPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SearchBarBaseStyle" BasedOn="{StaticResource TextBoxBaseStyle}"
         TargetType="{x:Type hc:SearchBar}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SearchBar}">
          <hc:SimplePanel x:Name="root">
            <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0"
                            Padding="{TemplateBinding Control.Padding}"
                            VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                            HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
              <Button Height="Auto" Width="Auto" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}"
                      hc:IconElement.Width="14" hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="1"
                      Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False" Grid.Row="0"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
            </Grid>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="SearchBarExtendTopTemplate" TargetType="{x:Type hc:SearchBar}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Row="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Row="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0,0,0" Grid.Column="0"
                      Padding="{TemplateBinding Control.Padding}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        <Button Height="Auto" Width="Auto" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                Command="interactivity:ControlCommands.Search" hc:IconElement.Width="14" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource SearchGeometry}"
                Foreground="{TemplateBinding Control.BorderBrush}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SearchBarExtendLeftTemplate" TargetType="{x:Type hc:SearchBar}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Column="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Column="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0,0,0" Grid.Column="0"
                      Padding="{TemplateBinding Control.Padding}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        <Button Height="Auto" Width="Auto" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                Command="interactivity:ControlCommands.Search" hc:IconElement.Width="14" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource SearchGeometry}"
                Foreground="{TemplateBinding Control.BorderBrush}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SearchBarExtendBaseStyle" BasedOn="{StaticResource SearchBarBaseStyle}"
         TargetType="{x:Type hc:SearchBar}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template" Value="{StaticResource SearchBarExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource SearchBarExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="SearchBarPlusTopTemplate" TargetType="{x:Type hc:SearchBar}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Row="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Row="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                Command="interactivity:ControlCommands.Clear" hc:IconElement.Width="14" Padding="0,0,2,0"
                Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{TemplateBinding Control.BorderBrush}"/>
        <Button Height="Auto" Width="Auto" HorizontalContentAlignment="Left" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Command="interactivity:ControlCommands.Search"
                hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="2"
                Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <TextBlock HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0"
                   VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Control.Padding}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"/>
        <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0"
                      Padding="{TemplateBinding Control.Padding}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SearchBarPlusLeftTemplate" TargetType="{x:Type hc:SearchBar}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Column="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Column="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                Command="interactivity:ControlCommands.Clear" hc:IconElement.Width="14" Padding="0,0,2,0"
                Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{TemplateBinding Control.BorderBrush}"/>
        <Button Height="Auto" Width="Auto" HorizontalContentAlignment="Left" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Command="interactivity:ControlCommands.Search"
                hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource SearchGeometry}" Grid.Column="2"
                Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <TextBlock HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0"
                   VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Control.Padding}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                   Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"/>
        <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0"
                      Padding="{TemplateBinding Control.Padding}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SearchBarPlusBaseStyle" BasedOn="{StaticResource SearchBarExtendBaseStyle}"
         TargetType="{x:Type hc:SearchBar}">
    <Setter Property="Control.Template" Value="{StaticResource SearchBarPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource SearchBarPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource TagBaseStyle}" TargetType="{x:Type hc:Tag}"/>
  <Style BasedOn="{StaticResource TagContainerBaseStyle}" TargetType="{x:Type hc:TagContainer}"/>
  <Style BasedOn="{StaticResource SearchBarBaseStyle}" TargetType="{x:Type hc:SearchBar}"/>
  <Style x:Key="SearchBar.Small" BasedOn="{StaticResource SearchBarBaseStyle}"
         TargetType="{x:Type hc:SearchBar}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="SearchBarExtend" BasedOn="{StaticResource SearchBarExtendBaseStyle}"
         TargetType="{x:Type hc:SearchBar}"/>
  <Style x:Key="SearchBarExtend.Small" BasedOn="{StaticResource SearchBarExtend}"
         TargetType="{x:Type hc:SearchBar}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="SearchBarPlus" BasedOn="{StaticResource SearchBarPlusBaseStyle}"
         TargetType="{x:Type hc:SearchBar}"/>
  <Style x:Key="SearchBarPlus.Small" BasedOn="{StaticResource SearchBarPlus}"
         TargetType="{x:Type hc:SearchBar}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="{x:Type ComboBox}"/>
  <Style x:Key="ComboBoxItem.Small" BasedOn="{StaticResource ComboBoxItemBaseStyle}"
         TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="ComboBox.Small" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="{x:Type ComboBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ComboBoxItem.Small}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="ComboBoxExtend" BasedOn="{StaticResource ComboBoxExtendBaseStyle}"
         TargetType="{x:Type ComboBox}"/>
  <Style x:Key="ComboBoxExtend.Small" BasedOn="{StaticResource ComboBoxExtend}"
         TargetType="{x:Type ComboBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ComboBoxItem.Small}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource ComboBoxPlusBaseStyle}" TargetType="{x:Type hc:ComboBox}"/>
  <Style x:Key="ComboBoxPlus.Small" BasedOn="{StaticResource ComboBoxPlusBaseStyle}"
         TargetType="{x:Type hc:ComboBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ComboBoxItem.Small}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource WatermarkTextBoxBaseStyle}" TargetType="{x:Type hc:WatermarkTextBox}"/>
  <Style BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}"/>
  <Style x:Key="TextBox.Small" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="TextBoxExtend" BasedOn="{StaticResource TextBoxExtendBaseStyle}"
         TargetType="{x:Type TextBox}"/>
  <Style x:Key="TextBoxExtend.Small" BasedOn="{StaticResource TextBoxExtend}" TargetType="{x:Type TextBox}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource TextBoxPlusBaseStyle}" TargetType="{x:Type hc:TextBox}"/>
  <Style x:Key="TextBoxPlus.Small" BasedOn="{StaticResource TextBoxPlusBaseStyle}"
         TargetType="{x:Type hc:TextBox}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="{x:Type MenuItem}"/>
  <Style BasedOn="{StaticResource MenuBaseStyle}" TargetType="{x:Type Menu}"/>
  <Style x:Key="Menu.Small" BasedOn="{StaticResource MenuBaseStyle}" TargetType="{x:Type Menu}">
    <Setter Property="hc:MenuAttach.ItemPadding" Value="6,0"/>
    <Setter Property="hc:MenuAttach.PopupVerticalOffset" Value="-3"/>
    <Setter Property="hc:MenuAttach.PopupHorizontalOffset" Value="6"/>
  </Style>
  <ControlTemplate x:Key="BadgeTextTemplate" TargetType="{x:Type hc:Badge}">
    <hc:SimplePanel>
      <ContentPresenter/>
      <Border x:Name="Border" RenderTransformOrigin="0.5 0.5" Style="{StaticResource BorderCircular}"
              Margin="{TemplateBinding hc:Badge.BadgeMargin}"
              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
              Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Visibility="{TemplateBinding ShowBadge, Converter={StaticResource Boolean2VisibilityConverter}}">
        <UIElement.RenderTransform>
          <ScaleTransform/>
        </UIElement.RenderTransform>
        <ContentPresenter ContentSource="Text" Margin="{TemplateBinding Control.Padding}"/>
      </Border>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <EventTrigger RoutedEvent="hc:Badge.ValueChanged">
        <BeginStoryboard>
          <Storyboard AutoReverse="True">
            <DoubleAnimation Storyboard.TargetName="Border"
                             Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0"
                             Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}"/>
            <DoubleAnimation Storyboard.TargetName="Border"
                             Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0"
                             Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}"/>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="BadgeProcessingTemplate" TargetType="{x:Type hc:Badge}">
    <hc:SimplePanel>
      <ContentPresenter/>
      <Ellipse Height="10" Width="10" Fill="{TemplateBinding Control.Background}" RenderTransformOrigin="0.5 0.5"
               Margin="{TemplateBinding hc:Badge.BadgeMargin}"
               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
               VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
               Visibility="{TemplateBinding ShowBadge, Converter={StaticResource Boolean2VisibilityConverter}}">
        <UIElement.OpacityMask>
          <RadialGradientBrush>
            <GradientStop Offset="0" Color="Transparent"/>
            <GradientStop Offset="1" Color="Black"/>
          </RadialGradientBrush>
        </UIElement.OpacityMask>
        <UIElement.RenderTransform>
          <ScaleTransform/>
        </UIElement.RenderTransform>
        <FrameworkElement.Triggers>
          <EventTrigger RoutedEvent="Loaded">
            <BeginStoryboard>
              <Storyboard RepeatBehavior="Forever" DesiredFrameRate="20">
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0"
                                 Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}"/>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0"
                                 Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}"/>
                <DoubleAnimation Storyboard.TargetProperty="Opacity" BeginTime="0" Duration="0:0:1" From="1" To="0"
                                 EasingFunction="{StaticResource SineEaseOut}"/>
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </FrameworkElement.Triggers>
      </Ellipse>
      <Border Margin="{TemplateBinding hc:Badge.BadgeMargin}" Width="10" Height="10" CornerRadius="5"
              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
              Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Visibility="{TemplateBinding ShowBadge, Converter={StaticResource Boolean2VisibilityConverter}}"/>
    </hc:SimplePanel>
  </ControlTemplate>
  <Style x:Key="BadgeBaseStyle" TargetType="{x:Type hc:Badge}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Padding" Value="6,2"/>
    <Setter Property="Control.Template" Value="{StaticResource BadgeTextTemplate}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Right"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="hc:Badge.BadgeMargin" Value="0,-10,-10,0"/>
    <Style.Triggers>
      <Trigger Property="hc:Badge.Status" Value="Dot">
        <Setter Property="Control.Template" Value="{StaticResource BadgeDotTemplate}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="hc:Badge.BadgeMargin" Value="0,-5,-5,0"/>
      </Trigger>
      <Trigger Property="hc:Badge.Status" Value="Processing">
        <Setter Property="Control.Template" Value="{StaticResource BadgeProcessingTemplate}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="hc:Badge.BadgeMargin" Value="0,-5,-5,0"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CardBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:Card}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Card}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Visibility="{TemplateBinding Header, Converter={StaticResource Object2VisibilityConverter}}">
                <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding hc:Card.HeaderTemplate}"
                                  ContentTemplateSelector="{TemplateBinding hc:Card.HeaderTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding hc:Card.HeaderStringFormat}"/>
              </Border>
              <ContentPresenter Grid.Row="1"/>
              <Border Grid.Row="2" BorderThickness="0,1,0,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Visibility="{TemplateBinding Footer, Converter={StaticResource Object2VisibilityConverter}}">
                <ContentPresenter ContentSource="Footer" ContentTemplate="{TemplateBinding hc:Card.FooterTemplate}"
                                  ContentTemplateSelector="{TemplateBinding hc:Card.FooterTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding hc:Card.FooterStringFormat}"/>
              </Border>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ChatBubbleStringBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
    <hc:SimplePanel>
      <Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Control.Background}"
            HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15"
            RenderTransformOrigin="0.5,0.5"/>
      <Border Name="Body" Background="{TemplateBinding Control.Background}" CornerRadius="15" Margin="0,0,3,0">
        <TextBlock TextWrapping="Wrap" Text="{TemplateBinding ContentControl.Content}" VerticalAlignment="Center"
                   Margin="{TemplateBinding Control.Padding}"/>
      </Border>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
        <Setter TargetName="Tail" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter TargetName="Tail" Property="UIElement.RenderTransform">
          <Setter.Value>
            <TransformGroup>
              <ScaleTransform ScaleY="1" ScaleX="-1"/>
            </TransformGroup>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Body" Property="FrameworkElement.Margin" Value="3,0,0,0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ChatBubbleImageBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
    <hc:SimplePanel>
      <Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Control.Background}"
            HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15"
            RenderTransformOrigin="0.5,0.5"/>
      <Border Name="Body" Background="{TemplateBinding Control.Background}" CornerRadius="15" Margin="0,0,3,0">
        <hc:SimplePanel>
          <Image Margin="{TemplateBinding Control.Padding}" VerticalAlignment="Center"
                 Source="{TemplateBinding ContentControl.Content}"/>
          <Border BorderThickness="{TemplateBinding Control.Padding}"
                  BorderBrush="{TemplateBinding Control.Background}" CornerRadius="15" Background="{x:Null}"/>
        </hc:SimplePanel>
      </Border>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
        <Setter TargetName="Tail" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter TargetName="Tail" Property="UIElement.RenderTransform">
          <Setter.Value>
            <TransformGroup>
              <ScaleTransform ScaleY="1" ScaleX="-1"/>
            </TransformGroup>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Body" Property="FrameworkElement.Margin" Value="3,0,0,0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ChatBubbleAudioBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition x:Name="Definition1" Width="12"/>
        <ColumnDefinition x:Name="Definition2"/>
      </Grid.ColumnDefinitions>
      <Ellipse Name="Dot" VerticalAlignment="Top" Fill="{DynamicResource DangerBrush}" Width="6" Height="6"
               Margin="0,0,6,0"
               Visibility="{TemplateBinding IsRead, Converter={StaticResource Boolean2VisibilityReConverter}}"/>
      <Path Name="Tail" Grid.Column="1" Data="{StaticResource BubbleTailGeometry}"
            Fill="{TemplateBinding Control.Background}" HorizontalAlignment="Right" Stretch="Uniform"
            VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5"/>
      <Border Name="Body" Grid.Column="1" Background="{TemplateBinding Control.Background}" CornerRadius="15"
              Margin="0,0,3,0">
        <Grid VerticalAlignment="Center" Margin="{TemplateBinding Control.Padding}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <ContentPresenter Name="Presenter" VerticalAlignment="Center"/>
          <Path Name="Audio" Grid.Column="1" Data="{StaticResource AudioGeometry}"
                Fill="{TemplateBinding Control.Foreground}" Width="16" Height="16" Margin="6,0,0,0"
                RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <ScaleTransform ScaleY="1" ScaleX="-1"/>
              </TransformGroup>
            </UIElement.RenderTransform>
          </Path>
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
        <Setter TargetName="Tail" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter TargetName="Tail" Property="UIElement.RenderTransform">
          <Setter.Value>
            <TransformGroup>
              <ScaleTransform ScaleY="1" ScaleX="-1"/>
            </TransformGroup>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Tail" Property="Grid.Column" Value="0"/>
        <Setter TargetName="Dot" Property="Grid.Column" Value="1"/>
        <Setter TargetName="Dot" Property="FrameworkElement.Margin" Value="6,0,0,0"/>
        <Setter TargetName="Body" Property="FrameworkElement.Margin" Value="3,0,0,0"/>
        <Setter TargetName="Body" Property="Grid.Column" Value="0"/>
        <Setter TargetName="Definition1" Property="ColumnDefinition.Width" Value="Auto"/>
        <Setter TargetName="Definition2" Property="ColumnDefinition.Width" Value="12"/>
        <Setter TargetName="Audio" Property="Grid.Column" Value="0"/>
        <Setter TargetName="Audio" Property="FrameworkElement.Margin" Value="0,0,6,0"/>
        <Setter TargetName="Audio" Property="UIElement.RenderTransform">
          <Setter.Value>
            <TransformGroup>
              <ScaleTransform ScaleY="1" ScaleX="1"/>
            </TransformGroup>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Presenter" Property="Grid.Column" Value="1"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ChatBubbleCustomBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
    <hc:SimplePanel>
      <Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Control.Background}"
            HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15"
            RenderTransformOrigin="0.5,0.5"/>
      <Border Name="Body" Background="{TemplateBinding Control.Background}" CornerRadius="15" Margin="0,0,3,0">
        <ContentPresenter VerticalAlignment="Center" Margin="{TemplateBinding Control.Padding}"/>
      </Border>
    </hc:SimplePanel>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
        <Setter TargetName="Tail" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter TargetName="Tail" Property="UIElement.RenderTransform">
          <Setter.Value>
            <TransformGroup>
              <ScaleTransform ScaleY="1" ScaleX="-1"/>
            </TransformGroup>
          </Setter.Value>
        </Setter>
        <Setter TargetName="Body" Property="FrameworkElement.Margin" Value="3,0,0,0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ChatBubbleBaseStyle" TargetType="{x:Type hc:ChatBubble}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
    <Setter Property="Control.Background" Value="{DynamicResource DarkPrimaryBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="Control.Padding" Value="10"/>
    <Setter Property="FrameworkElement.Margin" Value="10"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template" Value="{StaticResource ChatBubbleStringBaseTemplate}"/>
    <Setter Property="hc:ChatBubble.IsRead" Value="{Binding IsSelected, RelativeSource={RelativeSource Self}}"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="280"/>
    <Style.Triggers>
      <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
      </Trigger>
      <Trigger Property="hc:ChatBubble.Type" Value="Image">
        <Setter Property="Control.Template" Value="{StaticResource ChatBubbleImageBaseTemplate}"/>
        <Setter Property="FrameworkElement.MaxHeight" Value="280"/>
      </Trigger>
      <Trigger Property="hc:ChatBubble.Type" Value="Audio">
        <Setter Property="Control.Template" Value="{StaticResource ChatBubbleAudioBaseTemplate}"/>
      </Trigger>
      <Trigger Property="hc:ChatBubble.Type" Value="Custom">
        <Setter Property="Control.Template" Value="{StaticResource ChatBubbleCustomBaseTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Tag4CheckComboBoxStyle" BasedOn="{StaticResource TagBaseStyle}" TargetType="{x:Type hc:Tag}">
    <Setter Property="Control.Padding" Value="6,2,4,2"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Tag}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              <Button Name="ButtonClose" Focusable="False" Command="interactivity:ControlCommands.Close"
                      Margin="10,0,0,0" Width="16" Height="16" Padding="0,4" Grid.Column="1"
                      Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource CloseGeometry}"
                      Foreground="{TemplateBinding Control.Foreground}"
                      Visibility="{TemplateBinding ShowCloseButton, Converter={StaticResource Boolean2VisibilityConverter}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{StaticResource DeleteFillCircleGeometry}" TargetName="ButtonClose"
                      Property="hc:IconElement.Geometry"/>
              <Setter TargetName="ButtonClose" Property="Control.Padding" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckComboBoxItemBaseStyle" TargetType="{x:Type hc:CheckComboBoxItem}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CheckComboBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                  Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='1,0,1,0'}">
            <CheckBox Foreground="{TemplateBinding Control.Foreground}" HorizontalAlignment="Stretch"
                      MinHeight="{TemplateBinding FrameworkElement.MinHeight}" FocusVisualStyle="{x:Null}"
                      IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </CheckBox>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="CheckComboBoxTemplate" TargetType="{x:Type hc:CheckComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <ToggleButton ClickMode="Release" BorderThickness="0" Grid.Column="1" Height="Auto" Width="Auto"
                    HorizontalContentAlignment="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                    hc:IconElement.Width="14" Style="{StaticResource ToggleButtonIconTransparent}"
                    hc:IconElement.Geometry="{StaticResource DownGeometry}"
                    hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                    Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      <Border Grid.Column="0" Margin="-4 0">
        <hc:UniformSpacingPanel x:Name="PART_Panel" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" Spacing="{TemplateBinding hc:CheckComboBox.TagSpacing}"
                                ChildWrapping="Wrap" ItemVerticalAlignment="Center"/>
      </Border>
      <Popup x:Name="PART_Popup" StaysOpen="False" AllowsTransparency="true" Grid.ColumnSpan="2"
             PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
             IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
        <Decorator Margin="8 0">
          <Border x:Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0"
                  Margin="0,0,0,8" MaxHeight="{TemplateBinding hc:CheckComboBox.MaxDropDownHeight}"
                  BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                  MinWidth="{Binding ActualWidth, ElementName=border}">
            <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
              <hc:ToggleBlock.CheckedContent>
                <Grid Margin="2" ClipToBounds="False">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                  </Grid.RowDefinitions>
                  <hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemsControl.ItemContainerStyle}"
                                        IsEnabled="{TemplateBinding hc:CheckComboBox.ShowSelectAllButton}"
                                        HorizontalContentAlignment="Stretch"
                                        Visibility="{Binding ShowSelectAllButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                                        Content="{ex:Lang Key={x:Static langs:LangKeys.All}}"/>
                  <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                  </ScrollViewer>
                </Grid>
              </hc:ToggleBlock.CheckedContent>
              <hc:ToggleBlock.UnCheckedContent>
                <hc:Empty/>
              </hc:ToggleBlock.UnCheckedContent>
            </hc:ToggleBlock>
          </Border>
        </Decorator>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="CheckComboBoxBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type hc:CheckComboBox}">
    <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle}"/>
    <Setter Property="hc:CheckComboBox.TagSpacing" Value="4"/>
    <Setter Property="ListBox.SelectionMode" Value="Multiple"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource CheckComboBoxItemBaseStyle}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Padding" Value="8,4"/>
    <Setter Property="Control.Template" Value="{StaticResource CheckComboBoxTemplate}"/>
  </Style>
  <ControlTemplate x:Key="CheckComboBoxExtendTopTemplate" TargetType="{x:Type hc:CheckComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=hc:CheckComboBox}, Converter={StaticResource Object2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ToggleButton ClickMode="Release" BorderThickness="0" Grid.Column="1" Height="Auto" Width="Auto"
                      HorizontalContentAlignment="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      hc:IconElement.Width="14" Style="{StaticResource ToggleButtonIconTransparent}"
                      hc:IconElement.Geometry="{StaticResource DownGeometry}"
                      hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                      Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Border Grid.Column="0" Margin="-4 0">
          <hc:UniformSpacingPanel x:Name="PART_Panel" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" Spacing="{TemplateBinding hc:CheckComboBox.TagSpacing}"
                                  ChildWrapping="Wrap" ItemVerticalAlignment="Center"/>
        </Border>
        <Popup x:Name="PART_Popup" StaysOpen="False" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding hc:CheckComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <Grid Margin="2" ClipToBounds="False">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition/>
                    </Grid.RowDefinitions>
                    <hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemsControl.ItemContainerStyle}"
                                          IsEnabled="{TemplateBinding hc:CheckComboBox.ShowSelectAllButton}"
                                          HorizontalContentAlignment="Stretch"
                                          Visibility="{Binding ShowSelectAllButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                                          Content="{ex:Lang Key={x:Static langs:LangKeys.All}}"/>
                    <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </ScrollViewer>
                  </Grid>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CheckComboBoxExtendLeftTemplate" TargetType="{x:Type hc:CheckComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true"
          MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=hc:CheckComboBox}, Converter={StaticResource Object2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ToggleButton ClickMode="Release" BorderThickness="0" Grid.Column="1" Height="Auto" Width="Auto"
                      HorizontalContentAlignment="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      hc:IconElement.Width="14" Style="{StaticResource ToggleButtonIconTransparent}"
                      hc:IconElement.Geometry="{StaticResource DownGeometry}"
                      hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                      Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Border Grid.Column="0" Margin="-4 0">
          <hc:UniformSpacingPanel x:Name="PART_Panel" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" Spacing="{TemplateBinding hc:CheckComboBox.TagSpacing}"
                                  ChildWrapping="Wrap" ItemVerticalAlignment="Center"/>
        </Border>
        <Popup x:Name="PART_Popup" StaysOpen="False" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding hc:CheckComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <Grid Margin="2" ClipToBounds="False">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition/>
                    </Grid.RowDefinitions>
                    <hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemsControl.ItemContainerStyle}"
                                          IsEnabled="{TemplateBinding hc:CheckComboBox.ShowSelectAllButton}"
                                          HorizontalContentAlignment="Stretch"
                                          Visibility="{Binding ShowSelectAllButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                                          Content="{ex:Lang Key={x:Static langs:LangKeys.All}}"/>
                    <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </ScrollViewer>
                  </Grid>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="CheckComboBoxExtendBaseStyle" BasedOn="{StaticResource CheckComboBoxBaseStyle}"
         TargetType="{x:Type hc:CheckComboBox}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Template" Value="{StaticResource CheckComboBoxExtendTopTemplate}"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource CheckComboBoxExtendLeftTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="CheckComboBoxPlusTopTemplate" TargetType="{x:Type hc:CheckComboBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel Grid.ColumnSpan="2" LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=hc:CheckComboBox}, Converter={StaticResource Object2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ToggleButton ClickMode="Release" BorderThickness="0" Grid.Column="2" Height="Auto" Width="Auto"
                      HorizontalContentAlignment="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      hc:IconElement.Width="14" Style="{StaticResource ToggleButtonIconTransparent}"
                      hc:IconElement.Geometry="{StaticResource DownGeometry}"
                      hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                      Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Border Grid.Column="0" Margin="-4 0">
          <hc:UniformSpacingPanel x:Name="PART_Panel" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" Spacing="{TemplateBinding hc:CheckComboBox.TagSpacing}"
                                  ChildWrapping="Wrap" ItemVerticalAlignment="Center"/>
        </Border>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Hidden" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,4,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" StaysOpen="False" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding hc:CheckComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <Grid Margin="2" ClipToBounds="False">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition/>
                    </Grid.RowDefinitions>
                    <hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemsControl.ItemContainerStyle}"
                                          IsEnabled="{TemplateBinding hc:CheckComboBox.ShowSelectAllButton}"
                                          HorizontalContentAlignment="Stretch"
                                          Visibility="{Binding ShowSelectAllButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                                          Content="{ex:Lang Key={x:Static langs:LangKeys.All}}"/>
                    <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </ScrollViewer>
                  </Grid>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CheckComboBoxPlusLeftTemplate" TargetType="{x:Type hc:CheckComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true"
          MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="contentPanel" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <TextBlock Grid.Column="0" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                   Style="{StaticResource TextBlockDefaultThiLight}"
                   Visibility="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=hc:CheckComboBox}, Converter={StaticResource Object2VisibilityReConverter}}"
                   Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ToggleButton ClickMode="Release" BorderThickness="0" Grid.Column="2" Height="Auto" Width="Auto"
                      HorizontalContentAlignment="Left" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                      hc:IconElement.Width="14" Style="{StaticResource ToggleButtonIconTransparent}"
                      hc:IconElement.Geometry="{StaticResource DownGeometry}"
                      hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                      Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Border Grid.Column="0" Margin="-4 0">
          <hc:UniformSpacingPanel x:Name="PART_Panel" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" Spacing="{TemplateBinding hc:CheckComboBox.TagSpacing}"
                                  ChildWrapping="Wrap" ItemVerticalAlignment="Center"/>
        </Border>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Hidden" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,4,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Popup x:Name="PART_Popup" StaysOpen="False" AllowsTransparency="true" Margin="1"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" PlacementTarget="{Binding ElementName=border}"
               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
          <Decorator Margin="8 0">
            <Border x:Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0"
                    Margin="0,0,0,8" MaxHeight="{TemplateBinding hc:CheckComboBox.MaxDropDownHeight}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="{Binding ActualWidth, ElementName=border}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <Grid Margin="2" ClipToBounds="False">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition/>
                    </Grid.RowDefinitions>
                    <hc:CheckComboBoxItem x:Name="PART_SelectAll" Style="{TemplateBinding ItemsControl.ItemContainerStyle}"
                                          IsEnabled="{TemplateBinding hc:CheckComboBox.ShowSelectAllButton}"
                                          HorizontalContentAlignment="Stretch"
                                          Visibility="{Binding ShowSelectAllButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                                          Content="{ex:Lang Key={x:Static langs:LangKeys.All}}"/>
                    <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="1">
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </ScrollViewer>
                  </Grid>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
          </Decorator>
        </Popup>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MaxWidth"/>
        <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=border}"
                Property="FrameworkElement.MinWidth"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="contentPanel" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="contentPanel" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="CheckComboBoxPlusBaseStyle" BasedOn="{StaticResource CheckComboBoxExtendBaseStyle}"
         TargetType="{x:Type hc:CheckComboBox}">
    <Setter Property="Control.Template" Value="{StaticResource CheckComboBoxPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource CheckComboBoxPlusLeftTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ColorPickerSliderHorizontal" TargetType="{x:Type Slider}">
    <hc:SimplePanel>
      <Border Margin="7,0" Background="{TemplateBinding Control.Background}" MaxHeight="11" CornerRadius="2"/>
      <Border Margin="7,0" Background="{TemplateBinding Control.Foreground}" MaxHeight="11" CornerRadius="2">
        <UIElement.OpacityMask>
          <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
            <GradientStop Color="Transparent" Offset="1"/>
            <GradientStop Color="White" Offset="0"/>
          </LinearGradientBrush>
        </UIElement.OpacityMask>
      </Border>
      <Track x:Name="PART_Track">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                        Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="Thumb" Focusable="False" Height="13" Width="13" OverridesDefaultStyle="True"
                 Template="{StaticResource ColorPickerSliderThumbTemplate}" VerticalAlignment="Center">
            <UIElement.Effect>
              <DropShadowEffect ShadowDepth="0" Opacity=".6"/>
            </UIElement.Effect>
          </Thumb>
        </Track.Thumb>
      </Track>
    </hc:SimplePanel>
  </ControlTemplate>
  <ControlTemplate x:Key="ColorPickerSliderVertical" TargetType="{x:Type Slider}">
    <hc:SimplePanel>
      <Border Margin="0,7" CornerRadius="2" MaxWidth="11" Background="{TemplateBinding Control.Background}"/>
      <Border Margin="0,7" CornerRadius="2" MaxWidth="11" Background="{TemplateBinding Control.Foreground}">
        <UIElement.OpacityMask>
          <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
            <GradientStop Color="Transparent" Offset="1"/>
            <GradientStop Color="White" Offset="0"/>
          </LinearGradientBrush>
        </UIElement.OpacityMask>
      </Border>
      <Track x:Name="PART_Track">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                        Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource ColorPickerSliderRepeatButtonBaseStyle}"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="Thumb" Focusable="False" Height="13" OverridesDefaultStyle="True"
                 Template="{StaticResource ColorPickerSliderThumbTemplate}" VerticalAlignment="Top" Width="13">
            <UIElement.Effect>
              <DropShadowEffect ShadowDepth="0" Opacity=".6"/>
            </UIElement.Effect>
          </Thumb>
        </Track.Thumb>
      </Track>
    </hc:SimplePanel>
  </ControlTemplate>
  <Style x:Key="ColorPickerSlider" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Slider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="Transparent"/>
    <Setter Property="Control.Template" Value="{StaticResource ColorPickerSliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="Slider.Orientation" Value="Vertical">
        <Setter Property="Control.Template" Value="{StaticResource ColorPickerSliderVertical}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ColorPickerBaseStyle" TargetType="{x:Type hc:ColorPicker}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Width" Value="230"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ColorPicker}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="122"/>
              <RowDefinition Height="110"/>
              <RowDefinition Height="62"/>
              <RowDefinition Height="62"/>
            </Grid.RowDefinitions>
            <Border BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Grid.RowSpan="4"
                    Background="{TemplateBinding Control.Background}"/>
            <hc:SimplePanel Margin="1" Grid.Row="0">
              <Border Background="{TemplateBinding hc:ColorPicker.BackColor}"/>
              <Border>
                <Border.Background>
                  <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                    <GradientStop Color="White" Offset="1"/>
                    <GradientStop Color="#80ffffff" Offset=".5"/>
                    <GradientStop Color="#00ffffff"/>
                  </LinearGradientBrush>
                </Border.Background>
              </Border>
              <Border>
                <Border.Background>
                  <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="1"/>
                    <GradientStop Color="#80000000" Offset=".5"/>
                    <GradientStop Color="#00000000"/>
                  </LinearGradientBrush>
                </Border.Background>
              </Border>
            </hc:SimplePanel>
            <Border Name="PART_BorderColor" Grid.Row="0" CornerRadius="2,2,0,0" ClipToBounds="True">
              <Canvas Margin="-6">
                <Border Name="PART_BorderPicker" Background="Transparent" Height="12" CornerRadius="6" Width="12"
                        BorderThickness="1" BorderBrush="White">
                  <UIElement.Effect>
                    <DropShadowEffect ShadowDepth="0" Opacity=".4"/>
                  </UIElement.Effect>
                </Border>
              </Canvas>
            </Border>
            <Border Name="PART_BorderDrag" Grid.Row="0" Background="Transparent"/>
            <Grid Margin="16,16,10,0" Row="1">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="28"/>
              </Grid.ColumnDefinitions>
              <ToggleButton Name="PART_ButtonDropper" Width="16" Height="16" Margin="0,0,10,0"
                            Style="{StaticResource ToggleButtonCustom}" hc:StatusSwitchElement.HideUncheckedElement="True">
                <Path Stretch="Uniform" Data="{StaticResource DropperGeometry}" Fill="{DynamicResource PrimaryTextBrush}"/>
                <hc:StatusSwitchElement.CheckedElement>
                  <Path Stretch="Uniform" Data="{StaticResource DropperGeometry}" Fill="{DynamicResource DarkPrimaryBrush}"/>
                </hc:StatusSwitchElement.CheckedElement>
              </ToggleButton>
              <Border Grid.Row="0" Grid.Column="1" Width="32" Height="32" CornerRadius="16"
                      Background="{StaticResource ColorPickerOpacityBrush}" BorderBrush="{DynamicResource BorderBrush}"
                      BorderThickness="1"/>
              <Border Grid.Row="0" Grid.Column="1" Width="32" Height="32" CornerRadius="16"
                      Background="{TemplateBinding hc:ColorPicker.SelectedBrush}"
                      BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1"/>
              <Slider Name="PART_SliderColor" LargeChange="0.01" SmallChange="0.01" Grid.ColumnSpan="2" Value="6"
                      Maximum="6" Background="{StaticResource ColorPickerRainbowBrush}" Margin="2,1,0,0" Grid.Row="0"
                      Grid.Column="2" VerticalAlignment="Top" Style="{StaticResource ColorPickerSlider}"
                      IsMoveToPointEnabled="True"/>
              <Slider Name="PART_SliderOpacity" Grid.ColumnSpan="2" IsSnapToTickEnabled="True" Maximum="255"
                      SmallChange="1" Foreground="{TemplateBinding hc:ColorPicker.SelectedBrushWithoutOpacity}"
                      Background="{StaticResource ColorPickerOpacityBrush}" Margin="2,0,0,0" Grid.Row="0" Grid.Column="2"
                      VerticalAlignment="Bottom" Style="{StaticResource ColorPickerSlider}" IsMoveToPointEnabled="True"
                      Value="{Binding ChannelA, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
              <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="0,14,0,0" VerticalAlignment="Top"
                          Visibility="{Binding ShowList[0], RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
                <TextBox Padding="0" HorizontalContentAlignment="Center" Width="176" FontSize="10" MaxLength="10"
                         Height="24"
                         Text="{Binding SelectedBrush, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, Converter={StaticResource Color2HexStringConverter}, UpdateSourceTrigger=LostFocus}"/>
                <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="HEX"
                           HorizontalAlignment="Center"/>
              </StackPanel>
              <UniformGrid Name="PART_PanelRgb" Rows="1" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="-2,14,-2,0"
                           VerticalAlignment="Top"
                           Visibility="{Binding ShowList[1], RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
                <StackPanel Margin="2,0">
                  <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="2,0" Tag="R" ShowUpDownButton="False" Maximum="255"
                                    Minimum="0" FontSize="10" Height="24"
                                    Value="{Binding ChannelR, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                  <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="R"
                             HorizontalAlignment="Center"/>
                </StackPanel>
                <StackPanel Margin="2,0">
                  <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Tag="G" ShowUpDownButton="False" Maximum="255"
                                    Minimum="0" FontSize="10" Height="24"
                                    Value="{Binding ChannelG, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                  <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="G"
                             HorizontalAlignment="Center"/>
                </StackPanel>
                <StackPanel Margin="2,0">
                  <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Tag="B" ShowUpDownButton="False" Maximum="255"
                                    Minimum="0" FontSize="10" Height="24"
                                    Value="{Binding ChannelB, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                  <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="B"
                             HorizontalAlignment="Center"/>
                </StackPanel>
                <StackPanel Margin="2,0">
                  <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" ShowUpDownButton="False" Maximum="255" Minimum="0"
                                    FontSize="10" Height="24"
                                    Value="{Binding ChannelA, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                  <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" FontSize="10" Text="A"
                             HorizontalAlignment="Center"/>
                </StackPanel>
              </UniformGrid>
              <Button Command="interactivity:ControlCommands.Switch" Padding="6" FontSize="8" BorderThickness="0"
                      HorizontalAlignment="Right" Height="24" Width="20" Grid.Column="3" Grid.Row="1">
                <ContentControl.Content>
                  <Path Fill="#323534" Style="{StaticResource UpDownPathStyle}"/>
                </ContentControl.Content>
              </Button>
            </Grid>
            <Border Grid.Row="2" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
              <WrapPanel Name="PART_PanelColor" Margin="6" HorizontalAlignment="Center"/>
            </Border>
            <Border Grid.Row="3" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
              <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Button Command="interactivity:ControlCommands.Cancel" Width="80" Margin="0,0,16,0"
                        Content="{ex:Lang Key={x:Static langs:LangKeys.Cancel}}"/>
                <Button Command="interactivity:ControlCommands.Confirm" Width="80" Style="{StaticResource ButtonPrimary}"
                        Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}"/>
              </StackPanel>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuBaseStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="hc:MenuAttach.ItemPadding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="hc:MenuAttach.PopupVerticalOffset" Value="-9"/>
    <Setter Property="hc:MenuAttach.PopupHorizontalOffset" Value="10"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Padding" Value="2,2,2,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Effect="{StaticResource EffectShadow2}" Margin="8"
                  Background="{TemplateBinding Control.Background}"
                  MaxHeight="{TemplateBinding FrameworkElement.MaxHeight}" BorderThickness="1"
                  BorderBrush="{DynamicResource BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="{TemplateBinding Control.Padding}">
              <ItemsPresenter/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CoverViewContentBaseStyle" TargetType="{x:Type hc:CoverViewContent}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,8"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CoverViewContent}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="16"/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <Border x:Name="PART_Triangle" Visibility="Visible" Grid.Row="0" Width="30" Height="30" BorderThickness="1"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" RenderTransformOrigin="0.5,0.5"
                    HorizontalAlignment="Left" VerticalAlignment="Top" Grid.RowSpan="2">
              <UIElement.RenderTransform>
                <TransformGroup>
                  <TranslateTransform X="5" Y="5"/>
                  <RotateTransform Angle="45"/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Border>
            <Border x:Name="PART_Content" MinHeight="30" Height="0" Grid.Row="1"
                    Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <ContentPresenter Margin="{TemplateBinding Control.Padding}"/>
            </Border>
            <Rectangle SnapsToDevicePixels="True" Grid.Row="1" VerticalAlignment="Top" HorizontalAlignment="Left"
                       Width="28" Height="1" Fill="{TemplateBinding Control.Background}"
                       Visibility="{Binding Visibility, ElementName=PART_Triangle}"
                       Margin="{Binding Margin, ElementName=PART_Triangle}">
              <UIElement.RenderTransform>
                <TransformGroup>
                  <TranslateTransform X="1"/>
                </TransformGroup>
              </UIElement.RenderTransform>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CoverViewBaseStyle" TargetType="{x:Type hc:CoverView}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource CoverViewItemBaseStyle}"/>
    <Setter Property="hc:CoverView.CoverViewContentStyle" Value="{StaticResource CoverViewContentBaseStyle}"/>
    <Setter Property="hc:RegularItemsControl.ItemMargin" Value="8"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CoverView}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <WrapPanel x:Name="PART_Panel"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">
    <Setter Property="Control.Foreground"
            Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=DatePicker}}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
          <hc:SimplePanel>
            <TextBlock VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                       Margin="{TemplateBinding Control.Padding}"
                       TextElement.Foreground="{DynamicResource ThirdlyTextBrush}"
                       Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource AncestorType=DatePicker}}"
                       Visibility="{TemplateBinding Text, Converter={StaticResource String2VisibilityReConverter}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DatePickerBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type DatePicker}">
    <Setter Property="DatePicker.CalendarStyle" Value="{StaticResource CalendarBaseStyle}"/>
    <Setter Property="DatePicker.IsTodayHighlighted" Value="True"/>
    <Setter Property="DatePicker.SelectedDateFormat" Value="Short"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DatePicker}">
          <Grid x:Name="PART_Root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                    hc:IconElement.Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False"
                    Grid.Row="0"
                    Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                    Foreground="{Binding BorderBrush, ElementName=border}"/>
            <DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" Grid.Column="0"
                               Focusable="{TemplateBinding UIElement.Focusable}"
                               HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                               VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                               Style="{StaticResource DatePickerTextBoxStyle}"/>
            <Popup x:Name="PART_Popup" Grid.Column="0"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
                   PlacementTarget="{Binding ElementName=border}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
              <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
              <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="DatePickerExtendTopTemplate" TargetType="{x:Type DatePicker}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False"
                Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" Grid.Column="0"
                           Focusable="{TemplateBinding UIElement.Focusable}"
                           HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                           VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Style="{StaticResource DatePickerTextBoxStyle}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="DatePickerExtendLeftTemplate" TargetType="{x:Type DatePicker}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False"
                Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" Grid.Column="0"
                           Focusable="{TemplateBinding UIElement.Focusable}"
                           HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                           VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Style="{StaticResource DatePickerTextBoxStyle}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DatePickerExtendBaseStyle" BasedOn="{StaticResource DatePickerBaseStyle}"
         TargetType="{x:Type DatePicker}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template" Value="{StaticResource DatePickerExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource DatePickerExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="DatePickerPlusTopTemplate" TargetType="{x:Type hc:DatePicker}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource CalendarGeometry}"
                Grid.Column="2" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" Grid.Column="0"
                           Focusable="{TemplateBinding UIElement.Focusable}"
                           HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                           VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Style="{StaticResource DatePickerTextBoxStyle}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="ButtonClear" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:InfoElement.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="DatePickerPlusLeftTemplate" TargetType="{x:Type hc:DatePicker}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource CalendarGeometry}"
                Grid.Column="2" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <DatePickerTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" Grid.Column="0"
                           Focusable="{TemplateBinding UIElement.Focusable}"
                           HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                           VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Style="{StaticResource DatePickerTextBoxStyle}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="ButtonClear" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:InfoElement.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DatePickerPlusBaseStyle" BasedOn="{StaticResource DatePickerExtendBaseStyle}"
         TargetType="{x:Type hc:DatePicker}">
    <Setter Property="hc:DatePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template" Value="{StaticResource DatePickerPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource DatePickerPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DateTimePickerBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type hc:DateTimePicker}">
    <Setter Property="hc:DateTimePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:DateTimePicker}">
          <Grid x:Name="PART_Root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                    hc:IconElement.Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False"
                    Grid.Row="0"
                    Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                    Foreground="{Binding BorderBrush, ElementName=border}"/>
            <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:DateTimePicker.CaretBrush}"
                                 Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                                 HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            <Popup x:Name="PART_Popup" Grid.Column="0"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
                   PlacementTarget="{Binding ElementName=border}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
              <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
              <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="DateTimePickerExtendTopTemplate" TargetType="{x:Type hc:DateTimePicker}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False"
                Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:DateTimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="DateTimePickerExtendLeftTemplate" TargetType="{x:Type hc:DateTimePicker}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False"
                Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:DateTimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DateTimePickerExtendBaseStyle" BasedOn="{StaticResource DateTimePickerBaseStyle}"
         TargetType="{x:Type hc:DateTimePicker}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template" Value="{StaticResource DateTimePickerExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource DateTimePickerExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="DateTimePickerPlusTopTemplate" TargetType="{x:Type hc:DateTimePicker}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource ClockGeometry}"
                Grid.Column="2" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:DateTimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="ButtonClear" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:InfoElement.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="DateTimePickerPlusLeftTemplate" TargetType="{x:Type hc:DateTimePicker}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource ClockGeometry}"
                Grid.Column="2" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:DateTimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="ButtonClear" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:InfoElement.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DateTimePickerPlusBaseStyle" BasedOn="{StaticResource DateTimePickerExtendBaseStyle}"
         TargetType="{x:Type hc:DateTimePicker}">
    <Setter Property="Control.Template" Value="{StaticResource DateTimePickerPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource DateTimePickerPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DialogBaseStyle" TargetType="{x:Type hc:Dialog}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="hc:Dialog.MaskBrush" Value="{DynamicResource DarkOpacityBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Dialog}">
          <Border x:Name="PART_BackElement" Background="{TemplateBinding hc:Dialog.MaskBrush}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DividerBaseStyle" TargetType="{x:Type hc:Divider}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Margin" Value="0,24"/>
    <Setter Property="Control.Padding" Value="24,0"/>
    <Setter Property="hc:Divider.LineStroke" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Divider}">
          <hc:Row>
            <hc:Col x:Name="ColStart" Layout="12">
              <Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding hc:Divider.LineStrokeDashArray}"
                    Stroke="{TemplateBinding hc:Divider.LineStroke}" X2="1"
                    StrokeThickness="{TemplateBinding hc:Divider.LineStrokeThickness}" Stretch="Fill"
                    StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
            </hc:Col>
            <hc:Col IsFixed="True">
              <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                                ContentTemplateSelector="{TemplateBinding hc:Divider.ContentTemplateSelector}"
                                ContentStringFormat="{TemplateBinding hc:Divider.ContentStringFormat}"
                                ContentTemplate="{TemplateBinding hc:Divider.ContentTemplate}"/>
            </hc:Col>
            <hc:Col x:Name="ColEnd" Layout="12">
              <Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding hc:Divider.LineStrokeDashArray}"
                    Stroke="{TemplateBinding hc:Divider.LineStroke}" X2="1"
                    StrokeThickness="{TemplateBinding hc:Divider.LineStrokeThickness}" Stretch="Fill"
                    StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
            </hc:Col>
          </hc:Row>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="hc:Divider.Content">
              <Setter Property="Control.Padding" Value="0"/>
            </Trigger>
            <Trigger Property="Control.HorizontalContentAlignment" Value="Left">
              <Setter TargetName="ColStart" Property="hc:Col.Layout" Value="0"/>
              <Setter TargetName="ColStart" Property="hc:Col.IsFixed" Value="True"/>
              <Setter TargetName="ColStart" Property="FrameworkElement.Width" Value="20"/>
              <Setter TargetName="ColEnd" Property="hc:Col.Layout" Value="24"/>
            </Trigger>
            <Trigger Property="Control.HorizontalContentAlignment" Value="Right">
              <Setter TargetName="ColEnd" Property="hc:Col.Layout" Value="0"/>
              <Setter TargetName="ColEnd" Property="hc:Col.IsFixed" Value="True"/>
              <Setter TargetName="ColEnd" Property="FrameworkElement.Width" Value="20"/>
              <Setter TargetName="ColStart" Property="hc:Col.Layout" Value="24"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="hc:Divider.Content" Value="{x:Null}">
        <Setter Property="Control.Padding" Value="0"/>
      </Trigger>
      <Trigger Property="hc:Divider.Orientation" Value="Vertical">
        <Setter Property="FrameworkElement.Margin" Value="6,0"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type hc:Divider}">
              <Line HorizontalAlignment="Center" StrokeDashArray="{TemplateBinding hc:Divider.LineStrokeDashArray}"
                    Stroke="{TemplateBinding hc:Divider.LineStroke}" Y2="1"
                    StrokeThickness="{TemplateBinding hc:Divider.LineStrokeThickness}" Stretch="Fill"
                    StrokeEndLineCap="Square" StrokeStartLineCap="Square"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DrawerBaseStyle" TargetType="{x:Type hc:Drawer}">
    <Setter Property="hc:Drawer.Dock" Value="Right"/>
    <Setter Property="hc:Drawer.MaskBrush" Value="{DynamicResource DarkOpacityBrush}"/>
  </Style>
  <DrawingBrush x:Key="EmptySimpleLogo" o:Freeze="True">
    <DrawingBrush.Drawing>
      <DrawingGroup o:Freeze="True">
        <GeometryDrawing o:Freeze="True" Brush="{DynamicResource SecondaryRegionBrush}"
                         Geometry="F1 M 1638,1024 0,0 0,844.8 C 0,942.250667 361.096533,1021.269333 806.536533,1021.269333 1251.976533,1021.269333 1613.038933,942.250666 1613.038933,844.8 1613.038933,747.383467 1251.9424,668.398933 806.536533,668.398933 361.096533,668.398933 0,747.383467 0,844.8 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="{DynamicResource BorderBrush}"
                         Geometry="F1 M 1638,1024 0,0 1398.784,580.164267 L 214.254933,580.164267 214.254933,330.6496 473.873067,35.771733 C 486.4,13.1072 509.1328,0.477867 531.797333,0.477867 L 1081.2416,0.477867 C 1103.940267,0.477867 1126.638933,13.1072 1141.725867,38.2976 L 1398.818133,330.6496 1398.818133,580.164267 M 239.479467,555.008 L 1373.627733,555.008 1373.627733,338.261333 1121.553067,50.858667 C 1108.992,33.245867 1096.362667,23.210667 1081.2416,23.210667 L 531.797333,23.210667 C 516.676266,23.210667 504.081066,33.28 493.9776,48.401067 L 239.445333,340.753067 239.445333,554.973867 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="{DynamicResource SecondaryRegionBrush}"
                         Geometry="F1 M 1638,1024 0,0 1048.4736,413.832533 C 1048.4736,373.521066 1073.664,340.753066 1103.940267,340.753067 L 1386.222933,340.753067 1386.222933,796.945067 C 1386.222933,849.851734 1353.454933,895.249067 1310.583467,895.249067 L 302.455467,895.249067 C 262.109867,895.249067 226.850134,852.3776 226.850133,796.945067 L 226.850133,340.753067 509.1328,340.753067 C 539.374933,340.753067 564.565333,373.521067 564.565333,413.832533 564.565333,454.143999 589.755733,486.912 619.997867,486.912 L 993.041067,486.912 C 1023.2832,489.437867 1048.4736,454.144 1048.4736,413.832533 Z"/>
        <GeometryDrawing o:Freeze="True" Brush="{DynamicResource BorderBrush}"
                         Geometry="F1 M 1638,1024 0,0 1310.583467,907.844267 L 302.455467,907.844267 C 254.5664,907.844267 214.2208,857.429334 214.2208,796.910933 L 214.2208,328.192 509.1328,328.192 C 546.9184,328.192 577.160533,365.9776 577.160533,413.866667 577.160533,446.634667 597.2992,474.350934 619.997867,474.350933 L 993.041067,474.350933 C 1015.7056,474.350933 1035.8784,446.634666 1035.8784,413.866667 1035.8784,365.9776 1066.120533,328.192 1103.940267,328.192 L 1398.818133,328.192 1398.818133,796.9792 C 1398.818133,857.463467 1360.9984,907.8784 1310.583467,907.8784 M 239.445333,353.348267 L 239.445333,796.945067 C 239.445333,844.834134 267.1616,882.619734 302.455467,882.619733 L 1310.583467,882.619733 C 1345.877334,882.619733 1373.5936,844.834133 1373.5936,796.945067 L 1373.5936,353.348267 1103.940267,353.348267 C 1081.2416,353.348267 1061.0688,381.064534 1061.0688,413.832533 1061.0688,461.7216 1030.826667,499.5072 993.041067,499.5072 L 619.997867,499.5072 C 582.212267,499.5072 551.970134,461.7216 551.970133,413.832533 551.970133,381.064533 531.831466,350.8224 509.1328,350.8224 L 239.445333,350.8224 239.445333,353.348267 Z"/>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <Rectangle x:Key="LogoRectangle4Empty" x:Shared="false" HorizontalAlignment="Center" Width="64" Height="41"
             Fill="{StaticResource EmptySimpleLogo}"/>
  <TextBlock x:Key="DescriptionTextBlock4Empty" x:Shared="false" Margin="0,10,0,0" HorizontalAlignment="Center"
             Foreground="{DynamicResource ThirdlyTextBrush}"
             Text="{ex:Lang Key={x:Static langs:LangKeys.NoData}}"/>
  <Style x:Key="EmptyBaseStyle" TargetType="{x:Type hc:Empty}">
    <Setter Property="hc:Empty.Logo" Value="{StaticResource LogoRectangle4Empty}"/>
    <Setter Property="hc:Empty.Description" Value="{StaticResource DescriptionTextBlock4Empty}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="UIElement.Visibility"
            Value="{Binding Path=(hc:Empty.ShowEmpty), RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Empty}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:SimpleStackPanel Margin="{TemplateBinding Control.Padding}"
                                 HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                 VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <ContentPresenter ContentSource="Logo"/>
              <ContentPresenter ContentSource="Description"/>
              <ContentPresenter HorizontalAlignment="Center"/>
            </hc:SimpleStackPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ExpanderLeftTemplate" TargetType="{x:Type Expander}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <ToggleButton x:Name="ToggleButton" Grid.Column="1" VerticalAlignment="Stretch"
                    VerticalContentAlignment="Stretch" Focusable="False" Padding="0,0,0,10"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Foreground="{TemplateBinding Control.Foreground}"
                    MinWidth="{TemplateBinding FrameworkElement.MinWidth}" Style="{StaticResource ToggleButtonCustom}"
                    hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="30"/>
          </Grid.ColumnDefinitions>
          <FrameworkElement.LayoutTransform>
            <TransformGroup>
              <RotateTransform Angle="-90"/>
            </TransformGroup>
          </FrameworkElement.LayoutTransform>
          <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource UpGeometry}" Width="12"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="Center"/>
        </Grid>
      </ToggleButton>
      <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="0"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="true">
        <Setter TargetName="ToggleButton"
                Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,1,1,0'}"
                Property="hc:BorderElement.CornerRadius"/>
        <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="PathArrow" Value="{StaticResource DownGeometry}" Property="Path.Data"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ExpanderUpTemplate" TargetType="{x:Type Expander}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <ToggleButton x:Name="ToggleButton" Grid.Row="1" HorizontalAlignment="Stretch"
                    HorizontalContentAlignment="Stretch" Focusable="False" Padding="10,0,0,0"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Foreground="{TemplateBinding Control.Foreground}"
                    MinHeight="{TemplateBinding FrameworkElement.MinHeight}"
                    Style="{StaticResource ToggleButtonCustom}"
                    hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="30"/>
          </Grid.ColumnDefinitions>
          <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource UpGeometry}" Width="12"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="Center"/>
        </Grid>
      </ToggleButton>
      <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="0"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="true">
        <Setter TargetName="ToggleButton"
                Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,0,1,1'}"
                Property="hc:BorderElement.CornerRadius"/>
        <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="PathArrow" Value="{StaticResource DownGeometry}" Property="Path.Data"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ExpanderRightTemplate" TargetType="{x:Type Expander}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <ToggleButton x:Name="ToggleButton" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch"
                    Focusable="False" Padding="0,0,0,10" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Foreground="{TemplateBinding Control.Foreground}"
                    MinWidth="{TemplateBinding FrameworkElement.MinWidth}" Style="{StaticResource ToggleButtonCustom}"
                    hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="30"/>
          </Grid.ColumnDefinitions>
          <FrameworkElement.LayoutTransform>
            <TransformGroup>
              <RotateTransform Angle="-90"/>
            </TransformGroup>
          </FrameworkElement.LayoutTransform>
          <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource DownGeometry}" Width="12"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="Center"/>
        </Grid>
      </ToggleButton>
      <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="true">
        <Setter TargetName="ToggleButton"
                Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,0,0,1'}"
                Property="hc:BorderElement.CornerRadius"/>
        <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="PathArrow" Value="{StaticResource UpGeometry}" Property="Path.Data"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ExpanderDownTemplate" TargetType="{x:Type Expander}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <ToggleButton x:Name="ToggleButton" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
                    Focusable="False" Padding="10,0,0,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Foreground="{TemplateBinding Control.Foreground}"
                    MinHeight="{TemplateBinding FrameworkElement.MinHeight}"
                    Style="{StaticResource ToggleButtonCustom}"
                    hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="30"/>
          </Grid.ColumnDefinitions>
          <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform"
                Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource DownGeometry}" Width="12"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="Center"/>
        </Grid>
      </ToggleButton>
      <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Expander.IsExpanded" Value="true">
        <Setter TargetName="ToggleButton"
                Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}"
                Property="hc:BorderElement.CornerRadius"/>
        <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="PathArrow" Value="{StaticResource UpGeometry}" Property="Path.Data"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ExpanderBaseStyle" TargetType="{x:Type Expander}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.MinWidth" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template" Value="{StaticResource ExpanderDownTemplate}"/>
    <Style.Triggers>
      <Trigger Property="Expander.ExpandDirection" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource ExpanderLeftTemplate}"/>
      </Trigger>
      <Trigger Property="Expander.ExpandDirection" Value="Up">
        <Setter Property="Control.Template" Value="{StaticResource ExpanderUpTemplate}"/>
      </Trigger>
      <Trigger Property="Expander.ExpandDirection" Value="Right">
        <Setter Property="Control.Template" Value="{StaticResource ExpanderRightTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="FlowDocumentScrollViewerBaseStyle" TargetType="{x:Type FlowDocumentScrollViewer}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type FlowDocumentScrollViewer}">
          <DockPanel Background="{TemplateBinding Control.Background}" LastChildFill="True">
            <Grid x:Name="PART_ToolBarHost" ZIndex="1" DockPanel.Dock="Bottom" Margin="0,6">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="PART_FindToolBarHost" Grid.Column="0" HorizontalAlignment="Left" Visibility="Collapsed"
                      VerticalAlignment="Center"/>
              <Grid Column="1" HorizontalAlignment="Right" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <RepeatButton Height="20" Width="20" Padding="5,8" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource SubGeometry}" Grid.Column="0"
                              Command="NavigationCommands.DecreaseZoom"
                              IsEnabled="{TemplateBinding FlowDocumentScrollViewer.CanDecreaseZoom}"
                              ToolTip="{x:Static langs:Lang.ZoomOut}"/>
                <Slider hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Top" Grid.Column="1"
                        HorizontalAlignment="Stretch"
                        LargeChange="{TemplateBinding FlowDocumentScrollViewer.ZoomIncrement}"
                        Maximum="{TemplateBinding FlowDocumentScrollViewer.MaxZoom}"
                        Minimum="{TemplateBinding FlowDocumentScrollViewer.MinZoom}"
                        SmallChange="{TemplateBinding FlowDocumentScrollViewer.ZoomIncrement}"
                        TickFrequency="{TemplateBinding FlowDocumentScrollViewer.ZoomIncrement}" VerticalAlignment="Center"
                        Width="180" Value="{Binding Zoom, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource AddGeometry}" Grid.Column="2"
                              Command="NavigationCommands.IncreaseZoom"
                              IsEnabled="{TemplateBinding FlowDocumentScrollViewer.CanIncreaseZoom}"
                              ToolTip="{x:Static langs:Lang.ZoomIn}"/>
              </Grid>
            </Grid>
            <Border Panel.ZIndex="0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Margin="{TemplateBinding Control.Padding}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <ScrollViewer x:Name="PART_ContentHost" CanContentScroll="True"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FlowDocumentPageViewerBaseStyle" TargetType="{x:Type FlowDocumentPageViewer}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type FlowDocumentPageViewer}">
          <DockPanel Background="{TemplateBinding Control.Background}" LastChildFill="True">
            <Grid ZIndex="1" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="0,6">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="PART_FindToolBarHost" Grid.Column="0" HorizontalAlignment="Left" Visibility="Collapsed"
                      VerticalAlignment="Center"/>
              <StackPanel Grid.Column="1" HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.PreviousPage"
                              IsEnabled="{TemplateBinding DocumentViewerBase.CanGoToPreviousPage}"
                              ToolTip="{x:Static langs:Lang.PreviousPage}"/>
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                  <Run Text=" "/>
                  <InlineUIContainer>
                    <TextBlock Text="{Binding MasterPageNumber, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </InlineUIContainer>
                  <Run Text=" "/>
                  <Run Text="/"/>
                  <Run Text=" "/>
                  <InlineUIContainer>
                    <TextBlock Text="{Binding PageCount, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </InlineUIContainer>
                  <Run Text=" "/>
                </TextBlock>
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.NextPage"
                              IsEnabled="{TemplateBinding DocumentViewerBase.CanGoToNextPage}"
                              ToolTip="{x:Static langs:Lang.NextPage}"/>
              </StackPanel>
              <Grid Column="2" VerticalAlignment="Center" Margin="32,0,0,0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <RepeatButton Height="20" Width="20" Padding="5,8" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource SubGeometry}" Grid.Column="0"
                              Command="NavigationCommands.DecreaseZoom"
                              IsEnabled="{TemplateBinding FlowDocumentPageViewer.CanDecreaseZoom}"
                              ToolTip="{x:Static langs:Lang.ZoomOut}"/>
                <Slider hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Top" Grid.Column="1"
                        HorizontalAlignment="Stretch" LargeChange="{TemplateBinding FlowDocumentPageViewer.ZoomIncrement}"
                        Maximum="{TemplateBinding FlowDocumentPageViewer.MaxZoom}"
                        Minimum="{TemplateBinding FlowDocumentPageViewer.MinZoom}"
                        SmallChange="{TemplateBinding FlowDocumentPageViewer.ZoomIncrement}"
                        TickFrequency="{TemplateBinding FlowDocumentPageViewer.ZoomIncrement}" VerticalAlignment="Center"
                        Value="{Binding Zoom, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource AddGeometry}" Grid.Column="2"
                              Command="NavigationCommands.IncreaseZoom"
                              IsEnabled="{TemplateBinding FlowDocumentPageViewer.CanIncreaseZoom}"
                              ToolTip="{x:Static langs:Lang.ZoomIn}"/>
              </Grid>
            </Grid>
            <Border Panel.ZIndex="0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Margin="{TemplateBinding Control.Padding}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <AdornerDecorator>
                <DocumentPageView HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  KeyboardNavigation.IsTabStop="False" DocumentViewerBase.IsMasterPage="True" PageNumber="0"
                                  KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local"
                                  DocumentPaginator="{x:Null}"/>
              </AdornerDecorator>
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FlowDocumentReaderBaseStyle" TargetType="{x:Type FlowDocumentReader}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type FlowDocumentReader}">
          <DockPanel Background="{TemplateBinding Control.Background}" LastChildFill="True">
            <Grid ZIndex="1" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="0,6">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <StackPanel Orientation="Horizontal">
                <ToggleButton x:Name="FindButton" Width="24" Height="24" Padding="5"
                              hc:IconElement.Geometry="{StaticResource SearchGeometry}" Command="ApplicationCommands.Find"
                              Margin="0,0,10,0" ToolTip="{x:Static langs:Lang.Find}"/>
                <Border x:Name="PART_FindToolBarHost" HorizontalAlignment="Left" Visibility="Collapsed"
                        VerticalAlignment="Center"/>
              </StackPanel>
              <StackPanel x:Name="PageCountAndButtons" Grid.Column="1" HorizontalAlignment="Center" Orientation="Horizontal"
                          VerticalAlignment="Center">
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.PreviousPage"
                              IsEnabled="{TemplateBinding FlowDocumentReader.CanGoToPreviousPage}"
                              ToolTip="{x:Static langs:Lang.PreviousPage}"/>
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                  <Run Text=" "/>
                  <InlineUIContainer>
                    <TextBlock Text="{Binding PageNumber, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </InlineUIContainer>
                  <Run Text=" "/>
                  <Run Text="/"/>
                  <Run Text=" "/>
                  <InlineUIContainer>
                    <TextBlock Text="{Binding PageCount, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </InlineUIContainer>
                  <Run Text=" "/>
                </TextBlock>
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.NextPage"
                              IsEnabled="{TemplateBinding FlowDocumentReader.CanGoToNextPage}"
                              ToolTip="{x:Static langs:Lang.NextPage}"/>
              </StackPanel>
              <Grid Column="2" Margin="32,0,0,0" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <hc:ButtonGroup Width="90">
                  <RadioButton x:Name="PageViewButton" Padding="0" hc:IconElement.Geometry="{StaticResource PageModeGeometry}"
                               CommandParameter="Page" Command="FlowDocumentReader.SwitchViewingModeCommand"
                               GroupName="ViewingMode" IsEnabled="{TemplateBinding FlowDocumentReader.IsPageViewEnabled}"
                               ToolTip="{x:Static langs:Lang.PageMode}"/>
                  <RadioButton x:Name="TwoPageViewButton" hc:IconElement.Geometry="{StaticResource TwoPageModeGeometry}"
                               Padding="0" CommandParameter="TwoPage" Command="FlowDocumentReader.SwitchViewingModeCommand"
                               GroupName="ViewingMode" IsEnabled="{TemplateBinding FlowDocumentReader.IsTwoPageViewEnabled}"
                               ToolTip="{x:Static langs:Lang.TwoPageMode}"/>
                  <RadioButton x:Name="ScrollViewButton" hc:IconElement.Geometry="{StaticResource ScrollModeGeometry}" Padding="0"
                               CommandParameter="Scroll" Command="FlowDocumentReader.SwitchViewingModeCommand"
                               GroupName="ViewingMode" IsEnabled="{TemplateBinding FlowDocumentReader.IsScrollViewEnabled}"
                               ToolTip="{x:Static langs:Lang.ScrollMode}"/>
                </hc:ButtonGroup>
                <RepeatButton Margin="32,0,0,0" Height="20" Width="20" Padding="5,8" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource SubGeometry}" Grid.Column="1"
                              Command="NavigationCommands.DecreaseZoom"
                              IsEnabled="{TemplateBinding FlowDocumentReader.CanDecreaseZoom}"
                              ToolTip="{x:Static langs:Lang.ZoomOut}"/>
                <Slider hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Top" Grid.Column="2"
                        HorizontalAlignment="Stretch" LargeChange="{TemplateBinding FlowDocumentReader.ZoomIncrement}"
                        Maximum="{TemplateBinding FlowDocumentReader.MaxZoom}"
                        Minimum="{TemplateBinding FlowDocumentReader.MinZoom}"
                        SmallChange="{TemplateBinding FlowDocumentReader.ZoomIncrement}"
                        TickFrequency="{TemplateBinding FlowDocumentReader.ZoomIncrement}" VerticalAlignment="Center"
                        Value="{Binding Zoom, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                <RepeatButton Height="20" Width="20" Padding="4" hc:BorderElement.CornerRadius="10"
                              hc:IconElement.Geometry="{StaticResource AddGeometry}" Grid.Column="3"
                              Command="NavigationCommands.IncreaseZoom"
                              IsEnabled="{TemplateBinding FlowDocumentReader.CanIncreaseZoom}"
                              ToolTip="{x:Static langs:Lang.ZoomIn}"/>
              </Grid>
            </Grid>
            <Border x:Name="PART_ContentHost" Panel.ZIndex="0" KeyboardNavigation.IsTabStop="False"
                    KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Margin="{TemplateBinding Control.Padding}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="FlowDocumentReader.ViewingMode" Value="Page">
              <Setter TargetName="PageViewButton" Property="ToggleButton.IsChecked" Value="True"/>
            </Trigger>
            <Trigger Property="FlowDocumentReader.ViewingMode" Value="TwoPage">
              <Setter TargetName="TwoPageViewButton" Property="ToggleButton.IsChecked" Value="True"/>
              <Setter Property="Control.BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="FlowDocumentReader.ViewingMode" Value="Scroll">
              <Setter TargetName="ScrollViewButton" Property="ToggleButton.IsChecked" Value="True"/>
              <Setter TargetName="PageCountAndButtons" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="FlowDocumentReader.Document">
              <Setter TargetName="FindButton" Property="UIElement.IsEnabled" Value="False"/>
            </Trigger>
            <Trigger Property="FlowDocumentReader.IsFindEnabled" Value="False">
              <Setter TargetName="FindButton" Property="UIElement.IsEnabled" Value="False"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItem4FrameStyle" BasedOn="{StaticResource MenuItemBaseStyle}"
         TargetType="{x:Type MenuItem}">
    <Setter Property="HeaderedItemsControl.Header" Value="{Binding (JournalEntry.Name)}"/>
    <Setter Property="MenuItem.Command" Value="NavigationCommands.NavigateJournal"/>
    <Setter Property="MenuItem.CommandTarget"
            Value="{Binding TemplatedParent, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
    <Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
  </Style>
  <ControlTemplate x:Key="FrameWithNavigationUIStyle" TargetType="{x:Type Frame}">
    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}"
            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
      <DockPanel LastChildFill="True">
        <Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                Background="{DynamicResource DarkDefaultBrush}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,1,0,0'}">
          <hc:ButtonGroup x:Name="NavChrome" Width="90" Margin="10,6" HorizontalAlignment="Left">
            <Button Padding="6" hc:IconElement.Geometry="{StaticResource LeftGeometry}"
                    Command="NavigationCommands.BrowseBack">
              <FrameworkElement.ContextMenu>
                <ContextMenu x:Name="BackNavMenu" ItemContainerStyle="{StaticResource MenuItem4FrameStyle}"
                             ItemsSource="{Binding Path=(NavigationWindow.BackStack), RelativeSource={RelativeSource TemplatedParent}}"/>
              </FrameworkElement.ContextMenu>
            </Button>
            <Button Padding="6" hc:IconElement.Geometry="{StaticResource RightGeometry}"
                    Command="NavigationCommands.BrowseForward">
              <FrameworkElement.ContextMenu>
                <ContextMenu x:Name="ForwardNavMenu" ItemContainerStyle="{StaticResource MenuItem4FrameStyle}"
                             ItemsSource="{Binding Path=(NavigationWindow.ForwardStack), RelativeSource={RelativeSource TemplatedParent}}"/>
              </FrameworkElement.ContextMenu>
            </Button>
            <Button Padding="6" hc:IconElement.Geometry="{StaticResource RotateRightGeometry}"
                    Command="NavigationCommands.Refresh"/>
          </hc:ButtonGroup>
        </Border>
        <ContentPresenter x:Name="PART_NavWinCP" SnapsToDevicePixels="True" ClipToBounds="true"/>
      </DockPanel>
    </Border>
  </ControlTemplate>
  <Style x:Key="FrameBaseStyle" TargetType="{x:Type Frame}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Frame}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter x:Name="PART_FrameCP" SnapsToDevicePixels="True"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Frame.NavigationUIVisibility" Value="Visible">
        <Setter Property="Control.Template" Value="{StaticResource FrameWithNavigationUIStyle}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Frame.JournalOwnership" Value="OwnsJournal"/>
          <Condition Property="Frame.NavigationUIVisibility" Value="Automatic"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource FrameWithNavigationUIStyle}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="GotoTopBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}"
         TargetType="{x:Type hc:GotoTop}">
    <Setter Property="FrameworkElement.Width" Value="50"/>
    <Setter Property="FrameworkElement.Height" Value="50"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="25"/>
    <Setter Property="hc:IconElement.Geometry" Value="{StaticResource UpGeometry}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Padding" Value="16"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="GravatarBaseStyle" TargetType="{x:Type hc:Gravatar}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Width" Value="72"/>
    <Setter Property="FrameworkElement.Height" Value="72"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Padding" Value="6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Gravatar}">
          <Border ClipToBounds="True" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ImageSelectorBaseStyle" TargetType="{x:Type hc:ImageSelector}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="hc:ImageSelector.Stretch" Value="UniformToFill"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="hc:ImageSelector.StrokeThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:ImageSelector.StrokeDashArray" Value="2,2"/>
    <Setter Property="hc:IconElement.Geometry" Value="{StaticResource AddGeometry}"/>
    <Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{StaticResource RemoveGeometry}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ImageSelector}">
          <Button Command="interactivity:ControlCommands.Switch" Style="{StaticResource ButtonCustom}"
                  HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <hc:DashedBorder BorderDashArray="{TemplateBinding hc:ImageSelector.StrokeDashArray}"
                               BorderBrush="{TemplateBinding Control.BorderBrush}"
                               BorderThickness="{TemplateBinding Control.BorderThickness}"
                               BorderDashThickness="{TemplateBinding hc:ImageSelector.StrokeThickness}"
                               Background="{TemplateBinding hc:ImageSelector.PreviewBrush}"
                               CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Border Width="30" Height="30" Background="{TemplateBinding Control.Background}"
                        Style="{StaticResource BorderCircular}">
                  <hc:ToggleBlock IsChecked="{TemplateBinding hc:ImageSelector.HasValue}">
                    <hc:ToggleBlock.CheckedContent>
                      <Path Data="{TemplateBinding hc:IconSwitchElement.GeometrySelected}" Width="12" Height="12"
                            Fill="{DynamicResource PrimaryBrush}"/>
                    </hc:ToggleBlock.CheckedContent>
                    <hc:ToggleBlock.UnCheckedContent>
                      <Path Data="{TemplateBinding hc:IconElement.Geometry}" Width="16" Height="16"
                            Fill="{DynamicResource PrimaryBrush}"/>
                    </hc:ToggleBlock.UnCheckedContent>
                  </hc:ToggleBlock>
                </Border>
              </hc:DashedBorder>
            </Border>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListBoxItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ListBoxItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ItemsControl}}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ListBoxItem.IsSelected" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ListBoxItem.IsSelected" Value="true"/>
          <Condition Property="Selector.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
      </MultiTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
      <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBoxItem}">
              <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                      SnapsToDevicePixels="true">
                <StackPanel Orientation="Horizontal">
                  <ContentControl Width="16" Height="16"
                                  Content="{Binding Path=(hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}"/>
                  <ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                </StackPanel>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ListBoxBaseStyle" TargetType="{x:Type ListBox}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="2,2,2,0"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListBoxItemBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
              <hc:ToggleBlock.CheckedContent>
                <hc:ScrollViewer Focusable="false"
                                 HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                 Padding="{TemplateBinding Control.Padding}"
                                 SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                 VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                 IsInertiaEnabled="{Binding Path=(hc:ScrollViewer.IsInertiaEnabled), RelativeSource={RelativeSource TemplatedParent}}">
                  <ItemsPresenter/>
                </hc:ScrollViewer>
              </hc:ToggleBlock.CheckedContent>
              <hc:ToggleBlock.UnCheckedContent>
                <hc:Empty/>
              </hc:ToggleBlock.UnCheckedContent>
            </hc:ToggleBlock>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Padding" Value="12,0"/>
    <Setter Property="FrameworkElement.MinHeight"
            Value="{Binding Path=(hc:GridViewAttach.ColumnHeaderHeight), RelativeSource={RelativeSource AncestorType=ListView}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <hc:SimplePanel SnapsToDevicePixels="true">
            <Border x:Name="HeaderBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" Background="Transparent">
              <ContentPresenter x:Name="HeaderContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <Canvas>
              <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}"/>
            </Canvas>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListViewItemBaseStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,4"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="44"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border x:Name="Bd" CornerRadius="4" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
            <GridViewRowPresenter Content="{TemplateBinding ContentControl.Content}"
                                  Columns="{TemplateBinding GridView.ColumnCollection}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
      </Trigger>
      <Trigger Property="ListBoxItem.IsSelected" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ListBoxItem.IsSelected" Value="true"/>
          <Condition Property="Selector.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
      </MultiTrigger>
      <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListViewItem}">
              <Border x:Name="Bd" CornerRadius="4" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                      SnapsToDevicePixels="true">
                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="LoadingBaseStyle" TargetType="{x:Type hc:LoadingBase}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="hc:LoadingBase.DotDiameter" Value="10"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="LoadingCircleBaseStyle" BasedOn="{StaticResource LoadingBaseStyle}"
         TargetType="{x:Type hc:LoadingCircle}">
    <Setter Property="FrameworkElement.Width" Value="40"/>
    <Setter Property="FrameworkElement.Height" Value="40"/>
    <Setter Property="hc:LoadingBase.DotDiameter" Value="5"/>
    <Setter Property="hc:LoadingBase.DotInterval" Value="30"/>
    <Setter Property="hc:LoadingCircle.DotOffSet" Value="60"/>
    <Setter Property="hc:LoadingBase.DotDelayTime" Value="90"/>
    <Setter Property="hc:LoadingBase.DotSpeed" Value="4"/>
  </Style>
  <Style x:Key="LoadingLineBaseStyle" BasedOn="{StaticResource LoadingBaseStyle}"
         TargetType="{x:Type hc:LoadingLine}">
    <Setter Property="hc:LoadingBase.DotDiameter" Value="5"/>
  </Style>
  <Style x:Key="MagnifierBaseStyle" TargetType="{x:Type hc:Magnifier}">
    <Setter Property="UIElement.IsHitTestVisible" Value="False"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="FrameworkElement.Width" Value="180"/>
    <Setter Property="FrameworkElement.Height" Value="180"/>
    <Setter Property="Control.BorderThickness" Value="8"/>
    <Setter Property="Control.Background" Value="{DynamicResource BackgroundBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Magnifier}">
          <Border Style="{StaticResource BorderCircular}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <Ellipse>
              <Shape.Fill>
                <VisualBrush ViewboxUnits="Absolute" x:Name="PART_VisualBrush"
                             Visual="{Binding Target, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Shape.Fill>
            </Ellipse>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MenuItem4NavigationWindowStyle" BasedOn="{StaticResource MenuItemBaseStyle}"
         TargetType="{x:Type MenuItem}">
    <Setter Property="HeaderedItemsControl.Header" Value="{Binding (JournalEntry.Name)}"/>
    <Setter Property="MenuItem.Command" Value="NavigationCommands.NavigateJournal"/>
    <Setter Property="MenuItem.CommandTarget"
            Value="{Binding TemplatedParent, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
    <Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
  </Style>
  <Style x:Key="NavigationWindowBaseStyle" TargetType="{x:Type NavigationWindow}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type NavigationWindow}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <DockPanel LastChildFill="True">
              <Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}"
                      Background="{DynamicResource DarkDefaultBrush}">
                <hc:ButtonGroup x:Name="NavChrome" Width="90" Margin="10,6" HorizontalAlignment="Left">
                  <Button Padding="6" hc:IconElement.Geometry="{StaticResource LeftGeometry}"
                          Command="NavigationCommands.BrowseBack">
                    <FrameworkElement.ContextMenu>
                      <ContextMenu x:Name="BackNavMenu" ItemContainerStyle="{StaticResource MenuItem4NavigationWindowStyle}"
                                   ItemsSource="{Binding Path=(NavigationWindow.BackStack), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </FrameworkElement.ContextMenu>
                  </Button>
                  <Button Padding="6" hc:IconElement.Geometry="{StaticResource RightGeometry}"
                          Command="NavigationCommands.BrowseForward">
                    <FrameworkElement.ContextMenu>
                      <ContextMenu x:Name="ForwardNavMenu" ItemContainerStyle="{StaticResource MenuItem4NavigationWindowStyle}"
                                   ItemsSource="{Binding Path=(NavigationWindow.ForwardStack), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </FrameworkElement.ContextMenu>
                  </Button>
                  <Button Padding="6" hc:IconElement.Geometry="{StaticResource RotateRightGeometry}"
                          Command="NavigationCommands.Refresh"/>
                </hc:ButtonGroup>
              </Border>
              <hc:SimplePanel>
                <AdornerDecorator>
                  <ContentPresenter x:Name="PART_NavWinCP" ClipToBounds="true"/>
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed"
                            VerticalAlignment="Bottom"/>
              </hc:SimplePanel>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="NavigationWindow.ShowsNavigationUI" Value="False">
              <Setter TargetName="NavChrome" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="NavigationWindow.CanGoBack" Value="False">
              <Setter TargetName="BackNavMenu" Property="UIElement.IsEnabled" Value="false"/>
            </Trigger>
            <Trigger Property="NavigationWindow.CanGoForward" Value="False">
              <Setter TargetName="ForwardNavMenu" Property="UIElement.IsEnabled" Value="false"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip"/>
                <Condition Property="Window.WindowState" Value="Normal"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NumericUpDownBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type hc:NumericUpDown}">
    <Setter Property="hc:NumericUpDown.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
    <Setter Property="Control.IsTabStop" Value="False"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:NumericUpDown}">
          <hc:SimplePanel x:Name="root">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <hc:WatermarkTextBox x:Name="PART_TextBox" Grid.RowSpan="2" Focusable="True"
                                   CaretBrush="{TemplateBinding hc:NumericUpDown.CaretBrush}"
                                   Foreground="{TemplateBinding Control.Foreground}"
                                   HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                   Padding="{TemplateBinding Control.Padding}"
                                   VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                   IsReadOnly="{TemplateBinding hc:NumericUpDown.IsReadOnly}"
                                   Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
              <Button x:Name="UpButton" VerticalContentAlignment="Bottom" VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="0"
                      Command="interactivity:ControlCommands.Prev" hc:IconElement.Height="6" hc:IconElement.Width="14"
                      Grid.Column="1" Foreground="{TemplateBinding Control.BorderBrush}"
                      hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}"
                      IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                      Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
              <Button x:Name="DownButton" VerticalContentAlignment="Top" VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="1"
                      Command="interactivity:ControlCommands.Next" hc:IconElement.Height="6" hc:IconElement.Width="14"
                      Grid.Column="1" Foreground="{TemplateBinding Control.BorderBrush}"
                      hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}"
                      IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                      Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
            </Grid>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="NumericUpDownExtendTopTemplate" TargetType="{x:Type hc:NumericUpDown}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Row="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Row="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <hc:WatermarkTextBox x:Name="PART_TextBox" Grid.RowSpan="2" Focusable="True"
                             CaretBrush="{TemplateBinding hc:NumericUpDown.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                             Padding="{TemplateBinding Control.Padding}"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             IsReadOnly="{TemplateBinding hc:NumericUpDown.IsReadOnly}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="UpButton" VerticalContentAlignment="Bottom" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="0"
                Command="interactivity:ControlCommands.Prev" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="1" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Button x:Name="DownButton" VerticalContentAlignment="Top" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="1"
                Command="interactivity:ControlCommands.Next" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="1" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="hc:NumericUpDown.IsReadOnly" Value="True">
        <Setter TargetName="UpButton" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="DownButton" Property="UIElement.IsEnabled" Value="False"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="NumericUpDownExtendLeftTemplate" TargetType="{x:Type hc:NumericUpDown}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Column="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Column="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <hc:WatermarkTextBox x:Name="PART_TextBox" Grid.RowSpan="2" Focusable="True"
                             CaretBrush="{TemplateBinding hc:NumericUpDown.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                             Padding="{TemplateBinding Control.Padding}"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             IsReadOnly="{TemplateBinding hc:NumericUpDown.IsReadOnly}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="UpButton" VerticalContentAlignment="Bottom" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="0"
                Command="interactivity:ControlCommands.Prev" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="1" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Button x:Name="DownButton" VerticalContentAlignment="Top" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="1"
                Command="interactivity:ControlCommands.Next" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="1" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="NumericUpDownExtendBaseStyle" BasedOn="{StaticResource NumericUpDownBaseStyle}"
         TargetType="{x:Type hc:NumericUpDown}">
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Template" Value="{StaticResource NumericUpDownExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource NumericUpDownExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="NumericUpDownPlusTopTemplate" TargetType="{x:Type hc:NumericUpDown}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel Grid.ColumnSpan="2" LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Row="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Row="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <hc:WatermarkTextBox x:Name="PART_TextBox" Grid.RowSpan="2" Focusable="True"
                             CaretBrush="{TemplateBinding hc:NumericUpDown.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                             Padding="{TemplateBinding Control.Padding}"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             IsReadOnly="{TemplateBinding hc:NumericUpDown.IsReadOnly}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" HorizontalContentAlignment="Left" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Grid.RowSpan="2" Height="Auto" Width="Auto"
                Command="interactivity:ControlCommands.Clear" hc:IconElement.Width="14" Padding="0,0,2,0"
                Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{TemplateBinding Control.BorderBrush}"/>
        <Button x:Name="UpButton" VerticalContentAlignment="Bottom" HorizontalContentAlignment="Left"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="0"
                Command="interactivity:ControlCommands.Prev" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="2" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Button x:Name="DownButton" VerticalContentAlignment="Top" HorizontalContentAlignment="Left"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="1"
                Command="interactivity:ControlCommands.Next" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="2" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:NumericUpDown.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="NumericUpDownPlusLeftTemplate" TargetType="{x:Type hc:NumericUpDown}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel Grid.Column="0" LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Column="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Grid x:Name="root" Column="1" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <hc:WatermarkTextBox x:Name="PART_TextBox" Grid.RowSpan="2" Focusable="True"
                             CaretBrush="{TemplateBinding hc:NumericUpDown.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                             Padding="{TemplateBinding Control.Padding}"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             IsReadOnly="{TemplateBinding hc:NumericUpDown.IsReadOnly}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" HorizontalContentAlignment="Left" VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" Grid.RowSpan="2" Height="Auto" Width="Auto"
                Command="interactivity:ControlCommands.Clear" hc:IconElement.Width="14" Padding="0,0,2,0"
                Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{TemplateBinding Control.BorderBrush}"/>
        <Button x:Name="UpButton" VerticalContentAlignment="Bottom" HorizontalContentAlignment="Left"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="0"
                Command="interactivity:ControlCommands.Prev" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="2" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
        <Button x:Name="DownButton" VerticalContentAlignment="Top" HorizontalContentAlignment="Left"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Grid.Row="1"
                Command="interactivity:ControlCommands.Next" hc:IconElement.Height="6" hc:IconElement.Width="14"
                Grid.Column="2" Foreground="{TemplateBinding Control.BorderBrush}"
                hc:IconElement.Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}"
                IsEnabled="{TemplateBinding IsReadOnly, Converter={StaticResource Boolean2BooleanReConverter}}"
                Visibility="{TemplateBinding ShowUpDownButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="root" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:NumericUpDown.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="NumericUpDownPlusBaseStyle" BasedOn="{StaticResource NumericUpDownExtendBaseStyle}"
         TargetType="{x:Type hc:NumericUpDown}">
    <Setter Property="Control.Template" Value="{StaticResource NumericUpDownPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource NumericUpDownPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="PasswordBoxBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type PasswordBox}">
    <Setter Property="PasswordBox.PasswordChar" Value="●"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <hc:SimplePanel x:Name="root">
            <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="PasswordBoxExtendTopTemplate" TargetType="{x:Type PasswordBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Row="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <TextBlock x:Name="placeholder" Visibility="Collapsed"
                 VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 Margin="{TemplateBinding Control.Padding}" Grid.Row="1" HorizontalAlignment="Stretch"
                 Style="{StaticResource TextBlockDefaultThiLight}"
                 Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                    VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Grid.Row="1"
                    Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
        <Setter TargetName="placeholder" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="placeholder" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="PasswordBoxExtendLeftTemplate" TargetType="{x:Type PasswordBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border x:Name="border" Grid.Column="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <TextBlock x:Name="placeholder" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 Margin="{TemplateBinding Control.Padding}" Visibility="Collapsed" Grid.Column="1"
                 HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}"
                 Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
      <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}" Grid.Column="1"
                    Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
        <Setter TargetName="placeholder" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="placeholder" Property="UIElement.Opacity" Value="0.4"/>
        <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="PasswordBoxExtendBaseStyle" BasedOn="{StaticResource PasswordBoxBaseStyle}"
         TargetType="{x:Type PasswordBox}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="hc:PasswordBoxAttach.IsMonitoring" Value="True"/>
    <Setter Property="Control.Template" Value="{StaticResource PasswordBoxExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource PasswordBoxExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="PasswordBoxPlusInternalStyle" TargetType="{x:Type PasswordBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <hc:SimplePanel>
            <TextBlock x:Name="placeholder" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                       Padding="{TemplateBinding Control.Padding}" Visibility="Collapsed" HorizontalAlignment="Stretch"
                       Style="{StaticResource TextBlockDefaultThiLight}"
                       Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
              <Setter TargetName="placeholder" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="PasswordBoxPlusTopTemplate" TargetType="{x:Type hc:PasswordBox}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <DockPanel Grid.ColumnSpan="3" LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <PasswordBox x:Name="PART_PasswordBox"
                   HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"
                   Foreground="{TemplateBinding Control.Foreground}" Grid.Column="0" Grid.Row="1"
                   PasswordChar="{TemplateBinding hc:PasswordBox.PasswordChar}"
                   Style="{StaticResource PasswordBoxPlusInternalStyle}"
                   Visibility="{Binding ShowPassword, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityReConverter}}"/>
      <hc:WatermarkTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                           Grid.Column="0" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                           Grid.Row="1" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Visibility="{Binding ShowPassword, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                           Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
              VerticalAlignment="Stretch" HorizontalAlignment="Stretch" hc:IconElement.Width="14" Grid.Row="1"
              Grid.Column="1" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed"
              Style="{StaticResource ButtonIcon}"
              hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
              Foreground="{TemplateBinding Control.BorderBrush}"
              Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      <ToggleButton x:Name="ButtonEye" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch" hc:IconElement.Width="14"
                    Style="{StaticResource ToggleButtonIconTransparent}"
                    hc:IconElement.Geometry="{StaticResource EyeCloseGeometry}"
                    hc:IconSwitchElement.GeometrySelected="{StaticResource EyeOpenGeometry}" Grid.Column="2"
                    Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False" Grid.Row="1"
                    IsChecked="{Binding ShowPassword, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                    Visibility="{TemplateBinding ShowEyeButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                    Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_PasswordBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="hc:PasswordBox.ShowEyeButton" Value="true">
        <Setter TargetName="ButtonClear" Property="Control.Padding" Value="0,0,2,0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="PasswordBoxPlusLeftTemplate" TargetType="{x:Type hc:PasswordBox}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Border Grid.Column="1" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"
              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
              CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
      <PasswordBox x:Name="PART_PasswordBox"
                   HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"
                   Foreground="{TemplateBinding Control.Foreground}" Grid.Column="1"
                   PasswordChar="{TemplateBinding hc:PasswordBox.PasswordChar}"
                   Style="{StaticResource PasswordBoxPlusInternalStyle}"
                   Visibility="{Binding ShowPassword, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityReConverter}}"/>
      <hc:WatermarkTextBox x:Name="PART_TextBox" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                           Grid.Column="1" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                           VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                           Visibility="{Binding ShowPassword, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                           Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
      <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
              VerticalAlignment="Stretch" HorizontalAlignment="Stretch" hc:IconElement.Width="14" Grid.Column="2"
              Command="interactivity:ControlCommands.Clear" Visibility="Collapsed"
              Style="{StaticResource ButtonIcon}"
              hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
              Foreground="{TemplateBinding Control.BorderBrush}"
              Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
      <ToggleButton x:Name="ButtonEye" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch" hc:IconElement.Width="14"
                    Style="{StaticResource ToggleButtonIconTransparent}"
                    hc:IconElement.Geometry="{StaticResource EyeCloseGeometry}"
                    hc:IconSwitchElement.GeometrySelected="{StaticResource EyeOpenGeometry}" Grid.Column="3"
                    Foreground="{TemplateBinding Control.BorderBrush}" Focusable="False"
                    IsChecked="{Binding ShowPassword, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                    Visibility="{TemplateBinding ShowEyeButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                    Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_PasswordBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="hc:PasswordBox.ShowEyeButton" Value="true">
        <Setter TargetName="ButtonClear" Property="Control.Padding" Value="0,0,2,0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="PasswordBoxPlusBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type hc:PasswordBox}">
    <Setter Property="hc:PasswordBox.PasswordChar" Value="●"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:PasswordBoxAttach.IsMonitoring" Value="True"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template" Value="{StaticResource PasswordBoxPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource PasswordBoxPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="PinBoxBaseStyle" TargetType="{x:Type hc:PinBox}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="hc:PinBox.ItemMargin" Value="4,0"/>
    <Setter Property="hc:PinBox.ItemWidth" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="hc:PinBox.ItemHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:PinBox}">
          <UniformGrid Name="PART_Panel" Columns="{TemplateBinding hc:PinBox.Length}" Rows="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PoptipBaseStyle" TargetType="{x:Type hc:Poptip}">
    <Setter Property="UIElement.IsHitTestVisible" Value="False"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Poptip}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                              ContentTemplateSelector="{TemplateBinding hc:Poptip.ContentTemplateSelector}"
                              ContentStringFormat="{TemplateBinding hc:Poptip.ContentStringFormat}"
                              ContentTemplate="{TemplateBinding hc:Poptip.ContentTemplate}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressBarFlat4ProgressButton" TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DarkMaskBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Border x:Name="PART_Track">
            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
              <Border x:Name="Indicator" Background="{TemplateBinding Control.Foreground}"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            </Decorator>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ProgressButtonBaseStyle" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:ProgressButton.ProgressStyle" Value="{StaticResource ProgressBarFlat4ProgressButton}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ProgressButton}">
          <Border x:Name="Chrome" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:SimplePanel>
              <ProgressBar x:Name="ProgressBar" Height="Auto" Value="{TemplateBinding hc:ProgressButton.Progress}"
                           Maximum="100" Visibility="Collapsed" Style="{TemplateBinding hc:ProgressButton.ProgressStyle}"/>
              <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Control.Padding}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Control.Padding}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Visibility="Collapsed"
                                Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}"/>
            </hc:SimplePanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="ProgressBar" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="CheckedElement" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True"/>
                <Condition Property="ToggleButton.IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="UnCheckedElement" Property="UIElement.Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyItemToolTipBaseStyle" BasedOn="{StaticResource {x:Type ToolTip}}"
         TargetType="{x:Type ToolTip}">
    <Setter Property="Control.Padding" Value="10"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{DynamicResource RegionBrush}"
                  Padding="{TemplateBinding Control.Padding}" BorderThickness="1"
                  BorderBrush="{DynamicResource BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <ContentPresenter x:Name="Presenter" Margin="0,0,0,10"/>
              <StackPanel Grid.Row="1" Orientation="Horizontal">
                <TextBlock FontWeight="Bold"
                           Text="{Binding PropertyTypeName, RelativeSource={RelativeSource AncestorType=hc:PropertyItem}}"/>
                <TextBlock Margin="6,0,0,0"
                           Text="{Binding PropertyName, RelativeSource={RelativeSource AncestorType=hc:PropertyItem}}"/>
              </StackPanel>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="Presenter" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ContentControl.Content" Value="">
              <Setter TargetName="Presenter" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyItemBaseStyle" TargetType="{x:Type hc:PropertyItem}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:PropertyItem}">
          <GroupBox Style="{StaticResource GroupBoxOriginal}" hc:TitleElement.TitlePlacement="Left">
            <HeaderedContentControl.Header>
              <TextBlock Padding="0,0,10,0" Text="{TemplateBinding hc:PropertyItem.DisplayName}"
                         TextTrimming="CharacterEllipsis"
                         Width="{Binding Path=(hc:TitleElement.TitleWidth).Value, RelativeSource={RelativeSource TemplatedParent}}">
                <FrameworkElement.ToolTip>
                  <ToolTip Style="{StaticResource PropertyItemToolTipBaseStyle}"
                           Content="{TemplateBinding hc:PropertyItem.Description}"/>
                </FrameworkElement.ToolTip>
              </TextBlock>
            </HeaderedContentControl.Header>
            <ContentPresenter ContentSource="EditorElement"/>
          </GroupBox>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyItemsControlBaseStyle" TargetType="{x:Type hc:PropertyItemsControl}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource PropertyItemBaseStyle}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:PropertyItemsControl}">
          <hc:ScrollViewer Focusable="false" HorizontalScrollBarVisibility="Disabled">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </hc:ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ItemsControl.IsGrouping" Value="False">
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="PropertyGroupItemBaseStyle" TargetType="{x:Type GroupItem}">
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,6"/>
    <Setter Property="Control.Padding" Value="10,6,6,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupItem}">
          <Expander IsExpanded="True" Header="{Binding Name}">
            <Border BorderThickness="1,0,1,1" BorderBrush="{DynamicResource BorderBrush}"
                    Background="{DynamicResource RegionBrush}" CornerRadius="0,0,4,4">
              <ItemsPresenter Margin="{TemplateBinding Control.Padding}"/>
            </Border>
          </Expander>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PropertyGridBaseStyle" TargetType="{x:Type hc:PropertyGrid}">
    <Setter Property="hc:PropertyGrid.MaxTitleWidth" Value="200"/>
    <Setter Property="hc:PropertyGrid.MinTitleWidth" Value="120"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Padding" Value="10"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:PropertyGrid}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid Margin="{TemplateBinding Control.Padding}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <DockPanel LastChildFill="True" Margin="0,0,0,6">
                <hc:ButtonGroup Margin="0,0,6,0" Style="{StaticResource ButtonGroupSolid}"
                                Visibility="{Binding ShowSortButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
                  <RadioButton Command="interactivity:ControlCommands.SortByCategory" IsChecked="True">
                    <Rectangle Width="16" Height="16" Fill="{StaticResource SortByCategoryDrawingBrush}"/>
                  </RadioButton>
                  <RadioButton Command="interactivity:ControlCommands.SortByName">
                    <Rectangle Width="16" Height="16" Fill="{StaticResource SortByNameDrawingBrush}"/>
                  </RadioButton>
                </hc:ButtonGroup>
                <hc:SearchBar x:Name="PART_SearchBar" IsRealTime="True" hc:InfoElement.ShowClearButton="True"
                              Style="{StaticResource SearchBarPlus}"/>
              </DockPanel>
              <hc:PropertyItemsControl x:Name="PART_ItemsControl" Grid.Row="1" Style="{StaticResource PropertyItemsControlBaseStyle}">
                <ItemsControl.GroupStyle>
                  <GroupStyle ContainerStyle="{StaticResource PropertyGroupItemBaseStyle}"/>
                </ItemsControl.GroupStyle>
              </hc:PropertyItemsControl>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RateRateItemBaseStyle" TargetType="{x:Type hc:RateItem}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:RateItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="OnMouseEnter">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="CanvasRoot">
                <EasingDoubleKeyFrame KeyTime="0" Value="1.1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             Storyboard.TargetName="CanvasRoot">
                <EasingDoubleKeyFrame KeyTime="0" Value="1.1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="OnMouseLeave">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             Storyboard.TargetName="CanvasRoot">
                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             Storyboard.TargetName="CanvasRoot">
                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Canvas x:Name="CanvasRoot" RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <ScaleTransform/>
              </TransformGroup>
            </UIElement.RenderTransform>
            <Path Data="{TemplateBinding hc:RateItem.Icon}" Fill="{TemplateBinding Control.Background}"
                  Stretch="Uniform" Width="{Binding ActualWidth, ElementName=CanvasRoot}"
                  Height="{Binding ActualHeight, ElementName=CanvasRoot}"/>
            <Border x:Name="PART_Icon" Visibility="Collapsed">
              <Path HorizontalAlignment="Left" Data="{TemplateBinding hc:RateItem.Icon}"
                    Fill="{TemplateBinding Control.Foreground}" Stretch="Uniform"
                    Width="{Binding ActualWidth, ElementName=CanvasRoot}"
                    Height="{Binding ActualHeight, ElementName=CanvasRoot}"/>
            </Border>
          </Canvas>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter" SourceName="CanvasRoot">
              <BeginStoryboard Storyboard="{StaticResource OnMouseEnter}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave" SourceName="CanvasRoot">
              <BeginStoryboard Storyboard="{StaticResource OnMouseLeave}"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RateBaseStyle" TargetType="{x:Type hc:Rate}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="hc:RegularItemsControl.ItemMargin" Value="5,0"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="hc:Rate.Icon" Value="{StaticResource StarGeometry}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource RateRateItemBaseStyle}"/>
    <Setter Property="hc:Rate.Text"
            Value="{Binding Value, RelativeSource={RelativeSource Self}, StringFormat={0:0.0}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Rate}">
          <StackPanel Background="Transparent" Orientation="Horizontal">
            <UniformGrid x:Name="PART_Panel" Rows="1" Margin="-5,0"/>
            <TextBlock Text="{TemplateBinding hc:Rate.Text}" Margin="10,0,0,0" VerticalAlignment="Center"
                       Visibility="{TemplateBinding ShowText, Converter={StaticResource Boolean2VisibilityConverter}}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RunningBlockBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:RunningBlock}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="0,10"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:RunningBlock}">
          <hc:RunningBorder Padding="{TemplateBinding Control.Padding}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}"
                            Background="{TemplateBinding Control.Background}"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:SimplePanel ClipToBounds="True">
              <hc:SimplePanel x:Name="PART_Panel" HorizontalAlignment="Left">
                <ContentPresenter x:Name="PART_ContentElement" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left">
                  <UIElement.RenderTransform>
                    <TransformGroup>
                      <TranslateTransform/>
                    </TransformGroup>
                  </UIElement.RenderTransform>
                </ContentPresenter>
              </hc:SimplePanel>
            </hc:SimplePanel>
          </hc:RunningBorder>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="hc:RunningBlock.Orientation" Value="Vertical">
        <Setter Property="Control.Padding" Value="10,0"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SeparatorBaseStyle" TargetType="{x:Type Separator}">
    <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
  </Style>
  <Style x:Key="ShieldBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:Shield}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="3"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:Shield.Color" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Shield}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="#555"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,0,0,1'}">
              <TextBlock Text="{TemplateBinding hc:Shield.Subject}" VerticalAlignment="Center" Margin="4,0"/>
            </Border>
            <Border Grid.Column="1" Background="{TemplateBinding hc:Shield.Color}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,1,1,0'}">
              <ContentPresenter ContentSource="Status" VerticalAlignment="Center" Margin="4,0"
                                TextElement.Foreground="{TemplateBinding Control.Foreground}"
                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SideMenuItemBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:SideMenuItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}"/>
    <Setter Property="hc:SideMenuItem.Role" Value="Item"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="40"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
          <Border Name="BorderRoot" Background="{TemplateBinding Control.Background}">
            <hc:SimplePanel>
              <Rectangle Width="4" Fill="{TemplateBinding Control.BorderBrush}" HorizontalAlignment="Left"/>
              <ContentControl Margin="4,0,0,0">
                <DockPanel Margin="{TemplateBinding Control.Padding}">
                  <ContentControl Name="PresenterIcon" Width="40">
                    <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </ContentControl>
                  <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </DockPanel>
              </ContentControl>
            </hc:SimplePanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
              <Setter TargetName="PresenterIcon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <DataTrigger Value="True"
                         Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=hc:SideMenuItem}}">
              <Setter Value="{DynamicResource BorderBrush}" Property="Control.BorderBrush"/>
            </DataTrigger>
            <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Control.Background"/>
              <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Control.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SideMenuItemAccordionBaseStyle" BasedOn="{StaticResource SideMenuItemBaseStyle}"
         TargetType="{x:Type hc:SideMenuItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
          <Border Name="BorderRoot" Background="{TemplateBinding Control.Background}">
            <hc:SimplePanel>
              <Rectangle Width="4" Fill="{TemplateBinding Control.BorderBrush}" HorizontalAlignment="Left"/>
              <ContentControl Margin="4,0,0,0">
                <DockPanel Margin="{TemplateBinding Control.Padding}">
                  <ContentControl Name="PresenterIcon" Width="40">
                    <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </ContentControl>
                  <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </DockPanel>
              </ContentControl>
            </hc:SimplePanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
              <Setter TargetName="PresenterIcon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <DataTrigger Value="True"
                         Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=hc:SideMenuItem}}">
              <Setter Property="Control.BorderBrush" Value="Transparent"/>
            </DataTrigger>
            <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
              <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Control.Background"/>
              <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Control.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SideMenuItemHeaderBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:SideMenuItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource SideMenuItemBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
          <Border Name="BorderRoot" Background="{TemplateBinding Control.Background}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition MinHeight="48"/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <Border Name="BorderBack" Background="{TemplateBinding Control.Background}"/>
              <ContentControl Grid.Row="0" Margin="4,0,0,0">
                <DockPanel Name="PanelHeader" Margin="{TemplateBinding Control.Padding}" Background="Transparent">
                  <ContentControl Name="PresenterIcon" Width="40">
                    <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </ContentControl>
                  <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </DockPanel>
              </ContentControl>
              <StackPanel x:Name="PART_Panel" Grid.Row="1" Visibility="Collapsed"
                          Height="{Binding PanelAreaLength, RelativeSource={RelativeSource AncestorType=hc:SideMenu}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
              <Setter TargetName="PresenterIcon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
              <Setter TargetName="BorderBack" Property="Border.BorderThickness" Value="4,0,0,0"/>
              <Setter TargetName="BorderBack" Value="{DynamicResource BorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger SourceName="PanelHeader" Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="BorderBack" Value="{DynamicResource SecondaryRegionBrush}" Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SideMenuItemHeaderAccordionBaseStyle" BasedOn="{StaticResource SideMenuItemHeaderBaseStyle}"
         TargetType="{x:Type hc:SideMenuItem}">
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle"
            Value="{StaticResource SideMenuItemAccordionBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
          <Border Name="BorderRoot" Background="{TemplateBinding Control.Background}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition MinHeight="48"/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <Border Name="BorderBack" Background="{TemplateBinding Control.Background}"/>
              <ContentControl Grid.Row="0" Margin="4,0,0,0">
                <DockPanel Name="PanelHeader" Margin="{TemplateBinding Control.Padding}" Background="Transparent">
                  <ContentControl Name="PresenterIcon" Width="40">
                    <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                  </ContentControl>
                  <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"/>
                </DockPanel>
              </ContentControl>
              <ScrollViewer Grid.Row="1" Visibility="{Binding Visibility, ElementName=PART_Panel}"
                            Height="{Binding PanelAreaLength, RelativeSource={RelativeSource AncestorType=hc:SideMenu}}">
                <StackPanel x:Name="PART_Panel" Visibility="Collapsed"/>
              </ScrollViewer>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
              <Setter TargetName="PresenterIcon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
              <Setter TargetName="BorderBack" Property="Border.BorderThickness" Value="4,0,0,0"/>
              <Setter TargetName="BorderBack" Value="{DynamicResource BorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger SourceName="PanelHeader" Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="BorderBack" Value="{DynamicResource SecondaryRegionBrush}" Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SideMenuBaseStyle" TargetType="{x:Type hc:SideMenu}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle"
            Value="{StaticResource SideMenuItemHeaderBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SideMenu}">
          <Border Name="BorderRoot" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <ScrollViewer>
              <StackPanel x:Name="PART_Panel"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SplitButtonBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SplitButton}">
          <hc:SimplePanel x:Name="templateRoot">
            <Border Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            Margin="{TemplateBinding Control.Padding}">
                  <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                        Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                        SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
                  <ContentPresenter x:Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center"
                                    Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </StackPanel>
                <ToggleButton x:Name="PART_Arrow" hc:IconElement.Width="14" Foreground="{TemplateBinding Control.Foreground}"
                              Height="Auto" Width="Auto" Grid.Column="1" Style="{StaticResource ToggleButtonIconTransparent}"
                              hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                              hc:IconElement.Geometry="{StaticResource DownGeometry}"
                              Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,1,1,1'}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Grid>
            </Border>
            <Popup AllowsTransparency="true" StaysOpen="False" Margin="1" PopupAnimation="Fade" Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding hc:SplitButton.MaxDropDownHeight}"
                      BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1"
                      Background="{DynamicResource RegionBrush}"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                      MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                <ScrollViewer x:Name="DropDownScrollViewer" Margin="0,4">
                  <hc:SimplePanel RenderOptions.ClearTypeHint="Enabled">
                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                      <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                                 Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                 Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                    </Canvas>
                    <ContentPresenter ContentSource="DropDownContent"/>
                  </hc:SimplePanel>
                </ScrollViewer>
              </Border>
            </Popup>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="ContentPresenterMain" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="hc:SplitButton.HitMode" Value="Click"/>
                <Condition SourceName="PART_Arrow" Property="ToggleButton.IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="hc:SplitButton.IsDropDownOpen" Value="True"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="UIElement.Opacity" Value=".9"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="UIElement.Opacity" Value=".6"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" BasedOn="{StaticResource SeparatorBaseStyle}"
         TargetType="{x:Type Separator}"/>
  <Style x:Key="StatusBarBaseStyle" TargetType="{x:Type StatusBar}">
    <Setter Property="Control.BorderThickness" Value="0,1,0,0"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
  </Style>
  <Style x:Key="StatusBarItemBaseStyle" TargetType="{x:Type StatusBarItem}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StepBarItemBaseStyle" TargetType="{x:Type hc:StepBarItem}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
    <Style.Triggers>
      <Trigger Property="hc:StepBarItem.Status" Value="Complete">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
      </Trigger>
      <Trigger Property="hc:StepBarItem.Status" Value="UnderWay">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
      <Trigger Property="hc:StepBarItem.Status" Value="Waiting">
        <Setter Property="Control.Foreground" Value="{DynamicResource ThirdlyTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StepBarItemHorizontalTop" BasedOn="{StaticResource StepBarItemBaseStyle}"
         TargetType="{x:Type hc:StepBarItem}">
    <Setter Property="FrameworkElement.Margin" Value="10,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:StepBarItem}">
          <Border Background="Transparent">
            <StackPanel>
              <Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12"
                      BorderThickness="2" BorderBrush="{TemplateBinding Control.Foreground}" Height="24" MinWidth="24">
                <TextBlock Foreground="{TemplateBinding Control.Foreground}" Style="{StaticResource TextBlockDefaultThiLight}"
                           Text="{Binding Index, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
              <ContentPresenter HorizontalAlignment="Center" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                                Margin="0,4,0,0"
                                ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType=hc:StepBar}}"/>
            </StackPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StepBarItemHorizontalBottom" BasedOn="{StaticResource StepBarItemBaseStyle}"
         TargetType="{x:Type hc:StepBarItem}">
    <Setter Property="FrameworkElement.Margin" Value="10,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:StepBarItem}">
          <StackPanel>
            <ContentPresenter HorizontalAlignment="Center" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                              Margin="0,0,0,4"
                              ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType=hc:StepBar}}"/>
            <Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12"
                    BorderThickness="2" BorderBrush="{TemplateBinding Control.Foreground}" Height="24" MinWidth="24">
              <TextBlock Foreground="{TemplateBinding Control.Foreground}" Style="{StaticResource TextBlockDefaultThiLight}"
                         Text="{Binding Index, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Border>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StepBarItemVertical" BasedOn="{StaticResource StepBarItemBaseStyle}"
         TargetType="{x:Type hc:StepBarItem}">
    <Setter Property="FrameworkElement.Margin" Value="0, 10"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:StepBarItem}">
          <StackPanel Orientation="Horizontal">
            <Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12"
                    BorderThickness="2" BorderBrush="{TemplateBinding Control.Foreground}" Height="24" MinWidth="24">
              <TextBlock Foreground="{TemplateBinding Control.Foreground}" Style="{StaticResource TextBlockDefaultThiLight}"
                         Text="{Binding Index, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Border>
            <ContentPresenter HorizontalAlignment="Left" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                              Margin="10,4,0,0"
                              ContentTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource AncestorType=hc:StepBar}}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="StepBarHorizontalTopControlTemplate" TargetType="{x:Type hc:StepBar}">
    <hc:SimplePanel>
      <ProgressBar Name="PART_ProgressBarBack" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,10,0,0"
                   Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}"/>
      <ItemsPresenter/>
    </hc:SimplePanel>
  </ControlTemplate>
  <ControlTemplate x:Key="StepBarHorizontalBottomControlTemplate" TargetType="{x:Type hc:StepBar}">
    <hc:SimplePanel>
      <ProgressBar Name="PART_ProgressBarBack" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                   Margin="0,0,0,10" Style="{StaticResource ProgressBarFlat}"
                   Background="{DynamicResource ThirdlyTextBrush}"/>
      <ItemsPresenter VerticalAlignment="Bottom"/>
    </hc:SimplePanel>
  </ControlTemplate>
  <ControlTemplate x:Key="StepBarVerticalControlTemplate" TargetType="{x:Type hc:StepBar}">
    <hc:SimplePanel>
      <ProgressBar Name="PART_ProgressBarBack" Orientation="Vertical" Width="4" HorizontalAlignment="Left"
                   VerticalAlignment="Center" Margin="10,0,0,0" Style="{StaticResource ProgressBarFlat}"
                   Background="{DynamicResource ThirdlyTextBrush}" RenderTransformOrigin="0.5,0.5">
        <UIElement.RenderTransform>
          <TransformGroup>
            <RotateTransform Angle="180"/>
          </TransformGroup>
        </UIElement.RenderTransform>
      </ProgressBar>
      <ItemsPresenter/>
    </hc:SimplePanel>
  </ControlTemplate>
  <Style x:Key="StepBarBaseStyle" TargetType="{x:Type hc:StepBar}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource StepBarItemHorizontalTop}"/>
    <Setter Property="Control.Template" Value="{StaticResource StepBarHorizontalTopControlTemplate}"/>
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformHorizontalItemsPanelTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:StepBar.Dock" Value="Left">
        <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource StepBarItemVertical}"/>
        <Setter Property="Control.Template" Value="{StaticResource StepBarVerticalControlTemplate}"/>
        <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformVerticalItemsPanelTemplate}"/>
      </Trigger>
      <Trigger Property="hc:StepBar.Dock" Value="Bottom">
        <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource StepBarItemHorizontalBottom}"/>
        <Setter Property="Control.Template" Value="{StaticResource StepBarHorizontalBottomControlTemplate}"/>
        <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformHorizontalItemsPanelTemplate}"/>
      </Trigger>
      <Trigger Property="hc:StepBar.Dock" Value="Right">
        <Setter Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
        <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource StepBarItemVertical}"/>
        <Setter Property="Control.Template" Value="{StaticResource StepBarVerticalControlTemplate}"/>
        <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformVerticalItemsPanelTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <hc:SimplePanel x:Name="templateRoot" SnapsToDevicePixels="true">
            <Border x:Name="mainBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0"
                    Background="{TemplateBinding Control.Background}" Margin="0"/>
            <ContentPresenter x:Name="contentPresenter" TextElement.Foreground="{DynamicResource PrimaryTextBrush}"
                              ContentSource="Header" Focusable="False" HorizontalAlignment="Center"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="TabItem.IsSelected" Value="False">
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,0,0,0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}"
                           Value="Top"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,0,0,2"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}"
                           Value="Left"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,0,2,0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}"
                           Value="Bottom"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="0,2,0,0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}"
                           Value="Right"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="mainBorder" Property="Border.BorderThickness" Value="2,0,0,0"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabControlBaseStyle" TargetType="{x:Type TabControl}">
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Foreground" Value="White"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TabItemStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid x:Name="templateRoot" Background="{TemplateBinding Control.Background}" ClipToBounds="true"
                SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0"
                      Grid.Row="0"/>
            <Border x:Name="contentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Control.Background}"
                    Grid.Column="0" Grid.Row="1">
              <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabItemCapsuleBaseStyle" TargetType="{x:Type TabItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.Margin" Value="-1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Border x:Name="BorderRoot" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter x:Name="contentPresenter" ContentSource="Header"
                              TextElement.Foreground="{TemplateBinding Control.Foreground}" Focusable="False"
                              HorizontalAlignment="Center" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource SecondaryRegionBrush}" TargetName="BorderRoot" Property="Border.Background"/>
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="TabItem.IsSelected" Value="true">
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:TitleElement.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <DataTrigger Value="Left"
                         Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}">
              <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0"/>
            </DataTrigger>
            <DataTrigger Value="Right"
                         Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}">
              <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0"/>
            </DataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="TabItem.IsSelected" Value="True">
        <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TabItemPlusBaseStyle" TargetType="{x:Type hc:TabItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1,0,1,1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="Control.Padding" Value="10,0,0,0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="hc:TabItem.Menu" Value="{StaticResource TabItemMenu}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:TabItem}">
          <Grid x:Name="templateRoot" SnapsToDevicePixels="true" ContextMenu="{TemplateBinding hc:TabItem.Menu}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="mainBorder" Grid.ColumnSpan="3" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" Margin="0">
              <Border x:Name="innerBorder" Margin="0,0,0,-1" Background="{DynamicResource RegionBrush}"
                      Visibility="Collapsed"/>
            </Border>
            <Path x:Name="PathMain" Margin="10,0,0,0" Grid.Column="0" Width="{TemplateBinding hc:IconElement.Width}"
                  Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                  SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" ContentSource="Header" Focusable="False"
                              HorizontalAlignment="Stretch" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
            <Border Name="BorderMask" Grid.Column="1" HorizontalAlignment="Right" Width="20"
                    Background="{TemplateBinding Control.Background}" Margin="0,0,1,1">
              <UIElement.OpacityMask>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="White" Offset="1"/>
                  <GradientStop Offset="0"/>
                </LinearGradientBrush>
              </UIElement.OpacityMask>
            </Border>
            <Button Grid.Column="2" Focusable="False" Command="interactivity:ControlCommands.Close"
                    Background="Transparent" Style="{StaticResource ButtonCustom}" Width="28"
                    Visibility="{TemplateBinding ShowCloseButton, Converter={StaticResource Boolean2VisibilityConverter}}">
              <Path Fill="{DynamicResource PrimaryTextBrush}" Width="8" Height="8"
                    Style="{StaticResource ClosePathStyle}"/>
            </Button>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabItem.IsSelected" Value="true">
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter TargetName="innerBorder" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="BorderMask" Value="{DynamicResource RegionBrush}" Property="Border.Background"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="hc:TabItem.ShowCloseButton" Value="True">
              <Setter TargetName="BorderMask" Property="FrameworkElement.Margin" Value="0,0,0,1"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="TabControlPlusTemplate" TargetType="{x:Type hc:TabControl}">
    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}">
      <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition x:Name="ColumnDefinition0"/>
          <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Background="{TemplateBinding Control.Background}" BorderThickness="0,0,0,1"
                BorderBrush="{DynamicResource BorderBrush}">
          <hc:TabPanel x:Name="PART_HeaderPanel" MinHeight="{TemplateBinding hc:TabControl.TabItemHeight}"
                       TabItemHeight="{TemplateBinding hc:TabControl.TabItemHeight}"
                       TabItemWidth="{TemplateBinding hc:TabControl.TabItemWidth}"
                       IsTabFillEnabled="{TemplateBinding hc:TabControl.IsTabFillEnabled}" Margin="0,0,-1,-1"
                       HorizontalAlignment="Left" Background="{DynamicResource SecondaryTextBrush}" IsItemsHost="true">
            <interactivity:Interaction.Behaviors>
              <interactivity:FluidMoveBehavior AppliesTo="Children" Duration="{Binding FluidMoveDuration, ElementName=PART_HeaderPanel}">
                <interactivity:FluidMoveBehavior.EaseX>
                  <CubicEase EasingMode="EaseOut"/>
                </interactivity:FluidMoveBehavior.EaseX>
              </interactivity:FluidMoveBehavior>
            </interactivity:Interaction.Behaviors>
          </hc:TabPanel>
        </Border>
        <Border x:Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" Grid.Column="0"
                Grid.Row="1">
          <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"
                            Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        </Border>
        <Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="0" BorderThickness="1,0,0,1"
                BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                HorizontalAlignment="Right" Visibility="{Binding Visibility, ElementName=PART_OverflowButton}">
          <hc:ContextMenuToggleButton x:Name="PART_OverflowButton" Visibility="Collapsed" Padding="0" hc:IconElement.Width="14"
                                      Height="Auto" BorderThickness="0" Background="{DynamicResource SecondaryRegionBrush}"
                                      Style="{StaticResource ToggleButtonIconTransparent}"
                                      hc:IconElement.Geometry="{StaticResource DownGeometry}"
                                      hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"/>
        </Border>
      </Grid>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="TabControlPlusScrollableTemplate" TargetType="{x:Type hc:TabControl}">
    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}">
      <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="0" BorderThickness="0,0,1,1"
                BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                HorizontalAlignment="Left" Panel.ZIndex="2"
                Visibility="{TemplateBinding ShowScrollButton, Converter={StaticResource Boolean2VisibilityConverter}}">
          <UIElement.CacheMode>
            <BitmapCache SnapsToDevicePixels="True"/>
          </UIElement.CacheMode>
          <RepeatButton x:Name="PART_ScrollButtonLeft" Focusable="False" Style="{StaticResource RepeatButtonIcon}"
                        BorderThickness="0" hc:IconElement.Height="14" Padding="8 0" Height="Auto"
                        VerticalAlignment="Stretch" Width="{StaticResource DefaultControlHeight}"
                        hc:IconElement.Geometry="{StaticResource LeftGeometry}"
                        Foreground="{DynamicResource PrimaryTextBrush}" Background="{DynamicResource SecondaryRegionBrush}"/>
        </Border>
        <hc:ScrollViewer x:Name="PART_OverflowScrollviewer" HorizontalScrollBarVisibility="Hidden" CanMouseWheel="True"
                         hc:ScrollViewerAttach.Orientation="Horizontal" IsInertiaEnabled="True" Grid.Row="0" Grid.Column="1"
                         IsDeferredScrollingEnabled="True">
          <Border Name="PART_HeaderBorder" Background="{TemplateBinding Control.Background}"
                  BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}">
            <hc:TabPanel x:Name="PART_HeaderPanel" MinHeight="{TemplateBinding hc:TabControl.TabItemHeight}"
                         TabItemHeight="{TemplateBinding hc:TabControl.TabItemHeight}"
                         TabItemWidth="{TemplateBinding hc:TabControl.TabItemWidth}"
                         IsTabFillEnabled="{TemplateBinding hc:TabControl.IsTabFillEnabled}" Margin="0,0,-1,-1"
                         HorizontalAlignment="Left" Background="{DynamicResource SecondaryTextBrush}" IsItemsHost="true">
              <interactivity:Interaction.Behaviors>
                <interactivity:FluidMoveBehavior AppliesTo="Children" Duration="{Binding FluidMoveDuration, ElementName=PART_HeaderPanel}">
                  <interactivity:FluidMoveBehavior.EaseX>
                    <CubicEase EasingMode="EaseOut"/>
                  </interactivity:FluidMoveBehavior.EaseX>
                </interactivity:FluidMoveBehavior>
              </interactivity:Interaction.Behaviors>
            </hc:TabPanel>
          </Border>
        </hc:ScrollViewer>
        <Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="2" BorderThickness="1,0,0,1"
                BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                HorizontalAlignment="Right">
          <UIElement.CacheMode>
            <BitmapCache SnapsToDevicePixels="True"/>
          </UIElement.CacheMode>
          <StackPanel Orientation="Horizontal">
            <RepeatButton x:Name="PART_ScrollButtonRight" Focusable="False" Style="{StaticResource RepeatButtonIcon}"
                          BorderThickness="0" hc:IconElement.Height="14" Padding="8 0" Height="Auto"
                          VerticalAlignment="Stretch" Width="{StaticResource DefaultControlHeight}"
                          hc:IconElement.Geometry="{StaticResource RightGeometry}"
                          Foreground="{DynamicResource PrimaryTextBrush}" Background="{DynamicResource SecondaryRegionBrush}"
                          Visibility="{TemplateBinding ShowScrollButton, Converter={StaticResource Boolean2VisibilityConverter}}"/>
            <Border Width="1" Background="{DynamicResource BorderBrush}"
                    Visibility="{Binding Visibility, ElementName=PART_OverflowButton}"/>
            <hc:ContextMenuToggleButton x:Name="PART_OverflowButton" Visibility="Collapsed" Padding="0" hc:IconElement.Width="14"
                                        Height="Auto" BorderThickness="0" Background="{DynamicResource SecondaryRegionBrush}"
                                        Style="{StaticResource ToggleButtonIconTransparent}"
                                        hc:IconElement.Geometry="{StaticResource DownGeometry}"
                                        hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"/>
          </StackPanel>
        </Border>
        <Border x:Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" Grid.Row="1"
                Grid.Column="0" Grid.ColumnSpan="3">
          <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"
                            Margin="{TemplateBinding Control.Padding}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        </Border>
      </Grid>
    </Border>
  </ControlTemplate>
  <Style x:Key="TabControlPlusBaseStyle" TargetType="{x:Type hc:TabControl}">
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TabItemPlusBaseStyle}"/>
    <Setter Property="Control.Template" Value="{StaticResource TabControlPlusTemplate}"/>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TabControl.IsScrollable" Value="True"/>
          <Condition Property="hc:TabControl.IsTabFillEnabled" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Template" Value="{StaticResource TabControlPlusScrollableTemplate}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SlidingTabContainerBaseStyle" TargetType="{x:Type hc:SlidingTabContainer}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SlidingTabContainer}">
          <Border HorizontalAlignment="Center" VerticalAlignment="Center" Padding="{TemplateBinding Control.Padding}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:SimplePanel>
              <Border x:Name="PART_Sliding" Width="0" Height="0" Effect="{StaticResource EffectShadow1}"
                      HorizontalAlignment="Left" VerticalAlignment="Top"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}">
                <UIElement.RenderTransform>
                  <TranslateTransform/>
                </UIElement.RenderTransform>
              </Border>
              <ContentPresenter/>
            </hc:SimplePanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TimePickerBaseStyle" BasedOn="{StaticResource InputElementBaseStyle}"
         TargetType="{x:Type hc:TimePicker}">
    <Setter Property="hc:TimePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:TimePicker}">
          <Grid x:Name="PART_Root">
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                    hc:IconElement.Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False"
                    Grid.Row="0"
                    Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                    Foreground="{Binding BorderBrush, ElementName=border}"/>
            <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:TimePicker.CaretBrush}"
                                 Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                                 HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            <Popup x:Name="PART_Popup" Grid.Column="0"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
                   PlacementTarget="{Binding ElementName=border}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
              <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
              <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
              <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="TimePickerExtendTopTemplate" TargetType="{x:Type hc:TimePicker}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False"
                Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:TimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TimePickerExtendLeftTemplate" TargetType="{x:Type hc:TimePicker}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="2" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch" hc:IconElement.Width="14" Style="{StaticResource ButtonIcon}"
                hc:IconElement.Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False"
                Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:TimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="TimePickerExtendBaseStyle" BasedOn="{StaticResource TimePickerBaseStyle}"
         TargetType="{x:Type hc:TimePicker}">
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="hc:InfoElement.Symbol" Value="●"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template" Value="{StaticResource TimePickerExtendTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource TimePickerExtendLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="TimePickerPlusTopTemplate" TargetType="{x:Type hc:TimePicker}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
                       Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}"/>
      </Grid.RowDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource ClockGeometry}"
                Grid.Column="2" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:TimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="ButtonClear" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:InfoElement.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TimePickerPlusLeftTemplate" TargetType="{x:Type hc:TimePicker}">
    <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}"
          Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <DockPanel LastChildFill="True"
                 Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}"
                 HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                 Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
        <ContentPresenter DockPanel.Dock="Right" TextElement.Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0"
                          Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                          Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
        <TextBlock hc:TextBlockAttach.AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"
                   Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"/>
      </DockPanel>
      <Grid x:Name="PART_Root" Column="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Border x:Name="border" Grid.ColumnSpan="3" BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Background="{TemplateBinding Control.Background}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Button Name="ButtonClear" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Grid.Column="1"
                Style="{StaticResource ButtonIcon}" Padding="0,0,2,0"
                hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <Button x:Name="PART_Button" Height="Auto" Width="Auto" HorizontalContentAlignment="Left"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch" hc:IconElement.Width="14"
                Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource ClockGeometry}"
                Grid.Column="2" Focusable="False" Grid.Row="0"
                Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                Foreground="{Binding BorderBrush, ElementName=border}"/>
        <hc:WatermarkTextBox x:Name="PART_TextBox" CaretBrush="{TemplateBinding hc:TimePicker.CaretBrush}"
                             Foreground="{TemplateBinding Control.Foreground}" Padding="{TemplateBinding Control.Padding}"
                             HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding UIElement.Focusable}"
                             HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                             VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                             Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup" Grid.Column="0"
               PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               AllowsTransparency="True" Placement="Bottom" StaysOpen="False"
               PlacementTarget="{Binding ElementName=border}"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="hc:InfoElement.IsReadOnly" Value="True">
        <Setter TargetName="ButtonClear" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.IsEnabled" Value="False"/>
        <Setter TargetName="PART_Button" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="PART_TextBox" Property="TextBoxBase.IsReadOnly" Value="True"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Root" Property="UIElement.Opacity" Value="0.4"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition SourceName="PART_Popup" Property="Popup.IsOpen" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Root" Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="hc:InfoElement.ShowClearButton" Value="True"/>
          <Condition Property="hc:InfoElement.IsReadOnly" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ButtonClear" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="Border.BorderBrush"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="TimePickerPlusBaseStyle" BasedOn="{StaticResource TimePickerExtendBaseStyle}"
         TargetType="{x:Type hc:TimePicker}">
    <Setter Property="Control.Template" Value="{StaticResource TimePickerPlusTopTemplate}"/>
    <Style.Triggers>
      <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
        <Setter Property="Control.Template" Value="{StaticResource TimePickerPlusLeftTemplate}"/>
        <Setter Property="FrameworkElement.Width" Value="Auto"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.Width" Value="1"/>
  </Style>
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ButtonBaseStyle}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource CheckBoxBaseStyle}"
         TargetType="{x:Type CheckBox}"/>
  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource RadioButtonBaseStyle}"
         TargetType="{x:Type RadioButton}"/>
  <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" BasedOn="{StaticResource ComboBoxBaseStyle}"
         TargetType="{x:Type ComboBox}"/>
  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" BasedOn="{StaticResource TextBoxBaseStyle}"
         TargetType="{x:Type TextBox}"/>
  <Style x:Key="{x:Static ToolBar.MenuStyleKey}" BasedOn="{StaticResource MenuBaseStyle}"
         TargetType="{x:Type Menu}"/>
  <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToggleButtonBaseStyle}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToolBarThumbHorizontalStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Control.Padding}" Background="Transparent">
            <Path Stretch="Uniform" Width="4" Fill="{DynamicResource PrimaryBrush}"
                  Data="{StaticResource DragVerticalGeometry}" SnapsToDevicePixels="True"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarThumbVerticalStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Control.Padding}" Background="Transparent">
            <Path Stretch="Uniform" Height="4" Fill="{DynamicResource PrimaryBrush}"
                  Data="{StaticResource DragHorizontalGeometry}" SnapsToDevicePixels="True"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarOverflowButtonStyle" BasedOn="{StaticResource ToggleButtonIcon}"
         TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.Height" Value="Auto"/>
    <Setter Property="FrameworkElement.Width" Value="Auto"/>
    <Setter Property="ButtonBase.ClickMode" Value="Press"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ToolBarVerticalTemplate" TargetType="{x:Type ToolBar}">
    <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}"
            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid SnapsToDevicePixels="true">
        <Grid.RowDefinitions>
          <RowDefinition/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
          <Thumb x:Name="ToolBarThumb" DockPanel.Dock="Top" Style="{StaticResource ToolBarThumbVerticalStyle}"
                 Height="10" Margin="0 4 0 0"/>
          <ContentPresenter x:Name="ToolBarHeader" DockPanel.Dock="Top" ContentSource="Header" HorizontalAlignment="Center"
                            Margin="4 4 4 0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                            VerticalAlignment="Center"/>
          <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                        Margin="{TemplateBinding Control.Padding}"/>
        </DockPanel>
        <ToggleButton x:Name="ButtonOverflow" Margin="2 0 2 2" Padding="6 4" HorizontalContentAlignment="Right"
                      hc:IconElement.Height="8" hc:IconSwitchElement.GeometrySelected="{StaticResource LeftGeometry}"
                      hc:IconElement.Geometry="{StaticResource RightGeometry}"
                      Style="{StaticResource ToolBarOverflowButtonStyle}" Grid.Row="1"
                      IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                      IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup AllowsTransparency="true" Focusable="false"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Right" StaysOpen="false" PlacementTarget="{Binding ElementName=ButtonOverflow}"
               IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1"
                  Background="{DynamicResource RegionBrush}" RenderOptions.ClearTypeHint="Enabled"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle"
                                  Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" FocusVisualStyle="{x:Null}"/>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
        <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
      </Trigger>
      <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
        <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="ToolBarTray.IsLocked" Value="true">
        <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ToolBarHorizontalTemplate" TargetType="{x:Type ToolBar}">
    <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            Background="{TemplateBinding Control.Background}"
            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
      <Grid SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
          <Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbHorizontalStyle}" Width="10"
                 Margin="4 0 0 0"/>
          <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4 4 0 4"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
          <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                        Margin="{TemplateBinding Control.Padding}"/>
        </DockPanel>
        <ToggleButton x:Name="ButtonOverflow" Margin="0 2 2 2" Padding="4 6" VerticalContentAlignment="Bottom"
                      hc:IconElement.Width="8" hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"
                      hc:IconElement.Geometry="{StaticResource DownGeometry}"
                      Style="{StaticResource ToolBarOverflowButtonStyle}" Grid.Column="1"
                      IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                      IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup AllowsTransparency="true" Focusable="false"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
               Placement="Bottom" StaysOpen="false" PlacementTarget="{Binding ElementName=ButtonOverflow}"
               IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1"
                  Background="{DynamicResource RegionBrush}" RenderOptions.ClearTypeHint="Enabled"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle"
                                  Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200" FocusVisualStyle="{x:Null}"/>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
        <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
      </Trigger>
      <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
        <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="ToolBarTray.IsLocked" Value="true">
        <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ToolBarBaseStyle" TargetType="{x:Type ToolBar}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.Padding" Value="4"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template" Value="{StaticResource ToolBarHorizontalTemplate}"/>
    <Style.Triggers>
      <Trigger Property="ToolBar.Orientation" Value="Vertical">
        <Setter Property="Control.Template" Value="{StaticResource ToolBarVerticalTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToolTipBaseStyle" TargetType="{x:Type ToolTip}">
    <Setter Property="Control.Padding" Value="0,6"/>
    <Setter Property="Control.Background" Value="White"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{DynamicResource RegionBrush}"
                  Padding="{TemplateBinding Control.Padding}" BorderThickness="1"
                  BorderBrush="{DynamicResource BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter Margin="10,0"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TransferItemBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:TransferItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualMargin0}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:TransferItem}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                  Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='1,0,1,0'}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ListBoxItem.IsSelected" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
      <Trigger Property="hc:TransferItem.IsTransferred" Value="True">
        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TransferBaseStyle" TargetType="{x:Type hc:Transfer}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="2"/>
    <Setter Property="ListBox.SelectionMode" Value="Extended"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TransferItemBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Transfer}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition/>
              <RowDefinition/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="4" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                              IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <hc:ToggleBlock.CheckedContent>
                  <hc:ScrollViewer Focusable="false"
                                   HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                   Padding="{TemplateBinding Control.Padding}"
                                   SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                   VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                   IsInertiaEnabled="{Binding Path=(hc:ScrollViewer.IsInertiaEnabled), RelativeSource={RelativeSource TemplatedParent}}">
                    <ItemsPresenter/>
                  </hc:ScrollViewer>
                </hc:ToggleBlock.CheckedContent>
                <hc:ToggleBlock.UnCheckedContent>
                  <hc:Empty/>
                </hc:ToggleBlock.UnCheckedContent>
              </hc:ToggleBlock>
            </Border>
            <StackPanel Margin="8,0" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0" Grid.RowSpan="4"
                        Grid.Column="1">
              <Button hc:IconElement.Geometry="{StaticResource LeftGeometry}"
                      Command="interactivity:ControlCommands.Cancel"/>
              <Button hc:IconElement.Geometry="{StaticResource RightGeometry}" Margin="0,8,0,0"
                      Command="interactivity:ControlCommands.Selected"/>
            </StackPanel>
            <ListBox x:Name="PART_SelectedListBox" Padding="{TemplateBinding Control.Padding}"
                     SelectionMode="{TemplateBinding ListBox.SelectionMode}"
                     ItemContainerStyle="{TemplateBinding ItemsControl.ItemContainerStyle}"
                     ItemsPanel="{TemplateBinding ItemsControl.ItemsPanel}" Grid.Row="0" Grid.RowSpan="4"
                     Grid.Column="2" Background="{TemplateBinding Control.Background}"
                     BorderThickness="{TemplateBinding Control.BorderThickness}"
                     BorderBrush="{TemplateBinding Control.BorderBrush}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Height="16" Padding="4" Width="16">
            <Path x:Name="ExpandPath" RenderTransformOrigin="0.5,0.5" Stretch="Uniform"
                  Data="{StaticResource TreeArrow}"
                  Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=TreeViewItem}}">
              <UIElement.RenderTransform>
                <RotateTransform Angle="-90"/>
              </UIElement.RenderTransform>
            </Path>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="0"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TreeViewItemBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type TreeViewItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                    SnapsToDevicePixels="true"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <DockPanel LastChildFill="True"
                         Margin="{Binding Converter={StaticResource TreeViewItemMarginConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton x:Name="Expander" ClickMode="Press" Style="{StaticResource ExpandCollapseToggleStyle}"
                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ContentPresenter x:Name="PART_Header" VerticalAlignment="Center" ContentSource="Header"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </DockPanel>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="Bd" Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="TreeViewItem.IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="TreeViewItem.IsSelected" Value="true">
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryBrush}" Property="Border.Background"/>
              <Setter Value="{DynamicResource TextIconBrush}" Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                <Condition Property="TreeViewItem.IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource DarkDefaultBrush}" Property="Border.Background"/>
              <Setter Value="{DynamicResource PrimaryTextBrush}" Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="UIElement.Opacity" Value=".4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TreeViewBaseStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="2,2,2,0"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="hc:ScrollViewer.IsInertiaEnabled" Value="False"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
              <hc:ToggleBlock.CheckedContent>
                <hc:ScrollViewer x:Name="_tv_scrollviewer_" Focusable="false"
                                 HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                 Padding="{TemplateBinding Control.Padding}"
                                 SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                 VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                 IsInertiaEnabled="{Binding Path=(hc:ScrollViewer.IsInertiaEnabled), RelativeSource={RelativeSource TemplatedParent}}">
                  <ItemsPresenter/>
                </hc:ScrollViewer>
              </hc:ToggleBlock.CheckedContent>
              <hc:ToggleBlock.UnCheckedContent>
                <hc:Empty/>
              </hc:ToggleBlock.UnCheckedContent>
            </hc:ToggleBlock>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
              <Setter TargetName="_tv_scrollviewer_" Property="ScrollViewer.CanContentScroll" Value="true"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsControl.ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="WatermarkBaseStyle" TargetType="{x:Type hc:Watermark}">
    <Setter Property="hc:Watermark.MarkBrush" Value="{DynamicResource DarkMaskBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DarkMaskBrush}"/>
    <Setter Property="hc:Watermark.Angle" Value="20"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Watermark}">
          <Border Name="PART_Root">
            <ContentPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AutoCompleteTextBoxItemBaseStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="False"/>
                <Condition Property="UIElement.IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Border.Background"/>
            </MultiTrigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource PrimaryBrush}" Property="Border.Background"/>
              <Setter Property="Control.Foreground" Value="White"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AutoCompleteTextBoxBaseStyle" TargetType="{x:Type hc:AutoCompleteTextBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="hc:ComboBox.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="ItemsControl.ItemContainerStyle"
            Value="{StaticResource AutoCompleteTextBoxItemBaseStyle}"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="hc:Empty.ShowEmpty" Value="True"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:AutoCompleteTextBox}">
          <hc:SimplePanel>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <TextBox x:Name="PART_SearchTextBox"
                       HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                       VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                       CaretBrush="{TemplateBinding hc:ComboBox.CaretBrush}" Padding="{TemplateBinding Control.Padding}"
                       Style="{StaticResource ComboBoxEditableTextBox}"
                       IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Border>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1"
                   PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}"
                      Margin="8,0,8,8" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                      BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                      MinWidth="{Binding ActualWidth, ElementName=toggleButton}">
                <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                  <hc:ToggleBlock.CheckedContent>
                    <ScrollViewer Margin="0,4">
                      <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </ScrollViewer>
                  </hc:ToggleBlock.CheckedContent>
                  <hc:ToggleBlock.UnCheckedContent>
                    <hc:Empty/>
                  </hc:ToggleBlock.UnCheckedContent>
                </hc:ToggleBlock>
              </Border>
            </Popup>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
              <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=PART_SearchTextBox}"
                      Property="FrameworkElement.MaxWidth"/>
              <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth, ElementName=PART_SearchTextBox}"
                      Property="FrameworkElement.MinWidth"/>
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
              <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}"
                      Property="FrameworkElement.MaxWidth"/>
              <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight, ElementName=PART_SearchTextBox}"
                      Property="FrameworkElement.MinWidth"/>
            </Trigger>
            <Trigger SourceName="PART_SearchTextBox" Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition SourceName="PART_SearchTextBox" Property="UIElement.IsFocused" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </MultiTrigger>
            <Trigger SourceName="PART_SearchTextBox" Property="UIElement.IsFocused" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
    <Setter Property="FrameworkElement.FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="2" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}"
                           StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridCell}">
          <Border Background="Transparent">
            <Border Margin="0,0,4,0" Padding="{TemplateBinding Control.Padding}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}"
                     Value="Cell"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridRow}}"
                     Value="False"/>
          <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}"
                     Value="CellOrRowHeader"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=DataGridRow}}"
                     Value="True"/>
          <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}"
                     Value="CellOrRowHeader"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
          <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource FindAncestor, AncestorType=DataGrid}}"
                     Value="FullRow"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </MultiDataTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="DataGridCell.IsSelected" Value="true"/>
          <Condition Property="Selector.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,4"/>
    <Setter Property="Control.Padding" Value="0,6"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="DataGridRow.ValidationErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRow}">
          <SelectiveScrollingGrid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Name="DGR_Border" CornerRadius="4" Grid.ColumnSpan="2"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"/>
            <DataGridCellsPresenter MinHeight="{TemplateBinding FrameworkElement.MinHeight}" VerticalContentAlignment="Center"
                                    Grid.Row="0" Grid.Column="1" ItemsPanel="{TemplateBinding DataGridRow.ItemsPanel}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DataGridRow.DetailsVisibility}"
                                      SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
            <DataGridRowHeader Grid.Row="0" Grid.Column="0" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                               Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
          </SelectiveScrollingGrid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
      </Trigger>
      <Trigger Property="DataGridRow.IsSelected" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="DataGridRow.IsSelected" Value="true"/>
          <Condition Property="Selector.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="Control.Background" Value="{DynamicResource DarkDefaultBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Padding" Value="12,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
          <hc:SimplePanel>
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                    Padding="{TemplateBinding Control.Padding}">
              <Grid HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter RecognizesAccessKey="True" VerticalAlignment="Center"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <ToggleButton x:Name="ToggleButtonSortDirection" Grid.Column="1" VerticalAlignment="Center"
                              Height="{x:Static system:Double.NaN}" Padding="4,0" Width="20" IsEnabled="False" Opacity="1"
                              Foreground="{DynamicResource PrimaryBrush}" Style="{StaticResource ToggleButtonIconTransparent}"
                              hc:IconElement.Geometry="{StaticResource DownGeometry}"
                              hc:IconSwitchElement.GeometrySelected="{StaticResource UpGeometry}"/>
              </Grid>
            </Border>
            <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left"
                   Style="{StaticResource ColumnHeaderGripperStyle}"/>
            <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right"
                   Style="{StaticResource ColumnHeaderGripperStyle}"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="DataGridColumnHeader.SortDirection">
              <Setter TargetName="ToggleButtonSortDirection" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
              <Setter TargetName="ToggleButtonSortDirection" Property="ToggleButton.IsChecked" Value="True"/>
            </Trigger>
            <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
              <Setter TargetName="ToggleButtonSortDirection" Property="ToggleButton.IsChecked" Value="False"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
      <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridRowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
          <hc:SimplePanel HorizontalAlignment="Center">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                    Padding="{TemplateBinding Control.Padding}">
              <StackPanel Orientation="Horizontal">
                <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="Center"/>
              </StackPanel>
            </Border>
            <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}"
                   VerticalAlignment="Top"/>
            <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}"
                   VerticalAlignment="Bottom"/>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DataGridEditingComboBoxColumnStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ComboBoxItemBaseStyle}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,7,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="8,0,0,5"/>
    <Setter Property="Control.Template" Value="{StaticResource ComboBoxTemplate}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridEditingTextColumnStyle" TargetType="{x:Type TextBox}">
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,7,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="8,0,0,5"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultInputPadding}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource InputElementErrorTemplate}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <hc:SimplePanel x:Name="root">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridEditingComboBoxColumnStyle.Small"
         BasedOn="{StaticResource DataGridEditingComboBoxColumnStyle}" TargetType="{x:Type ComboBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ComboBoxItem.Small}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Template" Value="{StaticResource ComboBoxTemplate}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DataGridEditingTextColumnStyle.Small"
         BasedOn="{StaticResource DataGridEditingTextColumnStyle}" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource InputElementErrorTemplate}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <hc:SimplePanel x:Name="root">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollViewer x:Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Control.Padding}"
                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"
                          HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="root" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="Control.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource DangerBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
  </Style>
  <Style x:Key="BadgePrimary" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="BadgeSuccess" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="BadgeInfo" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="BadgeWarning" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="BadgeDanger" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="CalendarWithClockBaseStyle" TargetType="{x:Type hc:CalendarWithClock}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="8 0"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:CalendarWithClock}">
          <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Effect="{StaticResource EffectShadow2}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border Margin="4" Grid.ColumnSpan="2" Height="42" VerticalAlignment="Top"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}"/>
              <ContentPresenter x:Name="PART_CalendarPresenter" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Margin="-8,-4,-8,-8"/>
              <ContentPresenter x:Name="PART_ClockPresenter" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Margin="-8,-4,-8,-8"/>
              <Button Name="PART_ButtonConfirm" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"
                      HorizontalAlignment="Center" Margin="0,0,0,19" Width="180" VerticalAlignment="Bottom"
                      Style="{StaticResource ButtonPrimary}"
                      Visibility="{TemplateBinding ShowConfirmButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}"/>
            </Grid>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:CalendarWithClock}" BasedOn="{StaticResource CalendarWithClockBaseStyle}"/>
  <Style BasedOn="{StaticResource CardBaseStyle}" TargetType="{x:Type hc:Card}"/>
  <Style x:Key="CarouselPateButton" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.Margin" Value="5,0"/>
    <Setter Property="FrameworkElement.Width" Value="10"/>
    <Setter Property="FrameworkElement.Height" Value="10"/>
    <Setter Property="Control.Background" Value="White"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border CornerRadius="5" SnapsToDevicePixels="true"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"/>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Setter Property="UIElement.Opacity" Value=".6"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" Property="Control.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:Carousel}">
    <Setter Property="hc:Carousel.PageButtonStyle" Value="{StaticResource CarouselPateButton}"/>
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource CarouselItemBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Carousel}">
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="GridTop" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.1"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation Storyboard.TargetName="GridTop" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:.1"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
          <hc:SimplePanel ClipToBounds="True">
            <StackPanel x:Name="PART_Panel" Orientation="Horizontal"/>
            <hc:SimplePanel x:Name="GridTop" Opacity="0">
              <Button Command="interactivity:ControlCommands.Prev" HorizontalAlignment="Left" VerticalAlignment="Center"
                      Margin="30,0,0,0" Style="{StaticResource ButtonCustom}">
                <Border Width="50" Height="100" Background="{DynamicResource DarkOpacityBrush}" CornerRadius="4">
                  <Path Margin="16" Fill="White" Style="{StaticResource LeftPathStyle}"/>
                </Border>
              </Button>
              <Button Command="interactivity:ControlCommands.Next" HorizontalAlignment="Right" VerticalAlignment="Center"
                      Margin="0,0,30,0" Style="{StaticResource ButtonCustom}">
                <Border Width="50" Height="100" Background="{DynamicResource DarkOpacityBrush}" CornerRadius="4">
                  <Path Margin="16" Fill="White" Style="{StaticResource RightPathStyle}"/>
                </Border>
              </Button>
            </hc:SimplePanel>
            <StackPanel Name="PART_PanelPage" Orientation="Horizontal" VerticalAlignment="Bottom"
                        HorizontalAlignment="Center" Margin="0,0,0,20"/>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ChatBubbleBaseStyle}" TargetType="{x:Type hc:ChatBubble}"/>
  <Style BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="{x:Type hc:CheckComboBox}"/>
  <Style x:Key="CheckComboBoxItem.Small" BasedOn="{StaticResource CheckComboBoxItemBaseStyle}"
         TargetType="{x:Type hc:CheckComboBoxItem}">
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="Tag4CheckComboBoxStyle.Small" BasedOn="{StaticResource Tag4CheckComboBoxStyle}"
         TargetType="{x:Type hc:Tag}">
    <Setter Property="Control.Padding" Value="6,0,4,0"/>
  </Style>
  <Style x:Key="CheckComboBox.Small" BasedOn="{StaticResource CheckComboBoxBaseStyle}"
         TargetType="{x:Type hc:CheckComboBox}">
    <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle.Small}"/>
    <Setter Property="hc:CheckComboBox.TagSpacing" Value="2"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource CheckComboBoxItem.Small}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,2"/>
  </Style>
  <Style x:Key="CheckComboBoxExtend" BasedOn="{StaticResource CheckComboBoxExtendBaseStyle}"
         TargetType="{x:Type hc:CheckComboBox}"/>
  <Style x:Key="CheckComboBoxExtend.Small" BasedOn="{StaticResource CheckComboBoxExtend}"
         TargetType="{x:Type hc:CheckComboBox}">
    <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle.Small}"/>
    <Setter Property="hc:CheckComboBox.TagSpacing" Value="2"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource CheckComboBoxItem.Small}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,2"/>
  </Style>
  <Style x:Key="CheckComboBoxPlus" BasedOn="{StaticResource CheckComboBoxPlusBaseStyle}"
         TargetType="{x:Type hc:CheckComboBox}"/>
  <Style x:Key="CheckComboBoxPlus.Small" BasedOn="{StaticResource CheckComboBoxPlus}"
         TargetType="{x:Type hc:CheckComboBox}">
    <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle.Small}"/>
    <Setter Property="hc:CheckComboBox.TagSpacing" Value="2"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource CheckComboBoxItem.Small}"/>
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,2"/>
  </Style>
  <Style x:Key="ClockRadioButtonStyle" TargetType="{x:Type hc:ClockRadioButton}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Width" Value="28"/>
    <Setter Property="FrameworkElement.Height" Value="28"/>
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ClockRadioButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="Storyboard1">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="optionMark">
                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="Storyboard2">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="optionMark">
                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <hc:SimplePanel x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
            <Ellipse x:Name="optionMark" Fill="{TemplateBinding Control.Background}" MinWidth="6" MinHeight="6"
                     Opacity="0"/>
            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </hc:SimplePanel>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource Storyboard2}"/>
              </TriggerBase.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ClockBaseStyle" TargetType="{x:Type hc:Clock}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="8 0"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:Clock.ClockRadioButtonStyle" Value="{StaticResource ClockRadioButtonStyle}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Clock}">
          <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Effect="{StaticResource EffectShadow2}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="50"/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
              </Grid.ColumnDefinitions>
              <Border Name="PART_BorderTitle" Margin="4" Grid.ColumnSpan="3"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}">
                <TextBlock x:Name="PART_TimeStr" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="20"
                           Foreground="{DynamicResource TextIconBrush}"/>
              </Border>
              <Canvas Name="PART_Canvas" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="16,16,16,62"
                      VerticalAlignment="Top" Width="178" Height="178">
                <Border Background="{DynamicResource SecondaryRegionBrush}" Width="178" Height="178" CornerRadius="89"/>
                <hc:CirclePanel x:Name="PART_PanelNum" Diameter="130" KeepVertical="True" Margin="24,24,0,0" OffsetAngle="-60"/>
                <Border Name="PART_BorderClock" Focusable="False" Background="{DynamicResource PrimaryBrush}"
                        RenderTransformOrigin="0.5,1" Height="63" Width="2" Canvas.Left="88" Canvas.Top="26"/>
                <Ellipse Fill="White" Width="8" Height="8" StrokeThickness="2" Stroke="{DynamicResource PrimaryBrush}"
                         Canvas.Top="85" Canvas.Left="85"/>
              </Canvas>
              <hc:ClockRadioButton x:Name="PART_ButtonAm" Grid.Row="1" Background="{DynamicResource PrimaryBrush}" Grid.Column="0"
                                   IsChecked="True" Height="30" Width="30" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                                   Margin="16,0,0,16" Style="{StaticResource ClockRadioButtonStyle}"
                                   Content="{ex:Lang Key={x:Static langs:LangKeys.Am}}"/>
              <hc:ClockRadioButton x:Name="PART_ButtonPm" Grid.Row="1" Background="{DynamicResource PrimaryBrush}" Grid.Column="2"
                                   Height="30" Width="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,16,16"
                                   Style="{StaticResource ClockRadioButtonStyle}" Content="{ex:Lang Key={x:Static langs:LangKeys.Pm}}"/>
              <Button Name="PART_ButtonConfirm" Grid.Row="1" Grid.Column="1" Foreground="{DynamicResource PrimaryBrush}"
                      HorizontalAlignment="Center" Margin="0,0,0,19" Height="24" Width="60" VerticalAlignment="Bottom"
                      Background="Transparent" Style="{StaticResource ButtonCustom}"
                      Visibility="{TemplateBinding ShowConfirmButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}"/>
            </Grid>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:Clock}" BasedOn="{StaticResource ClockBaseStyle}"/>
  <Style x:Key="ClockListBoxItemStyle" TargetType="{x:Type ListBoxItem}"
         BasedOn="{StaticResource ListBoxItemBaseStyle}">
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ListBoxItem.IsSelected" Value="true">
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
      <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBoxItem}">
              <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                      SnapsToDevicePixels="true">
                <StackPanel Orientation="Horizontal">
                  <ContentControl Width="16" Height="16"
                                  Content="{Binding Path=(hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}"/>
                  <ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                </StackPanel>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ClockListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBoxBaseStyle}">
    <Setter Property="FrameworkElement.MaxHeight" Value="180"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ClockListBoxItemStyle}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
  </Style>
  <Style x:Key="ListClockBaseStyle" TargetType="{x:Type hc:ListClock}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.Margin" Value="8 0"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ListClock}">
          <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" Effect="{StaticResource EffectShadow2}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid Margin="0,4" Width="210">
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <ListBox x:Name="PART_HourList" hc:BorderElement.CornerRadius="0" Padding="0"
                       Style="{StaticResource ClockListBoxStyle}"/>
              <ListBox x:Name="PART_MinuteList" hc:BorderElement.CornerRadius="0" Padding="0" Grid.Row="0" Grid.Column="1"
                       Style="{StaticResource ClockListBoxStyle}" BorderThickness="1,0"/>
              <ListBox x:Name="PART_SecondList" hc:BorderElement.CornerRadius="0" Padding="0" Grid.Row="0" Grid.Column="2"
                       Style="{StaticResource ClockListBoxStyle}"/>
              <Border VerticalAlignment="Bottom" Height="1" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
                      Background="{DynamicResource BorderBrush}"
                      Visibility="{Binding Visibility, ElementName=PART_ButtonConfirm}"/>
              <Button Name="PART_ButtonConfirm" Margin="0,10" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
                      Foreground="{DynamicResource PrimaryBrush}" HorizontalAlignment="Center" Background="Transparent"
                      Style="{StaticResource ButtonCustom}"
                      Visibility="{TemplateBinding ShowConfirmButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                      Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}"/>
            </Grid>
          </hc:SimplePanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:ListClock}" BasedOn="{StaticResource ListClockBaseStyle}"/>
  <Style BasedOn="{StaticResource ColorPickerBaseStyle}" TargetType="{x:Type hc:ColorPicker}"/>
  <Style BasedOn="{StaticResource ContextMenuBaseStyle}" TargetType="{x:Type ContextMenu}"/>
  <Style x:Key="ContextMenu.Small" BasedOn="{StaticResource ContextMenuBaseStyle}"
         TargetType="{x:Type ContextMenu}">
    <Setter Property="hc:MenuAttach.ItemPadding" Value="6,0"/>
    <Setter Property="hc:MenuAttach.PopupVerticalOffset" Value="-3"/>
    <Setter Property="hc:MenuAttach.PopupHorizontalOffset" Value="6"/>
  </Style>
  <Style BasedOn="{StaticResource CoverFlowBaseStyle}" TargetType="{x:Type hc:CoverFlow}"/>
  <Style BasedOn="{StaticResource CoverViewBaseStyle}" TargetType="{x:Type hc:CoverView}"/>
  <Style x:Key="DataGridBaseStyle" TargetType="{x:Type DataGrid}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="DataGrid.GridLinesVisibility" Value="None"/>
    <Setter Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="DataGrid.EnableRowVirtualization" Value="True"/>
    <Setter Property="DataGrid.CanUserAddRows" Value="False"/>
    <Setter Property="DataGrid.CanUserDeleteRows" Value="False"/>
    <Setter Property="DataGrid.CanUserReorderColumns" Value="False"/>
    <Setter Property="DataGrid.CanUserResizeRows" Value="False"/>
    <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle}"/>
    <Setter Property="DataGrid.RowHeaderStyle" Value="{StaticResource DataGridRowHeaderStyle}"/>
    <Setter Property="DataGrid.RowStyle" Value="{StaticResource DataGridRowStyle}"/>
    <Setter Property="DataGrid.CellStyle" Value="{StaticResource DataGridCellStyle}"/>
    <Setter Property="Control.Padding" Value="6"/>
    <Setter Property="DataGrid.RowHeight" Value="44"/>
    <Setter Property="DataGrid.ColumnHeaderHeight" Value="44"/>
    <Setter Property="hc:DataGridAttach.TextColumnStyle" Value="{StaticResource DataGridTextColumnStyle}"/>
    <Setter Property="hc:DataGridAttach.EditingTextColumnStyle"
            Value="{StaticResource DataGridEditingTextColumnStyle}"/>
    <Setter Property="hc:DataGridAttach.ComboBoxColumnStyle"
            Value="{StaticResource DataGridComboBoxColumnStyle}"/>
    <Setter Property="hc:DataGridAttach.EditingComboBoxColumnStyle"
            Value="{StaticResource DataGridEditingComboBoxColumnStyle}"/>
    <Setter Property="hc:DataGridAttach.CheckBoxColumnStyle" Value="{StaticResource CheckBoxBaseStyle}"/>
    <Setter Property="hc:DataGridAttach.EditingCheckBoxColumnStyle" Value="{StaticResource CheckBoxBaseStyle}"/>
    <Setter Property="hc:DataGridAttach.ApplyDefaultStyle" Value="True"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DataGrid}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="StoryboardMouseEnter">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="StoryboardMouseLeave">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="True"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
              <Control.Template>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Button Command="{x:Static DataGrid.SelectAllCommand}" MaxHeight="30" Height="auto"
                            Style="{StaticResource ButtonIcon}" hc:IconElement.Geometry="{StaticResource AllGeometry}"
                            Foreground="{DynamicResource PrimaryBrush}"
                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource DoubleMinConverter}}">
                      <UIElement.Visibility>
                        <MultiBinding Converter="{StaticResource DataGridSelectAllButtonVisibilityConverter}">
                          <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource AncestorType=DataGrid}"/>
                          <Binding Path="(hc:DataGridAttach.ShowSelectAllButton)"
                                   RelativeSource="{RelativeSource AncestorType=DataGrid}"/>
                        </MultiBinding>
                      </UIElement.Visibility>
                    </Button>
                    <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.ColumnSpan="2" Grid.Row="0" Grid.Column="1"
                                                    Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                            CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Grid.ColumnSpan="3"
                                            Grid.Column="0" Grid.Row="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                    <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.ColumnSpan="3"
                                    Grid.Column="0" Grid.Row="1"
                                    IsChecked="{Binding HasItems, RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}">
                      <hc:ToggleBlock.UnCheckedContent>
                        <hc:Empty Background="{DynamicResource RegionBrush}"
                                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                                  BorderBrush="{TemplateBinding Control.BorderBrush}"/>
                      </hc:ToggleBlock.UnCheckedContent>
                    </hc:ToggleBlock>
                    <ScrollBar x:Name="PART_VerticalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" Opacity="0"
                               Grid.Column="2" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Orientation="Vertical"
                               Grid.Row="1" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" Opacity="0"
                               Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Orientation="Horizontal"
                               VerticalAlignment="Bottom" Grid.Row="1"
                               Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                               Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="MouseEnter">
                      <BeginStoryboard Storyboard="{StaticResource StoryboardMouseEnter}"/>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="MouseLeave">
                      <BeginStoryboard Storyboard="{StaticResource StoryboardMouseLeave}"/>
                    </EventTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Control.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource DataGridBaseStyle}" TargetType="{x:Type DataGrid}"/>
  <Style x:Key="DataGridCellStyle.Small" BasedOn="{StaticResource DataGridCellStyle}"
         TargetType="{x:Type DataGridCell}">
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="DataGridRowStyle.Small" BasedOn="{StaticResource DataGridRowStyle}"
         TargetType="{x:Type DataGridRow}">
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,2"/>
  </Style>
  <Style x:Key="DataGridColumnHeaderStyle.Small" BasedOn="{StaticResource DataGridColumnHeaderStyle}"
         TargetType="{x:Type DataGridColumnHeader}">
    <Setter Property="Control.Padding" Value="8,0"/>
  </Style>
  <Style x:Key="DataGrid.Small" BasedOn="{StaticResource DataGridBaseStyle}" TargetType="{x:Type DataGrid}">
    <Setter Property="DataGrid.CellStyle" Value="{StaticResource DataGridCellStyle.Small}"/>
    <Setter Property="DataGrid.RowStyle" Value="{StaticResource DataGridRowStyle.Small}"/>
    <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle.Small}"/>
    <Setter Property="DataGrid.RowHeight" Value="24"/>
    <Setter Property="DataGrid.ColumnHeaderHeight" Value="20"/>
    <Setter Property="hc:DataGridAttach.EditingTextColumnStyle"
            Value="{StaticResource DataGridEditingTextColumnStyle.Small}"/>
    <Setter Property="hc:DataGridAttach.EditingComboBoxColumnStyle"
            Value="{StaticResource DataGridEditingComboBoxColumnStyle.Small}"/>
  </Style>
  <Style BasedOn="{StaticResource DatePickerBaseStyle}" TargetType="{x:Type DatePicker}"/>
  <Style x:Key="DatePicker.Small" BasedOn="{StaticResource DatePickerBaseStyle}"
         TargetType="{x:Type DatePicker}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="DatePickerExtend" BasedOn="{StaticResource DatePickerExtendBaseStyle}"
         TargetType="{x:Type DatePicker}"/>
  <Style x:Key="DatePickerExtend.Small" BasedOn="{StaticResource DatePickerExtend}"
         TargetType="{x:Type DatePicker}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource DatePickerPlusBaseStyle}" TargetType="{x:Type hc:DatePicker}"/>
  <Style x:Key="DatePickerPlus.Small" BasedOn="{StaticResource DatePickerPlusBaseStyle}"
         TargetType="{x:Type hc:DatePicker}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource DateTimePickerBaseStyle}" TargetType="{x:Type hc:DateTimePicker}"/>
  <Style x:Key="DateTimePicker.Small" BasedOn="{StaticResource DateTimePickerBaseStyle}"
         TargetType="{x:Type hc:DateTimePicker}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="DateTimePickerExtend" BasedOn="{StaticResource DateTimePickerExtendBaseStyle}"
         TargetType="{x:Type hc:DateTimePicker}"/>
  <Style x:Key="DateTimePickerExtend.Small" BasedOn="{StaticResource DateTimePickerExtend}"
         TargetType="{x:Type hc:DateTimePicker}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="DateTimePickerPlus" BasedOn="{StaticResource DateTimePickerPlusBaseStyle}"
         TargetType="{x:Type hc:DateTimePicker}"/>
  <Style x:Key="DateTimePickerPlus.Small" BasedOn="{StaticResource DateTimePickerPlus}"
         TargetType="{x:Type hc:DateTimePicker}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource DialogBaseStyle}" TargetType="{x:Type hc:Dialog}"/>
  <Style BasedOn="{StaticResource DividerBaseStyle}" TargetType="{x:Type hc:Divider}"/>
  <Style BasedOn="{StaticResource DrawerBaseStyle}" TargetType="{x:Type hc:Drawer}"/>
  <Style BasedOn="{StaticResource ElementGroupBaseStyle}" TargetType="{x:Type hc:ElementGroup}"/>
  <Style x:Key="ElementGroupSolid" BasedOn="{StaticResource ElementGroupBaseStyle}"
         TargetType="{x:Type hc:ElementGroup}">
    <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style BasedOn="{StaticResource EmptyBaseStyle}" TargetType="{x:Type hc:Empty}"/>
  <Style BasedOn="{StaticResource ExpanderBaseStyle}" TargetType="{x:Type Expander}"/>
  <Style x:Key="Expander.Small" BasedOn="{StaticResource ExpanderBaseStyle}" TargetType="{x:Type Expander}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="FrameworkElement.MinWidth" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource FlowDocumentScrollViewerBaseStyle}"
         TargetType="{x:Type FlowDocumentScrollViewer}"/>
  <Style BasedOn="{StaticResource FlowDocumentPageViewerBaseStyle}"
         TargetType="{x:Type FlowDocumentPageViewer}"/>
  <Style BasedOn="{StaticResource FlowDocumentReaderBaseStyle}" TargetType="{x:Type FlowDocumentReader}"/>
  <Style BasedOn="{StaticResource FrameBaseStyle}" TargetType="{x:Type Frame}"/>
  <Style BasedOn="{StaticResource GotoTopBaseStyle}" TargetType="{x:Type hc:GotoTop}"/>
  <Style BasedOn="{StaticResource GravatarBaseStyle}" TargetType="{x:Type hc:Gravatar}"/>
  <Style x:Key="GravatarCircle" BasedOn="{StaticResource GravatarBaseStyle}"
         TargetType="{x:Type hc:Gravatar}">
    <Setter Property="Control.Padding" Value="16"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Gravatar}">
          <Border Style="{StaticResource BorderCircularClip}" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <ContentPresenter Margin="{TemplateBinding Control.Padding}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GravatarCircleImg" BasedOn="{StaticResource GravatarCircle}"
         TargetType="{x:Type hc:Gravatar}">
    <Setter Property="Control.Padding" Value="0"/>
  </Style>
  <Style TargetType="{x:Type hc:Growl}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.MinHeight" Value="60"/>
    <Setter Property="FrameworkElement.Width" Value="320"/>
    <Setter Property="FrameworkElement.Margin" Value="10,10,10,0"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="320"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="8"/>
    <Setter Property="Control.Background" Value="{DynamicResource ThirdlyRegionBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Growl}">
          <Grid Name="PART_GridMain" RenderTransformOrigin="0.5,0.5">
            <UIElement.RenderTransform>
              <TransformGroup>
                <TranslateTransform X="{TemplateBinding FrameworkElement.MaxWidth}"/>
              </TransformGroup>
            </UIElement.RenderTransform>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="50"/>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border Grid.ColumnSpan="3" Grid.RowSpan="2" Effect="{StaticResource EffectShadow2}"
                    Background="{TemplateBinding Control.Background}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"/>
            <Path FlowDirection="LeftToRight" Grid.Row="0" Grid.Column="0" VerticalAlignment="Top" Margin="0,15,0,0"
                  Width="30" Height="30" Data="{TemplateBinding hc:Growl.Icon}" Stretch="Uniform"
                  Fill="{TemplateBinding hc:Growl.IconBrush}"/>
            <StackPanel VerticalAlignment="Center" Grid.Row="0" Grid.Column="1" Margin="0,10,10,10">
              <TextBlock Text="{TemplateBinding hc:Growl.Message}" Style="{StaticResource TextBlockDefault}"
                         HorizontalAlignment="Left" TextWrapping="Wrap"/>
              <TextBlock Style="{StaticResource TextBlockDefault}" Foreground="{DynamicResource SecondaryTextBrush}"
                         HorizontalAlignment="Left" Margin="0,4,0,0"
                         Visibility="{Binding ShowDateTime, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"
                         Text="{Binding Time, RelativeSource={RelativeSource AncestorType=hc:Growl}, StringFormat='yyyy/MM/dd HH:mm:ss'}"/>
            </StackPanel>
            <Button Name="PART_ButtonClose" Grid.Row="0" Visibility="Collapsed" Margin="11,0"
                    Command="interactivity:ControlCommands.Close" Grid.Column="2" Background="Transparent"
                    Style="{StaticResource ButtonCustom}" VerticalAlignment="Center" HorizontalAlignment="Center"
                    Width="18" Height="18">
              <Path FlowDirection="LeftToRight" Data="{StaticResource ErrorGeometry}" Stretch="Uniform"
                    Fill="{DynamicResource SecondaryTextBrush}"/>
            </Button>
            <UniformGrid Name="PART_PanelMore" Columns="2" IsEnabled="False" Visibility="Collapsed" Grid.Row="1"
                         Grid.ColumnSpan="3" Height="28" Grid.Column="0">
              <Button Command="interactivity:ControlCommands.Cancel" Style="{StaticResource ButtonCustom}"
                      HorizontalAlignment="Stretch" Background="Transparent">
                <TextBlock HorizontalAlignment="Center" Foreground="{DynamicResource DangerBrush}"
                           Text="{Binding CancelStr, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Button>
              <Button Command="interactivity:ControlCommands.Confirm" Style="{StaticResource ButtonCustom}"
                      HorizontalAlignment="Stretch" Background="Transparent">
                <TextBlock HorizontalAlignment="Center" Foreground="{DynamicResource PrimaryBrush}"
                           Text="{Binding ConfirmStr, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Button>
            </UniformGrid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ImageSelectorBaseStyle}" TargetType="{x:Type hc:ImageSelector}"/>
  <Style TargetType="{x:Type hc:ImageViewer}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:ImageViewer}">
          <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <hc:SimplePanel x:Name="PART_PanelMain" ClipToBounds="True" Grid.RowSpan="2">
                <Border HorizontalAlignment="Left" VerticalAlignment="Top"
                        Height="{TemplateBinding hc:ImageViewer.ImageHeight}"
                        Width="{TemplateBinding hc:ImageViewer.ImageWidth}"
                        Margin="{TemplateBinding hc:ImageViewer.ImageMargin}">
                  <Image Name="PART_ImageMain" RenderOptions.BitmapScalingMode="NearestNeighbor"
                         RenderTransformOrigin="0.5,0.5" Source="{TemplateBinding hc:ImageViewer.ImageSource}"/>
                </Border>
              </hc:SimplePanel>
              <Border Grid.Row="0" Grid.RowSpan="2" Width="252" Height="162" HorizontalAlignment="Right"
                      VerticalAlignment="Bottom" Background="{DynamicResource DarkOpacityBrush}"
                      BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                <UIElement.Visibility>
                  <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                    <Binding Path="ShowSmallImgInternal" RelativeSource="{RelativeSource TemplatedParent}"/>
                    <Binding Path="ShowImgMap" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </MultiBinding>
                </UIElement.Visibility>
                <Canvas Name="PART_CanvasSmallImg" ClipToBounds="True" MaxWidth="250" MaxHeight="160">
                  <Border Name="PART_BorderMove" UseLayoutRounding="True" Background="Transparent" Width="50" Height="70"
                          BorderThickness="1" BorderBrush="Black">
                    <Border BorderThickness="1" BorderBrush="White"/>
                  </Border>
                </Canvas>
              </Border>
              <Border Name="PART_BorderBottom" UseLayoutRounding="True" Opacity="0" CornerRadius="4,4,0,0" Grid.Row="1"
                      HorizontalAlignment="Center" Background="{DynamicResource DarkOpacityBrush}"
                      Visibility="{TemplateBinding ShowToolBar, Converter={StaticResource Boolean2VisibilityConverter}}">
                <StackPanel Margin="30,10" VerticalAlignment="Center" Orientation="Horizontal">
                  <Button Command="interactivity:ControlCommands.Save" Margin="6,0"
                          Foreground="{DynamicResource TextIconBrush}" Style="{StaticResource ButtonIcon}"
                          hc:IconElement.Geometry="{StaticResource SaveGeometry}" Padding="3"/>
                  <Button Command="interactivity:ControlCommands.Open" Margin="6,0"
                          Foreground="{DynamicResource TextIconBrush}" Style="{StaticResource ButtonIcon}"
                          hc:IconElement.Geometry="{StaticResource WindowsGeometry}" Padding="3"/>
                  <Border Margin="10,2" Background="White" Style="{StaticResource BorderVerticallySplitter}"/>
                  <Button Command="interactivity:ControlCommands.Reduce" Margin="6,0"
                          Foreground="{DynamicResource TextIconBrush}" Style="{StaticResource ButtonIcon}"
                          hc:IconElement.Geometry="{StaticResource ReduceGeometry}" Padding="3"/>
                  <TextBlock Margin="6,0" Text="{TemplateBinding hc:ImageViewer.ScaleStr}"
                             Style="{StaticResource TextBlockSubTitle}" Foreground="{DynamicResource TextIconBrush}"/>
                  <Button Command="interactivity:ControlCommands.Enlarge" Margin="6,0"
                          Foreground="{DynamicResource TextIconBrush}" Style="{StaticResource ButtonIcon}"
                          hc:IconElement.Geometry="{StaticResource EnlargeGeometry}" Padding="3"/>
                  <Button Command="interactivity:ControlCommands.Restore" Background="Transparent" Margin="6,0"
                          Style="{StaticResource ButtonCustom}" Foreground="{DynamicResource TextIconBrush}">
                    <Border BorderThickness="1" BorderBrush="White" Padding="2">
                      <TextBlock Text="1:1"/>
                    </Border>
                  </Button>
                  <Border Margin="10,2" Background="White" Style="{StaticResource BorderVerticallySplitter}"/>
                  <Button Command="interactivity:ControlCommands.RotateLeft" CommandParameter="" Margin="6,0"
                          Foreground="{DynamicResource TextIconBrush}" Style="{StaticResource ButtonIcon}"
                          hc:IconElement.Geometry="{StaticResource RotateLeftGeometry}" Padding="3"/>
                  <Button Command="interactivity:ControlCommands.RotateRight" Margin="6,0,0,0"
                          Foreground="{DynamicResource TextIconBrush}" Style="{StaticResource ButtonIcon}"
                          hc:IconElement.Geometry="{StaticResource RotateRightGeometry}" Padding="3"/>
                  <ToggleButton Foreground="{DynamicResource TextIconBrush}" Margin="12,0,6,0"
                                Style="{StaticResource ToggleButtonIconTransparent}"
                                hc:IconElement.Geometry="{StaticResource FullScreenGeometry}"
                                hc:IconSwitchElement.GeometrySelected="{StaticResource FullScreenReturnGeometry}" Padding="3"
                                Visibility="{TemplateBinding ShowFullScreenButton, Converter={StaticResource Boolean2VisibilityConverter}}"
                                IsChecked="{Binding IsFullScreen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                </StackPanel>
              </Border>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}"/>
  <Style x:Key="ListBoxItemBaseStyle.Small" BasedOn="{StaticResource ListBoxItemBaseStyle}"
         TargetType="{x:Type ListBoxItem}">
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="24"/>
  </Style>
  <Style x:Key="ListBox.Small" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListBoxItemBaseStyle.Small}"/>
  </Style>
  <Style x:Key="ListBoxCustom" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListBoxItemCustom}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
  </Style>
  <Style x:Key="WrapPanelHorizontalListBox" BasedOn="{StaticResource ListBoxCustom}"
         TargetType="{x:Type ListBox}">
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource WrapHorizontalItemsPanelTemplate}"/>
  </Style>
  <Style x:Key="WrapPanelVerticalListBox" BasedOn="{StaticResource ListBoxCustom}"
         TargetType="{x:Type ListBox}">
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource WrapVerticalItemsPanelTemplate}"/>
  </Style>
  <Style x:Key="StackPanelHorizontalListBox" BasedOn="{StaticResource ListBoxCustom}"
         TargetType="{x:Type ListBox}">
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource StackHorizontalItemsPanelTemplate}"/>
  </Style>
  <Style x:Key="StackPanelVerticalListBox" BasedOn="{StaticResource ListBoxCustom}"
         TargetType="{x:Type ListBox}">
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource StackVerticalItemsPanelTemplate}"/>
  </Style>
  <Style x:Key="ListViewBaseStyle" TargetType="{x:Type ListView}">
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Padding" Value="6"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListViewItemBaseStyle}"/>
    <Setter Property="hc:GridViewAttach.ColumnHeaderHeight" Value="44"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="Storyboard1">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="Storyboard2">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_VerticalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_HorizontalScrollBar">
                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="True"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ScrollViewer Focusable="false">
              <Control.Template>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <DockPanel Grid.ColumnSpan="2">
                      <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                    Focusable="false">
                        <GridViewHeaderRowPresenter Margin="2,0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                    AllowsColumnReorder="{Binding View.AllowsColumnReorder, RelativeSource={RelativeSource AncestorType=ListView}}"
                                                    ColumnHeaderContainerStyle="{Binding View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource AncestorType=ListView}}"
                                                    ColumnHeaderToolTip="{Binding View.ColumnHeaderToolTip, RelativeSource={RelativeSource AncestorType=ListView}}"
                                                    ColumnHeaderContextMenu="{Binding View.ColumnHeaderContextMenu, RelativeSource={RelativeSource AncestorType=ListView}}"
                                                    ColumnHeaderTemplate="{Binding View.ColumnHeaderTemplate, RelativeSource={RelativeSource AncestorType=ListView}}"
                                                    ColumnHeaderTemplateSelector="{Binding View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource AncestorType=ListView}}">
                          <GridViewRowPresenterBase.Columns>
                            <Binding RelativeSource="{RelativeSource AncestorType=ListView}">                              <!-- constructor argument:
                                   View.Columns
                              -->

                            </Binding>
                          </GridViewRowPresenterBase.Columns>
                        </GridViewHeaderRowPresenter>
                      </ScrollViewer>
                    </DockPanel>
                    <hc:ToggleBlock Grid.Row="1" Grid.ColumnSpan="2" Grid.RowSpan="2" VerticalContentAlignment="Stretch"
                                    HorizontalContentAlignment="Stretch"
                                    IsChecked="{Binding HasItems, RelativeSource={RelativeSource AncestorType=ListView}, Mode=OneWay}">
                      <hc:ToggleBlock.CheckedContent>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                      </hc:ToggleBlock.CheckedContent>
                      <hc:ToggleBlock.UnCheckedContent>
                        <hc:Empty Background="{DynamicResource RegionBrush}"
                                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                                  BorderBrush="{TemplateBinding Control.BorderBrush}"/>
                      </hc:ToggleBlock.UnCheckedContent>
                    </hc:ToggleBlock>
                    <ScrollBar x:Name="PART_VerticalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" Opacity="0"
                               Grid.Column="1" Grid.Row="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                               Orientation="Vertical"
                               Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" Opacity="0"
                               Grid.Row="1" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Orientation="Horizontal"
                               VerticalAlignment="Bottom"
                               Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                               ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                               Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="MouseEnter">
                      <BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="MouseLeave">
                      <BeginStoryboard Storyboard="{StaticResource Storyboard2}"/>
                    </EventTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Control.Template>
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <Trigger Property="ListView.View" Value="{x:Null}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListView}">
              <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                      SnapsToDevicePixels="True"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <hc:Empty Background="{DynamicResource RegionBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource ListViewBaseStyle}" TargetType="{x:Type ListView}"/>
  <Style x:Key="ListViewItemBaseStyle.Small" BasedOn="{StaticResource ListViewItemBaseStyle}"
         TargetType="{x:Type ListViewItem}">
    <Setter Property="Control.Padding" Value="6,2"/>
    <Setter Property="FrameworkElement.MinHeight" Value="24"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,2"/>
  </Style>
  <Style x:Key="ListView.Small" BasedOn="{StaticResource ListViewBaseStyle}" TargetType="{x:Type ListView}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource ListViewItemBaseStyle.Small}"/>
    <Setter Property="hc:GridViewAttach.ColumnHeaderHeight" Value="30"/>
  </Style>
  <Style BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="{x:Type hc:LoadingLine}"/>
  <Style x:Key="LoadingLineLight" BasedOn="{StaticResource LoadingLineBaseStyle}"
         TargetType="{x:Type hc:LoadingLine}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style x:Key="LoadingLineLarge" BasedOn="{StaticResource LoadingLineBaseStyle}"
         TargetType="{x:Type hc:LoadingLine}">
    <Setter Property="hc:LoadingBase.DotDiameter" Value="10"/>
  </Style>
  <Style x:Key="LoadingLineLargeLight" BasedOn="{StaticResource LoadingLineLarge}"
         TargetType="{x:Type hc:LoadingLine}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="{x:Type hc:LoadingCircle}"/>
  <Style x:Key="LoadingCircleLight" BasedOn="{StaticResource LoadingCircleBaseStyle}"
         TargetType="{x:Type hc:LoadingCircle}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style x:Key="LoadingCircleLarge" BasedOn="{StaticResource LoadingCircleBaseStyle}"
         TargetType="{x:Type hc:LoadingCircle}">
    <Setter Property="FrameworkElement.Width" Value="100"/>
    <Setter Property="FrameworkElement.Height" Value="100"/>
    <Setter Property="hc:LoadingBase.DotDiameter" Value="10"/>
    <Setter Property="hc:LoadingBase.DotInterval" Value="20"/>
    <Setter Property="hc:LoadingCircle.DotOffSet" Value="40"/>
    <Setter Property="hc:LoadingBase.DotDelayTime" Value="120"/>
  </Style>
  <Style x:Key="LoadingCircleLargeLight" BasedOn="{StaticResource LoadingCircleLarge}"
         TargetType="{x:Type hc:LoadingCircle}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style BasedOn="{StaticResource MagnifierBaseStyle}" TargetType="{x:Type hc:Magnifier}"/>
  <Style x:Key="MessageBoxButtonStyle" BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.MinWidth" Value="88"/>
    <Setter Property="UIElement.Visibility"
            Value="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
    <Setter Property="FrameworkElement.Margin" Value="5,0"/>
  </Style>
  <Style x:Key="MessageBoxPrimaryButtonStyle" BasedOn="{StaticResource ButtonPrimary}"
         TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.MinWidth" Value="88"/>
    <Setter Property="UIElement.Visibility"
            Value="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
    <Setter Property="FrameworkElement.Margin" Value="5,0"/>
  </Style>
  <Style TargetType="{x:Type hc:MessageBox}" BasedOn="{StaticResource WindowWin10}">
    <Setter Property="FrameworkElement.MinHeight" Value="172"/>
    <Setter Property="Window.ShowInTaskbar" Value="False"/>
    <Setter Property="FrameworkElement.MinWidth" Value="335"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="476"/>
    <Setter Property="FrameworkElement.MaxHeight" Value="680"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Window.SizeToContent" Value="WidthAndHeight"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:MessageBox}">
          <Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
            <Grid Margin="{TemplateBinding Control.Padding}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
              </Grid.RowDefinitions>
              <Grid Name="PART_NonClientArea" Background="{TemplateBinding hc:Window.NonClientAreaBackground}"
                    TextElement.Foreground="{TemplateBinding hc:Window.NonClientAreaForeground}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <StackPanel WindowChrome.IsHitTestVisibleInChrome="True" UseLayoutRounding="True" VerticalAlignment="Top"
                            Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                  <Button Name="PART_ButtonClose" Background="{TemplateBinding hc:Window.CloseButtonBackground}"
                          Foreground="{TemplateBinding hc:Window.CloseButtonForeground}" IsTabStop="False" Height="29"
                          Style="{StaticResource ButtonIcon}" Width="46"
                          hc:IconElement.Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0"
                          hc:IconElement.Width="10" hc:IconElement.Height="10"/>
                </StackPanel>
                <Grid Column="0">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                  </Grid.ColumnDefinitions>
                  <Button Name="ButtonIcon" Command="{x:Static SystemCommands.ShowSystemMenuCommand}"
                          Background="Transparent" Margin="10,0,0,0" WindowChrome.IsHitTestVisibleInChrome="True"
                          Style="{StaticResource ButtonCustom}" VerticalAlignment="Center"
                          Visibility="{TemplateBinding Icon, Converter={StaticResource Object2VisibilityConverter}}">
                    <interactivity:Interaction.Triggers>
                      <interactivity:EventTrigger EventName="MouseDoubleClick">
                        <interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}"/>
                      </interactivity:EventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Image IsHitTestVisible="False" Source="{TemplateBinding Window.Icon}" VerticalAlignment="Center"
                           Width="16" Height="16"/>
                  </Button>
                  <TextBlock Grid.Column="1" Text="{TemplateBinding Window.Title}" Padding="10,0,0,0" VerticalAlignment="Center">
                    <UIElement.Visibility>
                      <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                        <MultiBinding.Bindings>
                          <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}"/>
                          <Binding Path="Title" Converter="{StaticResource Object2BooleanConverter}"
                                   RelativeSource="{RelativeSource TemplatedParent}"/>
                        </MultiBinding.Bindings>
                      </MultiBinding>
                    </UIElement.Visibility>
                  </TextBlock>
                  <ContentPresenter x:Name="ContentPresenterMain" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Column="2"
                                    Content="{TemplateBinding hc:Window.NonClientAreaContent}"/>
                </Grid>
              </Grid>
              <AdornerDecorator Grid.Row="1">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <Path Data="{TemplateBinding hc:MessageBox.Image}" Fill="{TemplateBinding hc:MessageBox.ImageBrush}"
                        HorizontalAlignment="Center" Grid.Row="0" Grid.Column="0" VerticalAlignment="Top"
                        Margin="20,32,0,0" Width="30" Height="30" Stretch="Uniform"
                        Visibility="{TemplateBinding ShowImage, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                  <ScrollViewer Grid.Row="0" Grid.Column="1" VerticalAlignment="Top">
                    <Border MinHeight="30" Margin="10,32,10,10" HorizontalAlignment="Left">
                      <TextBlock VerticalAlignment="Center" Text="{TemplateBinding hc:MessageBox.Message}" TextWrapping="Wrap"/>
                    </Border>
                  </ScrollViewer>
                  <StackPanel Name="PART_Panel" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Margin="0,10,0,16"
                              Orientation="Horizontal" HorizontalAlignment="Center"/>
                </Grid>
              </AdornerDecorator>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Window.IsActive" Value="False">
              <Setter TargetName="ContentPresenterMain" Property="UIElement.Opacity" Value=".8"/>
            </Trigger>
            <Trigger SourceName="PART_ButtonClose" Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="PART_ButtonClose"
                      Value="{Binding CloseButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Control.Background"/>
              <Setter TargetName="PART_ButtonClose"
                      Value="{Binding CloseButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource NavigationWindowBaseStyle}" TargetType="{x:Type NavigationWindow}"/>
  <Style BasedOn="{StaticResource NumericUpDownBaseStyle}" TargetType="{x:Type hc:NumericUpDown}"/>
  <Style x:Key="NumericUpDown.Small" BasedOn="{StaticResource NumericUpDownBaseStyle}"
         TargetType="{x:Type hc:NumericUpDown}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="NumericUpDownExtend" BasedOn="{StaticResource NumericUpDownExtendBaseStyle}"
         TargetType="{x:Type hc:NumericUpDown}"/>
  <Style x:Key="NumericUpDownExtend.Small" BasedOn="{StaticResource NumericUpDownExtend}"
         TargetType="{x:Type hc:NumericUpDown}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="NumericUpDownPlus" BasedOn="{StaticResource NumericUpDownPlusBaseStyle}"
         TargetType="{x:Type hc:NumericUpDown}"/>
  <Style x:Key="NumericUpDownPlus.Small" BasedOn="{StaticResource NumericUpDownPlus}"
         TargetType="{x:Type hc:NumericUpDown}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="PaginationButtonStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type RadioButton}">
    <Setter Property="RadioButton.GroupName" Value="1"/>
    <Setter Property="FrameworkElement.MinWidth" Value="30"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="FrameworkElement.Height" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.Margin" Value="-1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Border x:Name="BorderRoot" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}">
              <Path x:Name="PathMain" Width="{TemplateBinding hc:IconElement.Width}"
                    Height="{TemplateBinding hc:IconElement.Height}" Fill="{TemplateBinding Control.Foreground}"
                    SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding hc:IconElement.Geometry}"/>
              <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="BorderRoot"
                      Value="{Binding Path=(hc:VisualElement.HighlightBackground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="Border.Background"/>
              <Setter TargetName="contentPresenter"
                      Value="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ContentControl.Content">
              <Setter TargetName="contentPresenter" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
              <Setter TargetName="PathMain" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="contentPresenter" Property="FrameworkElement.Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type hc:Pagination}">
    <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="hc:Pagination.PaginationButtonStyle" Value="{StaticResource PaginationButtonStyle}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Pagination}">
          <StackPanel Orientation="Horizontal" VerticalAlignment="Top">
            <Button x:Name="PART_ButtonLeft" MinWidth="30" Padding="10,8"
                    hc:IconElement.Geometry="{StaticResource LeftGeometry}"
                    Command="interactivity:ControlCommands.Prev"
                    hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='1,0,0,1'}"/>
            <StackPanel ZIndex="999" HorizontalAlignment="Center" Orientation="Horizontal">
              <interactivity:Interaction.Triggers>
                <interactivity:RoutedEventTrigger RoutedEvent="RadioButton.Checked">
                  <interactivity:EventToCommand Command="interactivity:ControlCommands.Selected" PassEventArgsToCommand="True"/>
                </interactivity:RoutedEventTrigger>
              </interactivity:Interaction.Triggers>
              <RadioButton Name="PART_ButtonFirst" Content="1" IsChecked="True"
                           Style="{TemplateBinding hc:Pagination.PaginationButtonStyle}"/>
              <Border Name="PART_MoreLeft" Cursor="No" Margin="-1,0,0,0" BorderThickness="1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{DynamicResource SecondaryRegionBrush}" Padding="10,0">
                <hc:SimpleText FontWeight="Bold" Foreground="{DynamicResource SecondaryTextBrush}" Text="..."
                               VerticalAlignment="Center"/>
              </Border>
              <StackPanel Name="PART_PanelMain" Orientation="Horizontal"/>
              <Border Name="PART_MoreRight" Cursor="No" Margin="-1,0,0,0" BorderThickness="1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{DynamicResource SecondaryRegionBrush}" Padding="10,0">
                <hc:SimpleText FontWeight="Bold" Foreground="{DynamicResource SecondaryTextBrush}" Text="..."
                               VerticalAlignment="Center"/>
              </Border>
              <RadioButton Name="PART_ButtonLast" Content="10" Style="{TemplateBinding hc:Pagination.PaginationButtonStyle}"/>
            </StackPanel>
            <Button x:Name="PART_ButtonRight" MinWidth="30" Padding="10,8"
                    hc:IconElement.Geometry="{StaticResource RightGeometry}" Margin="-1,0,0,0"
                    Command="interactivity:ControlCommands.Next"
                    hc:BorderElement.CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter='0,1,1,0'}"/>
            <hc:NumericUpDown x:Name="PART_Jump" IsEnabled="{TemplateBinding hc:Pagination.IsJumpEnabled}" Margin="6,0,0,0"
                              Minimum="1"
                              Visibility="{TemplateBinding IsJumpEnabled, Converter={StaticResource Boolean2VisibilityConverter}}"
                              Maximum="{Binding MaxPageCount, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Button IsEnabled="{TemplateBinding hc:Pagination.IsJumpEnabled}" Margin="6,0,0,0"
                    Command="interactivity:ControlCommands.Jump"
                    Visibility="{TemplateBinding IsJumpEnabled, Converter={StaticResource Boolean2VisibilityConverter}}"
                    Content="{ex:Lang {x:Static langs:LangKeys.Jump}}"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource PasswordBoxBaseStyle}" TargetType="{x:Type PasswordBox}"/>
  <Style x:Key="PasswordBox.Small" BasedOn="{StaticResource PasswordBoxBaseStyle}"
         TargetType="{x:Type PasswordBox}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="PasswordBoxExtend" BasedOn="{StaticResource PasswordBoxExtendBaseStyle}"
         TargetType="{x:Type PasswordBox}"/>
  <Style x:Key="PasswordBoxExtend.Small" BasedOn="{StaticResource PasswordBoxExtend}"
         TargetType="{x:Type PasswordBox}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource PasswordBoxPlusBaseStyle}" TargetType="{x:Type hc:PasswordBox}"/>
  <Style x:Key="PasswordBoxPlus.Small" BasedOn="{StaticResource PasswordBoxPlusBaseStyle}"
         TargetType="{x:Type hc:PasswordBox}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource PinBoxBaseStyle}" TargetType="{x:Type hc:PinBox}"/>
  <Style BasedOn="{StaticResource PoptipBaseStyle}" TargetType="{x:Type hc:Poptip}"/>
  <Style TargetType="{x:Type hc:PopupWindow}">
    <Setter Property="Window.WindowStyle" Value="None"/>
    <Setter Property="FrameworkElement.MinHeight" Value="220"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="Control.BorderThickness" Value="20"/>
    <Setter Property="Window.ShowInTaskbar" Value="False"/>
    <Setter Property="FrameworkElement.MinWidth" Value="300"/>
    <Setter Property="Window.ResizeMode" Value="NoResize"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Window.SizeToContent" Value="WidthAndHeight"/>
    <Setter Property="UIElement.Effect">
      <Setter.Value>
        <DropShadowEffect Opacity=".6" ShadowDepth="0" BlurRadius="15"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:PopupWindow}">
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Grid Name="TitleGrid" Height="30" Background="{DynamicResource TitleBrush}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock Name="PART_TitleBlock" Background="Transparent" Padding="{StaticResource DefaultControlPadding}"
                           Foreground="White" Text="{TemplateBinding Window.Title}" VerticalAlignment="Center"
                           TextWrapping="Wrap" TextTrimming="WordEllipsis"/>
                <Button Name="CloseButton" Margin="0,0,1,0" Background="Transparent" Foreground="White" Grid.Column="1"
                        hc:BackgroundSwitchElement.MouseHoverBackground="Red"
                        hc:BackgroundSwitchElement.MouseDownBackground="Red" Command="interactivity:ControlCommands.Close"
                        IsCancel="True" Height="28" Style="{StaticResource ButtonCustom}" Width="44" Padding="9">
                  <Path Style="{StaticResource ClosePathStyle}" Fill="{Binding ElementName=CloseButton, Path=Foreground}"/>
                </Button>
              </Grid>
              <Border Name="PART_MainBorder" BorderBrush="{DynamicResource TitleBrush}" Grid.Row="1">
                <StackPanel>
                  <TextBlock Name="MyTextBlock" Text="{TemplateBinding hc:PopupWindow.ContentStr}" MinHeight="110"
                             TextAlignment="Center" Padding="32" Foreground="{DynamicResource PrimaryTextBrush}" MaxWidth="300"
                             TextWrapping="Wrap" TextTrimming="CharacterEllipsis"
                             Background="{TemplateBinding Control.Background}"/>
                  <StackPanel Margin="0,0,0,32" Orientation="Horizontal" Background="{DynamicResource RegionBrush}"
                              HorizontalAlignment="Center">
                    <Button IsCancel="True" MinWidth="80" Command="interactivity:ControlCommands.Cancel" Margin="0,0,16,0"
                            Content="{ex:Lang Key={x:Static langs:LangKeys.Cancel}}"
                            Visibility="{TemplateBinding ShowCancel, Converter={StaticResource Boolean2VisibilityConverter}}"/>
                    <Button IsDefault="True" MinWidth="80" Command="interactivity:ControlCommands.Confirm"
                            Style="{StaticResource ButtonPrimary}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}"/>
                  </StackPanel>
                </StackPanel>
              </Border>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:PopupWindow.ShowBorder" Value="True">
              <Setter TargetName="PART_MainBorder" Property="Border.BorderThickness" Value="1,0,1,1"/>
            </Trigger>
            <Trigger Property="hc:PopupWindow.ShowTitle" Value="False">
              <Setter TargetName="TitleGrid" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter Property="Control.Background" Value="Transparent"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ProgressButtonPrimary" BasedOn="{StaticResource ProgressButtonBaseStyle}"
         TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="ProgressButtonSuccess" BasedOn="{StaticResource ProgressButtonBaseStyle}"
         TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="ProgressButtonInfo" BasedOn="{StaticResource ProgressButtonBaseStyle}"
         TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="ProgressButtonWarning" BasedOn="{StaticResource ProgressButtonBaseStyle}"
         TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="ProgressButtonDanger" BasedOn="{StaticResource ProgressButtonBaseStyle}"
         TargetType="{x:Type hc:ProgressButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style BasedOn="{StaticResource PropertyGridBaseStyle}" TargetType="{x:Type hc:PropertyGrid}"/>
  <Style x:Key="ComboBoxItemCapsuleBaseStyle" TargetType="{x:Type ComboBoxItem}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.MinWidth" Value="40"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="FrameworkElement.Margin" Value="-1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="BorderRoot" Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter x:Name="contentPresenter"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                              TextElement.Foreground="{TemplateBinding Control.Foreground}" Focusable="False"
                              HorizontalAlignment="Center" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ListBoxItem.IsSelected" Value="True">
        <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryBrush}"/>
      </Trigger>
      <Trigger Property="ListBoxItem.IsSelected" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ComboBoxItemCapsuleDefault" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}"
         TargetType="{x:Type ComboBoxItem}"/>
  <Style x:Key="ComboBoxItemCapsuleHorizontalFirst" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}"
         TargetType="{x:Type ComboBoxItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="ComboBoxItemCapsuleHorizontalLast" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}"
         TargetType="{x:Type ComboBoxItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0"/>
  </Style>
  <Style x:Key="ComboBoxItemCapsuleSingle" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}"
         TargetType="{x:Type ComboBoxItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
  </Style>
  <Style x:Key="ComboBoxItemCapsuleVerticalFirst" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}"
         TargetType="{x:Type ComboBoxItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="ComboBoxItemCapsuleVerticalLast" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}"
         TargetType="{x:Type ComboBoxItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4"/>
  </Style>
  <Style x:Key="ComboBoxCapsule" TargetType="{x:Type ComboBox}" BasedOn="{x:Null}">
    <Setter Property="ItemsControl.ItemContainerStyleSelector"
            Value="{StaticResource ComboBoxItemCapsuleStyleSelector}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="ItemsControl.ItemsPanel" Value="{StaticResource UniformHorizontalItemsPanelTemplate}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource RateBaseStyle}" TargetType="{x:Type hc:Rate}"/>
  <Style TargetType="{x:Type hc:RibbonGroup}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.Height" Value="90"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Padding" Value="6 6 6 0"/>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:RibbonGroup}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <ItemsPresenter Grid.ColumnSpan="2" Margin="{TemplateBinding Control.Padding}"/>
            <ContentPresenter Name="ContentPresenter" VerticalAlignment="Bottom"
                              TextElement.Foreground="{DynamicResource SecondaryTextBrush}" Grid.Column="0" Grid.ColumnSpan="2"
                              Margin="10,0,10,2" ContentSource="Header" HorizontalAlignment="Center" Grid.Row="1"/>
            <Button hc:AdornerElement.Instance="{TemplateBinding hc:RibbonGroup.LauncherPoptip}"
                    Command="interactivity:ControlCommands.More" Margin="0,0,2,0" Grid.Column="1" Width="16"
                    Height="16" Grid.Row="1" HorizontalAlignment="Right" Style="{StaticResource ButtonCustom}"
                    hc:BackgroundSwitchElement.MouseHoverBackground="{DynamicResource SecondaryRegionBrush}"
                    Visibility="{Binding ShowLauncherButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
              <Path Width="9" Height="9" Stretch="Uniform" Data="{StaticResource DialogBoxLauncherGeometry}"
                    Fill="{DynamicResource SecondaryTextBrush}"/>
            </Button>
            <Border Margin="0,4" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Width="1"
                    Background="{TemplateBinding Control.BorderBrush}"
                    Visibility="{Binding ShowSplitter, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="hc:RibbonGroup.ShowLauncherButton" Value="True">
              <Setter TargetName="ContentPresenter" Property="FrameworkElement.Margin" Value="20,0,20,2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type hc:RibbonTabHeader}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:RibbonTabHeader}">
          <Border Background="{TemplateBinding Control.Background}">
            <hc:SimplePanel x:Name="templateRoot" SnapsToDevicePixels="true">
              <Border x:Name="BorderBottom" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0,0,0,2"
                      Margin="12,0,12,2"
                      Visibility="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}"/>
              <ContentPresenter x:Name="ContentPresenter" Focusable="False" HorizontalAlignment="Center"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
            </hc:SimplePanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="hc:RibbonTabHeader.IsSelected" Value="True">
        <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type hc:Ribbon}">
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}"/>
    <Setter Property="hc:Ribbon.ContentHeight" Value="96"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Top"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="Control.Padding" Value="10 0"/>
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <hc:SimplePanel/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:Ribbon}">
          <hc:ClipGrid x:Name="PART_RootPanel" IsClipEnabled="False">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid x:Name="PART_ContentPanel" Row="1" ColumnSpan="3">
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Border Margin="{TemplateBinding Control.Padding}" VerticalAlignment="Bottom"
                      Height="{TemplateBinding hc:Ribbon.ContentHeight}" Grid.ColumnSpan="2"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}" Background="{DynamicResource RegionBrush}"
                      CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <UIElement.Effect>
                  <DropShadowEffect BlurRadius="8" ShadowDepth="2" Direction="-90" Color="{StaticResource EffectShadowColor}"
                                    Opacity=".1" RenderingBias="Performance"/>
                </UIElement.Effect>
              </Border>
              <ItemsPresenter x:Name="PART_TabItemsPresenter" VerticalAlignment="Bottom"
                              Height="{TemplateBinding hc:Ribbon.ContentHeight}" Grid.Column="0"
                              Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='1,0,0,0'}"/>
              <ToggleButton Command="interactivity:ControlCommands.Switch" Padding="2 0" Width="16" Height="20" Grid.Column="1"
                            HorizontalAlignment="Right" VerticalAlignment="Bottom"
                            Style="{StaticResource ToggleButtonIconTransparent}"
                            hc:IconElement.Geometry="{StaticResource UpGeometry}"
                            hc:IconSwitchElement.GeometrySelected="{StaticResource NailGeometry}"
                            IsChecked="{Binding IsMinimized, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"/>
            </Grid>
            <ContentPresenter Grid.Row="0" Grid.Column="0" ContentSource="PrefixContent"/>
            <hc:RibbonTabHeaderItemsControl x:Name="PART_TabHeaderItemsControl" Grid.Row="0" Grid.Column="1"
                                            Background="{TemplateBinding Control.Background}" Focusable="False" Margin="0,0,0,2">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Orientation="Horizontal"
                              Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType=hc:Ribbon}}"/>
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </hc:RibbonTabHeaderItemsControl>
            <ContentPresenter Grid.Row="0" Grid.Column="2" ContentSource="PostfixContent"/>
          </hc:ClipGrid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource RunningBlockBaseStyle}" TargetType="{x:Type hc:RunningBlock}"/>
  <Style BasedOn="{StaticResource SeparatorBaseStyle}" TargetType="{x:Type Separator}"/>
  <Style BasedOn="{StaticResource ShieldBaseStyle}" TargetType="{x:Type hc:Shield}"/>
  <Style BasedOn="{StaticResource SideMenuBaseStyle}" TargetType="{x:Type hc:SideMenu}"/>
  <Style x:Key="SideMenuAccordion" BasedOn="{StaticResource SideMenuBaseStyle}"
         TargetType="{x:Type hc:SideMenu}">
    <Setter Property="hc:SideMenu.ExpandMode" Value="Accordion"/>
    <Setter Property="hc:SideMenu.PanelAreaLength" Value="200"/>
    <Setter Property="hc:SimpleItemsControl.ItemContainerStyle"
            Value="{StaticResource SideMenuItemHeaderAccordionBaseStyle}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:SideMenu}">
          <Border Name="BorderRoot" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}">
            <StackPanel x:Name="PART_Panel"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SplitButtonDefault" BasedOn="{StaticResource SplitButtonBaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource BorderBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SplitButtonDefault.Small" BasedOn="{StaticResource SplitButtonDefault}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style BasedOn="{StaticResource SplitButtonDefault}" TargetType="{x:Type hc:SplitButton}"/>
  <Style x:Key="SplitButtonPrimary" BasedOn="{StaticResource SplitButtonBaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="Control.Background" Value="{DynamicResource PrimaryBrush}"/>
  </Style>
  <Style x:Key="SplitButtonPrimary.Small" BasedOn="{StaticResource SplitButtonPrimary}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="SplitButtonSuccess" BasedOn="{StaticResource SplitButtonBaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="Control.Background" Value="{DynamicResource SuccessBrush}"/>
  </Style>
  <Style x:Key="SplitButtonSuccess.Small" BasedOn="{StaticResource SplitButtonSuccess}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="SplitButtonInfo" BasedOn="{StaticResource SplitButtonBaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="Control.Background" Value="{DynamicResource InfoBrush}"/>
  </Style>
  <Style x:Key="SplitButtonInfo.Small" BasedOn="{StaticResource SplitButtonInfo}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="SplitButtonWarning" BasedOn="{StaticResource SplitButtonBaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="Control.Background" Value="{DynamicResource WarningBrush}"/>
  </Style>
  <Style x:Key="SplitButtonWarning.Small" BasedOn="{StaticResource SplitButtonWarning}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style x:Key="SplitButtonDanger" BasedOn="{StaticResource SplitButtonBaseStyle}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="Control.Background" Value="{DynamicResource DangerBrush}"/>
  </Style>
  <Style x:Key="SplitButtonDanger.Small" BasedOn="{StaticResource SplitButtonDanger}"
         TargetType="{x:Type hc:SplitButton}">
    <Setter Property="FrameworkElement.Height" Value="20"/>
    <Setter Property="Control.Padding" Value="6,1"/>
    <Setter Property="hc:IconElement.Height" Value="12"/>
  </Style>
  <Style BasedOn="{StaticResource StatusBarBaseStyle}" TargetType="{x:Type StatusBar}"/>
  <Style BasedOn="{StaticResource StatusBarItemBaseStyle}" TargetType="{x:Type StatusBarItem}"/>
  <Style BasedOn="{StaticResource StepBarBaseStyle}" TargetType="{x:Type hc:StepBar}"/>
  <Style BasedOn="{StaticResource TabControlBaseStyle}" TargetType="{x:Type TabControl}"/>
  <Style BasedOn="{StaticResource TabControlPlusBaseStyle}" TargetType="{x:Type hc:TabControl}"/>
  <Style x:Key="TabItemSliding" TargetType="{x:Type TabItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Padding" Value="10,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" HorizontalAlignment="Center"
                              VerticalAlignment="Center" TextElement.Foreground="{TemplateBinding Control.Foreground}"
                              Focusable="False" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="UIElement.Opacity" Value=".9"/>
            </Trigger>
            <Trigger Property="TabItem.IsSelected" Value="true">
              <Setter TargetName="contentPresenter"
                      Value="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource SlidingTabContainerBaseStyle}"
         TargetType="{x:Type hc:SlidingTabContainer}"/>
  <Style x:Key="TabControlSliding" TargetType="{x:Type TabControl}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TabItemSliding}"/>
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <hc:SlidingTabContainer x:Name="TabContainer" Background="{TemplateBinding Control.Background}" Grid.Row="0"
                                    Grid.Column="0">
              <StackPanel x:Name="headerPanel" KeyboardNavigation.TabNavigation="Once"
                          KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Horizontal" Background="Transparent"
                          Margin="0" IsItemsHost="True"/>
            </hc:SlidingTabContainer>
            <Border x:Name="contentPanel" Margin="0,6,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{DynamicResource BorderBrush}" Grid.Column="0" Grid.Row="1">
              <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter TargetName="TabContainer" Property="Grid.Row" Value="1"/>
              <Setter TargetName="contentPanel" Property="FrameworkElement.Margin" Value="0,0,0,6"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="contentPanel" Property="FrameworkElement.Margin" Value="6,0,0,0"/>
              <Setter TargetName="TabContainer" Property="Grid.Column" Value="0"/>
              <Setter TargetName="TabContainer" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="StackPanel.Orientation" Value="Vertical"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="contentPanel" Property="FrameworkElement.Margin" Value="0,0,6,0"/>
              <Setter TargetName="TabContainer" Property="Grid.Column" Value="1"/>
              <Setter TargetName="TabContainer" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="StackPanel.Orientation" Value="Vertical"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabItemInLine" BasedOn="{StaticResource TabItemStyle}" TargetType="{x:Type TabItem}">
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
  </Style>
  <Style x:Key="TabControlInLine" BasedOn="{StaticResource TabControlBaseStyle}"
         TargetType="{x:Type TabControl}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TabItemInLine}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid x:Name="templateRoot" Background="{TemplateBinding Control.Background}" ClipToBounds="true"
                SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <UniformGrid x:Name="headerPanel" Rows="1" KeyboardNavigation.TabNavigation="Once"
                         KeyboardNavigation.DirectionalNavigation="Cycle" Background="Transparent" Grid.Column="0"
                         IsItemsHost="true" Margin="0" Grid.Row="0"/>
            <Border x:Name="contentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Control.Background}"
                    Grid.Column="0" Grid.Row="1">
              <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabItemCapsuleDefault" BasedOn="{StaticResource TabItemCapsuleBaseStyle}"
         TargetType="{x:Type TabItem}"/>
  <Style x:Key="TabItemCapsuleHorizontalFirst" BasedOn="{StaticResource TabItemCapsuleBaseStyle}"
         TargetType="{x:Type TabItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="TabItemCapsuleHorizontalLast" BasedOn="{StaticResource TabItemCapsuleBaseStyle}"
         TargetType="{x:Type TabItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0"/>
  </Style>
  <Style x:Key="TabItemCapsuleSingle" BasedOn="{StaticResource TabItemCapsuleBaseStyle}"
         TargetType="{x:Type TabItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}"/>
  </Style>
  <Style x:Key="TabItemCapsuleVerticalFirst" BasedOn="{StaticResource TabItemCapsuleBaseStyle}"
         TargetType="{x:Type TabItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0"/>
    <Setter Property="FrameworkElement.Margin" Value="0"/>
  </Style>
  <Style x:Key="TabItemCapsuleVerticalLast" BasedOn="{StaticResource TabItemCapsuleBaseStyle}"
         TargetType="{x:Type TabItem}">
    <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4"/>
  </Style>
  <Style x:Key="TabControlCapsule" TargetType="{x:Type TabControl}">
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:TitleElement.BorderBrush" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource PrimaryBrush}"/>
    <Setter Property="ItemsControl.ItemContainerStyleSelector">
      <Setter.Value>
        <tools:TabItemCapsuleStyleSelector/>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid x:Name="templateRoot" Background="{TemplateBinding Control.Background}" ClipToBounds="true"
                SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <UniformGrid x:Name="headerPanel" Rows="1" KeyboardNavigation.TabNavigation="Once"
                         KeyboardNavigation.DirectionalNavigation="Cycle" HorizontalAlignment="Center"
                         VerticalAlignment="Center" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0"
                         Grid.Row="0"/>
            <Border x:Name="contentPanel" Margin="0,6,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Control.Background}"
                    Grid.Column="0" Grid.Row="1">
              <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="1"/>
              <Setter TargetName="contentPanel" Property="FrameworkElement.Margin" Value="0,0,0,6"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="contentPanel" Property="FrameworkElement.Margin" Value="6,0,0,0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="headerPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="headerPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0"/>
              <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1"/>
              <Setter TargetName="contentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="contentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="contentPanel" Property="FrameworkElement.Margin" Value="0,0,6,0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabControlCapsuleSolid" BasedOn="{StaticResource TabControlCapsule}"
         TargetType="{x:Type TabControl}">
    <Setter Property="hc:TitleElement.BorderBrush" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}"/>
  </Style>
  <Style TargetType="{x:Type hc:TimeBar}">
    <Setter Property="hc:TimeBar.HotspotsBrush" Value="{DynamicResource AccentBrush}"/>
    <Setter Property="UIElement.Focusable" Value="False"/>
    <Setter Property="FrameworkElement.UseLayoutRounding" Value="True"/>
    <Setter Property="Control.BorderThickness" Value="0,1,0,0"/>
    <Setter Property="Control.Foreground" Value="White"/>
    <Setter Property="Control.Background" Value="{DynamicResource TitleBrush}"/>
    <Setter Property="FrameworkElement.Height" Value="60"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:TimeBar}">
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_TextBlockMove">
                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                  </ObjectAnimationUsingKeyFrames>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_TextBlockMove">
                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                  </ObjectAnimationUsingKeyFrames>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
          <Border Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}">
            <hc:SimplePanel ClipToBounds="True">
              <Border BorderThickness="0,0,0,4" BorderBrush="White" VerticalAlignment="Top" Height="52">
                <TextBlock Name="PART_TextBlockSelected" FontSize="16" VerticalAlignment="Top" Margin="0,14,0,0"
                           HorizontalAlignment="Center"/>
              </Border>
              <TextBlock Text="{TemplateBinding hc:TimeBar.SpeStr}" HorizontalAlignment="Right" VerticalAlignment="Top"
                         Margin="0,14,10,0"
                         Visibility="{TemplateBinding ShowSpeStr, Converter={StaticResource Boolean2VisibilityConverter}}"/>
              <TextBlock Name="PART_TextBlockMove" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top"
                         Margin="0,2,0,0"/>
              <Canvas Name="PART_CanvasSpe" VerticalAlignment="Bottom" Height="28"/>
              <hc:SimplePanel x:Name="PART_Hotspots" Margin="0,48,0,0" VerticalAlignment="Top"
                              Visibility="{Binding Hotspots, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Object2VisibilityConverter}}"/>
              <Border Width="1" Background="{DynamicResource DangerBrush}"/>
              <Border Name="PART_BorderTop" Background="Transparent" Cursor="Hand"/>
            </hc:SimplePanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource TimePickerBaseStyle}" TargetType="{x:Type hc:TimePicker}"/>
  <Style x:Key="TimePicker.Small" BasedOn="{StaticResource TimePickerBaseStyle}"
         TargetType="{x:Type hc:TimePicker}">
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
    <Setter Property="Control.Padding" Value="6,0"/>
  </Style>
  <Style x:Key="TimePickerExtend" BasedOn="{StaticResource TimePickerExtendBaseStyle}"
         TargetType="{x:Type hc:TimePicker}"/>
  <Style x:Key="TimePickerExtend.Small" BasedOn="{StaticResource TimePickerExtend}"
         TargetType="{x:Type hc:TimePicker}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style x:Key="TimePickerPlus" BasedOn="{StaticResource TimePickerPlusBaseStyle}"
         TargetType="{x:Type hc:TimePicker}"/>
  <Style x:Key="TimePickerPlus.Small" BasedOn="{StaticResource TimePickerPlus}"
         TargetType="{x:Type hc:TimePicker}">
    <Setter Property="hc:InfoElement.MinContentHeight" Value="20"/>
    <Setter Property="hc:InfoElement.ContentHeight" Value="20"/>
    <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,0"/>
    <Setter Property="hc:TitleElement.MarginOnTheTop" Value="6,0,0,1"/>
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
  </Style>
  <Style BasedOn="{StaticResource ToolBarTrayBaseStyle}" TargetType="{x:Type ToolBarTray}"/>
  <Style BasedOn="{StaticResource ToolBarBaseStyle}" TargetType="{x:Type ToolBar}"/>
  <Style BasedOn="{StaticResource ToolTipBaseStyle}" TargetType="{x:Type ToolTip}"/>
  <Style BasedOn="{StaticResource TransferBaseStyle}" TargetType="{x:Type hc:Transfer}"/>
  <Style x:Key="TransferItemBaseStyle.Small" BasedOn="{StaticResource TransferItemBaseStyle}"
         TargetType="{x:Type hc:TransferItem}">
    <Setter Property="Control.Padding" Value="6 0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="24"/>
  </Style>
  <Style x:Key="Transfer.Small" BasedOn="{StaticResource TransferBaseStyle}"
         TargetType="{x:Type hc:Transfer}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TransferItemBaseStyle.Small}"/>
  </Style>
  <Style x:Key="TransferItemBaseStyle.CheckBox" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:TransferItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualMargin0}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Background" Value="{DynamicResource RegionBrush}"/>
    <Setter Property="Control.Padding" Value="{StaticResource DefaultControlPadding}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="{StaticResource DefaultControlHeight}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type hc:TransferItem}">
          <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                  Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='1,0,1,0'}">
            <CheckBox Foreground="{TemplateBinding Control.Foreground}" HorizontalAlignment="Stretch"
                      MinHeight="{TemplateBinding FrameworkElement.MinHeight}" FocusVisualStyle="{x:Null}"
                      IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
              <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </CheckBox>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
      </Trigger>
      <Trigger Property="hc:TransferItem.IsTransferred" Value="True">
        <Setter Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Transfer.CheckBox" BasedOn="{StaticResource TransferBaseStyle}"
         TargetType="{x:Type hc:Transfer}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TransferItemBaseStyle.CheckBox}"/>
  </Style>
  <Style x:Key="TransferItemBaseStyle.CheckBox.Small"
         BasedOn="{StaticResource TransferItemBaseStyle.CheckBox}" TargetType="{x:Type hc:TransferItem}">
    <Setter Property="Control.Padding" Value="6 0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="24"/>
  </Style>
  <Style x:Key="Transfer.CheckBox.Small" BasedOn="{StaticResource TransferBaseStyle}"
         TargetType="{x:Type hc:Transfer}">
    <Setter Property="ItemsControl.ItemContainerStyle"
            Value="{StaticResource TransferItemBaseStyle.CheckBox.Small}"/>
  </Style>
  <Style BasedOn="{StaticResource TreeViewItemBaseStyle}" TargetType="{x:Type TreeViewItem}"/>
  <Style BasedOn="{StaticResource TreeViewBaseStyle}" TargetType="{x:Type TreeView}"/>
  <Style x:Key="TreeViewItemBaseStyle.Small" BasedOn="{StaticResource TreeViewItemBaseStyle}"
         TargetType="{x:Type TreeViewItem}">
    <Setter Property="Control.Padding" Value="6,0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="24"/>
  </Style>
  <Style x:Key="TreeView.Small" BasedOn="{StaticResource TreeViewBaseStyle}" TargetType="{x:Type TreeView}">
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource TreeViewItemBaseStyle.Small}"/>
  </Style>
  <Style BasedOn="{StaticResource WatermarkBaseStyle}" TargetType="{x:Type hc:Watermark}"/>
  <Style BasedOn="{StaticResource AutoCompleteTextBoxBaseStyle}"
         TargetType="{x:Type hc:AutoCompleteTextBox}"/>
  <ControlTemplate x:Key="TipSliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
    <hc:AxleCanvas>
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Bottom="28"
             Style="{StaticResource LabelPrimary}"
             Content="{Binding Value, RelativeSource={RelativeSource AncestorType=Slider}}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}"/>
      <Border Name="BorderDot" Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TipSliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
    <hc:AxleCanvas>
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Top="28"
             Style="{StaticResource LabelPrimary}"
             Content="{Binding Value, RelativeSource={RelativeSource AncestorType=Slider}}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}"/>
      <Border Name="BorderDot" Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TipSliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
    <hc:AxleCanvas Orientation="Vertical">
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Right="28"
             Style="{StaticResource LabelPrimary}"
             Content="{Binding Value, RelativeSource={RelativeSource AncestorType=Slider}}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}"/>
      <Border Name="BorderDot" Canvas.Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TipSliderThumbVerticalRight" TargetType="{x:Type Thumb}">
    <hc:AxleCanvas Orientation="Vertical">
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Left="28"
             Style="{StaticResource LabelPrimary}"
             Content="{Binding Value, RelativeSource={RelativeSource AncestorType=Slider}}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}"/>
      <Border Name="BorderDot" Canvas.Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <TickBar x:Name="TopTick" Fill="{TemplateBinding Control.Foreground}" Height="4" Margin="0,0,0,2"
               Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
      <TickBar x:Name="BottomTick" Fill="{TemplateBinding Control.Foreground}" Height="4" Margin="0,2,0,0"
               Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
      <Border x:Name="TrackBackground" Background="{TemplateBinding Control.Background}" Grid.Row="1" Height="2"
              VerticalAlignment="center" Margin="9,0">
        <Canvas x:Name="Canvas_SelectionRange" Visibility="Hidden">
          <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource AccentBrush}" Height="2"/>
        </Canvas>
      </Border>
      <Track x:Name="PART_Track" Margin="9,0" Grid.Row="1">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}"
                        Style="{StaticResource SliderRepeatButtonHorizontalStyle}"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                        Style="{StaticResource SliderRepeatButtonHorizontalStyle}"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="Thumb" ClipToBounds="False" Width="18" Margin="-9,0" Height="18" Focusable="False"
                 OverridesDefaultStyle="True" Template="{StaticResource SliderThumb}" VerticalAlignment="Center"/>
        </Track.Thumb>
      </Track>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Top"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbHorizontalTop}" Property="Control.Template"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Bottom"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbHorizontalBottom}"
                Property="Control.Template"/>
      </MultiTrigger>
      <Trigger Property="Slider.TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Slider.TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Slider.TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Slider.IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="Canvas_SelectionRange" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition MinWidth="{TemplateBinding FrameworkElement.MinWidth}" Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Control.Foreground}" Margin="0,0,2,0"
               Placement="Left" Visibility="Collapsed" Width="4"/>
      <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Control.Foreground}" Margin="2,0,0,0"
               Placement="Right" Visibility="Collapsed" Width="4"/>
      <Border x:Name="TrackBackground" Background="{TemplateBinding Control.Background}" Grid.Column="1"
              HorizontalAlignment="center" Margin="0,9" Width="2">
        <Canvas x:Name="Canvas_SelectionRange" Visibility="Hidden">
          <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource AccentBrush}" Width="2"/>
        </Canvas>
      </Border>
      <Track x:Name="PART_Track" Margin="0,9" Grid.Column="1">
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Background="{DynamicResource PrimaryBrush}"
                        Style="{StaticResource SliderRepeatButtonVerticalStyle}"/>
        </Track.DecreaseRepeatButton>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButtonVerticalStyle}"/>
        </Track.IncreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="Thumb" Margin="0,-9" Focusable="False" Height="18" OverridesDefaultStyle="True"
                 Template="{StaticResource SliderThumb}" HorizontalAlignment="Center" Width="18"/>
        </Track.Thumb>
      </Track>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Left"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbVerticalLeft}" Property="Control.Template"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Right"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbVerticalRight}" Property="Control.Template"/>
      </MultiTrigger>
      <Trigger Property="Slider.TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Slider.TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Slider.TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="Slider.IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="Canvas_SelectionRange" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SliderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Slider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DarkPrimaryBrush}"/>
    <Setter Property="Control.Template" Value="{StaticResource SliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="Slider.Orientation" Value="Vertical">
        <Setter Property="Control.Template" Value="{StaticResource SliderVertical}"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="TipRangeSliderThumbHorizontalTop" TargetType="{x:Type hc:RangeThumb}">
    <hc:AxleCanvas>
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Bottom="28"
             Style="{StaticResource LabelPrimary}" Content="{TemplateBinding hc:RangeThumb.Content}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}"/>
      <Border Name="BorderDot" Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TipRangeSliderThumbHorizontalBottom" TargetType="{x:Type hc:RangeThumb}">
    <hc:AxleCanvas>
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Top="28"
             Style="{StaticResource LabelPrimary}" Content="{TemplateBinding hc:RangeThumb.Content}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}"/>
      <Border Name="BorderDot" Canvas.Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TipRangeSliderThumbVerticalLeft" TargetType="{x:Type hc:RangeThumb}">
    <hc:AxleCanvas Orientation="Vertical">
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Right="28"
             Style="{StaticResource LabelPrimary}" Content="{TemplateBinding hc:RangeThumb.Content}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}"/>
      <Border Name="BorderDot" Canvas.Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="TipRangeSliderThumbVerticalRight" TargetType="{x:Type hc:RangeThumb}">
    <hc:AxleCanvas Orientation="Vertical">
      <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Canvas.Left="28"
             Style="{StaticResource LabelPrimary}" Content="{TemplateBinding hc:RangeThumb.Content}"
             ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}"/>
      <Border Name="BorderDot" Canvas.Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0"
              BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White"
              CornerRadius="9"/>
    </hc:AxleCanvas>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect"/>
        <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1"/>
      </Trigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="2" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
      <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ThicknessAnimation To="0" Duration="0:0:.1" Storyboard.TargetName="BorderDot"
                                  Storyboard.TargetProperty="BorderThickness"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RangeSliderHorizontal" TargetType="{x:Type hc:RangeSlider}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <TickBar x:Name="TopTick" Ticks="{TemplateBinding hc:RangeSlider.Ticks}"
               TickFrequency="{TemplateBinding hc:RangeSlider.TickFrequency}"
               Minimum="{TemplateBinding hc:TwoWayRangeBase.Minimum}"
               Maximum="{TemplateBinding hc:TwoWayRangeBase.Maximum}"
               IsDirectionReversed="{TemplateBinding hc:RangeSlider.IsDirectionReversed}"
               Fill="{TemplateBinding Control.Foreground}" Height="4" Margin="0,0,0,2" Placement="Top"
               Grid.Row="0" Visibility="Collapsed" Width="{Binding ActualWidth, ElementName=TrackBackground}"/>
      <TickBar x:Name="BottomTick" Ticks="{TemplateBinding hc:RangeSlider.Ticks}"
               TickFrequency="{TemplateBinding hc:RangeSlider.TickFrequency}"
               Minimum="{TemplateBinding hc:TwoWayRangeBase.Minimum}"
               Maximum="{TemplateBinding hc:TwoWayRangeBase.Maximum}"
               IsDirectionReversed="{TemplateBinding hc:RangeSlider.IsDirectionReversed}"
               Fill="{TemplateBinding Control.Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom"
               Grid.Row="2" Visibility="Collapsed" Width="{Binding ActualWidth, ElementName=TrackBackground}"/>
      <Border x:Name="TrackBackground" Background="{TemplateBinding Control.Background}" Margin="9,0"
              Grid.Row="1" Height="2" VerticalAlignment="center"/>
      <hc:RangeTrack x:Name="PART_Track" IsDirectionReversed="{TemplateBinding hc:RangeSlider.IsDirectionReversed}"
                     Orientation="{TemplateBinding hc:RangeSlider.Orientation}"
                     ValueStart="{TemplateBinding hc:TwoWayRangeBase.ValueStart}"
                     ValueEnd="{TemplateBinding hc:TwoWayRangeBase.ValueEnd}"
                     Minimum="{TemplateBinding hc:TwoWayRangeBase.Minimum}"
                     Maximum="{TemplateBinding hc:TwoWayRangeBase.Maximum}" Margin="9,0" Grid.Row="1">
        <hc:RangeTrack.DecreaseRepeatButton>
          <RepeatButton Interval="{TemplateBinding hc:RangeSlider.Interval}" Delay="{TemplateBinding hc:RangeSlider.Delay}"
                        Command="{x:Static hc:RangeSlider.DecreaseLarge}"
                        Style="{StaticResource SliderRepeatButtonHorizontalStyle}"/>
        </hc:RangeTrack.DecreaseRepeatButton>
        <hc:RangeTrack.CenterRepeatButton>
          <RepeatButton Interval="{TemplateBinding hc:RangeSlider.Interval}" Delay="{TemplateBinding hc:RangeSlider.Delay}"
                        Command="{x:Static hc:RangeSlider.CenterLarge}" Background="{DynamicResource PrimaryBrush}"
                        Style="{StaticResource SliderRepeatButtonHorizontalStyle}"/>
        </hc:RangeTrack.CenterRepeatButton>
        <hc:RangeTrack.IncreaseRepeatButton>
          <RepeatButton Interval="{TemplateBinding hc:RangeSlider.Interval}" Delay="{TemplateBinding hc:RangeSlider.Delay}"
                        Command="{x:Static hc:RangeSlider.IncreaseLarge}"
                        Style="{StaticResource SliderRepeatButtonHorizontalStyle}"/>
        </hc:RangeTrack.IncreaseRepeatButton>
        <hc:RangeTrack.ThumbStart>
          <hc:RangeThumb x:Name="ThumbStart" Content="{TemplateBinding hc:TwoWayRangeBase.ValueStart}" ClipToBounds="False"
                         Width="18" Margin="-9,0" Height="18" Focusable="False" OverridesDefaultStyle="True"
                         Template="{StaticResource RangeSliderThumb}" VerticalAlignment="Center"/>
        </hc:RangeTrack.ThumbStart>
        <hc:RangeTrack.ThumbEnd>
          <hc:RangeThumb x:Name="ThumbEnd" Content="{TemplateBinding hc:TwoWayRangeBase.ValueEnd}" ClipToBounds="False"
                         Width="18" Margin="-9,0" Height="18" Focusable="False" OverridesDefaultStyle="True"
                         Template="{StaticResource RangeSliderThumb}" VerticalAlignment="Center"/>
        </hc:RangeTrack.ThumbEnd>
      </hc:RangeTrack>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Top"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbHorizontalTop}"
                Property="Control.Template"/>
        <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbHorizontalTop}"
                Property="Control.Template"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Bottom"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbHorizontalBottom}"
                Property="Control.Template"/>
        <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbHorizontalBottom}"
                Property="Control.Template"/>
      </MultiTrigger>
      <Trigger Property="hc:RangeSlider.TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="hc:RangeSlider.TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="hc:RangeSlider.TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RangeSliderVertical" TargetType="{x:Type hc:RangeSlider}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition MinWidth="{TemplateBinding FrameworkElement.MinWidth}" Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <TickBar x:Name="TopTick" Ticks="{TemplateBinding hc:RangeSlider.Ticks}"
               TickFrequency="{TemplateBinding hc:RangeSlider.TickFrequency}"
               Minimum="{TemplateBinding hc:TwoWayRangeBase.Minimum}"
               Maximum="{TemplateBinding hc:TwoWayRangeBase.Maximum}"
               IsDirectionReversed="{TemplateBinding hc:RangeSlider.IsDirectionReversed}" Grid.Column="0"
               Fill="{TemplateBinding Control.Foreground}" Margin="0,0,2,0" Placement="Left"
               Visibility="Collapsed" Width="4" Height="{Binding ActualHeight, ElementName=TrackBackground}"/>
      <TickBar x:Name="BottomTick" Ticks="{TemplateBinding hc:RangeSlider.Ticks}"
               TickFrequency="{TemplateBinding hc:RangeSlider.TickFrequency}"
               Minimum="{TemplateBinding hc:TwoWayRangeBase.Minimum}"
               Maximum="{TemplateBinding hc:TwoWayRangeBase.Maximum}"
               IsDirectionReversed="{TemplateBinding hc:RangeSlider.IsDirectionReversed}" Grid.Column="2"
               Fill="{TemplateBinding Control.Foreground}" Margin="2,0,0,0" Placement="Right"
               Visibility="Collapsed" Width="4" Height="{Binding ActualHeight, ElementName=TrackBackground}"/>
      <Border x:Name="TrackBackground" Background="{TemplateBinding Control.Background}" Margin="0,9"
              Grid.Column="1" HorizontalAlignment="center" Width="2"/>
      <hc:RangeTrack x:Name="PART_Track" IsDirectionReversed="{TemplateBinding hc:RangeSlider.IsDirectionReversed}"
                     Orientation="{TemplateBinding hc:RangeSlider.Orientation}"
                     ValueStart="{TemplateBinding hc:TwoWayRangeBase.ValueStart}"
                     ValueEnd="{TemplateBinding hc:TwoWayRangeBase.ValueEnd}"
                     Minimum="{TemplateBinding hc:TwoWayRangeBase.Minimum}"
                     Maximum="{TemplateBinding hc:TwoWayRangeBase.Maximum}" Margin="0,9" Grid.Column="1">
        <hc:RangeTrack.DecreaseRepeatButton>
          <RepeatButton Interval="{TemplateBinding hc:RangeSlider.Interval}" Delay="{TemplateBinding hc:RangeSlider.Delay}"
                        Command="{x:Static hc:RangeSlider.DecreaseLarge}"
                        Style="{StaticResource SliderRepeatButtonVerticalStyle}"/>
        </hc:RangeTrack.DecreaseRepeatButton>
        <hc:RangeTrack.CenterRepeatButton>
          <RepeatButton Interval="{TemplateBinding hc:RangeSlider.Interval}" Delay="{TemplateBinding hc:RangeSlider.Delay}"
                        Command="{x:Static hc:RangeSlider.CenterLarge}" Background="{DynamicResource PrimaryBrush}"
                        Style="{StaticResource SliderRepeatButtonVerticalStyle}"/>
        </hc:RangeTrack.CenterRepeatButton>
        <hc:RangeTrack.IncreaseRepeatButton>
          <RepeatButton Interval="{TemplateBinding hc:RangeSlider.Interval}" Delay="{TemplateBinding hc:RangeSlider.Delay}"
                        Command="{x:Static hc:RangeSlider.IncreaseLarge}"
                        Style="{StaticResource SliderRepeatButtonVerticalStyle}"/>
        </hc:RangeTrack.IncreaseRepeatButton>
        <hc:RangeTrack.ThumbStart>
          <hc:RangeThumb x:Name="ThumbStart" Content="{TemplateBinding hc:TwoWayRangeBase.ValueStart}" Margin="0,-9"
                         Focusable="False" Height="18" OverridesDefaultStyle="True"
                         Template="{StaticResource RangeSliderThumb}" HorizontalAlignment="Center" Width="18"/>
        </hc:RangeTrack.ThumbStart>
        <hc:RangeTrack.ThumbEnd>
          <hc:RangeThumb x:Name="ThumbEnd" Content="{TemplateBinding hc:TwoWayRangeBase.ValueEnd}" Margin="0,-9"
                         Focusable="False" Height="18" OverridesDefaultStyle="True"
                         Template="{StaticResource RangeSliderThumb}" HorizontalAlignment="Center" Width="18"/>
        </hc:RangeTrack.ThumbEnd>
      </hc:RangeTrack>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Left"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbVerticalLeft}"
                Property="Control.Template"/>
        <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbVerticalLeft}"
                Property="Control.Template"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="hc:TipElement.Placement" Value="Right"/>
          <Condition Property="hc:TipElement.Visibility" Value="Visible"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbVerticalRight}"
                Property="Control.Template"/>
        <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbVerticalRight}"
                Property="Control.Template"/>
      </MultiTrigger>
      <Trigger Property="hc:RangeSlider.TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="hc:RangeSlider.TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
      <Trigger Property="hc:RangeSlider.TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RangeSliderBaseStyle" BasedOn="{StaticResource BaseStyle}"
         TargetType="{x:Type hc:RangeSlider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Control.Background" Value="{DynamicResource SecondaryRegionBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource DarkPrimaryBrush}"/>
    <Setter Property="Control.Template" Value="{StaticResource RangeSliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="hc:RangeSlider.Orientation" Value="Vertical">
        <Setter Property="Control.Template" Value="{StaticResource RangeSliderVertical}"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="UIElement.Opacity" Value=".4"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style BasedOn="{StaticResource RangeSliderBaseStyle}" TargetType="{x:Type hc:RangeSlider}"/>
  <Style BasedOn="{StaticResource SliderBaseStyle}" TargetType="{x:Type Slider}"/>
</ResourceDictionary>