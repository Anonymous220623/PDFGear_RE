<Window x:Class="pdfeditor.Views.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:pdfeditor.Views"
        xmlns:control="clr-namespace:pdfeditor.Controls"
        xmlns:bookmarkControl="clr-namespace:pdfeditor.Controls.Bookmarks"
        xmlns:pdf="clr-namespace:PDFKit;assembly=PDFKit"
        xmlns:viewmodels="clr-namespace:pdfeditor.ViewModels"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:behaviors2="clr-namespace:pdfeditor.Utils.Behaviors"
        xmlns:menus="clr-namespace:pdfeditor.Controls.Menus"
        xmlns:toolbarSetting="clr-namespace:pdfeditor.Controls.Menus.ToolbarSettings"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:input="clr-namespace:System.Windows.Input;assembly=PresentationCore"
        xmlns:utils="clr-namespace:PDFKit.Utils;assembly=PDFKit"
        xmlns:utils2="clr-namespace:pdfeditor.Utils"
        xmlns:commonLibControl="clr-namespace:CommomLib.Controls;assembly=CommomLib"
        xmlns:hotkeys="clr-namespace:CommomLib.Commom.HotKeys;assembly=CommomLib"
        xmlns:cv="clr-namespace:pdfeditor.Utils.Converters"
        xmlns:localprop="clr-namespace:pdfeditor.Properties"
        xmlns:copilot="clr-namespace:pdfeditor.Controls.Copilot"
        Title="{StaticResource ApplicationTitle}" Height="650" Width="980" MinHeight="400" MinWidth="500"
        Background="Transparent">
  <FrameworkElement.Resources>
    <cv:IntToBooleanConverter x:Key="IntToBooleanConverter"/>
    <cv:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <cv:BooleanToVisibilityReverseConverter x:Key="BooleanToVisibilityReverseConverter"/>
    <cv:LeftNavigationViewContentVisibilityConverter x:Key="LeftNavigationViewContentVisibilityConverter"/>
    <cv:SubViewModePageConverter x:Key="SubViewModePageConverter"/>
    <cv:StringBrushConverter x:Key="StringBrushConverter"/>
    <cv:StringStrokeConverter x:Key="StringStrokeConverter"/>
    <cv:SubViewModeContinuousConverter x:Key="SubViewModeContinuousConverter"/>
    <cv:SizeModeConverter x:Key="SizeModeConverter"/>
    <cv:BooleanReverseConverter x:Key="BooleanReverseConverter"/>
    <cv:SearchResultVisibilityConverter x:Key="SearchResultVisibilityConverter"/>
    <cv:SerarchDelVisibitlityConverter x:Key="SerarchDelVisibitlityConverter"/>
    <cv:ToolbarMenuVisibilityConverter x:Key="ToolbarMenuVisibilityConverter"/>
    <cv:SelectedCountVisibilityConverter x:Key="SelectedCountVisibilityConverter"/>
    <cv:BooleanToOpacityConverter x:Key="BooleanToOpacityConverter"/>
    <cv:BooleanToOpacityReverseConverter x:Key="BooleanToOpacityReverseConverter"/>
    <cv:ToolbarSettingViewerPaddingConverter x:Key="ToolbarSettingViewerPaddingConverter"/>
    <cv:BooleanToHotkeyInvokeActionConverter x:Key="BooleanToHotkeyInvokeActionConverter"/>
    <commonLibControl:HasHotKeyConverter x:Key="HasHotKeyConverter"/>
    <commonLibControl:HotKeyNameConverter x:Key="HotKeyNameConverter"/>
    <cv:NumberFormatConverter x:Key="NumberFormatConverter"/>
    <PathGeometry x:Key="CloseGeometry" Figures="M3 3L13.5 13.5M13.5 3L3 13.5"/>
    <PathGeometry x:Key="DeleteGeometry"
                  Figures="M12.1981 13.0723C12.1981 13.554 11.8056 13.9465 11.324 13.9465H5.02443C4.7925 13.9465 4.57005 13.8544 4.40595 13.6905C4.24184 13.5266 4.14952 13.3043 4.14924 13.0723V3.79057H12.1981V13.0723ZM5.8986 2.22158C5.8986 2.12114 5.97649 2.04223 6.07794 2.04223H10.2807C10.3822 2.04223 10.4601 2.12114 10.4601 2.22158V2.74834H5.8986V2.22158ZM14.8206 2.74834H11.5023V2.22158C11.5023 1.54931 10.954 1 10.2807 1H6.07794C5.75421 1.00081 5.44397 1.12978 5.21506 1.35869C4.98615 1.5876 4.85718 1.89784 4.85637 2.22158V2.74834H1.52675C1.45758 2.74834 1.38908 2.76196 1.32517 2.78843C1.26126 2.81491 1.20319 2.85371 1.15428 2.90262C1.10537 2.95153 1.06657 3.0096 1.0401 3.07351C1.01362 3.13742 1 3.20591 1 3.27509C1 3.34426 1.01362 3.41276 1.0401 3.47666C1.06657 3.54057 1.10537 3.59864 1.15428 3.64755C1.20319 3.69647 1.26126 3.73527 1.32517 3.76174C1.38908 3.78821 1.45758 3.80184 1.52675 3.80184H3.09573V13.0723C3.09573 14.1371 3.95966 15 5.02443 15H11.3229C11.5762 15.0001 11.827 14.9504 12.061 14.8536C12.2949 14.7567 12.5076 14.6148 12.6867 14.4358C12.8658 14.2567 13.0079 14.0442 13.1048 13.8102C13.2018 13.5763 13.2516 13.3256 13.2516 13.0723V3.79057H14.8206C15.1117 3.79057 15.3474 3.55486 15.3474 3.26382C15.3473 3.19521 15.3335 3.12731 15.3068 3.06408C15.2802 3.00086 15.2412 2.94358 15.1921 2.89559C15.1431 2.8476 15.085 2.80986 15.0212 2.78458C14.9574 2.7593 14.8892 2.74698 14.8206 2.74834ZM8.17369 12.3662C8.46474 12.3662 8.70045 12.1305 8.70045 11.8395V6.23373C8.70045 6.09403 8.64495 5.96005 8.54617 5.86126C8.44738 5.76248 8.3134 5.70698 8.1737 5.70698C8.03399 5.70698 7.90001 5.76248 7.80122 5.86126C7.70244 5.96005 7.64694 6.09403 7.64694 6.23373V11.8395C7.64694 12.1305 7.88265 12.3662 8.17369 12.3662ZM5.71926 12.3662C6.01031 12.3662 6.24601 12.1305 6.24601 11.8395V6.23373C6.24601 6.09403 6.19051 5.96005 6.09173 5.86127C5.99294 5.76248 5.85896 5.70699 5.71926 5.70699C5.57956 5.70699 5.44558 5.76248 5.34679 5.86127C5.24801 5.96005 5.19251 6.09403 5.19251 6.23373V11.8395C5.20275 12.1305 5.43846 12.3662 5.71926 12.3662ZM10.6281 12.3662C10.9202 12.3662 11.1559 12.1305 11.1559 11.8395V6.23373C11.1559 6.09389 11.1004 5.95978 11.0015 5.8609C10.9026 5.76202 10.7685 5.70647 10.6286 5.70647C10.4888 5.70647 10.3547 5.76202 10.2558 5.8609C10.1569 5.95978 10.1014 6.09389 10.1014 6.23373V11.8395C10.1014 12.1305 10.3371 12.3662 10.6281 12.3662Z"/>
    <PathGeometry x:Key="ExploreContentGeometry"
                  Figures="M 20 0 L 20 17.5 L 18.75 17.5 L 18.75 1.25 L 2.5 1.25 L 2.5 0 Z M 1.25 2.5 L 17.5 2.5 L 17.5 18.75 L 1.25 18.75 Z M 2.5 17.5 L 16.25 17.5 L 16.25 3.75 L 2.5 3.75 Z M 10 10 L 13.75 10 L 13.75 11.25 L 10 11.25 L 10 15 L 8.75 15 L 8.75 11.25 L 5 11.25 L 5 10 L 8.75 10 L 8.75 6.25 L 10 6.25 Z "/>
    <PathGeometry x:Key="CollapseContentGeometry"
                  Figures="M 20 0 L 20 17.5 L 18.75 17.5 L 18.75 1.25 L 2.5 1.25 L 2.5 0 Z M 1.25 2.5 L 17.5 2.5 L 17.5 18.75 L 1.25 18.75 Z M 2.5 17.5 L 16.25 17.5 L 16.25 3.75 L 2.5 3.75 Z M 5 10 L 13.75 10 L 13.75 11.25 L 5 11.25 Z "/>
    <PathGeometry x:Key="FilterGeometry" Figures="M13 10.5L19 6H5L11 10.5V18.9993L13 16.9993V10.5Z"/>
    <Style x:Key="ButtonFontStyle" TargetType="{x:Type TextBlock}">
      <Setter Property="TextBlock.Foreground" Value="#3F3F3F"/>
      <Setter Property="TextBlock.FontSize" Value="12"/>
      <Setter Property="TextBlock.TextAlignment" Value="Center"/>
      <Setter Property="TextBlock.FontSize" Value="12"/>
      <Setter Property="TextBlock.FontStyle" Value="Normal"/>
    </Style>
    <Style x:Key="BtnInfoStyle" TargetType="{x:Type ButtonBase}">
      <Setter Property="FrameworkElement.Height" Value="25"/>
      <Setter Property="Control.Background" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
      <Setter Property="Control.BorderThickness" Value="0"/>
      <Setter Property="TextBlock.Foreground" Value="{DynamicResource MainViewBtnInfoStyleText}"/>
      <Setter Property="TextBlock.FontSize" Value="12"/>
      <Setter Property="TextBlock.TextAlignment" Value="Center"/>
      <Setter Property="TextBlock.FontSize" Value="12"/>
      <Setter Property="TextBlock.FontStyle" Value="Normal"/>
      <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="Control.Padding" Value="4,0"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ButtonBase}">
            <Border x:Name="bborder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
              <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="bborder" Property="Border.CornerRadius" Value="3"/>
                <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#FFBABA"/>
                <Setter TargetName="bborder" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="bborder" Value="{DynamicResource MainViewUndoRedoUnEnabled}"
                        Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource MainViewUndoRedoUnEnabled}" Property="TextBlock.Foreground"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="true">
                <Setter TargetName="bborder" Value="{DynamicResource MainViewUndoRedoEnabled}"
                        Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource MainViewUndoRedoEnabled}" Property="TextBlock.Foreground"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="LightBtnInfoStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource BtnInfoStyle}">
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ButtonBase}">
            <Border x:Name="bborder" BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="10"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
              <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="bborder" Property="Border.CornerRadius" Value="10"/>
                <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#FFBABA"/>
                <Setter TargetName="bborder" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="bborder" Value="{DynamicResource MainViewUndoRedoUnEnabled}"
                        Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource MainViewUndoRedoUnEnabled}" Property="TextBlock.Foreground"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="true">
                <Setter TargetName="bborder" Value="{DynamicResource MainViewUndoRedoEnabled}"
                        Property="Border.BorderBrush"/>
                <Setter Value="{DynamicResource MainViewUndoRedoEnabled}" Property="TextBlock.Foreground"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="AnnotationBtnInfo" TargetType="{x:Type Button}" BasedOn="{StaticResource BtnInfoStyle}">
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ButtonBase}">
            <Border x:Name="bborder" CornerRadius="4" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
              <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="bborder" Property="Border.CornerRadius" Value="4"/>
                <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#FFBABA"/>
                <Setter TargetName="bborder" Property="UIElement.Opacity" Value="0.8"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#9F9F9F"/>
                <Setter Property="TextBlock.Foreground" Value="#9F9F9F"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="true">
                <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#3F3F3F"/>
                <Setter Property="TextBlock.Foreground" Value="#3F3F3F"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type TextBox}">
            <Grid>
              <TextBox x:Name="textSource" Background="Transparent" VerticalContentAlignment="Top"
                       Padding="{TemplateBinding Control.Padding}" Panel.ZIndex="2"
                       Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                       TextWrapping="{Binding Path=TextWrapping, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
              <TextBox Text="{TemplateBinding FrameworkElement.Tag}" Opacity="0.4"
                       Background="{TemplateBinding Control.Background}" Panel.ZIndex="1">
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type TextBox}">
                    <Setter Property="Control.Foreground" Value="Transparent"/>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                        <Setter Property="Control.Foreground" Value="#7E7E7E"/>
                        <Setter Property="TextBox.TextWrapping" Value="Wrap"/>
                        <Setter Property="Control.Padding" Value="2,3,0,0"/>
                        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </TextBox>
            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="SplitLineStyle" TargetType="{x:Type Rectangle}">
      <Setter Property="Shape.Fill" Value="{DynamicResource MainViewSpacerRectangle}"/>
      <Setter Property="FrameworkElement.Width" Value="1"/>
      <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
      <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
      <Setter Property="FrameworkElement.Margin" Value="8,12"/>
    </Style>
    <Style x:Key="MainViewListBoxItemMenuBarStyle" TargetType="{x:Type ListBoxItem}">
      <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
      <Setter Property="Control.HorizontalContentAlignment"
              Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
      <Setter Property="Control.VerticalContentAlignment"
              Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
      <Setter Property="Control.Background" Value="Transparent"/>
      <Setter Property="Control.BorderBrush" Value="Transparent"/>
      <Setter Property="Control.BorderThickness" Value="1"/>
      <Setter Property="FrameworkElement.Height" Value="28"/>
      <Setter Property="Control.Foreground" Value="#555555"/>
      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ListBoxItem}">
            <Border x:Name="Bd" CornerRadius="4" Margin="2" Background="{TemplateBinding Control.Background}">
              <ContentPresenter x:Name="cp" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="UIElement.IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Property="Border.Background" Value="#33CCCCCC"/>
                <Setter TargetName="Bd" Property="Border.BorderBrush" Value="Transparent"/>
              </MultiTrigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="Selector.IsSelectionActive" Value="false"/>
                  <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Value="{DynamicResource MainViewListItemSeleted}" Property="Border.Background"/>
                <Setter TargetName="Bd" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Control.Foreground"/>
              </MultiTrigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="Selector.IsSelectionActive" Value="true"/>
                  <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Bd" Value="{DynamicResource MainViewListItemSeleted}" Property="Border.Background"/>
                <Setter TargetName="Bd" Property="Border.BorderBrush" Value="Transparent"/>
                <Setter Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Control.Foreground"/>
              </MultiTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
  </FrameworkElement.Resources>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition x:Name="TitlebarRow" Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="TitlebarPlaceholder" Visibility="Collapsed">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <ContentControl IsTabStop="false" Grid.Column="0" Margin="12,0,5,0" Foreground="Black" HorizontalAlignment="Center"
                      VerticalAlignment="Center" FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSize}}"
                      Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=Title}"/>
    </Grid>
    <Grid Background="{DynamicResource SignaturePickerBackground}" Row="1">
      <Grid.RowDefinitions>
        <RowDefinition x:Name="QuickToolHeaderRow" Height="28"/>
        <RowDefinition x:Name="MenuRow" Height="Auto"/>
        <RowDefinition x:Name="MainRow" Height="*"/>
        <RowDefinition x:Name="FooterRow" Height="32"/>
      </Grid.RowDefinitions>
      <Grid x:Name="HeaderContainer" Background="{DynamicResource SolidBrushWhiteAndBlack}"
            TextBlock.Foreground="{DynamicResource TextBrushWhiteAndBlack}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="1"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="1"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid x:Name="QuickToolContainer" Column="0" HorizontalAlignment="Left" Margin="8 0 0 0">
          <ItemsControl>
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal"/>
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <Button x:Name="NewPDFBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0"
                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_CreateNewPDF"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MainViewCreateNewPDF}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_CreateNewPDF}"
                    Command="{Binding PageEditors.CreateBlankPage}"
                    Visibility="{Binding Path=QuickToolPrintModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
              <ContentControl.Content>
                <Viewbox>
                  <Grid Height="24" Width="24" Margin="2 2 2 3">
                    <Path Data="M 17,10 L 17,4 4,4 4,20 14,20 " Stroke="{DynamicResource BtnBrushGrayAndDark}"/>
                    <Path Data="M 13,16 L 17,16 M 21,16 L 17,16 M 17,16 L 17,12 M 17,16 L 17,20 "
                          Stroke="{DynamicResource BtnBrushGrayAndDark}"/>
                  </Grid>
                </Viewbox>
              </ContentControl.Content>
            </Button>
            <Button x:Name="openBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0" FontFamily="Segoe MDL2 Assets" FontSize="14"
                    Foreground="{DynamicResource BtnBrushGrayAndDark}" Content=""
                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Open"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolOpenTooltipText}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_Open}"
                    Command="{Binding Path=QuickToolOpenModel.Command}"
                    Visibility="{Binding Path=QuickToolOpenModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Button x:Name="saveBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0" Foreground="{DynamicResource BtnBrushGrayAndDark}"
                    FontFamily="Segoe MDL2 Assets" FontSize="14" Content=""
                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Save"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolSaveTooltipText}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_Save}"
                    Command="{Binding Path=QuickToolSaveModel.Command}"
                    Visibility="{Binding Path=QuickToolSaveModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Button x:Name="saveAsBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0" Foreground="{DynamicResource BtnBrushGrayAndDark}"
                    FontFamily="Segoe MDL2 Assets" FontSize="14" Content=""
                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_SaveAs"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolSaveAsTooltipText}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_SaveAs}"
                    Command="{Binding Path=QuickToolSaveAsModel.Command}"
                    Visibility="{Binding Path=QuickToolSaveAsModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Button x:Name="printBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolPrintTooltipText}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_Print}"
                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Print"
                    Command="{Binding Path=QuickToolPrintModel.Command}"
                    Visibility="{Binding Path=QuickToolPrintModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
              <Image Width="20" Height="20" Source="{DynamicResource MainViewPrintSource}"/>
            </Button>
            <Rectangle Style="{StaticResource SplitLineStyle}" Margin="8 7"/>
            <Button x:Name="undoBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0" FontFamily="Segoe MDL2 Assets" FontSize="14"
                    Content="" hotkeys:HotKeyExtensions.InvokeWhen="Editor_Undo"
                    hotkeys:HotKeyExtensions.InvokeAction="None"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolUndoTooltipText}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_Undo}"
                    Command="{Binding Path=QuickToolUndoModel.Command}"
                    Visibility="{Binding Path=QuickToolUndoModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Button x:Name="redoBtn" Style="{StaticResource BtnInfoStyle}" Width="24" Height="24" Padding="0"
                    Background="Transparent" BorderThickness="0" FontFamily="Segoe MDL2 Assets" FontSize="14"
                    Content="" hotkeys:HotKeyExtensions.InvokeWhen="Editor_Redo,Editor_Redo2"
                    RenderTransformOrigin="0.5,0.5"
                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolRedoTooltipText}"
                    ToolTip="{x:Static localprop:Resources.TooltipDesc_Redo}"
                    Command="{Binding Path=QuickToolRedoModel.Command}"
                    Visibility="{Binding Path=QuickToolRedoModel.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
              <UIElement.RenderTransform>
                <ScaleTransform ScaleX="-1"/>
              </UIElement.RenderTransform>
            </Button>
          </ItemsControl>
        </Grid>
        <Grid SizeChanged="MenuHeaderContainer_SizeChanged" x:Name="MenuHeaderContainer" Column="2" Margin="0"
              HorizontalAlignment="Stretch" VerticalAlignment="Center"
              Opacity="{Binding Menus.ToolbarInited, Converter={StaticResource BooleanToOpacityConverter}}"
              Visibility="{Binding ElementName=PdfControl, Path=IsEditing, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
          <ScrollViewer PreviewMouseWheel="MenuScrollViewer_PreviewMouseWheel" x:Name="MenuHeaderScrollViewer"
                        HorizontalAlignment="Center" VerticalScrollBarVisibility="Disabled"
                        HorizontalScrollBarVisibility="Hidden" Padding="8,0">
            <ListBox SelectionChanged="Menus_SelectionChanged" x:Name="Menus" HorizontalAlignment="Center"
                     VerticalAlignment="Center" VerticalContentAlignment="Center" Background="Transparent"
                     ScrollViewer.VerticalScrollBarVisibility="Disabled"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     ItemContainerStyle="{StaticResource MainViewListBoxItemMenuBarStyle}" BorderThickness="0"
                     FontSize="12" ItemsSource="{Binding Menus.MainMenus}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <WrapPanel Orientation="Horizontal" IsItemsHost="true"/>
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Grid x:Name="layoutRoot" MinWidth="55">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="2"/>
                    </Grid.RowDefinitions>
                    <Border x:Name="bgBorder" Grid.Row="1" BorderThickness="0,2,0,0" BorderBrush="#FC0D1B"
                            Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}, AncestorLevel=1}, Path=IsSelected, Converter={StaticResource BooleanToVisibilityConverter}, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock x:Name="textBlock" Grid.Row="0" HorizontalAlignment="Center" Margin="8,2"
                               Foreground="{DynamicResource TextBrushWhiteAndBlack}" Text="{Binding Title}"/>
                  </Grid>
                  <DataTemplate.Triggers>
                    <Trigger Property="local:MainView.IsHeaderMenuCompactModeEnabled" Value="true">
                      <Setter TargetName="layoutRoot" Property="FrameworkElement.MinWidth" Value="0"/>
                      <Setter TargetName="textBlock" Property="FrameworkElement.Margin" Value="4,2"/>
                    </Trigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ListBox>
          </ScrollViewer>
        </Grid>
        <StackPanel Orientation="Horizontal" Grid.Column="4" HorizontalAlignment="Right">
          <Grid x:Name="menuFeedBack" Visibility="Collapsed">
            <Button Margin="0,0,12,0" Width="28" Height="20" HorizontalAlignment="Right"
                    Style="{StaticResource BtnInfoStyle}" Command="{Binding Path=FeedBackCmd}">
              <ContentControl.Content>
                <StackPanel Orientation="Vertical">
                  <Image Source="/Style/Resources/feedback.png" Width="24" Height="20"/>
                </StackPanel>
              </ContentControl.Content>
            </Button>
          </Grid>
          <Grid x:Name="menuBackgroundMode" Margin="0,0,8,0">
            <FrameworkElement.Resources>
              <Style x:Key="listboxStyle" TargetType="{x:Type ListBoxItem}">
                <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
                <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
                <Setter Property="Control.Background" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
                <Setter Property="Control.Foreground" Value="{DynamicResource TextBrushWhiteAndBlack}"/>
                <Setter Property="FrameworkElement.Height" Value="28"/>
                <Setter Property="Control.FontSize" Value="12"/>
                <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
                <Setter Property="Control.BorderThickness" Value="0"/>
                <Setter Property="Control.Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                      <Grid x:Name="backgrid">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="20"/>
                          <ColumnDefinition MinWidth="100"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock x:Name="checkedTextblock" Text="" VerticalAlignment="Center" FontSize="20"
                                   FontFamily="Segoe MDL2 Assets" Visibility="Hidden" Grid.Column="0"/>
                        <Border x:Name="border" Grid.Column="1" CornerRadius="0" Margin="2"
                                BorderBrush="{DynamicResource TextBrushWhiteAndBlack}">
                          <ContentPresenter HorizontalAlignment="Stretch"
                                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="0,0,0,0"/>
                        </Border>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger Property="ListBoxItem.IsSelected" Value="true">
                          <Setter Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Control.Foreground"/>
                          <Setter TargetName="checkedTextblock" Property="UIElement.Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                          <MultiTrigger.Conditions>
                            <Condition Property="UIElement.IsMouseOver" Value="true"/>
                          </MultiTrigger.Conditions>
                          <MultiTrigger.Setters>
                            <Setter Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Control.Foreground"/>
                            <Setter TargetName="backgrid" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Panel.Background"/>
                            <Setter TargetName="border" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Border.BorderBrush"/>
                          </MultiTrigger.Setters>
                        </MultiTrigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </FrameworkElement.Resources>
            <Button Click="BackgroundModeButton_Click" x:Name="BackgroundModeButton"
                    ToolTip="{x:Static localprop:Resources.HeaderToolThemeTips}" MinWidth="0" Width="35" Height="24"
                    Padding="0,0,0,0" Background="Transparent" Style="{StaticResource LightBtnInfoStyle}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="2*"/>
                  <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Image Source="{DynamicResource MainViewToolBarSunandMoon}" HorizontalAlignment="Center"
                       VerticalAlignment="Center" Margin="3 0 0 0"/>
                <Viewbox Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Height="3" Width="5">
                  <Path Data="M 5,0 L 0,0 2.5,2.5 5,0 Z" Fill="{DynamicResource TextBrushWhiteAndBlack}"/>
                </Viewbox>
              </Grid>
            </Button>
            <Popup x:Name="BackgroundModeMenu" PlacementRectangle="-5 28 0 0" StaysOpen="false"
                   AllowsTransparency="true" PopupAnimation="Fade"
                   PlacementTarget="{Binding ElementName=BackgroundModeButton}">
              <Border BorderThickness="1" BorderBrush="Gray">
                <Grid MinWidth="145" Background="{DynamicResource SolidBrushWhiteAndBlack}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="25"/>
                    <RowDefinition Height="0.6*"/>
                    <RowDefinition Height="25"/>
                    <RowDefinition Height="*"/>
                  </Grid.RowDefinitions>
                  <TextBlock Text="{x:Static localprop:Resources.ToolAppThemeTitle}" Grid.Row="0" FontSize="12" Margin="5 0 0 0"
                             HorizontalAlignment="Left" VerticalAlignment="Center"
                             Foreground="{DynamicResource MainViewBackgroundPopupBackground}"/>
                  <ListBox SelectionChanged="ThemeListBox_SelectionChanged" PreviewMouseDown="ThemeListBox_PreviewMouseDown"
                           x:Name="ThemeListBox" Grid.Row="1" BorderThickness="0"
                           Background="{DynamicResource SolidBrushWhiteAndBlack}"
                           BorderBrush="{DynamicResource MainViewFontSizeBorder}"
                           ItemContainerStyle="{StaticResource listboxStyle}"/>
                  <TextBlock Text="{x:Static localprop:Resources.WinViewToolBackgroundText}" Grid.Row="2" FontSize="12"
                             Margin="5 0 0 0" HorizontalAlignment="Left" VerticalAlignment="Center"
                             Foreground="{DynamicResource MainViewBackgroundPopupBackground}"/>
                  <ListBox PreviewMouseDown="ThemeListBox_PreviewMouseDown"
                           SelectionChanged="PaperColorListBox_SelectionChanged" x:Name="PaperColorListBox" Grid.Row="3"
                           BorderThickness="0" Background="{DynamicResource SolidBrushWhiteAndBlack}"
                           ItemContainerStyle="{StaticResource listboxStyle}"/>
                </Grid>
              </Border>
            </Popup>
          </Grid>
          <Grid x:Name="ShareFile" Margin="0,0,8,0">
            <FrameworkElement.Resources>
              <DataTemplate x:Key="ToolbarButtonContentTextTemplate">
                <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" Text="{Binding Caption}"/>
              </DataTemplate>
              <DataTemplate x:Key="ToolbarButtonContentPlainTextTemplate">
                <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" Text="{Binding}"/>
              </DataTemplate>
              <DataTemplate x:Key="ToolbarButtonContentToggleButtonTemplate">
                <menus:ToolbarShareToggleButton IsChecked="{Binding ChildButtonModel.IsChecked, Mode=TwoWay}"
                                                OpenContextMenuOnChecked="{Binding ChildButtonModel.OpenContextMenuOnChecked}"
                                                IndicatorBrush="{Binding IndicatorBrush}">
                  <ContentControl.Content>
                    <commonLibControl:AutoTooltipTextBlock Text="{Binding Caption}"/>
                  </ContentControl.Content>
                  <FrameworkElement.ContextMenu>
                    <menus:ToolbarButtonContextMenu ItemsSource="{Binding ChildButtonModel.ContextMenu}"/>
                  </FrameworkElement.ContextMenu>
                </menus:ToolbarShareToggleButton>
              </DataTemplate>
              <menus:ToolbarButtonContentTemplateSelector x:Key="ToolbarButtonContentTemplateSelector2"
                                                          TextTemplate="{StaticResource ToolbarButtonContentTextTemplate}"
                                                          PlainTextTemplate="{StaticResource ToolbarButtonContentPlainTextTemplate}"
                                                          ToggleButtonTemplate="{StaticResource ToolbarButtonContentToggleButtonTemplate}"/>
            </FrameworkElement.Resources>
            <menus:ToolbarButton x:Name="ShareButton" MinWidth="0" Width="26" Height="24" Padding="0,1,0,0"
                                 ToolTip="{x:Static localprop:Resources.HeaderToolShareTips}"
                                 ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector2}"
                                 Command="{Binding AnnotationToolbar.ShareButtonModel.Command}"
                                 CommandParameter="{Binding AnnotationToolbar.ShareButtonModel}"
                                 Content="{Binding AnnotationToolbar.ShareButtonModel}"/>
          </Grid>
          <Grid x:Name="menuFullScreen" Margin="0,0,8,0">
            <menus:ToolbarToggleButton x:Name="FullScreenButton" Click="FullScreenToolbarToggleButton_Click" MinWidth="0" Width="24"
                                       Height="24" Padding="0,1,0,0"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.HeaderToolFullScreenTips}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_FullScreen"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       IsChecked="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(control:FullScreenHelper.IsFullScreenEnabled), Mode=TwoWay}">
              <Grid menus:ToolbarButtonHelper.OverrideMouseOver="false">
                <Viewbox Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                  <Path Width="24" Height="24"
                        Data="M 5.5,9 L 5.5,5.5 9,5.5 M 15,5.5 L 18.5,5.5 18.5,9 M 5.5,15 L 5.5,18.5 9,18.5 M 15,18.5 L 18.5,18.5 18.5,15 "
                        Stroke="{DynamicResource TextBrushWhiteAndBlack}" StrokeThickness="1"/>
                </Viewbox>
              </Grid>
            </menus:ToolbarToggleButton>
          </Grid>
          <Grid x:Name="menuToolbarShow" Column="3" HorizontalAlignment="Right"
                Visibility="{Binding ElementName=PdfControl, Path=IsEditing, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
            <Button Margin="0,0,12,0" Width="24" Height="24" HorizontalAlignment="Right" Padding="0,1,0,0"
                    Style="{StaticResource BtnInfoStyle}" Command="{Binding Path=Menus.ShowToolbarCmd}">
              <ContentControl.Content>
                <StackPanel Orientation="Vertical">
                  <Image Source="{DynamicResource ToolBarUpBtnImage}" Width="24" Height="24"
                         ToolTip="{x:Static localprop:Resources.HeaderToolHideTips}"
                         Visibility="{Binding Menus.IsShowToolbar, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                  <Image Source="{DynamicResource ToolBarDownBtnImage}" Width="24" Height="24"
                         ToolTip="{x:Static localprop:Resources.HeaderToolShowTips}"
                         Visibility="{Binding Menus.IsShowToolbar, Converter={StaticResource BooleanToVisibilityReverseConverter}}"/>
                </StackPanel>
              </ContentControl.Content>
            </Button>
          </Grid>
        </StackPanel>
      </Grid>
      <Grid x:Name="MenuContainer" Row="1" Background="{DynamicResource SolidBrushWhiteAndBlack}"
            Opacity="{Binding Menus.ToolbarInited, Converter={StaticResource BooleanToOpacityConverter}}"
            Visibility="{Binding Menus.IsShowToolbar, Converter={StaticResource BooleanToVisibilityConverter}}">
        <Grid Visibility="{Binding ElementName=PdfControl, Path=IsEditing, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
          <Grid x:Name="MenuScrollLeftMask" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                Visibility="Collapsed" ZIndex="1" SnapsToDevicePixels="false">
            <Rectangle Width="24" IsHitTestVisible="false" HorizontalAlignment="Left" Margin="0,6">
              <Shape.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <GradientStop Color="{DynamicResource MainViewToolBarOutOfRange}" Offset="0"/>
                  <GradientStop Color="{DynamicResource MainViewToolBarOutOfRange}" Offset="0.4"/>
                  <GradientStop Color="Transparent" Offset="1"/>
                </LinearGradientBrush>
              </Shape.Fill>
            </Rectangle>
            <RepeatButton Click="MenuNavigationButton_Click" Width="16"
                          Style="{StaticResource MenuLeftNavigationButtonStyle}" HorizontalAlignment="Left"
                          VerticalAlignment="Stretch"/>
          </Grid>
          <Grid x:Name="MenuScrollRightMask" HorizontalAlignment="Right" VerticalAlignment="Stretch"
                Visibility="Collapsed" ZIndex="1" SnapsToDevicePixels="false">
            <Rectangle Width="26" IsHitTestVisible="false" HorizontalAlignment="Right" Margin="0,6">
              <Shape.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                  <GradientStop Color="Transparent"/>
                  <GradientStop Color="{DynamicResource MainViewToolBarOutOfRange}" Offset="0.6"/>
                </LinearGradientBrush>
              </Shape.Fill>
            </Rectangle>
            <RepeatButton Click="MenuNavigationButton_Click" Width="16"
                          Style="{StaticResource MenuRightNavigationButtonStyle}" HorizontalAlignment="Right"
                          VerticalAlignment="Stretch"/>
          </Grid>
          <ScrollViewer PreviewMouseWheel="MenuScrollViewer_PreviewMouseWheel"
                        ScrollChanged="MenuScrollViewer_ScrollChanged" x:Name="MenuScrollViewer" Focusable="false"
                        HorizontalScrollBarVisibility="Auto"
                        TextBlock.Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                        VerticalScrollBarVisibility="Disabled" PanningMode="HorizontalOnly"
                        utils:MouseHelper.IsHorizontalWheelEnabled="true"
                        commonLibControl:ScrollBarHelper.IndicatorMode="Collapsed"
                        commonLibControl:ScrollBarHelper.AutoHide="true">
            <Grid Margin="0,0,16,0">
              <FrameworkElement.Resources>
                <DataTemplate x:Key="ToolbarButtonContentTextTemplate">
                  <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" Text="{Binding Caption}"/>
                </DataTemplate>
                <DataTemplate x:Key="ToolbarButtonContentPlainTextTemplate">
                  <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" Text="{Binding}"/>
                </DataTemplate>
                <DataTemplate x:Key="ToolbarButtonContentToggleButtonTemplate">
                  <menus:ToolbarChildToggleButton IsChecked="{Binding ChildButtonModel.IsChecked, Mode=TwoWay}"
                                                  OpenContextMenuOnChecked="{Binding ChildButtonModel.OpenContextMenuOnChecked}"
                                                  IndicatorBrush="{Binding IndicatorBrush}">
                    <ContentControl.Content>
                      <commonLibControl:AutoTooltipTextBlock Foreground="{DynamicResource TextBrushWhiteAndBlack}" Text="{Binding Caption}"/>
                    </ContentControl.Content>
                    <FrameworkElement.ContextMenu>
                      <menus:ToolbarButtonContextMenu ItemsSource="{Binding ChildButtonModel.ContextMenu}"/>
                    </FrameworkElement.ContextMenu>
                  </menus:ToolbarChildToggleButton>
                </DataTemplate>
                <menus:ToolbarButtonContentTemplateSelector x:Key="ToolbarButtonContentTemplateSelector"
                                                            TextTemplate="{StaticResource ToolbarButtonContentTextTemplate}"
                                                            PlainTextTemplate="{StaticResource ToolbarButtonContentPlainTextTemplate}"
                                                            ToggleButtonTemplate="{StaticResource ToolbarButtonContentToggleButtonTemplate}"/>
                <DataTemplate x:Key="AnnotationRadioButtonTemplate">
                  <menus:ToolbarRadioButton x:Name="ToolbarRadioButton" GroupName="AnnotationToolbarButton2"
                                            ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                            KeyInGroup="{Binding}" IsCheckable="{Binding IsCheckable}"
                                            IsChecked="{Binding IsChecked, Mode=TwoWay}" Command="{Binding Command}"
                                            CommandParameter="{Binding}" Header="{Binding Icon}" Content="{Binding}"/>
                </DataTemplate>
              </FrameworkElement.Resources>
              <Grid x:Name="menuView" Height="68" HorizontalAlignment="Center"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=View, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal">
                  <StackPanel x:Name="ExitAnnotPanel1" Orientation="Horizontal" ZIndex="1"
                              Background="{DynamicResource SolidBrushWhiteAndBlack}">
                    <Grid Margin="12,0,0,0" Height="58" VerticalAlignment="Center">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="4"/>
                        <RowDefinition Height="*"/>
                      </Grid.RowDefinitions>
                      <menus:ToolbarRadioButton GroupName="ViewerMouseModeGroup1" MinWidth="27" HorizontalAlignment="Left"
                                                VerticalAlignment="Stretch" Orientation="Horizontal"
                                                Header="{DynamicResource ToolBarViewArrowImage}" IsToggleEnabled="false" IsCheckable="true"
                                                utils2:UIElementExtension.TraceClickEventFormat="ExitAnnotation"
                                                Command="{Binding ExitAnnotationCmd}" IsChecked="{Binding ViewerMouseMode.Default, Mode=TwoWay}"/>
                      <menus:ToolbarRadioButton Grid.Row="2" GroupName="ViewerMouseModeGroup1" MinWidth="27" HorizontalAlignment="Left"
                                                VerticalAlignment="Stretch" Orientation="Horizontal"
                                                Header="{DynamicResource ToolBarViewHandImage}" IsToggleEnabled="false" IsCheckable="true"
                                                utils2:UIElementExtension.TraceClickEventFormat="ExitAnnotation"
                                                Command="{Binding ExitAnnotationCmd}" IsChecked="{Binding ViewerMouseMode.PanTool, Mode=TwoWay}"/>
                    </Grid>
                    <Rectangle Style="{StaticResource SplitLineStyle}" Margin="12,12,4,12"/>
                  </StackPanel>
                  <menus:ToolbarButton Grid.Column="1" Header="{DynamicResource ToolBarPrintImage}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolPrintTooltipText}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_Print}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_Print" Command="{Binding Path=PrintDocCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.WinViewToolPrintTooltipText}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <Grid x:Name="ZoomSpeace" Height="66">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="50*"/>
                      <RowDefinition Height="50*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="25"/>
                      <ColumnDefinition Width="25"/>
                      <ColumnDefinition Width="25"/>
                      <ColumnDefinition Width="25"/>
                      <ColumnDefinition Width="25"/>
                      <ColumnDefinition Width="25"/>
                    </Grid.ColumnDefinitions>
                    <ComboBox SelectionChanged="ZoomCB_SelectionChanged" KeyUp="ZoomCB_KeyUp" LostFocus="ZoomCB_LostFocus"
                              PreviewMouseLeftButtonDown="ZoomCombobox_PreviewMouseLeftButtonDown" x:Name="ZoomCombobox"
                              Grid.Row="0" Grid.ColumnSpan="4" Height="22" Margin="0,8,0,0" Width="95" FontSize="12"
                              HorizontalAlignment="Stretch" IsEditable="true" MaxDropDownHeight="190" IsTextSearchEnabled="false"
                              Style="{StaticResource DefaultComboBoxStyle}" Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                              Text="{Binding Path=ViewToolbar.DocZoom, Mode=OneWay, Converter={StaticResource NumberFormatConverter}}">
                      <sys:String>1%</sys:String>
                      <sys:String>25%</sys:String>
                      <sys:String>50%</sys:String>
                      <sys:String>75%</sys:String>
                      <sys:String>100%</sys:String>
                      <sys:String>125%</sys:String>
                      <sys:String>150%</sys:String>
                      <sys:String>200%</sys:String>
                      <sys:String>250%</sys:String>
                      <sys:String>300%</sys:String>
                      <sys:String>450%</sys:String>
                      <sys:String>600%</sys:String>
                      <sys:String>800%</sys:String>
                      <sys:String>1200%</sys:String>
                      <sys:String>1600%</sys:String>
                      <sys:String>2400%</sys:String>
                      <sys:String>3200%</sys:String>
                      <sys:String>6400%</sys:String>
                    </ComboBox>
                    <menus:ToolbarRadioButton HorizontalContentAlignment="Left" Height="25" Width="25" MinHeight="25" MinWidth="25"
                                              IsToggleEnabled="false" Grid.Row="1" Grid.Column="0" GroupName="PageSizeModeGroup"
                                              Orientation="Horizontal" Header="{DynamicResource MainViewToolBarFullsizeBtn}"
                                              utils2:UIElementExtension.TraceClickEventFormat="ActualSize"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_ActualSize,Editor_ActualSize2"
                                              hotkeys:HotKeyExtensions.InvokeAction="ToggleOn"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewFullSizeContent}"
                                              IsChecked="{Binding Path=ViewToolbar.DocSizeModeWrap, Converter={StaticResource SizeModeConverter}, ConverterParameter=ActualSize}"/>
                    <menus:ToolbarRadioButton HorizontalContentAlignment="Left" Height="25" Width="25" MinHeight="25" MinWidth="25"
                                              IsToggleEnabled="false" Grid.Row="1" Grid.Column="1" GroupName="PageSizeModeGroup"
                                              Orientation="Horizontal" Header="{DynamicResource MainViewToolBarFitBtn}"
                                              utils2:UIElementExtension.TraceClickEventFormat="FitToSize"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_FitPage,Editor_FitPage2"
                                              hotkeys:HotKeyExtensions.InvokeAction="ToggleOn"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewFitPageContent}"
                                              IsChecked="{Binding Path=ViewToolbar.DocSizeModeWrap, Converter={StaticResource SizeModeConverter}, ConverterParameter=FitToSize}"/>
                    <menus:ToolbarRadioButton HorizontalContentAlignment="Left" Height="25" Width="25" MinHeight="25" MinWidth="25" Grid.Row="1"
                                              Grid.Column="2" GroupName="PageSizeModeGroup" Orientation="Horizontal"
                                              Header="{DynamicResource MainViewToolBarFitWidthBtn}"
                                              utils2:UIElementExtension.TraceClickEventFormat="FitToWidth"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_FitWidth,Editor_FitWidth2"
                                              hotkeys:HotKeyExtensions.InvokeAction="ToggleOn"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewWidthContent}"
                                              IsChecked="{Binding Path=ViewToolbar.DocSizeModeWrap, Converter={StaticResource SizeModeConverter}, ConverterParameter=FitToWidth}"/>
                    <menus:ToolbarRadioButton HorizontalContentAlignment="Left" Height="25" Width="25" MinHeight="25" MinWidth="25"
                                              IsToggleEnabled="false" Grid.Row="1" Grid.Column="3" GroupName="PageSizeModeGroup"
                                              Orientation="Horizontal" Header="{DynamicResource MainViewToolBarFitHeightBtn}"
                                              utils2:UIElementExtension.TraceClickEventFormat="FitToHeight"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_FitHeight,Editor_FitHeight2"
                                              hotkeys:HotKeyExtensions.InvokeAction="ToggleOn"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewHeightContent}"
                                              IsChecked="{Binding Path=ViewToolbar.DocSizeModeWrap, Converter={StaticResource SizeModeConverter}, ConverterParameter=FitToHeight}"/>
                    <Button Background="Transparent" Grid.Row="0" Grid.Column="4" Style="{StaticResource BtnInfoStyle}"
                            BorderThickness="0" Padding="2" HorizontalAlignment="Center" Height="25" Width="25"
                            Margin="0,8,0,0" FontFamily="Segoe MDL2 Assets" FontSize="16" Content=""
                            hotkeys:HotKeyExtensions.InvokeWhen="Editor_ZoomOut,Editor_ZoomOut2"
                            commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinScreenshotToolbarZoomOutContent}"
                            hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding Path=ViewToolbar.DocZoomOutCmd}"/>
                    <Button Background="Transparent" Grid.Row="0" Grid.Column="5" Style="{StaticResource BtnInfoStyle}"
                            BorderThickness="0" Padding="2" HorizontalAlignment="Center" Height="25" Width="25"
                            Margin="0,8,0,0" FontFamily="Segoe MDL2 Assets" FontSize="16" Content=""
                            hotkeys:HotKeyExtensions.InvokeWhen="Editor_ZoomIn,Editor_ZoomIn2"
                            commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinScreenshotToolbarZoomInContent}"
                            hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding Path=ViewToolbar.DocZoomInCmd}"/>
                    <menus:ToolbarButton Grid.Column="4" Grid.Row="1" Height="25" Width="25" MinHeight="25" MinWidth="25"
                                         Header="{DynamicResource ToolBarleftRotateImage}"
                                         utils2:UIElementExtension.TraceClickEventFormat="MenuViewRotateLeft"
                                         hotkeys:HotKeyExtensions.InvokeWhen="Editor_RotateLeft"
                                         hotkeys:HotKeyExtensions.InvokeAction="None"
                                         commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewRotateLeftContent}"
                                         Command="{Binding Path=ViewToolbar.PageRotateLeftCmd}"/>
                    <menus:ToolbarButton Grid.Column="5" Grid.Row="1" Height="25" Width="25" MinHeight="25" MinWidth="25"
                                         Header="{DynamicResource ToolBarrightRotateImage}"
                                         utils2:UIElementExtension.TraceClickEventFormat="MenuViewRotateRight"
                                         hotkeys:HotKeyExtensions.InvokeWhen="Editor_RotateRight"
                                         hotkeys:HotKeyExtensions.InvokeAction="None"
                                         commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewRotateRightContent}"
                                         Command="{Binding Path=ViewToolbar.PageRotateRightCmd}"/>
                  </Grid>
                  <Rectangle Style="{StaticResource SplitLineStyle}" Margin="12,12,4,12"/>
                  <Grid Margin="4,0" Height="58" VerticalAlignment="Center">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="4"/>
                      <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <menus:ToolbarRadioButton Grid.Row="0" Grid.Column="0" MinWidth="60" Width="Auto" HorizontalContentAlignment="Left"
                                              IsToggleEnabled="false" GroupName="singledoubPagesVMGroup" Orientation="Horizontal"
                                              Header="{DynamicResource ToolBarSinglePageImage}"
                                              Content="{x:Static localprop:Resources.MenuViewSingleContent}"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewSingleContent}"
                                              utils2:UIElementExtension.TraceClickEventFormat="SingalPage"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_SinglePage,Editor_SinglePage2"
                                              hotkeys:HotKeyExtensions.InvokeAction="ToggleOn"
                                              IsChecked="{Binding Path=ViewToolbar.SubViewModePage, Converter={StaticResource SubViewModePageConverter}, ConverterParameter=SingalPage}"/>
                    <menus:ToolbarRadioButton Grid.Row="2" Grid.Column="0" MinWidth="60" Width="Auto" HorizontalContentAlignment="Left"
                                              IsToggleEnabled="false" GroupName="singledoubPagesVMGroup" Orientation="Horizontal"
                                              Header="{DynamicResource ToolBarDoublePageImage}"
                                              Content="{x:Static localprop:Resources.MenuViewDoubleContent}"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewDoubleContent}"
                                              utils2:UIElementExtension.TraceClickEventFormat="DoublePages"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_DoublePage,Editor_DoublePage2"
                                              hotkeys:HotKeyExtensions.InvokeAction="ToggleOn"
                                              IsChecked="{Binding Path=ViewToolbar.SubViewModePage, Converter={StaticResource SubViewModePageConverter}, ConverterParameter=DoublePages}"/>
                  </Grid>
                  <Grid>
                    <menus:ToolbarToggleButton Header="{DynamicResource ToolBarContinusReadImage}" HorizontalContentAlignment="Center"
                                               HorizontalAlignment="Center" Content="{x:Static localprop:Resources.MenuViewContiusContent}"
                                               commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewContiusContent}"
                                               utils2:UIElementExtension.TraceClickEventFormat="Continuous"
                                               hotkeys:HotKeyExtensions.InvokeWhen="Editor_Continuous,Editor_Continuous2"
                                               hotkeys:HotKeyExtensions.InvokeAction="Toggle"
                                               IsChecked="{Binding Path=ViewToolbar.SubViewModeContinuous, Converter={StaticResource SubViewModeContinuousConverter}}"/>
                  </Grid>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <menus:ToolbarToggleButton x:Name="autoScroll" ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                             commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewAutoScrollContent}"
                                             ToolTip="{x:Static localprop:Resources.TooltipDesc_AutoScroll}"
                                             hotkeys:HotKeyExtensions.InvokeWhen="Editor_AutoScroll"
                                             IsChecked="{Binding ViewToolbar.AutoScrollButtonModel.IsChecked}"
                                             Command="{Binding ViewToolbar.AutoScrollButtonModel.Command}"
                                             CommandParameter="{Binding ViewToolbar.AutoScrollButtonModel}"
                                             Header="{Binding ViewToolbar.AutoScrollButtonModel.Icon}"
                                             Content="{Binding ViewToolbar.AutoScrollButtonModel}"/>
                  <menus:ToolbarButton x:Name="presentBtn" ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_Present" hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewPresentContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_Present}"
                                       Command="{Binding ViewToolbar.PresentButtonModel.Command}"
                                       CommandParameter="{Binding ViewToolbar.PresentButtonModel}"
                                       Header="{Binding ViewToolbar.PresentButtonModel.Icon}"
                                       Content="{Binding ViewToolbar.PresentButtonModel}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <menus:ToolbarRadioButton x:Name="screenshotBtn" Click="ToolbarScreenShotButton_Click" GroupName="ScreenShotGroup"
                                              Header="{DynamicResource ToolBarScreenShotImage}" IsToggleEnabled="true"
                                              Content="{x:Static localprop:Resources.MenuViewScreenshotContent}"
                                              ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewScreenshotContent}"
                                              ToolTip="{x:Static localprop:Resources.TooltipDesc_Screenshot}"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_Screenshot"/>
                    <menus:ToolbarRadioButton x:Name="ocrBtn" Click="ToolbarScreenShotButton_Click" GroupName="ScreenShotGroup" Grid.Column="1"
                                              Header="{DynamicResource ToolBarScreenshot_ocrImage}" IsToggleEnabled="true" Content="OCR"
                                              ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                              commonLibControl:ToolTipExtensions.Caption="OCR"
                                              ToolTip="{x:Static localprop:Resources.TooltipDesc_OCR}"
                                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_Ocr" hotkeys:HotKeyExtensions.InvokeAction="None"/>
                    <menus:ToolbarRadioButton x:Name="cropPageBtn" Click="ToolbarScreenShotButton_Click" GroupName="ScreenShotGroup"
                                              Grid.Column="3" Visibility="Collapsed" Header="/Style/Resources/PageEditor/CropPage.png"
                                              IsToggleEnabled="true" Content="{x:Static localprop:Resources.MainViewCropPageContent}"
                                              ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"/>
                  </Grid>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <menus:ToolbarButton Click="SearchToolbarButton_Click" Grid.Column="1" Header="{DynamicResource ToolBarSearchImage}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_Find" hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewFindContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_Find}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewFindContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarGuideImage}" Command="{Binding UserGuideCmd}">
                    <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                           Text="{x:Static localprop:Resources.MenuHelpUserGuideContent}" HorizontalAlignment="Center"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="{DynamicResource MainViewToolBarPhoneImage}"
                                       ToolTip="{x:Static localprop:Resources.MainViewToolbarPhoneBtnTips}"
                                       Command="{Binding GetPhoneStoreCmd}">
                    <FrameworkElement.Style>
                      <Style>
                        <Setter Property="menus:ToolbarButtonHelper.HeaderTemplate">
                          <Setter.Value>
                            <DataTemplate>
                              <Image x:Name="root" SnapsToDevicePixels="false" Stretch="Uniform" MaxWidth="36" MaxHeight="24"
                                     RenderOptions.BitmapScalingMode="HighQuality" Source="{Binding}"/>
                              <DataTemplate.Triggers>
                                <DataTrigger Value="{x:Static Orientation.Horizontal}"
                                             Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ButtonBase}}, Path=Orientation}">
                                  <Setter TargetName="root" Property="FrameworkElement.MaxWidth" Value="16"/>
                                  <Setter TargetName="root" Property="FrameworkElement.MaxHeight" Value="16"/>
                                </DataTrigger>
                              </DataTemplate.Triggers>
                            </DataTemplate>
                          </Setter.Value>
                        </Setter>
                      </Style>
                    </FrameworkElement.Style>
                    <TextBlock Text="{x:Static localprop:Resources.MainViewToolbarPhoneBtn}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
              <Grid x:Name="menuAnnotation" Height="68" HorizontalAlignment="Center"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Annotate, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel x:Name="AnnonationButtons" Orientation="Horizontal">
                  <FrameworkElement.Resources>
                    <DataTemplate x:Key="AnnotationRadioButtonTemplate">
                      <menus:ToolbarRadioButton x:Name="ToolbarRadioButton" GroupName="AnnotationToolbarButton"
                                                ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                                IsCheckable="{Binding IsCheckable}" IsChecked="{Binding IsChecked, Mode=TwoWay}"
                                                Command="{Binding Command}" CommandParameter="{Binding}" Header="{Binding Icon}"
                                                Content="{Binding}"/>
                    </DataTemplate>
                    <Style x:Key="PageToolbarButtonStyle" TargetType="{x:Type menus:ToolbarButton}">
                      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
                      <Setter Property="FrameworkElement.Margin" Value="2"/>
                      <Setter Property="ContentControl.ContentTemplate">
                        <Setter.Value>
                          <DataTemplate>
                            <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" HorizontalAlignment="Center" Text="{Binding}"/>
                          </DataTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Resources>
                  <StackPanel x:Name="ExitAnnotPanel2" Orientation="Horizontal" ZIndex="1"
                              Background="{DynamicResource SolidBrushWhiteAndBlack}">
                    <Grid Margin="12,0,0,0" Height="58" VerticalAlignment="Center">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="4"/>
                        <RowDefinition Height="*"/>
                      </Grid.RowDefinitions>
                      <menus:ToolbarRadioButton GroupName="ViewerMouseModeGroup2" MinWidth="27" HorizontalAlignment="Left"
                                                VerticalAlignment="Stretch" Orientation="Horizontal"
                                                Header="{DynamicResource ToolBarViewArrowImage}" IsToggleEnabled="false" IsCheckable="true"
                                                utils2:UIElementExtension.TraceClickEventFormat="ExitAnnotation"
                                                Command="{Binding ExitAnnotationCmd}" IsChecked="{Binding ViewerMouseMode.Default, Mode=TwoWay}"/>
                      <menus:ToolbarRadioButton Grid.Row="2" Margin="0" GroupName="ViewerMouseModeGroup2" MinWidth="27" HorizontalAlignment="Left"
                                                VerticalAlignment="Stretch" Orientation="Horizontal"
                                                Header="{DynamicResource ToolBarViewHandImage}" IsToggleEnabled="false" IsCheckable="true"
                                                utils2:UIElementExtension.TraceClickEventFormat="ExitAnnotation"
                                                Command="{Binding ExitAnnotationCmd}" IsChecked="{Binding ViewerMouseMode.PanTool, Mode=TwoWay}"/>
                    </Grid>
                    <Rectangle Style="{StaticResource SplitLineStyle}" Margin="12,12,4,12"/>
                  </StackPanel>
                  <ContentPresenter x:Name="highlight" Margin="2,0,0,0"
                                    ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Highlight"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateHighlightContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateHighlight}"
                                    Content="{Binding AnnotationToolbar.HighlightButtonModel}"/>
                  <ContentPresenter x:Name="underline" Margin="2,0,0,0"
                                    ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Underline"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateUnderlineContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateUnderline}"
                                    Content="{Binding AnnotationToolbar.UnderlineButtonModel}"/>
                  <ContentPresenter x:Name="strike" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Strikethrough"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateStrikeContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateStrike}"
                                    Content="{Binding AnnotationToolbar.StrikeButtonModel}"/>
                  <ContentPresenter x:Name="highlightarea" Margin="2,0,0,0"
                                    ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_AreaHighlight"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinToolBarBtnHighlightContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_Highlight}"
                                    Content="{Binding AnnotationToolbar.HighlightAreaButtonModel}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <ContentPresenter x:Name="line" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Line"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateLineContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateLine}"
                                    Content="{Binding AnnotationToolbar.LineButtonModel}"/>
                  <ContentPresenter x:Name="shape" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Rectangle"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateShapeContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateShape}"
                                    Content="{Binding AnnotationToolbar.SquareButtonModel}"/>
                  <ContentPresenter x:Name="ellipse" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Oval"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateEllipseContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateEllipse}"
                                    Content="{Binding AnnotationToolbar.CircleButtonModel}"/>
                  <ContentPresenter x:Name="ink" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Ink"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateInkContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateInk}"
                                    Content="{Binding AnnotationToolbar.InkButtonModel}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <ContentPresenter x:Name="textbox" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_TextBox"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateTextBoxContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateTextBox}"
                                    Content="{Binding AnnotationToolbar.TextBoxButtonModel}"/>
                  <ContentPresenter x:Name="text" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddText" hotkeys:HotKeyExtensions.InvokeAction="None"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateTypeWriterContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateTypeWriter}"
                                    Content="{Binding AnnotationToolbar.TextButtonModel}"/>
                  <ContentPresenter x:Name="note" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_Note"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateNoteContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateNote}"
                                    Content="{Binding AnnotationToolbar.NoteButtonModel}"/>
                  <menus:ToolbarButton x:Name="stamp" ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateStampContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateStamp}"
                                       Command="{Binding AnnotationToolbar.StampButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.StampButtonModel}"
                                       Header="{Binding AnnotationToolbar.StampButtonModel.Icon}"
                                       Content="{Binding AnnotationToolbar.StampButtonModel}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <menus:ToolbarButton x:Name="HideAnnotationButton" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Header="{DynamicResource ToolBarHideAnnotationImage}"
                                       utils2:UIElementExtension.TraceClickEventFormat="HideAnnotationButton"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_ShowHideComments"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateHiddenContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateHidden}"
                                       Command="{Binding ShowHideAnnotationCmd}"
                                       Visibility="{Binding IsAnnotationVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Grid menus:ToolbarButtonHelper.OverrideMouseOver="false">
                      <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                             Text="{x:Static localprop:Resources.MenuAnnotateHiddenContent}" HorizontalAlignment="Center"/>
                      <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                             Text="{x:Static localprop:Resources.MenuAnnotateShowContent}" HorizontalAlignment="Center"
                                                             Visibility="Hidden"/>
                    </Grid>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton x:Name="ShowAnnotationButton" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Header="{DynamicResource ToolBarShowAnnotationImage}"
                                       utils2:UIElementExtension.TraceClickEventFormat="ShowAnnotationButton"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_ShowHideComments"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateShowContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateShow}"
                                       Command="{Binding ShowHideAnnotationCmd}"
                                       Visibility="{Binding IsAnnotationVisible, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
                    <Grid menus:ToolbarButtonHelper.OverrideMouseOver="false">
                      <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                             Text="{x:Static localprop:Resources.MenuAnnotateHiddenContent}" HorizontalAlignment="Center"
                                                             Visibility="Hidden"/>
                      <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                             Text="{x:Static localprop:Resources.MenuAnnotateShowContent}" HorizontalAlignment="Center"/>
                    </Grid>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton x:Name="ManageAnnotationButton" Style="{StaticResource PageToolbarButtonStyle}" FontSize="5"
                                       Content="{x:Static localprop:Resources.MenuAnnotateManageContent}" HorizontalAlignment="Center"
                                       VerticalAlignment="Center" Header="{DynamicResource AnnotationManage}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_ManageAnnotation"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateManageContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateManage}"
                                       Command="{Binding MannageAnnotationCmd}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}" Visibility="Collapsed"/>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
              <Grid x:Name="MenuFillForm" Height="68" HorizontalAlignment="Center"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=FillForm, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="8,0">
                  <menus:ToolbarToggleButton Header="{DynamicResource ToolBarHeightLightFillForms}"
                                             Content="{x:Static localprop:Resources.AppsettingsHighlightForm}" MinWidth="65" MaxWidth="110"
                                             ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                             Visibility="Visible" hotkeys:HotKeyExtensions.InvokeWhen="Editor_HighlightFormField"
                                             commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.AppsettingsHighlightForm}"
                                             ToolTip="{x:Static localprop:Resources.TooltipDesc_HighlightForm}" IsChecked="{Binding FillForm}"/>
                  <ContentPresenter x:Name="text2" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddText" hotkeys:HotKeyExtensions.InvokeAction="None"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateTypeWriterContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateTypeWriter}"
                                    Content="{Binding AnnotationToolbar.TextButtonModel}"/>
                  <menus:ToolbarButton x:Name="image2" Margin="2,0,0,0" MinWidth="65" MaxWidth="85"
                                       Content="{x:Static localprop:Resources.MenuInsertImageContent}"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddImage" hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuInsertImageContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_InsertImage}"
                                       Command="{Binding AnnotationToolbar.ImageButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.ImageButtonModel}"
                                       Header="{Binding AnnotationToolbar.ImageButtonModel.Icon}"/>
                  <menus:ToolbarButton x:Name="signature3" Margin="2,0,0,0"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateSignatureContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateSignature}"
                                       Command="{Binding AnnotationToolbar.SignatureButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.SignatureButtonModel}"
                                       Header="{Binding AnnotationToolbar.SignatureButtonModel.Icon}"
                                       Content="{Binding AnnotationToolbar.SignatureButtonModel}"/>
                  <menus:DoubleRowPanel RowSpace="0" ColumnSpace="12" Padding="0,4" Margin="12,0,0,0">
                    <FrameworkElement.Resources>
                      <DataTemplate x:Key="FormObjectHeaderTemplate">
                        <Viewbox HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                          <ContentPresenter Content="{Binding}"/>
                        </Viewbox>
                      </DataTemplate>
                      <Style x:Key="FormObjectButtonStyle" TargetType="{x:Type menus:ToolbarButton}">
                        <Setter Property="FrameworkElement.MinWidth" Value="30"/>
                        <Setter Property="FrameworkElement.Width" Value="30"/>
                        <Setter Property="Control.Padding" Value="8"/>
                        <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
                      </Style>
                    </FrameworkElement.Resources>
                    <menus:ToolbarButton HeaderTemplate="{StaticResource FormObjectHeaderTemplate}"
                                         Style="{StaticResource FormObjectButtonStyle}" Padding="7"
                                         Command="{Binding AnnotationToolbar.AddFormControlCheckCmd}">
                      <menus:ToolbarButton.Header>
                        <Path Data="{StaticResource StampFormObjectGeometry.Check}"
                              Width="{StaticResource StampFormObjectGeometry.Check.Width}"
                              Height="{StaticResource StampFormObjectGeometry.Check.Height}"
                              Fill="{DynamicResource BtnBrushGrayAndDark}"/>
                      </menus:ToolbarButton.Header>
                    </menus:ToolbarButton>
                    <menus:ToolbarButton HeaderTemplate="{StaticResource FormObjectHeaderTemplate}"
                                         Style="{StaticResource FormObjectButtonStyle}" Padding="7"
                                         Command="{Binding AnnotationToolbar.AddFormControlCancelCmd}">
                      <menus:ToolbarButton.Header>
                        <Path Data="{StaticResource StampFormObjectGeometry.Cancel}"
                              Width="{StaticResource StampFormObjectGeometry.Cancel.Width}"
                              Height="{StaticResource StampFormObjectGeometry.Cancel.Height}"
                              Fill="{DynamicResource BtnBrushGrayAndDark}"/>
                      </menus:ToolbarButton.Header>
                    </menus:ToolbarButton>
                    <menus:ToolbarButton HeaderTemplate="{StaticResource FormObjectHeaderTemplate}"
                                         Style="{StaticResource FormObjectButtonStyle}"
                                         Command="{Binding AnnotationToolbar.AddFormControlRadioCheckCmd}">
                      <menus:ToolbarButton.Header>
                        <Path Data="{StaticResource StampFormObjectGeometry.RadioCheck}"
                              Width="{StaticResource StampFormObjectGeometry.RadioCheck.Width}"
                              Height="{StaticResource StampFormObjectGeometry.RadioCheck.Height}"
                              Fill="{DynamicResource BtnBrushGrayAndDark}"/>
                      </menus:ToolbarButton.Header>
                    </menus:ToolbarButton>
                    <menus:ToolbarButton HeaderTemplate="{StaticResource FormObjectHeaderTemplate}"
                                         Style="{StaticResource FormObjectButtonStyle}"
                                         Command="{Binding AnnotationToolbar.AddFormControlIndeterminateCmd}">
                      <menus:ToolbarButton.Header>
                        <Path Data="{StaticResource StampFormObjectGeometry.Indeterminate}"
                              Width="{StaticResource StampFormObjectGeometry.Indeterminate.Width}"
                              Height="{StaticResource StampFormObjectGeometry.Indeterminate.Height}"
                              Fill="{DynamicResource MainViewIndeterminate}"/>
                      </menus:ToolbarButton.Header>
                    </menus:ToolbarButton>
                    <menus:ToolbarButton HeaderTemplate="{StaticResource FormObjectHeaderTemplate}"
                                         Style="{StaticResource FormObjectButtonStyle}"
                                         Command="{Binding AnnotationToolbar.AddFormControlCheckBoxCmd}">
                      <menus:ToolbarButton.Header>
                        <Path Data="{StaticResource StampFormObjectGeometry.CheckBox}"
                              Width="{StaticResource StampFormObjectGeometry.CheckBox.Width}"
                              Height="{StaticResource StampFormObjectGeometry.CheckBox.Height}"
                              Fill="{DynamicResource BtnBrushGrayAndDark}"/>
                      </menus:ToolbarButton.Header>
                    </menus:ToolbarButton>
                    <menus:ToolbarButton HeaderTemplate="{StaticResource FormObjectHeaderTemplate}"
                                         Style="{StaticResource FormObjectButtonStyle}"
                                         Command="{Binding AnnotationToolbar.AddFormControlIndeterminateFillCmd}">
                      <menus:ToolbarButton.Header>
                        <Path Data="{StaticResource StampFormObjectGeometry.Indeterminate_Fill}"
                              Width="{StaticResource StampFormObjectGeometry.Indeterminate_Fill.Width}"
                              Height="{StaticResource StampFormObjectGeometry.Indeterminate_Fill.Height}"
                              Fill="{DynamicResource BtnBrushGrayAndDark}"/>
                      </menus:ToolbarButton.Header>
                    </menus:ToolbarButton>
                  </menus:DoubleRowPanel>
                  <Rectangle Style="{StaticResource SplitLineStyle}" Visibility="Collapsed"/>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
              <Grid x:Name="menuInsert" Height="68" HorizontalAlignment="Center"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Insert, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="8,0">
                  <menus:ToolbarButton x:Name="editDocumentBtn"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_EditText"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewEditTextContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_EditText}"
                                       Command="{Binding ViewToolbar.EditDocumentButtomModel.Command}"
                                       CommandParameter="{Binding ViewToolbar.EditDocumentButtomModel}"
                                       Header="{Binding ViewToolbar.EditDocumentButtomModel.Icon}"
                                       Content="{Binding ViewToolbar.EditDocumentButtomModel}"/>
                  <menus:ToolbarToggleButton x:Name="editContentBtn" Visibility="Visible"
                                             ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                             hotkeys:HotKeyExtensions.InvokeWhen="Editor_EditObject"
                                             commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewEditObjectContent}"
                                             ToolTip="{x:Static localprop:Resources.TooltipDesc_EditObject}"
                                             IsChecked="{Binding ViewToolbar.EditPageTextObjectButtonModel.IsChecked, Mode=TwoWay}"
                                             Command="{Binding ViewToolbar.EditPageTextObjectButtonModel.Command}"
                                             CommandParameter="{Binding ViewToolbar.EditPageTextObjectButtonModel}"
                                             Header="{Binding ViewToolbar.EditPageTextObjectButtonModel.Icon}"
                                             Content="{Binding ViewToolbar.EditPageTextObjectButtonModel}"/>
                  <ContentPresenter x:Name="text3" Margin="2,0,0,0" ContentTemplate="{StaticResource AnnotationRadioButtonTemplate}"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddText" hotkeys:HotKeyExtensions.InvokeAction="None"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateTypeWriterContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateTypeWriter}"
                                    Content="{Binding AnnotationToolbar.TextButtonModel}"/>
                  <menus:ToolbarButton x:Name="image" MinWidth="65" MaxWidth="85"
                                       Content="{x:Static localprop:Resources.MenuInsertImageContent}"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddImage" hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuInsertImageContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_InsertImage}"
                                       Command="{Binding AnnotationToolbar.ImageButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.ImageButtonModel}"
                                       Header="{Binding AnnotationToolbar.ImageButtonModel.Icon}"/>
                  <menus:ToolbarRadioButton x:Name="link" Margin="2,0,0,0" GroupName="AnnotationToolbarButton"
                                            ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                            commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.LinkBtn}"
                                            ToolTip="{x:Static localprop:Resources.TooltipDesc_Link}"
                                            IsChecked="{Binding AnnotationToolbar.LinkButtonModel.IsChecked}"
                                            Command="{Binding AnnotationToolbar.LinkButtonModel.Command}"
                                            CommandParameter="{Binding AnnotationToolbar.LinkButtonModel}"
                                            Header="{Binding AnnotationToolbar.LinkButtonModel.Icon}"
                                            Content="{Binding AnnotationToolbar.LinkButtonModel}"/>
                  <menus:ToolbarButton x:Name="watermark" Margin="2,0,0,0"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateWatermarkContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateWatermark}"
                                       Command="{Binding AnnotationToolbar.WatermarkButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.WatermarkButtonModel}"
                                       Header="{Binding AnnotationToolbar.WatermarkButtonModel.Icon}"
                                       Content="{Binding AnnotationToolbar.WatermarkButtonModel}"/>
                  <menus:ToolbarButton Visibility="Visible"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuInsertPageNumberContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_InsertPageNumber}"
                                       Command="{Binding PageEditors.PageNumberButtonModel.Command}"
                                       CommandParameter="{Binding PageEditors.PageNumberButtonModel}"
                                       Header="{Binding PageEditors.PageNumberButtonModel.Icon}"
                                       Content="{Binding PageEditors.PageNumberButtonModel}"/>
                  <menus:ToolbarButton Visibility="Visible" MaxWidth="130"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuInsertHeaderFooterContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_InsertHeaderFooter}"
                                       Command="{Binding PageEditors.HeaderFooterButtonModel.Command}"
                                       CommandParameter="{Binding PageEditors.HeaderFooterButtonModel}"
                                       Header="{Binding PageEditors.HeaderFooterButtonModel.Icon}"
                                       Content="{Binding PageEditors.HeaderFooterButtonModel}"/>
                  <menus:ToolbarButton x:Name="stamp1" ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateStampContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateStamp}"
                                       Command="{Binding AnnotationToolbar.StampButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.StampButtonModel}"
                                       Header="{Binding AnnotationToolbar.StampButtonModel.Icon}"
                                       Content="{Binding AnnotationToolbar.StampButtonModel}"/>
                  <menus:ToolbarButton x:Name="signature" Margin="4,0,0,0"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateSignatureContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateSignature}"
                                       Command="{Binding AnnotationToolbar.SignatureButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.SignatureButtonModel}"
                                       Header="{Binding AnnotationToolbar.SignatureButtonModel.Icon}"
                                       Content="{Binding AnnotationToolbar.SignatureButtonModel}"/>
                  <Rectangle Grid.Column="3" Style="{StaticResource SplitLineStyle}" Visibility="Collapsed"/>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
              <Grid x:Name="menuTools" Height="68" HorizontalAlignment="Center"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Tools, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="8,0">
                  <FrameworkElement.Resources>
                    <Style x:Key="PageToolbarButtonStyle" TargetType="{x:Type menus:ToolbarButton}">
                      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
                      <Setter Property="FrameworkElement.Margin" Value="2"/>
                      <Setter Property="ContentControl.ContentTemplate">
                        <Setter.Value>
                          <DataTemplate>
                            <TextBlock Style="{StaticResource ToolbarButtonTextStyle}" HorizontalAlignment="Center" Text="{Binding}"/>
                          </DataTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Resources>
                  <menus:ToolbarButton x:Name="converter" HorizontalAlignment="Center"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinViewToolConvertText}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_Convert}"
                                       Command="{Binding ViewToolbar.ConvertButtonModel.Command}"
                                       CommandParameter="{Binding ViewToolbar.ConvertButtonModel}"
                                       Header="{Binding ViewToolbar.ConvertButtonModel.Icon}"
                                       Content="{Binding ViewToolbar.ConvertButtonModel}"/>
                  <menus:ToolbarButton x:Name="CompressBtn" HorizontalAlignment="Center" Header="{DynamicResource ToolBarCompressImage}"
                                       Content="{x:Static localprop:Resources.MenuViewCompressContent}"
                                       HorizontalContentAlignment="Center"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuViewCompressContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_Compress}"
                                       Command="{Binding ConverterCommands.CompressPDF}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarMergeImage}"
                                       Content="{x:Static localprop:Resources.MenuPageMergeContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageMerge"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageMergeContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageMerge}"
                                       Command="{Binding PageEditors.PageEditorMergeCmd}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarSplitImage}"
                                       Content="{x:Static localprop:Resources.MenuPageSplitContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageSplit"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageSplitContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageSplit}"
                                       Command="{Binding PageEditors.PageEditorSplitCmd}"/>
                  <menus:ToolbarButton x:Name="signature2" Margin="4,0,0,0"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuAnnotateSignatureContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_AnnotateSignature}"
                                       Command="{Binding AnnotationToolbar.SignatureButtonModel.Command}"
                                       CommandParameter="{Binding AnnotationToolbar.SignatureButtonModel}"
                                       Header="{Binding AnnotationToolbar.SignatureButtonModel.Icon}"
                                       Content="{Binding AnnotationToolbar.SignatureButtonModel}"/>
                  <menus:ToolbarToggleButton x:Name="Speech" ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                             commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.ReadWinTitle}"
                                             ToolTip="{x:Static localprop:Resources.TooltipDesc_Read}"
                                             IsChecked="{Binding ViewToolbar.ReadButtonModel.IsChecked}"
                                             Command="{Binding ViewToolbar.ReadButtonModel.Command}"
                                             CommandParameter="{Binding ViewToolbar.ReadButtonModel}"
                                             Header="{Binding ViewToolbar.ReadButtonModel.Icon}" Content="{Binding ViewToolbar.ReadButtonModel}">
                    <FrameworkElement.ContextMenu>
                      <menus:ToolbarButtonContextMenu ItemsSource="{Binding ViewToolbar.ReadButtonModel.ChildButtonModel}"/>
                    </FrameworkElement.ContextMenu>
                  </menus:ToolbarToggleButton>
                  <Rectangle Style="{StaticResource SplitLineStyle}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarEncryptImage}"
                                       Content="{x:Static localprop:Resources.MenuProtectPasswordContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageMerge"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuProtectPasswordContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_ProtectPassword}" Command="{Binding EncryptCMD}"/>
                  <menus:ToolbarButton xml:space="preserve" Style="{StaticResource PageToolbarButtonStyle}"
                                       Header="{DynamicResource ToolBarDecryptImage}"
                                       Content="{x:Static localprop:Resources.MenuProtectRemoveContent}" FontSize="5"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageMerge"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuProtectRemoveContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_ProtectRemove}"
                                       Command="{Binding RemovePasswordCMD}"/>
                </StackPanel>
              </Grid>
              <Grid x:Name="menuPage" Height="68"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Page, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <StackPanel Orientation="Horizontal" Margin="200 0 0 0" HorizontalAlignment="Center">
                  <FrameworkElement.Resources>
                    <Style x:Key="PageToolbarButtonStyle" TargetType="{x:Type menus:ToolbarButton}">
                      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
                      <Setter Property="FrameworkElement.Margin" Value="2"/>
                      <Setter Property="ContentControl.ContentTemplate">
                        <Setter.Value>
                          <DataTemplate>
                            <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" HorizontalAlignment="Center" Text="{Binding}"/>
                          </DataTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Resources>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarNewPDFImage}"
                                       Content="{x:Static localprop:Resources.MainViewCreateNewPDF}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageNewPDF"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_CreateNewPDF"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MainViewCreateNewPDF}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_CreateNewPDF}"
                                       Command="{Binding PageEditors.CreateBlankPage}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarExtractImage}"
                                       Content="{x:Static localprop:Resources.MenuPageExtractContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageExtract"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_ExtractPage"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageExtractContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageExtract}"
                                       Command="{Binding PageEditors.PageEditorExtractCmd}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarDeleteImage}"
                                       Content="{x:Static localprop:Resources.MenuPageDeleteContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageDelete"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_DeletePage"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageDeleteContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageDelete}"
                                       Command="{Binding PageEditors.PageEditorDeleteCmd}"/>
                  <menus:ToolbarButton Visibility="Visible"
                                       ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageInsertContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageInsert}"
                                       Command="{Binding PageEditors.InsertPageButtonModel.Command}"
                                       CommandParameter="{Binding PageEditors.InsertPageButtonModel}"
                                       Header="{Binding PageEditors.InsertPageButtonModel.Icon}"
                                       Content="{Binding PageEditors.InsertPageButtonModel}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarCropPageImage}"
                                       Content="{x:Static localprop:Resources.MainViewCropPageContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="CropPage"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_CropPage" hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MainViewCropPageContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_CropPage}"
                                       Command="{Binding PageEditors.CropPageCmd}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}" Visibility="Visible"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarRotateLeftImage}"
                                       Content="{x:Static localprop:Resources.MenuPageRotateLeftContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageRotateLeft"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_RotateLeft"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageRotateLeftContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageRotateLeft}"
                                       Command="{Binding PageEditors.PageEditorRotateLeftCmd}"/>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="{DynamicResource ToolBarRotateRightImage}"
                                       Content="{x:Static localprop:Resources.MenuPageRotateRightContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageRotateRight"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_RotateRight"
                                       hotkeys:HotKeyExtensions.InvokeAction="None"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageRotateRightContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_PageRotateRight}"
                                       Command="{Binding PageEditors.PageEditorRotateRightCmd}"/>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
                <Rectangle Style="{StaticResource SplitLineStyle}" Visibility="Collapsed"/>
                <menus:SelectPageComboBox Grid.Column="1" MinWidth="200" Width="200" Margin="0,0,0,0" HorizontalAlignment="Right"
                                          PreviewGridView="{Binding ElementName=PageGridView}">
                  <menus:SelectPageComboBox.Pages>
                    <Binding>                      <!-- constructor argument:
                           PageEditors.PageEditListItemSource
                      -->

                    </Binding>
                  </menus:SelectPageComboBox.Pages>
                </menus:SelectPageComboBox>
              </Grid>
              <Grid x:Name="menuEncrypt" Height="68"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Protection, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="8,0">
                  <FrameworkElement.Resources>
                    <Style x:Key="PageToolbarButtonStyle" TargetType="{x:Type menus:ToolbarButton}">
                      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
                      <Setter Property="FrameworkElement.Margin" Value="2"/>
                      <Setter Property="ContentControl.ContentTemplate">
                        <Setter.Value>
                          <DataTemplate>
                            <TextBlock Style="{StaticResource ToolbarButtonTextStyle}" HorizontalAlignment="Center" Text="{Binding}"/>
                          </DataTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Resources>
                  <menus:ToolbarButton Style="{StaticResource PageToolbarButtonStyle}" Header="/Style/Resources/Protect/Encrypt.png"
                                       Content="{x:Static localprop:Resources.MenuProtectPasswordContent}"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageMerge" Command="{Binding EncryptCMD}"/>
                  <menus:ToolbarButton xml:space="preserve" Style="{StaticResource PageToolbarButtonStyle}"
                                       Header="/Style/Resources/Protect/Decrypt.png"
                                       Content="{x:Static localprop:Resources.MenuProtectRemoveContent}" FontSize="5"
                                       utils2:UIElementExtension.TraceClickEventFormat="MenuPageMerge"
                                       Command="{Binding RemovePasswordCMD}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}" Visibility="Collapsed"/>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
              <Grid x:Name="menuShare" Height="68"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Share, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="8,0">
                  <FrameworkElement.Resources>
                    <DataTemplate x:Key="ShareButtonTemplate">
                      <menus:ToolbarButton x:Name="ToolbarRadioButton"
                                           ContentTemplateSelector="{StaticResource ToolbarButtonContentTemplateSelector}"
                                           Command="{Binding Command}" CommandParameter="{Binding}" Header="{Binding Icon}"
                                           Content="{Binding}"/>
                    </DataTemplate>
                  </FrameworkElement.Resources>
                  <ContentPresenter ContentTemplate="{StaticResource ShareButtonTemplate}"
                                    Content="{Binding ShareTab.EmailButtonModel}"/>
                  <ContentPresenter ContentTemplate="{StaticResource ShareButtonTemplate}"
                                    Content="{Binding ShareTab.ShareButtonModel}"/>
                  <ContentPresenter ContentTemplate="{StaticResource ShareButtonTemplate}" Content="{Binding ShareTab.FileButtonModel}"/>
                  <Rectangle Style="{StaticResource SplitLineStyle}" Visibility="Collapsed"/>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
              <Grid x:Name="menuHelp" Height="68" HorizontalAlignment="Center"
                    Visibility="{Binding ElementName=Menus, Path=SelectedItem, ConverterParameter=Help, Converter={StaticResource ToolbarMenuVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="8,0">
                  <FrameworkElement.Resources>
                    <Style x:Key="PageToolbarButtonStyle" TargetType="{x:Type menus:ToolbarButton}">
                      <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
                      <Setter Property="FrameworkElement.Margin" Value="2"/>
                      <Setter Property="ContentControl.ContentTemplate">
                        <Setter.Value>
                          <DataTemplate>
                            <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}" HorizontalAlignment="Center" Text="{Binding}"/>
                          </DataTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Resources>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarGuideImage}" Command="{Binding UserGuideCmd}">
                    <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                           Text="{x:Static localprop:Resources.MenuHelpUserGuideContent}" HorizontalAlignment="Center"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarFeedBackImage}"
                                       Content="{x:Static localprop:Resources.MenuHelpContactUsContent}" Command="{Binding FeedBackCmd}"/>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarProperitesImage}" MaxWidth="150"
                                       hotkeys:HotKeyExtensions.InvokeWhen="Editor_DocumentProperties"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.DocumentPropertiesWindowTitle}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_DocumentProperties}"
                                       Command="{Binding PropertiesCmd}">
                    <commonLibControl:AutoTooltipTextBlock Style="{StaticResource ToolbarButtonTextStyle}"
                                                           Text="{x:Static localprop:Resources.DocumentPropertiesWindowTitle}" HorizontalAlignment="Center"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="/Style/Resources/userMannul.png"
                                       Content="{x:Static localprop:Resources.MenuHelpUserGuideContent}" Visibility="Collapsed"
                                       Command="{Binding UserMannulCmd}"/>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarAppSettingsImage}" Command="{Binding SettingsCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuHelperSettingContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="/Style/Resources/upgrade.png" Visibility="Collapsed" Command="{Binding UpgradeCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuViewUpgradeContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarUpdateImage}"
                                       commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuHelperUpdateContent}"
                                       ToolTip="{x:Static localprop:Resources.TooltipDesc_Update}" Command="{Binding UpdateCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuHelperUpdateContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                  <menus:ToolbarButton Header="{DynamicResource ToolBarAboutImage}" Command="{Binding AboutCmd}">
                    <TextBlock Text="{x:Static localprop:Resources.MenuHelpAboutContent}"
                               Style="{StaticResource ToolbarButtonTextStyle}"/>
                  </menus:ToolbarButton>
                </StackPanel>
              </Grid>
            </Grid>
          </ScrollViewer>
        </Grid>
      </Grid>
      <Rectangle Height="1" Fill="{DynamicResource MainViewSideBarBorder}" Grid.Row="1"
                 HorizontalAlignment="Stretch" VerticalAlignment="Bottom" IsHitTestVisible="false" Panel.ZIndex="2"/>
      <Grid x:Name="PdfContentContainer" Row="2">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <control:NavigationView x:Name="LeftNavigationView" BorderBrush="{DynamicResource MainViewSideBarBorder}"
                                BorderThickness="0,0,1,0" PaneBackground="Transparent"
                                Background="{Binding ElementName=PdfControl, Path=PageBackground}"
                                ItemsSource="{Binding Menus.LeftNavList}"
                                SelectedItem="{Binding Menus.SelectedLeftNavItem, Mode=TwoWay}"
                                IsEnabled="{Binding IsLeftNavigationMenuEnabled}"
                                Visibility="{Binding ElementName=PdfControl, Path=IsEditing, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <Grid ToolTip="{Binding DisplayName}">
                <Image x:Name="NormalImage" Width="24" Height="24" Source="{Binding Icon}"/>
                <Image x:Name="SelectedImage" Width="24" Height="24" Visibility="Collapsed"
                       Source="{Binding SelectedIcon}"/>
              </Grid>
              <DataTemplate.Triggers>
                <DataTrigger Value="True"
                             Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type control:NavigationViewItem}}}">
                  <Setter TargetName="SelectedImage" Value="{x:Static Visibility.Visible}" Property="UIElement.Visibility"/>
                  <Setter TargetName="NormalImage" Value="{x:Static Visibility.Collapsed}" Property="UIElement.Visibility"/>
                </DataTrigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </ItemsControl.ItemTemplate>
          <control:NavigationView.Content>
            <Grid Background="{DynamicResource SolidBrushWhiteAndBlack}">
              <Grid Column="1"
                    Visibility="{Binding ConverterParameter=Bookmark, ElementName=LeftNavigationView, Path=SelectedItem, Converter={StaticResource LeftNavigationViewContentVisibilityConverter}}">
                <FrameworkElement.Resources>
                  <GeometryGroup x:Key="BookmarkExpandAllIcon">
                    <RectangleGeometry Rect="1.5,3.5,11,11"/>
                    <PathGeometry Figures="M3.5 9H10.5M7 5.5V12.5"/>
                    <PathGeometry Figures="M2.5 1.5H14.5V13.5"/>
                  </GeometryGroup>
                  <GeometryGroup x:Key="BookmarkCollapseAllIcon">
                    <RectangleGeometry Rect="1.5,3.5,11,11"/>
                    <PathGeometry Figures="M3.5 9H10.5"/>
                    <PathGeometry Figures="M2.5 1.5H14.5V13.5"/>
                  </GeometryGroup>
                  <GeometryGroup x:Key="AddBookmarkIcon">
                    <PathGeometry Figures="M7.74806 12.0681L2.5 15.1295V1.5H13.5V15.1295L8.25194 12.0681L8 11.9211L7.74806 12.0681Z"/>
                    <PathGeometry Figures="M5 7H11M8 4V10"/>
                  </GeometryGroup>
                  <GeometryGroup x:Key="AddChildBookmarkIcon">
                    <PathGeometry Figures="M16.5 14.5V17H17.5V14.5H20V13.5H17.5V11H16.5V13.5H14V14.5H16.5Z"/>
                    <PathGeometry Figures="M17 9.5V7H8V14.25M17 18.5V20.5L12.5 18L8 20.5V14.25M8 14.25H4.5V4"/>
                  </GeometryGroup>
                  <GeometryGroup x:Key="RemoveBookmarkIcon">
                    <PathGeometry Figures="M7.74806 12.0681L2.5 15.1295V1.5H13.5V15.1295L8.25194 12.0681L8 11.9211L7.74806 12.0681Z"/>
                    <PathGeometry Figures="M5 7H11"/>
                  </GeometryGroup>
                  <GeometryGroup x:Key="EditBookmarkIcon">
                    <PathGeometry Figures="M8 5.5H1.5V11.5H8"/>
                    <PathGeometry Figures="M9 1.5L10 1.96429M10 1.96429L11 1.5M10 1.96429V14.0357M10 14.0357L9 14.5M10 14.0357L11 14.5"/>
                    <PathGeometry Figures="M12 5.5H14.5V11.5H12"/>
                  </GeometryGroup>
                  <GeometryGroup x:Key="BookmarkMenuCheckedIcon">
                    <PathGeometry Figures="M3 6.5L6.66667 10L14 3"/>
                  </GeometryGroup>
                </FrameworkElement.Resources>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Border BorderBrush="{DynamicResource MainViewSideBarBorder}" BorderThickness="0,0,0,1">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock FontSize="12" Foreground="{DynamicResource MainViewSideBarTextForegorund}" Margin="8,4,0,0"
                               VerticalAlignment="Center"
                               Text="{Binding ElementName=LeftNavigationView, Path=SelectedItem.DisplayName}"/>
                    <StackPanel Orientation="Horizontal" Grid.Column="1">
                      <Button Click="BookmarkExpandAll_Click" Width="28" Height="28" Margin="0,4,0,0" Background="Transparent"
                              BorderThickness="0" Style="{StaticResource BtnInfoStyle}" Padding="0"
                              ToolTip="{x:Static localprop:Resources.MainViewBookmarkExpandAll}">
                        <Viewbox Margin="6">
                          <Path Stroke="{DynamicResource MainViewSideBarTextForegorund}" StrokeThickness="1"
                                Data="{StaticResource BookmarkExpandAllIcon}"/>
                        </Viewbox>
                      </Button>
                      <Button Click="BookmarkCollapseAll_Click" Width="28" Height="28" Margin="0,4,0,0" Background="Transparent"
                              BorderThickness="0" Style="{StaticResource BtnInfoStyle}" Padding="0"
                              ToolTip="{x:Static localprop:Resources.MainViewBookmarkCollapseAll}">
                        <Viewbox Margin="6">
                          <Path Stroke="{DynamicResource MainViewSideBarTextForegorund}" StrokeThickness="1"
                                Data="{StaticResource BookmarkCollapseAllIcon}"/>
                        </Viewbox>
                      </Button>
                      <Button Width="28" Height="28" Margin="0,4,0,0" Background="Transparent" BorderThickness="0"
                              Style="{StaticResource BtnInfoStyle}" Padding="0"
                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MainViewBookmarkAddBookmark}"
                              hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddBookmark"
                              hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding BookmarkAddCommand}">
                        <Viewbox Margin="6">
                          <Path Stroke="{DynamicResource MainViewSideBarTextForegorund}" StrokeThickness="1"
                                Data="{StaticResource AddBookmarkIcon}"/>
                        </Viewbox>
                      </Button>
                      <Button Width="28" Height="28" Margin="0,4,0,0" Background="Transparent" BorderThickness="0"
                              Style="{StaticResource BtnInfoStyle}" Padding="0"
                              ToolTip="{x:Static localprop:Resources.MainViewBookmarkDeleteBookmark}"
                              Command="{Binding BookmarkRemoveCommand}">
                        <Viewbox Margin="6">
                          <Path Stroke="{DynamicResource MainViewSideBarTextForegorund}" StrokeThickness="1"
                                Data="{StaticResource RemoveBookmarkIcon}"/>
                        </Viewbox>
                      </Button>
                      <Button Width="28" Height="28" Margin="0,4,4,0" Background="Transparent" BorderThickness="0"
                              Style="{StaticResource BtnInfoStyle}" Command="{Binding Menus.CloseLeftNavMenuCmd}">
                        <Path Stroke="{DynamicResource MainViewSideBarTextForegorund}" StrokeThickness="1"
                              Data="{StaticResource CloseGeometry}" Width="16" Height="16" HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
                      </Button>
                    </StackPanel>
                  </Grid>
                </Border>
                <bookmarkControl:BookmarkControl ContextMenuService.ContextMenuOpening="bookmarkControl_ContextMenuOpening" x:Name="bookmarkControl"
                                                 KeyDown="bookmarkControl_KeyDown" Grid.Row="1" Bookmarks="{Binding Bookmarks}"
                                                 SelectedItem="{Binding SelectedBookmark, Mode=TwoWay}"
                                                 PdfViewer="{Binding ElementName=PdfControl, Path=Viewer, Mode=OneWay}"
                                                 utils2:UIElementExtension.ExtendContextMenuDataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ContextMenu}">
                  <FrameworkElement.Resources>
                    <Style x:Key="menu2" TargetType="{x:Type MenuItem}">
                      <Setter Property="FrameworkElement.MinWidth" Value="180"/>
                      <Setter Property="FrameworkElement.Height" Value="36"/>
                      <Setter Property="Control.FontSize" Value="13"/>
                      <Setter Property="Control.BorderThickness" Value="0"/>
                      <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
                      <Setter Property="Control.BorderBrush" Value="Transparent"/>
                      <Setter Property="Control.Background" Value="Transparent"/>
                      <Setter Property="Control.FontWeight" Value="Normal"/>
                      <Setter Property="Control.Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}"
                                  HorizontalAlignment="Stretch" Background="{DynamicResource SolidBrushWhiteAndBlack}" Margin="5,0">
                              <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="24"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="Auto"/>
                              </Grid.ColumnDefinitions>
                              <Border x:Name="bd" CornerRadius="4" Grid.ColumnSpan="5" HorizontalAlignment="Stretch"
                                      VerticalAlignment="Stretch" Background="{DynamicResource SolidBrushWhiteAndBlack}"
                                      BorderBrush="{DynamicResource MainViewFontSizeBorder}" BorderThickness="0 0 0 0"/>
                              <Path x:Name="_checkMark" Visibility="Collapsed" Grid.Column="0" HorizontalAlignment="Center"
                                    VerticalAlignment="Center" Data="{StaticResource BookmarkMenuCheckedIcon}"
                                    Stroke="{DynamicResource ShareFilePath}" StrokeThickness="1"/>
                              <ContentPresenter x:Name="_imgicon" Visibility="Visible" Grid.Column="0" Width="18" Height="18"
                                                HorizontalAlignment="Center" VerticalAlignment="Center"
                                                Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}"/>
                              <TextBlock x:Name="tb" Grid.Column="1" FontSize="12" Margin="8,0,0,0"
                                         Foreground="{DynamicResource ToolBarButtonContextMenu}" VerticalAlignment="Center"
                                         HorizontalAlignment="Left" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
                              <Grid Column="3" Margin="5,0">
                                <Path x:Name="_path" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Center"
                                      Data="M 0,0 L 3,2.5 0,5 Z" Fill="{DynamicResource TextBrushWhiteAndBlack}"/>
                                <TextBlock x:Name="TextBlock_Shortcut" Visibility="Visible" VerticalAlignment="Center" Opacity="0.5"
                                           Foreground="{DynamicResource TextBrushWhiteAndBlack}" HorizontalAlignment="Right"
                                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
                              </Grid>
                              <Popup x:Name="SubMenuPopup" Placement="Right" AllowsTransparency="true" Focusable="false"
                                     IsOpen="{TemplateBinding MenuItem.IsSubmenuOpen}">
                                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                  <Border Name="SubmenuBorder" Background="Transparent" BorderBrush="{DynamicResource ContextMenuBorder}"
                                          BorderThickness="1" SnapsToDevicePixels="true">
                                    <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                  </Border>
                                </ScrollViewer>
                              </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                              <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                <Setter TargetName="_imgicon" Property="UIElement.Visibility" Value="Collapsed"/>
                              </Trigger>
                              <Trigger Property="MenuItem.IsChecked" Value="true">
                                <Setter TargetName="_checkMark" Property="UIElement.Visibility" Value="Visible"/>
                              </Trigger>
                              <Trigger Property="ItemsControl.HasItems" Value="true">
                                <Setter TargetName="_path" Property="UIElement.Visibility" Value="Visible"/>
                              </Trigger>
                              <Trigger Property="UIElement.IsMouseOver" Value="true">
                                <Setter TargetName="bd" Value="{DynamicResource PagesEditorInsertPageBackground}"
                                        Property="Control.Background"/>
                              </Trigger>
                              <DataTrigger Value="true"
                                           Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HasHotKeyConverter}}">
                                <Setter TargetName="TextBlock_Shortcut" Property="UIElement.Visibility" Value="Visible"/>
                              </DataTrigger>
                            </ControlTemplate.Triggers>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                    <Style x:Key="menuSeparator" TargetType="{x:Type Separator}">
                      <Setter Property="FrameworkElement.Margin" Value="0"/>
                      <Setter Property="Control.Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type Separator}">
                            <Border Background="{DynamicResource SolidBrushWhiteAndBlack}">
                              <Border Height="1" BorderThickness="1" Margin="3,2" BorderBrush="{DynamicResource MainViewFontSizeBorder}"/>
                            </Border>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                    <Style x:Key="Style_ContextMenu" TargetType="{x:Type ContextMenu}">
                      <Setter Property="ContextMenu.Placement" Value="MousePoint"/>
                      <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
                      <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
                      <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
                      <Setter Property="Control.BorderBrush" Value="#33000000"/>
                      <Setter Property="Control.Background" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
                      <Setter Property="Control.Foreground" Value="{DynamicResource TextBrushWhiteAndBlack}"/>
                      <Setter Property="Control.BorderThickness" Value="1"/>
                      <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                      <Setter Property="ContextMenu.HasDropShadow" Value="true"/>
                      <Setter Property="Control.Padding" Value="4"/>
                      <Setter Property="Control.Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Grid>
                              <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1"
                                      CornerRadius="8" Background="{TemplateBinding Control.Background}"
                                      Padding="{TemplateBinding Control.Padding}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="true" Margin="0"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                KeyboardNavigation.TabNavigation="Cycle"/>
                              </Border>
                            </Grid>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </FrameworkElement.Resources>
                  <FrameworkElement.ContextMenu>
                    <ContextMenu Style="{StaticResource Style_ContextMenu}">
                      <MenuItem Click="BookmarkContextMenuAddBookmark_Click" Style="{StaticResource menu2}"
                                hotkeys:HotKeyExtensions.InvokeWhen="Editor_AddBookmark"
                                hotkeys:HotKeyExtensions.InvokeAction="None"
                                Header="{x:Static localprop:Resources.MainViewBookmarkAddBookmark}">
                        <MenuItem.Icon>
                          <Viewbox>
                            <Path Stroke="{DynamicResource ShareFilePath}" StrokeThickness="1"
                                  Data="{StaticResource AddBookmarkIcon}"/>
                          </Viewbox>
                        </MenuItem.Icon>
                      </MenuItem>
                      <MenuItem Click="BookmarkContextMenuAddChidBookmark_Click" x:Name="AddChildBookmarkMenuItem"
                                Style="{StaticResource menu2}"
                                Header="{x:Static localprop:Resources.MainViewBookmarkAddChildBookmark}">
                        <MenuItem.Icon>
                          <Viewbox>
                            <Path Stroke="{DynamicResource ShareFilePath}" StrokeThickness="1.2"
                                  Data="{StaticResource AddChildBookmarkIcon}"/>
                          </Viewbox>
                        </MenuItem.Icon>
                      </MenuItem>
                      <Separator x:Name="BookmarkMenuSeparator" Style="{StaticResource menuSeparator}"/>
                      <MenuItem Click="BookmarkContextMenuDeleteBookmark_Click" x:Name="DeleteBookmarkMenuItem"
                                Style="{StaticResource menu2}"
                                Header="{x:Static localprop:Resources.MainViewBookmarkDeleteBookmark}">
                        <MenuItem.Icon>
                          <Viewbox>
                            <Path Stroke="{DynamicResource ShareFilePath}" StrokeThickness="1"
                                  Data="{StaticResource RemoveBookmarkIcon}"/>
                          </Viewbox>
                        </MenuItem.Icon>
                      </MenuItem>
                      <MenuItem Click="BookmarkContextMenuRenameBookmark_Click" x:Name="EditBookmarkMenuItem"
                                Style="{StaticResource menu2}"
                                Header="{x:Static localprop:Resources.MainViewBookmarkRenameBookmark}">
                        <MenuItem.Icon>
                          <Viewbox>
                            <Path Stroke="{DynamicResource ShareFilePath}" StrokeThickness="1"
                                  Data="{StaticResource EditBookmarkIcon}"/>
                          </Viewbox>
                        </MenuItem.Icon>
                      </MenuItem>
                      <Separator x:Name="BookmarkMenuSeparator2" Style="{StaticResource menuSeparator}"/>
                      <MenuItem Click="WrapBookmarkMenuItem_Click" x:Name="WrapBookmarkMenuItem" Style="{StaticResource menu2}"
                                IsCheckable="true" Header="{x:Static localprop:Resources.WrapBookmarkMenuItemContent}"/>
                      <MenuItem Click="ExpandCollapseBookmarkMenuItem_Click" x:Name="ExpandCollapseBookmarkMenuItem"
                                Style="{StaticResource menu2}"
                                Header="{x:Static localprop:Resources.RightMenuBookmakrkExpandCollpaseItemText}"/>
                    </ContextMenu>
                  </FrameworkElement.ContextMenu>
                </bookmarkControl:BookmarkControl>
              </Grid>
              <Grid Column="1"
                    Visibility="{Binding ConverterParameter=Thumbnail, ElementName=LeftNavigationView, Path=SelectedItem, Converter={StaticResource LeftNavigationViewContentVisibilityConverter}}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="36"/>
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Border BorderBrush="{DynamicResource MainViewSideBarBorder}" BorderThickness="0,0,0,1">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock FontSize="12" Foreground="{DynamicResource MainViewSideBarTextForegorund}" Margin="8,4,0,0"
                               VerticalAlignment="Center"
                               Text="{Binding ElementName=LeftNavigationView, Path=SelectedItem.DisplayName}"/>
                    <StackPanel Orientation="Horizontal" Grid.Column="1">
                      <Button Width="28" Height="28" Margin="0,4,4,0" Background="Transparent" BorderThickness="0"
                              Style="{StaticResource BtnInfoStyle}" Command="{Binding Menus.CloseLeftNavMenuCmd}">
                        <Path Stroke="{DynamicResource MainViewSideBarTextForegorund}" StrokeThickness="1"
                              Data="{StaticResource CloseGeometry}" Width="16" Height="16" HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
                      </Button>
                    </StackPanel>
                  </Grid>
                </Border>
                <Border Grid.Row="1" BorderBrush="{DynamicResource MainViewSideBarBorder}" BorderThickness="0,0,0,1">
                  <ScrollViewer PreviewMouseWheel="MenuScrollViewer_PreviewMouseWheel" HorizontalScrollBarVisibility="Auto"
                                VerticalScrollBarVisibility="Disabled" HorizontalAlignment="Center"
                                utils:MouseHelper.IsHorizontalWheelEnabled="true"
                                commonLibControl:ScrollBarHelper.IndicatorMode="Collapsed"
                                commonLibControl:ScrollBarHelper.AutoHide="true">
                    <StackPanel Margin="5 0" VerticalAlignment="Center" Orientation="Horizontal">
                      <Button Style="{StaticResource BtnInfoStyle}" Margin="8 0" Padding="0" Height="24" Width="24"
                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageMergeContent}"
                              ToolTip="{x:Static localprop:Resources.TooltipDesc_PageMerge}" Grid.Column="0"
                              Command="{Binding PageEditors.PageEditorMergeCmd}">
                        <Image Source="{DynamicResource SideToolBarThumbnailsSidebarMerge}"/>
                      </Button>
                      <Button Style="{StaticResource BtnInfoStyle}" Margin="8 0" Padding="0" Height="24" Width="24"
                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageSplitContent}"
                              ToolTip="{x:Static localprop:Resources.TooltipDesc_PageSplit}" Grid.Column="1"
                              Command="{Binding PageEditors.PageEditorSplitCmd}">
                        <Image Source="{DynamicResource SideToolBarThumbnailsSidebarSplit}"/>
                      </Button>
                      <Button Style="{StaticResource BtnInfoStyle}" hotkeys:HotKeyExtensions.InvokeWhen="Editor_ExtractPage"
                              hotkeys:HotKeyExtensions.InvokeAction="None" Margin="8 0" Padding="0" Height="24" Width="24"
                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageExtractContent}"
                              ToolTip="{x:Static localprop:Resources.TooltipDesc_PageExtract}" Grid.Column="2"
                              Command="{Binding PageEditors.SiderbarExtractCmd}">
                        <Image Source="{DynamicResource SideToolBarThumbnailsSidebarExtract}"/>
                      </Button>
                      <Button Style="{StaticResource BtnInfoStyle}" hotkeys:HotKeyExtensions.InvokeWhen="Editor_DeletePage"
                              hotkeys:HotKeyExtensions.InvokeAction="None" Margin="8 0" Padding="0" Height="24" Width="24"
                              commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageDeleteContent}"
                              ToolTip="{x:Static localprop:Resources.TooltipDesc_PageDelete}" Grid.Column="3"
                              Command="{Binding PageEditors.SiderbarDeleteCmd}">
                        <Image Source="{DynamicResource ToolBarDeleteImage}"/>
                      </Button>
                      <ToggleButton x:Name="SidebarInsertBtn" Margin="8 0" Padding="0" Height="24" Width="29"
                                    Style="{StaticResource BtnInfoStyle}"
                                    commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.MenuPageInsertContent}"
                                    ToolTip="{x:Static localprop:Resources.TooltipDesc_PageInsert}" Grid.Column="4">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4*"/>
                            <ColumnDefinition Width="*"/>
                          </Grid.ColumnDefinitions>
                          <Image Source="{DynamicResource SideToolBarThumbnailsSidebarInsert}"/>
                          <Path Data="M 5,0.75 L 0,0.75 2.5,3.25 5,0.75 Z" Fill="{DynamicResource MainViewBtnInfoStyleText}"
                                HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1"/>
                        </Grid>
                      </ToggleButton>
                      <Popup Placement="Bottom" StaysOpen="false" AllowsTransparency="true" PopupAnimation="Fade"
                             PlacementTarget="{Binding ElementName=SidebarInsertBtn}"
                             IsOpen="{Binding ElementName=SidebarInsertBtn, Path=IsChecked, Mode=TwoWay}">
                        <Border BorderThickness="1" BorderBrush="Gray">
                          <Grid Height="auto" MinWidth="130" Background="{DynamicResource SolidBrushWhiteAndBlack}">
                            <Grid.RowDefinitions>
                              <RowDefinition Height="*"/>
                              <RowDefinition Height="*"/>
                              <RowDefinition Height="*"/>
                              <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Button x:Name="Button_InsertBlank" Style="{StaticResource BtnInfoStyle}" Height="24" Padding="0"
                                    hotkeys:HotKeyExtensions.InvokeWhen="Editor_InsertBlankPage"
                                    hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding PageEditors.FormBlankPage}">
                              <ContentControl.Content>
                                <Grid>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" MinWidth="25"/>
                                  </Grid.ColumnDefinitions>
                                  <Image Grid.Column="0" Source="{DynamicResource MainViewSideBarInsertBlankPageImage}"
                                         HorizontalAlignment="Center" Height="14" Width="14"/>
                                  <TextBlock Grid.Column="1" HorizontalAlignment="Left"
                                             Text="{x:Static localprop:Resources.MenuPageSubInsertBlankPage}"/>
                                  <TextBlock Grid.Column="2" VerticalAlignment="Center" Opacity="0.5" HorizontalAlignment="Right" Margin="4,0"
                                             Width="100" TextAlignment="Left"
                                             Text="{Binding ElementName=Button_InsertBlank, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
                                </Grid>
                              </ContentControl.Content>
                            </Button>
                            <Button x:Name="Button_InsertPDF" Grid.Row="1" Style="{StaticResource BtnInfoStyle}" Height="24"
                                    Padding="0" hotkeys:HotKeyExtensions.InvokeWhen="Editor_InsertPDF"
                                    hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding PageEditors.FormPDF}">
                              <ContentControl.Content>
                                <Grid>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" MinWidth="25"/>
                                  </Grid.ColumnDefinitions>
                                  <Image Grid.Column="0" Source="{DynamicResource MainViewSideBarInsertFormPDFPageImage}"
                                         HorizontalAlignment="Center" Height="14" Width="14"/>
                                  <TextBlock Grid.Column="1" HorizontalAlignment="Left"
                                             Text="{x:Static localprop:Resources.MenuPageSubInsertFromPDF}"/>
                                  <TextBlock Grid.Column="2" VerticalAlignment="Center" Opacity="0.5" HorizontalAlignment="Right" Margin="4,0"
                                             Width="100" TextAlignment="Left"
                                             Text="{Binding ElementName=Button_InsertPDF, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
                                </Grid>
                              </ContentControl.Content>
                            </Button>
                            <Button x:Name="Button_InsertWord" Grid.Row="2" Style="{StaticResource BtnInfoStyle}" Height="24"
                                    Padding="0" hotkeys:HotKeyExtensions.InvokeWhen="Editor_InsertWord"
                                    hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding PageEditors.FormWord}">
                              <ContentControl.Content>
                                <Grid>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" MinWidth="25"/>
                                  </Grid.ColumnDefinitions>
                                  <Image Grid.Column="0" Source="/Style/Resources/PageEditor/FromWord.png" HorizontalAlignment="Center"
                                         Height="14" Width="14"/>
                                  <TextBlock Grid.Column="1" HorizontalAlignment="Left"
                                             Text="{x:Static localprop:Resources.MenuPageSubInsertFromWord}"/>
                                  <TextBlock Grid.Column="2" VerticalAlignment="Center" Opacity="0.5" HorizontalAlignment="Right" Margin="4,0"
                                             Width="100" TextAlignment="Left"
                                             Text="{Binding ElementName=Button_InsertWord, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
                                </Grid>
                              </ContentControl.Content>
                            </Button>
                            <Button x:Name="Button_InsertImage" Grid.Row="3" Style="{StaticResource BtnInfoStyle}" Height="24"
                                    Padding="0" hotkeys:HotKeyExtensions.InvokeWhen="Editor_InsertImage"
                                    hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding PageEditors.FormImage}">
                              <ContentControl.Content>
                                <Grid>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto" MinWidth="25"/>
                                  </Grid.ColumnDefinitions>
                                  <Image Grid.Column="0" Source="/Style/Resources/PageEditor/FromImage.png" HorizontalAlignment="Center"
                                         Height="14" Width="14"/>
                                  <TextBlock Grid.Column="1" HorizontalAlignment="Left"
                                             Text="{x:Static localprop:Resources.MenuPageSubInsertFromImage}"/>
                                  <TextBlock Grid.Column="2" VerticalAlignment="Center" Opacity="0.5" HorizontalAlignment="Right" Margin="4,0"
                                             Width="100" TextAlignment="Left"
                                             Text="{Binding ElementName=Button_InsertImage, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
                                </Grid>
                              </ContentControl.Content>
                            </Button>
                          </Grid>
                        </Border>
                      </Popup>
                    </StackPanel>
                  </ScrollViewer>
                </Border>
                <control:PdfPagePreviewListView x:Name="ThumbnailList" SelectionChanged="ThumbnailList_SelectionChanged" Grid.Row="2"
                                                ItemsSource="{Binding ThumbnailItemSource}"
                                                SelectedIndex="{Binding SelectedPageIndex, Mode=TwoWay}">
                  <ItemsControl.ItemTemplate>
                    <DataTemplate>
                      <Grid x:Name="Root">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*"/>
                          <ColumnDefinition Width="12*"/>
                          <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="Container" Column="1" HorizontalAlignment="Stretch">
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                          </Grid.RowDefinitions>
                          <Grid MaxHeight="400" ClipToBounds="true">
                            <control:PdfPagePreviewControl x:Name="PreviewImage" RenderActualRotate="true" ForceImageSize="true" Document="{Binding Document}"
                                                           PageIndex="{Binding PageIndex}" ThumbnailWidth="{Binding ElementName=Container, Path=ActualWidth}">
                              <FrameworkElement.ContextMenu>
                                <control:PdfViewerContextMenu AutoCloseOnMouseLeave="true" ItemsSource="{Binding ContextMenuModel}"/>
                              </FrameworkElement.ContextMenu>
                            </control:PdfPagePreviewControl>
                          </Grid>
                          <Rectangle x:Name="HoverBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                     StrokeThickness="1" Stroke="#99000000"/>
                          <Rectangle x:Name="PressedBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                     StrokeThickness="2" Stroke="Transparent"/>
                          <TextBlock x:Name="PageIndexText" Grid.Row="1" HorizontalAlignment="Center" FontSize="10" Margin="0,4"
                                     Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                                     Text="{Binding DisplayPageIndex, Mode=OneWay}"/>
                        </Grid>
                      </Grid>
                      <DataTemplate.Triggers>
                        <DataTrigger Value="True"
                                     Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewListViewItem}}}">
                          <Setter TargetName="HoverBackground" Property="Shape.Stroke" Value="#66000000"/>
                        </DataTrigger>
                        <DataTrigger Value="True"
                                     Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewListViewItem}}}">
                          <Setter TargetName="PressedBackground" Value="{DynamicResource MainViewPageSelectedBackground}"
                                  Property="Shape.Stroke"/>
                          <Setter TargetName="PageIndexText" Property="TextElement.FontWeight" Value="Bold"/>
                        </DataTrigger>
                      </DataTemplate.Triggers>
                    </DataTemplate>
                  </ItemsControl.ItemTemplate>
                </control:PdfPagePreviewListView>
              </Grid>
              <Grid SizeChanged="CommetMenuContainer_SizeChanged" Column="1"
                    Visibility="{Binding ConverterParameter=Annotation, ElementName=LeftNavigationView, Path=SelectedItem, Converter={StaticResource LeftNavigationViewContentVisibilityConverter}}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Border BorderBrush="{DynamicResource MainViewSideBarBorder}" BorderThickness="0,0,0,1">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock FontSize="12" Foreground="{DynamicResource MainViewSideBarTextForegorund}" Margin="8,4,0,0"
                               VerticalAlignment="Center"
                               Text="{Binding ElementName=LeftNavigationView, Path=SelectedItem.DisplayName}"/>
                    <commonLibControl:ProgressRing Grid.Column="1" Margin="8,4,0,0" Foreground="{DynamicResource MainViewSideBarTextForegorund}"
                                                   HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" MinWidth="0"
                                                   MinHeight="0" IsIndeterminate="false" Minimum="0" Maximum="1"
                                                   Value="{Binding PageCommetSource.Progress}" IsActive="{Binding PageCommetSource.IsLoading}"
                                                   Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsActive, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Right">
                      <Button Width="28" Height="28" Margin="0,4,4,0" Background="Transparent" BorderThickness="0"
                              Style="{StaticResource BtnInfoStyle}" Command="{Binding Menus.CloseLeftNavMenuCmd}">
                        <Path Stroke="#888888" StrokeThickness="1" Data="{StaticResource CloseGeometry}" Width="16" Height="16"
                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                      </Button>
                    </StackPanel>
                  </Grid>
                </Border>
                <Border BorderBrush="#DBDBDB" Grid.Row="1" BorderThickness="0,0,0,0">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="Auto"/>
                      <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*"/>
                      <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <TextBlock FontSize="12" Foreground="#FF888888" Margin="8,4,0,0" VerticalAlignment="Center">
                      <Run Text="{x:Static localprop:Resources.AnnotationMenuTotal}"/>
                      <Run Text="{Binding AllCount, Mode=OneWay}"/>
                    </TextBlock>
                    <commonLibControl:ProgressRing Grid.Column="1" Margin="8,4,0,0" Foreground="#888888" HorizontalAlignment="Center"
                                                   VerticalAlignment="Center" Width="16" Height="16" MinWidth="0" MinHeight="0"
                                                   IsIndeterminate="false" Minimum="0" Maximum="1" Value="{Binding PageCommetSource.Progress}"
                                                   IsActive="{Binding PageCommetSource.IsLoading}"
                                                   Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsActive, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <StackPanel Orientation="Horizontal" Grid.Column="0" Grid.ColumnSpan="3" Margin="10 0 0 0" Grid.Row="1"
                                HorizontalAlignment="Left">
                      <StackPanel x:Name="CommetExpandButtonContainer" Orientation="Horizontal">
                        <Button Click="CommetCollapseButton_Click" Width="28" Height="28" Margin="0,4,4,0" Background="Transparent"
                                BorderThickness="0" Style="{StaticResource BtnInfoStyle}"
                                ToolTip="{x:Static localprop:Resources.MainViewBookmarkCollapseAll}"
                                Visibility="{Binding PageCommetSource.IsCompleted, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                          <Viewbox Width="14" Height="14" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path Fill="#888888" StrokeThickness="0" Data="{StaticResource CollapseContentGeometry}"/>
                          </Viewbox>
                        </Button>
                        <Button Click="CommetExpandButton_Click" Width="28" Height="28" Margin="0,4,4,0" Background="Transparent"
                                BorderThickness="0" Style="{StaticResource BtnInfoStyle}"
                                ToolTip="{x:Static localprop:Resources.MainViewBookmarkExpandAll}"
                                Visibility="{Binding PageCommetSource.IsCompleted, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                          <Viewbox Width="14" Height="14" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path Fill="#888888" StrokeThickness="0" Data="{StaticResource ExploreContentGeometry}"/>
                          </Viewbox>
                        </Button>
                      </StackPanel>
                      <ToggleButton x:Name="FilterBtn" Width="28" Height="28" Margin="0,4,4,0"
                                    ToolTip="{x:Static localprop:Resources.AnnotationMenuFilterBtn}" Background="Transparent"
                                    BorderThickness="0" Style="{StaticResource BtnInfoStyle}"
                                    Visibility="{Binding PageCommetSource.IsCompleted, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid>
                          <Viewbox Width="18" Height="18" Stretch="Uniform" Margin="-2 -4 0 0" HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Visibility="{Binding IsFilterAllChecked, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Path Stroke="#888888" StrokeThickness="1" Data="{StaticResource FilterGeometry}"/>
                          </Viewbox>
                          <Viewbox Width="18" Height="18" Stretch="Uniform" Margin="-2 -4 0 0" HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Visibility="{Binding IsFilterAllChecked, Mode=OneWay, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
                            <Path Stroke="DeepPink" StrokeThickness="1" Data="{StaticResource FilterGeometry}"/>
                          </Viewbox>
                        </Grid>
                      </ToggleButton>
                      <ToggleButton Width="28" Height="28" Margin="0,4,4,0" Background="Transparent" BorderThickness="0"
                                    ToolTip="{x:Static localprop:Resources.AnnotationMenuBatchDeleteBtn}"
                                    Style="{StaticResource BtnInfoStyle}"
                                    IsEnabled="{Binding Path=AllCount, Converter={StaticResource IntToBooleanConverter}}"
                                    Visibility="{Binding PageCommetSource.IsCompleted, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    IsChecked="{Binding IsDeleteAreaVisible}" Command="{Binding BatchdeleteAnnotCmd}">
                        <Path Fill="#888888" StrokeThickness="0" StrokeLineJoin="Bevel" Data="{StaticResource DeleteGeometry}"
                              Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                      </ToggleButton>
                      <Popup x:Name="filterpop" Placement="Bottom" StaysOpen="false" AllowsTransparency="true"
                             PopupAnimation="Fade" PlacementTarget="{Binding ElementName=FilterBtn}"
                             IsOpen="{Binding ElementName=FilterBtn, Path=IsChecked, Mode=TwoWay}">
                        <Border BorderThickness="1" BorderBrush="{DynamicResource MainViewSideBarBorder}" Background="Transparent">
                          <Grid Height="auto" MinWidth="130" Background="Transparent">
                            <Grid.RowDefinitions>
                              <RowDefinition Height="*"/>
                              <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <ToggleButton MouseEnter="UsersFilterbtn_MouseEnter" MouseLeave="UsersFilterbtn_MouseLeave"
                                          Checked="UsersFilterbtn_Checked" x:Name="UsersFilterbtn" Style="{StaticResource BtnInfoStyle}"
                                          Content="{x:Static localprop:Resources.AnnotationMenuFilterByUser}"
                                          HorizontalContentAlignment="Left" Width="150" IsChecked="False" Height="30"/>
                            <Path Data="M 0,5 L 0,0 3,2.5 0,5 Z" HorizontalAlignment="Right" VerticalAlignment="Center"
                                  Margin="0 0 5 0" Fill="#757575"/>
                            <ToggleButton MouseEnter="AnnotationFilterbtn_MouseEnter" MouseLeave="UsersFilterbtn_MouseLeave"
                                          Checked="AnnotationFilterbtn_Checked" x:Name="AnnotationFilterbtn"
                                          Style="{StaticResource BtnInfoStyle}"
                                          Content="{x:Static localprop:Resources.AnnotationMenuFilterByAnnotations}"
                                          HorizontalContentAlignment="Left" Width="150" Grid.Row="1" IsChecked="False" Height="30"/>
                            <Path Data="M 0,5 L 0,0 3,2.5 0,5 Z" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Center"
                                  Margin="0 0 5 0" Fill="#757575"/>
                            <Popup HorizontalOffset="1" VerticalOffset="5" Placement="Right" StaysOpen="true"
                                   AllowsTransparency="true" Margin="10 0 0 50" PopupAnimation="Fade"
                                   PlacementTarget="{Binding ElementName=UsersFilterbtn}"
                                   IsOpen="{Binding ElementName=UsersFilterbtn, Path=IsChecked, Mode=TwoWay}">
                              <control:FilterByAnnotationsControl AllCheck="{Binding IsUserFilterAllChecked, Mode=TwoWay}" Document="{Binding Document}">
                                <control:FilterByAnnotationsControl.TextList>
                                  <Binding>                                    <!-- constructor argument:
                                         PageCommetSource.userList
                                    -->

                                  </Binding>
                                </control:FilterByAnnotationsControl.TextList>
                              </control:FilterByAnnotationsControl>
                            </Popup>
                            <Popup HorizontalOffset="1" VerticalOffset="5" Placement="Right" StaysOpen="true"
                                   AllowsTransparency="true" PopupAnimation="Fade"
                                   PlacementTarget="{Binding ElementName=AnnotationFilterbtn}"
                                   IsOpen="{Binding ElementName=AnnotationFilterbtn, Path=IsChecked, Mode=TwoWay}">
                              <control:FilterByAnnotationsControl AllCheck="{Binding IsKindFilterAllChecked, Mode=TwoWay}" Document="{Binding Document}">
                                <control:FilterByAnnotationsControl.TextList>
                                  <Binding>                                    <!-- constructor argument:
                                         PageCommetSource.AnnotationList
                                    -->

                                  </Binding>
                                </control:FilterByAnnotationsControl.TextList>
                              </control:FilterByAnnotationsControl>
                            </Popup>
                          </Grid>
                        </Border>
                      </Popup>
                    </StackPanel>
                  </Grid>
                </Border>
                <Border x:Name="BatchDeleteArea" BorderBrush="#DBDBDB" Margin="0 5" Grid.Row="2" BorderThickness="0,0,0,0"
                        Visibility="{Binding Path=IsDeleteAreaVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Grid>
                    <Grid Visibility="Collapsed">
                      <FrameworkElement.Resources>
                        <Style x:Key="SearchBoxStyle" TargetType="{x:Type TextBox}">
                          <Setter Property="Control.Foreground" Value="Black"/>
                          <Setter Property="Control.FontFamily" Value="Arial"/>
                          <Setter Property="Control.FontSize" Value="12"/>
                          <Setter Property="Control.BorderThickness" Value="1"/>
                          <Setter Property="FrameworkElement.Margin" Value="10 0"/>
                          <Setter Property="Control.Padding" Value="20, 5, 5, 5"/>
                          <Setter Property="Control.Template">
                            <Setter.Value>
                              <ControlTemplate TargetType="{x:Type TextBox}">
                                <Border x:Name="border" BorderBrush="Gray" BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        CornerRadius="5" Background="White" SnapsToDevicePixels="true">
                                  <Grid>
                                    <TextBlock x:Name="TextBoxPlaceholder" Margin="25,5,0,0" Foreground="Gray" Text="Search"
                                               IsHitTestVisible="false"
                                               Visibility="{Binding Path=AnnotationsSeachText.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Grid Margin="5">
                                      <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                      </Grid.ColumnDefinitions>
                                      <Path Grid.Column="0" Margin="0,0,-5,0" Stroke="#888888" Stretch="Uniform" Width="10" Height="10"
                                            Data="M 8.32095,8.32183 C 10.0369,6.60589 10.0369,3.8238 8.32095,2.10786 6.60501,0.391919 3.82292,0.391919 2.10698,2.10786 0.391044,3.8238 0.391044,6.60589 2.10698,8.32183 3.82292,10.0378 6.60501,10.0378 8.32095,8.32183 M 8.32095,8.32183 L 11.5,11.5 "/>
                                      <ScrollViewer Grid.Column="1" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                                    Margin="10 0 0 0" Focusable="false">
                                        <ContentControl.Content>
                                          <TextBox x:Name="PART_EditableTextBox" Background="Transparent" BorderThickness="0" CaretBrush="Gray"
                                                   Foreground="Black" IsReadOnly="{TemplateBinding TextBoxBase.IsReadOnly}"
                                                   Text="{Binding AnnotationsSeachText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                        </ContentControl.Content>
                                      </ScrollViewer>
                                    </Grid>
                                  </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                  <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56"/>
                                  </Trigger>
                                  <Trigger Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="border" Property="Border.BorderBrush" Value="Black"/>
                                  </Trigger>
                                </ControlTemplate.Triggers>
                              </ControlTemplate>
                            </Setter.Value>
                          </Setter>
                        </Style>
                      </FrameworkElement.Resources>
                      <TextBox Style="{StaticResource SearchBoxStyle}"/>
                    </Grid>
                    <Grid Visibility="Visible">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="62"/>
                        <ColumnDefinition Width="67"/>
                      </Grid.ColumnDefinitions>
                      <CheckBox HorizontalAlignment="Left" Margin="17 0 0 0" Style="{StaticResource DefaultCheckBoxStyle}"
                                VerticalAlignment="Center" Content="{x:Static localprop:Resources.ChkboxPageSelectedAllContent}"
                                IsChecked="{Binding IsSelectedAll}" Command="{Binding SelectAllAnnotCmd}"/>
                      <Button Grid.Column="1" Width="52" Style="{StaticResource AnnotationBtnInfo}" Background="#eeeeee"
                              Margin="5 0" HorizontalAlignment="Right"
                              Content="{x:Static localprop:Resources.WinBtnCancelContent}"
                              Command="{Binding CanceldeleteAnnotCmd}"/>
                      <Button Grid.Column="2" Width="52" HorizontalAlignment="Left" Margin="5 0 10 0" Background="#EF5B52"
                              Foreground="White" Style="{StaticResource AnnotationBtnInfo}"
                              Content="{x:Static localprop:Resources.WinScreenshotToolbarDeleteContent}"
                              Command="{Binding DeleteAnnotCmd}"/>
                    </Grid>
                  </Grid>
                </Border>
                <control:CommetControl x:Name="CommetMenuControl" Grid.Row="3" Document="{Binding Document}"
                                       SelectedAnnotation="{Binding SelectedAnnotation, Mode=TwoWay}">
                  <control:CommetControl.AllPageCommets>
                    <Binding>                      <!-- constructor argument:
                           PageCommetSource
                      -->

                    </Binding>
                  </control:CommetControl.AllPageCommets>
                </control:CommetControl>
              </Grid>
              <Rectangle Width="1" Fill="{DynamicResource MainViewSideBarBorder}" HorizontalAlignment="Right"
                         VerticalAlignment="Stretch" IsHitTestVisible="false" Panel.ZIndex="2"/>
            </Grid>
          </control:NavigationView.Content>
        </control:NavigationView>
        <Grid x:Name="ViewerContainer" Column="1" Background="{Binding ElementName=PdfControl, Path=Background}">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
          </Grid.RowDefinitions>
          <Grid x:Name="TextEditingBanner"
                Visibility="{Binding ViewToolbar.EditPageTextObjectButtonModel.IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue={x:Static Visibility.Collapsed}}">
            <Border Background="#BCE3FF" Height="36" BorderThickness="1" BorderBrush="#7DC7FF">
              <TextBlock Text="{x:Static localprop:Resources.ViewerContainerEditBanner}" FontSize="12" Foreground="Black"
                         VerticalAlignment="Center" Margin="20,0"/>
            </Border>
          </Grid>
          <Grid Row="1" commonLibControl:ScrollBarHelper.ScrollBarSize="Large"
                commonLibControl:ScrollBarHelper.ShowScrollBarImmediately="true">
            <pdf:PdfControl PreviewMouseWheel="ScrollViewer_PreviewMouseWheel" ScrollChanged="ScrollViewer_ScrollChanged"
                            ManipulationDelta="PdfViewerScrollViewer_ManipulationDelta" LostFocus="Viewer_LostFocus"
                            EditorUndoStateChanged="PdfControl_EditorUndoStateChanged" x:Name="PdfControl"
                            PageBackground="#C9C9C9" CurrentPageHighlightColor="#66000000" PagePadding="10"
                            Document="{Binding Document}" IsAnnotationVisible="{Binding IsAnnotationVisible}"
                            ViewMode="{Binding Path=ViewToolbar.DocViewMode}"
                            SizeMode="{Binding Path=ViewToolbar.DocSizeMode, Mode=TwoWay}"
                            Zoom="{Binding Path=ViewToolbar.DocZoom, Mode=TwoWay}"
                            PageIndex="{Binding SelectedPageIndex, Mode=TwoWay}"
                            ViewerMouseMode="{Binding ViewerMouseMode.Value, Mode=TwoWay}"
                            EditorMouseMode="{Binding EditorMouseMode.Value, Mode=TwoWay}">
              <FrameworkElement.Resources>
                <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="#F9F9F9"/>
                <SolidColorBrush x:Key="ScrollBar.Static.Border" Color="#F0F0F0"/>
                <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="#72000000"/>
                <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#72000000"/>
                <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="#DADADA"/>
                <SolidColorBrush x:Key="ScrollBar.MouseOver.Border" Color="#DADADA"/>
                <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="#9E000000"/>
                <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#72000000"/>
                <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#606060"/>
                <SolidColorBrush x:Key="ScrollBar.Pressed.Border" Color="#606060"/>
                <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#72000000"/>
                <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="#9E000000"/>
                <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#F0F0F0"/>
                <SolidColorBrush x:Key="ScrollBar.Disabled.Border" Color="#F0F0F0"/>
                <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#51000000"/>
                <SolidColorBrush x:Key="ScrollBar.Disabled.Thumb" Color="#51000000"/>
              </FrameworkElement.Resources>
            </pdf:PdfControl>
            <control:AnnotationCanvas x:Name="AnnotationEditorCanvas"
                                      ScreenshotDialogClosed="AnnotationEditorCanvas_ScreenshotDialogClosed"
                                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                      PdfViewer="{Binding ElementName=PdfControl, Path=Viewer}"
                                      SelectedAnnotation="{Binding SelectedAnnotation, Mode=TwoWay}"
                                      EditingPageObjectType="{Binding EditingPageObjectType}"
                                      IsAnnotationVisible="{Binding IsAnnotationVisible}"
                                      AutoScrollSpeed="{Binding ViewToolbar.AutoScrollSpeed}"/>
          </Grid>
          <Button FontSize="32" Width="Auto" Height="Auto" Grid.Row="1" HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Visibility="{Binding IsDocumentOpened, Converter={StaticResource BooleanToVisibilityReverseConverter}}"
                  Command="{Binding OpenDocCmd}">
            <StackPanel Orientation="Horizontal">
              <TextBlock FontFamily="Segoe MDL2 Assets" Text="" FontSize="34" VerticalAlignment="Center" Margin="0,2,12,0"/>
              <TextBlock Text="{x:Static localprop:Resources.OpenFileBtnContent}"/>
            </StackPanel>
            <FrameworkElement.Style>
              <Style TargetType="{x:Type Button}">
                <Setter Property="FrameworkElement.Height" Value="25"/>
                <Setter Property="Control.Background" Value="White"/>
                <Setter Property="Control.BorderThickness" Value="0"/>
                <Setter Property="TextBlock.Foreground" Value="#3F3F3F"/>
                <Setter Property="TextBlock.FontSize" Value="12"/>
                <Setter Property="TextBlock.TextAlignment" Value="Center"/>
                <Setter Property="TextBlock.FontSize" Value="12"/>
                <Setter Property="TextBlock.FontStyle" Value="Normal"/>
                <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="Control.Padding" Value="24,12"/>
                <Setter Property="Control.Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                      <Border x:Name="bborder" CornerRadius="4" BorderBrush="{TemplateBinding Control.BorderBrush}"
                              BorderThickness="{TemplateBinding Control.BorderThickness}"
                              Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
                      </Border>
                      <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                          <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#FFBABA"/>
                          <Setter TargetName="bborder" Property="Border.Background" Value="#FFF0F0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                          <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#9F9F9F"/>
                          <Setter Property="TextBlock.Foreground" Value="#9F9F9F"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="true">
                          <Setter TargetName="bborder" Property="Border.BorderBrush" Value="#3F3F3F"/>
                          <Setter Property="TextBlock.Foreground" Value="#3F3F3F"/>
                        </Trigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </FrameworkElement.Style>
          </Button>
          <toolbarSetting:ToolbarSettingPanel x:Name="AnnotToolbarSettingPanel" Grid.Row="1">
            <toolbarSetting:ToolbarSettingPanel.Model>
              <Binding>                <!-- constructor argument:
                     AnnotationToolbar.CheckedButtonToolbarSetting
                -->

              </Binding>
            </toolbarSetting:ToolbarSettingPanel.Model>
          </toolbarSetting:ToolbarSettingPanel>
          <Grid HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,12,16,0" Row="1"
                Visibility="{Binding ElementName=PdfControl, Path=IsEditing, Converter={StaticResource BooleanToVisibilityReverseConverter}}">
            <StackPanel x:Name="ViewerConverterButtonContainer" Width="160" Grid.Row="1" Orientation="Vertical"
                        Visibility="{Binding IsDocumentOpened, Converter={StaticResource BooleanToVisibilityConverter}}">
              <FrameworkElement.Resources>
                <DataTemplate x:Key="ExtentButtonHeaderTemplate">
                  <Image Width="26" Height="26" Source="{Binding}"/>
                </DataTemplate>
              </FrameworkElement.Resources>
              <control:AnimationExtentButton x:Name="MouseOverPdfToWordButton" Header="/Style/Resources/LeftNavIcon/PdfToWord.png"
                                             Content="{x:Static localprop:Resources.MenuConvertPdfToWordContent}" Background="#298FEE"
                                             Margin="0,24,12,12" HorizontalAlignment="Right" Panel.ZIndex="10"
                                             HeaderTemplate="{StaticResource ExtentButtonHeaderTemplate}"
                                             Command="{Binding ConverterCommands.PDFToWordCmd}"/>
              <control:AnimationExtentButton x:Name="MouseOverPdfToExcelButton" Header="/Style/Resources/LeftNavIcon/PdfToExcel.png"
                                             Content="{x:Static localprop:Resources.MenuConvertPdfToExcelContent}" Background="#5AD089"
                                             Visibility="Collapsed" Margin="0,0,12,12" HorizontalAlignment="Right" Panel.ZIndex="9"
                                             HeaderTemplate="{StaticResource ExtentButtonHeaderTemplate}"
                                             Command="{Binding ConverterCommands.PDFToExcelCmd}">
                <UIElement.RenderTransform>
                  <TranslateTransform Y="-52"/>
                </UIElement.RenderTransform>
              </control:AnimationExtentButton>
              <control:AnimationExtentButton x:Name="MouseOverPdfToPPTButton" Header="/Style/Resources/LeftNavIcon/PdfToPPT.png"
                                             Content="{x:Static localprop:Resources.MenuConvertPdfToPPTContent}" Background="#ff6d3f"
                                             Visibility="Collapsed" Margin="0,0,12,12" HorizontalAlignment="Right" Panel.ZIndex="9"
                                             HeaderTemplate="{StaticResource ExtentButtonHeaderTemplate}"
                                             Command="{Binding ConverterCommands.PDFToPPTCmd}">
                <UIElement.RenderTransform>
                  <TranslateTransform Y="-104"/>
                </UIElement.RenderTransform>
              </control:AnimationExtentButton>
              <control:AnimationExtentButton x:Name="MouseOverPdfToImageButton" Header="/Style/Resources/LeftNavIcon/PdfToImage.png"
                                             Content="{x:Static localprop:Resources.MenuConvertPdfToImageContent}" Background="#ff9255"
                                             Visibility="Collapsed" Margin="0,0,12,12" HorizontalAlignment="Right" Panel.ZIndex="8"
                                             HeaderTemplate="{StaticResource ExtentButtonHeaderTemplate}"
                                             Command="{Binding ConverterCommands.PDFToImageCmd}">
                <UIElement.RenderTransform>
                  <TranslateTransform Y="-156"/>
                </UIElement.RenderTransform>
              </control:AnimationExtentButton>
              <control:AnimationExtentButton x:Name="MouseOverPdfToJpegButton" Header="/Style/Resources/LeftNavIcon/PdfToImage.png"
                                             Content="{x:Static localprop:Resources.MenuConvertPdfToJpegContent}" Background="#ff9255"
                                             Visibility="Collapsed" Margin="0,0,12,12" HorizontalAlignment="Right" Panel.ZIndex="8"
                                             HeaderTemplate="{StaticResource ExtentButtonHeaderTemplate}"
                                             Command="{Binding ConverterCommands.PDFToJpegCmd}">
                <UIElement.RenderTransform>
                  <TranslateTransform Y="-208"/>
                </UIElement.RenderTransform>
              </control:AnimationExtentButton>
              <FrameworkElement.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                  <BeginStoryboard>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToExcelButton" Storyboard.TargetProperty="Visibility"
                                                     Duration="0">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToPPTButton" Storyboard.TargetProperty="Visibility" Duration="0">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToImageButton" Storyboard.TargetProperty="Visibility"
                                                     Duration="0">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToJpegButton" Storyboard.TargetProperty="Visibility"
                                                     Duration="0">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToExcelButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="0"
                                       Duration="0:0:0.2"/>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToPPTButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="0"
                                       Duration="0:0:0.2"/>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToImageButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="0"
                                       Duration="0:0:0.2"/>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToJpegButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="0"
                                       Duration="0:0:0.2"/>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ViewerConverterButtonContainer" Storyboard.TargetProperty="Background"
                                                     Duration="0">
                        <DiscreteObjectKeyFrame KeyTime="0">
                          <ObjectKeyFrame.Value>
                            <SolidColorBrush Color="Transparent"/>
                          </ObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                  <BeginStoryboard>
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToExcelButton" Storyboard.TargetProperty="Visibility"
                                                     BeginTime="0:0:0.2" Duration="0:0:0.1">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToPPTButton" Storyboard.TargetProperty="Visibility"
                                                     BeginTime="0:0:0.2" Duration="0:0:0.1">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToImageButton" Storyboard.TargetProperty="Visibility"
                                                     BeginTime="0:0:0.2" Duration="0:0:0.1">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverPdfToJpegButton" Storyboard.TargetProperty="Visibility"
                                                     BeginTime="0:0:0.2" Duration="0:0:0.1">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToExcelButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="-52"
                                       BeginTime="0:0:0.2" Duration="0:0:0.05"/>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToPPTButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="-104"
                                       BeginTime="0:0:0.2" Duration="0:0:0.05"/>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToImageButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="-156"
                                       BeginTime="0:0:0.2" Duration="0:0:0.1"/>
                      <DoubleAnimation Storyboard.TargetName="MouseOverPdfToJpegButton"
                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" To="-208"
                                       BeginTime="0:0:0.2" Duration="0:0:0.1"/>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ViewerConverterButtonContainer" Storyboard.TargetProperty="Background"
                                                     Duration="0">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Null}"/>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger>
              </FrameworkElement.Triggers>
            </StackPanel>
          </Grid>
        </Grid>
        <menus:DocumentSearchBox x:Name="SearchBox" Grid.ColumnSpan="2" HorizontalAlignment="Right" VerticalAlignment="Top"
                                 SearchModel="{Binding Menus.SearchModel}"/>
        <copilot:ChatButton x:Name="ChatButton" Click="ChatButton_Click" Grid.Column="1" HorizontalAlignment="Right"
                            VerticalAlignment="Bottom" Margin="28" IsVisible="{Binding ChatButtonActualVisible, Mode=OneWay}"/>
        <control:NavigationView x:Name="RightNavigationView" Grid.Column="2" ContentWidth="400" NavigationListWidth="0"
                                MaxContentWidth="600" MinContentWidth="280" BorderBrush="#DBDBDB" BorderThickness="1,0,0,0"
                                Direction="Right" PaneBackground="Transparent"
                                Background="{Binding ElementName=PdfControl, Path=PageBackground}"
                                IsClosed="{Binding ChatPanelVisible, Converter={StaticResource BooleanReverseConverter}}">
          <control:NavigationView.Content>
            <copilot:ChatPanel x:Name="ChatPanel" CloseButtonClick="ChatPanel_CloseButtonClick"
                               CopilotHelper="{Binding CopilotHelper, Mode=OneWay}"/>
          </control:NavigationView.Content>
        </control:NavigationView>
      </Grid>
      <Grid x:Name="FooterContainer" Row="3" Background="{DynamicResource FooterToolBarColor}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid ColumnSpan="3" ZIndex="2" IsHitTestVisible="false">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <Border Grid.Column="0" BorderBrush="{DynamicResource MainViewSideBarBorder}" Margin="0,0,0,0"
                  BorderThickness="0,0,1,0" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                  IsHitTestVisible="false" Panel.ZIndex="2"
                  Width="{Binding ElementName=LeftNavigationView, Path=NavigationListWidth}"/>
          <Rectangle x:Name="FooterContainerHairline" Height="1" Fill="{DynamicResource MainViewSideBarBorder}"
                     Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Top" IsHitTestVisible="false"
                     Panel.ZIndex="2"
                     Visibility="{Binding ElementName=FooterContainer, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </Grid>
        <Grid Column="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <Button Grid.Column="1" Style="{StaticResource BtnInfoStyle}" Background="Transparent"
                  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,8,0"
                  FontFamily="Segoe MDL2 Assets" FontSize="18" Content=""
                  IsEnabled="{Binding Path=IsFirstPage, Mode=OneWay, Converter={StaticResource BooleanReverseConverter}}"
                  Command="{Binding Path=ViewToolbar.GotoFirstPageCmd}">
            <FrameworkElement.ToolTip>
              <StackPanel Orientation="Horizontal" TextBlock.FontWeight="Bold">
                <TextBlock Text="{x:Static localprop:Resources.FirstPageTooltipText}"
                           Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
                <TextBlock Text="[Home]" Margin="8,0,0,0" Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
              </StackPanel>
            </FrameworkElement.ToolTip>
          </Button>
          <Button Grid.Column="2" Style="{StaticResource BtnInfoStyle}" Background="Transparent"
                  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,8,0"
                  FontFamily="Segoe MDL2 Assets" FontSize="18" Content=""
                  IsEnabled="{Binding Path=IsFirstPage, Mode=OneWay, Converter={StaticResource BooleanReverseConverter}}"
                  Command="{Binding Path=ViewToolbar.GotoPrevPageCmd}">
            <FrameworkElement.ToolTip>
              <StackPanel Orientation="Horizontal" TextBlock.FontWeight="Bold">
                <TextBlock Text="{x:Static localprop:Resources.MenuViewPreviousContent}"
                           Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
                <TextBlock Text="[←]" Margin="8,0,0,0" Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
              </StackPanel>
            </FrameworkElement.ToolTip>
          </Button>
          <Border Height="22" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" MinWidth="72">
            <control:PageIndexTextBox FontSize="12" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center"
                                      PageIndex="{Binding CurrnetPageIndex, Mode=TwoWay}" PageCount="{Binding TotalPagesCount}"/>
          </Border>
          <Button Grid.Column="6" Style="{StaticResource BtnInfoStyle}" Background="Transparent"
                  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,0,0"
                  FontFamily="Segoe MDL2 Assets" FontSize="18" Content=""
                  IsEnabled="{Binding Path=IsLastPage, Mode=OneWay, Converter={StaticResource BooleanReverseConverter}}"
                  Command="{Binding Path=ViewToolbar.GotoNextPageCmd}">
            <FrameworkElement.ToolTip>
              <StackPanel Orientation="Horizontal" TextBlock.FontWeight="Bold">
                <TextBlock Text="{x:Static localprop:Resources.MenuViewNextContent}"
                           Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
                <TextBlock Text="[→]" Margin="8,0,0,0" Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
              </StackPanel>
            </FrameworkElement.ToolTip>
          </Button>
          <Button Grid.Column="7" Style="{StaticResource BtnInfoStyle}" Background="Transparent"
                  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,0,0"
                  FontFamily="Segoe MDL2 Assets" FontSize="18" Content=""
                  IsEnabled="{Binding Path=IsLastPage, Mode=OneWay, Converter={StaticResource BooleanReverseConverter}}"
                  Command="{Binding Path=ViewToolbar.GotoLastPageCmd}">
            <FrameworkElement.ToolTip>
              <StackPanel Orientation="Horizontal" TextBlock.FontWeight="Bold">
                <TextBlock Text="{x:Static localprop:Resources.LastPageTooltipText}"
                           Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
                <TextBlock Text="[End]" Margin="8,0,0,0" Foreground="{DynamicResource ToolBarButtonContextMenu}"/>
              </StackPanel>
            </FrameworkElement.ToolTip>
          </Button>
          <Button Grid.Column="9" Style="{StaticResource BtnInfoStyle}" Background="Transparent"
                  commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.FootToolPreviousViewTips}"
                  hotkeys:HotKeyExtensions.InvokeWhen="Editor_PreviousView" HorizontalAlignment="Center"
                  VerticalAlignment="Center" Margin="8,0,0,0"
                  IsEnabled="{Binding Path=ViewJumpManager.IsFirstView, Mode=OneWay, Converter={StaticResource BooleanReverseConverter}}"
                  Command="{Binding Path=ViewToolbar.GotoPrevViewCmd}">
            <Grid Margin="0 4">
              <Image Source="{DynamicResource MainViewViewBcakiseImage}"
                     Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityReverseConverter}}"/>
              <Image Source="{DynamicResource MainViewViewBcakImage}"
                     Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </Grid>
          </Button>
          <Button Grid.Column="10" Style="{StaticResource BtnInfoStyle}" Background="Transparent"
                  commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.FootToolNextViewTips}"
                  hotkeys:HotKeyExtensions.InvokeWhen="Editor_NextView" HorizontalAlignment="Center"
                  VerticalAlignment="Center" Margin="8,0,0,0"
                  IsEnabled="{Binding Path=ViewJumpManager.IsLastView, Mode=OneWay, Converter={StaticResource BooleanReverseConverter}}"
                  Command="{Binding Path=ViewToolbar.GotoNextViewCmd}">
            <Grid Margin="0 4">
              <Image Source="{DynamicResource MainViewViewPreiseImage}"
                     Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityReverseConverter}}"/>
              <Image Source="{DynamicResource MainViewViewPreImage}"
                     Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </Grid>
          </Button>
        </Grid>
        <Grid Column="2">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="120"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="80"/>
          </Grid.ColumnDefinitions>
          <Button Background="Transparent" Grid.Column="1" Style="{StaticResource BtnInfoStyle}" BorderThickness="0"
                  Padding="4" Margin="0,0,12,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                  FontFamily="Segoe MDL2 Assets" FontSize="16" Content=""
                  commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinScreenshotToolbarZoomOutContent}"
                  hotkeys:HotKeyExtensions.InvokeWhen="Editor_ZoomOut,Editor_ZoomOut2"
                  hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding Path=ViewToolbar.DocZoomOutCmd}"/>
          <TextBox KeyUp="ZoomCB_KeyUp" GotFocus="PageNum_GotFocus" LostFocus="ZoomCB_LostFocus" Grid.Row="0"
                   Grid.Column="2" Height="22" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                   Background="{DynamicResource MainViewListItemSeleted}" HorizontalContentAlignment="Center"
                   VerticalContentAlignment="Center" Foreground="{DynamicResource MainViewBtnInfoStyleText}"
                   FontSize="12" Style="{StaticResource DefaultTextBoxStyle}"
                   Text="{Binding Path=ViewToolbar.DocZoom, Mode=OneWay, Converter={StaticResource NumberFormatConverter}}">
          </TextBox>
          <Button Background="Transparent" Grid.Column="3" Style="{StaticResource BtnInfoStyle}" BorderThickness="0"
                  Padding="4" Margin="12,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                  FontFamily="Segoe MDL2 Assets" FontSize="16" Content=""
                  commonLibControl:ToolTipExtensions.Caption="{x:Static localprop:Resources.WinScreenshotToolbarZoomInContent}"
                  hotkeys:HotKeyExtensions.InvokeWhen="Editor_ZoomIn,Editor_ZoomIn2"
                  hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding Path=ViewToolbar.DocZoomInCmd}"/>
        </Grid>
        <ProgressBar x:Name="progressBar" HorizontalAlignment="Left" Grid.Column="0" Minimum="0" Maximum="1"
                     Margin="250,0,0,0" Width="180" Height="2" MinHeight="2" Visibility="Collapsed"/>
        <Label x:Name="lblsaveTime" HorizontalAlignment="Left" Grid.Column="0" Margin="110,0,0,0"
               VerticalContentAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"/>
      </Grid>
      <Grid x:Name="menuFooterShow" Row="3" Column="0" VerticalAlignment="Bottom" HorizontalAlignment="Left"
            Margin="10,0,0,10" IsEnabled="true">
        <Button Click="FooterShowHideButton_Click" Margin="0,0,12,0" Width="28" Height="20"
                Style="{StaticResource BtnInfoStyle}" Background="Transparent">
          <ContentControl.Content>
            <StackPanel Orientation="Vertical">
              <Image Source="{DynamicResource ToolBarUpBtnImage}"
                     ToolTip="{x:Static localprop:Resources.HeaderToolShowTips}" Width="24" Height="20"
                     Visibility="{Binding Menus.IsShowFooter, Converter={StaticResource BooleanToVisibilityReverseConverter}}"/>
              <Image Source="{DynamicResource ToolBarDownBtnImage}"
                     ToolTip="{x:Static localprop:Resources.HeaderToolHideTips}" Width="24" Height="20"
                     Visibility="{Binding Menus.IsShowFooter, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </StackPanel>
          </ContentControl.Content>
        </Button>
      </Grid>
      <Grid PreviewMouseWheel="PagesEditorContainer_PreviewMouseWheel" x:Name="PagesEditorContainer" Row="2"
            Background="{DynamicResource PagesEditorContainerBackground}" Visibility="Collapsed">
        <Grid Margin="0,1,0,0">
          <control:PdfPagePreviewGridView x:Name="PageGridView" ItemDoubleClick="PageGridView_ItemDoubleClick"
                                          ItemsDragStart="PageGridView_ItemsDragStart" ItemsDragCompleted="PageGridView_ItemsDragCompleted"
                                          Grid.Row="1" ItemsSource="{Binding PageEditors.PageEditListItemSource}">
            <ItemsControl.ItemTemplate>
              <DataTemplate>
                <Border MinWidth="80">
                  <Grid>
                    <Grid x:Name="Container" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="30"/>
                      </Grid.RowDefinitions>
                      <Grid ClipToBounds="true">
                        <Border x:Name="PreviewImageBorder" Background="{DynamicResource SolidBrushWhiteAndBlack}"
                                Height="{Binding ThumbnailHeight}" Width="{Binding ThumbnailWidth}">
                          <control:PdfPagePreviewControl x:Name="PreviewImage" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                         RenderActualRotate="true" Document="{Binding Document}" PageIndex="{Binding PageIndex}"
                                                         ThumbnailWidth="{Binding ThumbnailWidth}">
                            <FrameworkElement.ContextMenu>
                              <control:PdfViewerContextMenu ItemsSource="{Binding ContextMenuModel}"/>
                            </FrameworkElement.ContextMenu>
                          </control:PdfPagePreviewControl>
                        </Border>
                      </Grid>
                      <TextBlock x:Name="PageIndexText" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center"
                                 FontSize="10" Foreground="{DynamicResource ToolBarButtonContextMenu}"
                                 Text="{Binding DisplayPageIndex, Mode=OneWay}"/>
                    </Grid>
                    <Canvas x:Name="HoverCommandLayout" HorizontalAlignment="Right" VerticalAlignment="Top"
                            Visibility="Collapsed">
                      <Border Background="Transparent" Padding="4" Canvas.Left="-16" Canvas.Top="0">
                        <Border>
                          <StackPanel Margin="8,8,8,0">
                            <FrameworkElement.Resources>
                              <Style x:Key="HoverCommandButtonStyle" TargetType="{x:Type ButtonBase}">
                                <Setter Property="Control.Background" Value="{DynamicResource DialogButtonStaticBackground}"/>
                                <Setter Property="Control.BorderBrush" Value="Transparent"/>
                                <Setter Property="Control.Foreground"
                                        Value="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"/>
                                <Setter Property="Control.BorderThickness" Value="0"/>
                                <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
                                <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
                                <Setter Property="Control.Padding" Value="0"/>
                                <Setter Property="FrameworkElement.Margin" Value="0,0,0,8"/>
                                <Setter Property="FrameworkElement.Width" Value="24"/>
                                <Setter Property="FrameworkElement.Height" Value="24"/>
                                <Setter Property="UIElement.Effect">
                                  <Setter.Value>
                                    <DropShadowEffect BlurRadius="6" ShadowDepth="0" Color="Black" Opacity="0.4"/>
                                  </Setter.Value>
                                </Setter>
                                <Setter Property="Control.Template">
                                  <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                                      <Border x:Name="border" CornerRadius="4" BorderThickness="{TemplateBinding Control.BorderThickness}"
                                              Background="{TemplateBinding Control.Background}"
                                              BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="true">
                                        <Grid>
                                          <Rectangle x:Name="BackgroundBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                     Fill="#FF000000" Opacity="0" RadiusX="2" RadiusY="2"/>
                                          <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true" Margin="{TemplateBinding Control.Padding}"
                                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
                                        </Grid>
                                      </Border>
                                      <ControlTemplate.Triggers>
                                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                                          <Setter TargetName="BackgroundBorder" Property="UIElement.Opacity" Value="0.04"/>
                                        </Trigger>
                                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                                          <Setter TargetName="BackgroundBorder" Property="UIElement.Opacity" Value="0.12"/>
                                        </Trigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="false">
                                          <Setter Value="{StaticResource DialogButton.Disabled.Background}" TargetName="border"
                                                  Property="Border.Background"/>
                                          <Setter Value="{StaticResource DialogButton.Disabled.Border}" TargetName="border"
                                                  Property="Border.BorderBrush"/>
                                          <Setter Value="{StaticResource DialogButton.Disabled.Foreground}" TargetName="contentPresenter"
                                                  Property="TextElement.Foreground"/>
                                        </Trigger>
                                      </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                  </Setter.Value>
                                </Setter>
                              </Style>
                            </FrameworkElement.Resources>
                            <Button Style="{StaticResource HoverCommandButtonStyle}"
                                    utils2:UIElementExtension.TraceClickEventFormat="PageEditorRotateLeft"
                                    Command="{Binding Path=DataContext.PageEditors.PageEditorRotateLeftCmd, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewGridView}}}"
                                    CommandParameter="{Binding}">
                              <Image Source="{DynamicResource PageEditorRotateLeftImage}"/>
                            </Button>
                            <Button Style="{StaticResource HoverCommandButtonStyle}"
                                    utils2:UIElementExtension.TraceClickEventFormat="PageEditorRotateRight"
                                    Command="{Binding Path=DataContext.PageEditors.PageEditorRotateRightCmd, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewGridView}}}"
                                    CommandParameter="{Binding}">
                              <Image Source="{DynamicResource PageEditorRotateRightImage}"/>
                            </Button>
                            <Button Style="{StaticResource HoverCommandButtonStyle}"
                                    utils2:UIElementExtension.TraceClickEventFormat="PageEditorDelete"
                                    Command="{Binding Path=DataContext.PageEditors.PageEditorDeleteCmd, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewGridView}}}"
                                    CommandParameter="{Binding}">
                              <Image Source="{DynamicResource PageEditorDeleteImage}"/>
                            </Button>
                            <Button x:Name="InsertButton" Style="{StaticResource HoverCommandButtonStyle}"
                                    utils2:UIElementExtension.TraceClickEventFormat="PageEditorInsert"
                                    Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewGridView}}}"
                                    utils2:UIElementExtension.ExtendContextMenuDataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ContextMenu}">
                              <FrameworkElement.Resources>
                                <Style x:Key="menu2" TargetType="{x:Type MenuItem}">
                                  <Setter Property="FrameworkElement.MinWidth" Value="180"/>
                                  <Setter Property="FrameworkElement.Height" Value="28"/>
                                  <Setter Property="Control.Template">
                                    <Setter.Value>
                                      <ControlTemplate TargetType="{x:Type MenuItem}">
                                        <Grid Height="{TemplateBinding FrameworkElement.Height}" Width="{TemplateBinding FrameworkElement.Width}"
                                              HorizontalAlignment="Stretch" Background="{DynamicResource SolidBrushWhiteAndBlack}">
                                          <Border x:Name="bd" Background="{DynamicResource SolidBrushWhiteAndBlack}"
                                                  BorderBrush="{DynamicResource MainViewFontSizeBorder}" BorderThickness="0 0 0 0"/>
                                          <Image x:Name="_imgicon" Visibility="Visible" Width="16" Height="16" HorizontalAlignment="Left"
                                                 VerticalAlignment="Center" Margin="10 0 6 0"
                                                 Source="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}"/>
                                          <TextBlock x:Name="tb" FontSize="12" Foreground="{DynamicResource ToolBarButtonContextMenu}"
                                                     VerticalAlignment="Center" HorizontalAlignment="Left" Margin="36 0 5 0"
                                                     Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
                                          <Path x:Name="_path" Visibility="Collapsed" HorizontalAlignment="Right" Margin="5 13 5 0"
                                                Data="M 0,0 L 3,2.5 0,5 Z" Fill="{DynamicResource TextBrushWhiteAndBlack}"/>
                                          <Popup x:Name="SubMenuPopup" Placement="Right" AllowsTransparency="true" Focusable="false"
                                                 IsOpen="{TemplateBinding MenuItem.IsSubmenuOpen}">
                                            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                              <Border Name="SubmenuBorder" Background="Transparent" BorderBrush="{DynamicResource ContextMenuBorder}"
                                                      BorderThickness="1" SnapsToDevicePixels="true">
                                                <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                              </Border>
                                            </ScrollViewer>
                                          </Popup>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                          <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                            <Setter TargetName="_imgicon" Property="UIElement.Visibility" Value="Hidden"/>
                                            <Setter TargetName="tb" Property="FrameworkElement.Margin" Value="10 0 0 0"/>
                                          </Trigger>
                                          <Trigger Property="ItemsControl.HasItems" Value="true">
                                            <Setter TargetName="_path" Property="UIElement.Visibility" Value="Visible"/>
                                          </Trigger>
                                          <Trigger Property="UIElement.IsMouseOver" Value="true">
                                            <Setter TargetName="bd" Value="{DynamicResource PagesEditorInsertPageBackground}"
                                                    Property="Control.Background"/>
                                          </Trigger>
                                        </ControlTemplate.Triggers>
                                      </ControlTemplate>
                                    </Setter.Value>
                                  </Setter>
                                </Style>
                                <Style x:Key="menuSeparator" TargetType="{x:Type Separator}">
                                  <Setter Property="FrameworkElement.Margin" Value="3,0"/>
                                  <Setter Property="Control.Template">
                                    <Setter.Value>
                                      <ControlTemplate TargetType="{x:Type Separator}">
                                        <Border Height="1" BorderThickness="1" BorderBrush="{DynamicResource MainViewPageRangeDropBtn}"/>
                                      </ControlTemplate>
                                    </Setter.Value>
                                  </Setter>
                                </Style>
                              </FrameworkElement.Resources>
                              <Image Source="{DynamicResource PageEditorInsertImage}"/>
                              <FrameworkElement.ContextMenu>
                                <ContextMenu x:Name="InsertButtonContextMenu" Background="{DynamicResource SolidBrushWhiteAndBlack}"
                                             Placement="MousePoint" PlacementTarget="{Binding Path=.}">
                                  <MenuItem Header="{x:Static localprop:Resources.MenuPageSubInsertBlankPage}" IsCheckable="false"
                                            Icon="{DynamicResource MainViewSideBarInsertBlankPageImage}" Style="{StaticResource menu2}"
                                            Margin="-1 0 0 0" Command="{Binding Tag.PageEditors.PageEditorInsertBlankCmd}"
                                            CommandParameter="{Binding DataContext}"/>
                                  <MenuItem Header="{x:Static localprop:Resources.MenuPageSubInsertFromPDF}" IsCheckable="false"
                                            Icon="{DynamicResource MainViewSideBarInsertFormPDFPageImage}" Style="{StaticResource menu2}"
                                            Margin="-1 0 0 0" Command="{Binding Tag.PageEditors.PageEditorInsertFromPDFCmd}"
                                            CommandParameter="{Binding DataContext}"/>
                                  <MenuItem Header="{x:Static localprop:Resources.MenuPageSubInsertFromWord}" IsCheckable="false"
                                            Icon="/Style/Resources/PageEditor/FromWord.png" Style="{StaticResource menu2}" Margin="-1 0 0 0"
                                            Command="{Binding Tag.PageEditors.PageEditorInsertFromWordCmd}"
                                            CommandParameter="{Binding DataContext}"/>
                                  <MenuItem Header="{x:Static localprop:Resources.MenuPageSubInsertFromImage}" IsCheckable="false"
                                            Icon="/Style/Resources/PageEditor/FromImage.png" Style="{StaticResource menu2}" Margin="-1 0 0 0"
                                            Command="{Binding Tag.PageEditors.PageEditorInsertFromImageCmd}"
                                            CommandParameter="{Binding DataContext}"/>
                                </ContextMenu>
                              </FrameworkElement.ContextMenu>
                              <FrameworkElement.Triggers>
                                <EventTrigger RoutedEvent="Button.Click">
                                  <EventTrigger.Actions>
                                    <BeginStoryboard>
                                      <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="InsertButtonContextMenu" Storyboard.TargetProperty="IsOpen" Duration="0">
                                          <DiscreteBooleanKeyFrame KeyTime="0" Value="true"/>
                                        </BooleanAnimationUsingKeyFrames>
                                      </Storyboard>
                                    </BeginStoryboard>
                                  </EventTrigger.Actions>
                                </EventTrigger>
                              </FrameworkElement.Triggers>
                            </Button>
                          </StackPanel>
                        </Border>
                      </Border>
                    </Canvas>
                  </Grid>
                </Border>
                <DataTemplate.Triggers>
                  <DataTrigger Value="True"
                               Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewListViewItem}}}">
                    <Setter TargetName="PageIndexText" Property="TextElement.FontWeight" Value="Bold"/>
                  </DataTrigger>
                  <DataTrigger Value="True"
                               Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type control:PdfPagePreviewListViewItem}}}">
                    <Setter TargetName="HoverCommandLayout" Property="UIElement.Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Value="True" Binding="{Binding Path=ContextMenu.IsOpen, ElementName=InsertButton}">
                    <Setter TargetName="HoverCommandLayout" Property="UIElement.Visibility" Value="Visible"/>
                  </DataTrigger>
                  <DataTrigger Value="True" Binding="{Binding ElementName=PreviewImage, Path=IsImageLoaded}">
                    <Setter TargetName="PreviewImageBorder" Property="Border.Background" Value="Transparent"/>
                  </DataTrigger>
                </DataTemplate.Triggers>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </control:PdfPagePreviewGridView>
        </Grid>
      </Grid>
      <Grid x:Name="PagesEditorFooterContainer" Row="3" Visibility="Collapsed">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid HorizontalAlignment="Left" MinWidth="80" Margin="8,0" Width="Auto" Visibility="Collapsed">
          <Button Click="PagesEditorCheckboxButton_Click" x:Name="PagesEditorCheckboxButton"
                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="0"/>
          <CheckBox Content="{x:Static localprop:Resources.ChkboxPageSelectedAllContent}" VerticalAlignment="Center"
                    Margin="4,0" IsHitTestVisible="false" Focusable="false" IsThreeState="true" FontSize="12"
                    IsChecked="{Binding PageEditors.PageEditListItemSource.AllItemSelected}"/>
        </Grid>
        <Grid Column="1" Margin="12,0,0,1">
          <TextBlock VerticalAlignment="Center" FontSize="12" Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                     Visibility="{Binding PageEditors.PageEditListItemSource.SelectedItems.Count, Mode=OneWay, Converter={StaticResource SelectedCountVisibilityConverter}}">
            <Run Text="{x:Static localprop:Resources.PageSelectedAllPrefiexedContent}"/>
            <Run Text=" "/>
            <Run Text="{Binding PageEditors.PageEditListItemSource.SelectedItems.Count, Mode=OneWay}"/>
            <Run Text=" / "/>
            <Run Text="{Binding PageEditors.PageEditListItemSource.Count, Mode=OneWay}"/>
          </TextBlock>
        </Grid>
        <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Stretch"
                    Margin="0,0,80,0">
          <RepeatButton Background="Transparent" Grid.Column="1" Style="{StaticResource BtnInfoStyle}" BorderThickness="0"
                        Padding="4" Margin="0,0,12,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                        FontFamily="Segoe MDL2 Assets" FontSize="16" Content=""
                        hotkeys:HotKeyExtensions.InvokeWhen="Editor_ZoomOut,Editor_ZoomOut2"
                        hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding PageEditors.PageEditorZoomOutCmd}"/>
          <Slider x:Name="PagesEditorThumbnailScaleSlider" TickFrequency="0.1" SmallChange="0.1" LargeChange="0.2"
                  Width="120" HorizontalAlignment="Right" VerticalAlignment="Center"
                  Minimum="{Binding PageEditors.PageEditorMinThumbnailScale}"
                  Maximum="{Binding PageEditors.PageEditorMaxThumbnailScale}"
                  Value="{Binding PageEditors.PageEditerThumbnailScale, Mode=TwoWay}"/>
          <RepeatButton Background="Transparent" Grid.Column="3" Style="{StaticResource BtnInfoStyle}" BorderThickness="0"
                        Padding="4" Margin="12,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                        FontFamily="Segoe MDL2 Assets" FontSize="16" Content=""
                        hotkeys:HotKeyExtensions.InvokeWhen="Editor_ZoomIn,Editor_ZoomIn2"
                        hotkeys:HotKeyExtensions.InvokeAction="None" Command="{Binding PageEditors.PageEditorZoomInCmd}"/>
        </StackPanel>
      </Grid>
    </Grid>
  </Grid>
</Window>