<UserControl x:Class="pdfeditor.Controls.Screenshots.FontSizeControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:local="clr-namespace:pdfeditor.Controls.Screenshots"
             xmlns:converters="clr-namespace:pdfeditor.Utils.Converters"
             x:Name="_this" Height="32" Width="80">
  <FrameworkElement.Resources>
    <SolidColorBrush x:Key="PrimaryColor">#EF5B52</SolidColorBrush>
    <SolidColorBrush x:Key="PrimaryColor.MouseOver">#F56D5B</SolidColorBrush>
    <SolidColorBrush x:Key="PrimaryColor.Pressed">#E84948</SolidColorBrush>
    <SolidColorBrush x:Key="CheckBox.Background">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Background">#F5F5F5</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Background.MouseOver">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Background.Pressed">#D6D7DC</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Add.Background">#FAFAFA</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Add.Background.MouseOver">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Add.Background.Pressed">#D6D7DC</SolidColorBrush>
    <SolidColorBrush x:Key="IconButton.Background">transparent</SolidColorBrush>
    <SolidColorBrush x:Key="IconButton.Background.MouseOver">#DEE2E5</SolidColorBrush>
    <SolidColorBrush x:Key="IconButton.Background.Pressed">#D6D7DC</SolidColorBrush>
    <SolidColorBrush x:Key="IconButton.Background.Checked">#D6D7DC</SolidColorBrush>
    <SolidColorBrush x:Key="Window.Background.Default">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Window.Adorner.Background" Color="Black" Opacity="0.1"/>
    <SolidColorBrush x:Key="Window.Content.Background.Default">#FAFAFA</SolidColorBrush>
    <SolidColorBrush x:Key="TextBox.Background.Default">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="TextBox.Background.MouseOver">#F5F5F5</SolidColorBrush>
    <SolidColorBrush x:Key="Content.Background.Default">#F5F5F5</SolidColorBrush>
    <SolidColorBrush x:Key="Slider.Background.Default">#E8ECF1</SolidColorBrush>
    <SolidColorBrush x:Key="Text.Foreground.Default">#000000</SolidColorBrush>
    <SolidColorBrush x:Key="Text.Foreground.Hint" Color="#000000" Opacity="0.5"/>
    <SolidColorBrush x:Key="Text.Foreground.PrimaryColor">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Text.Foreground.Button">#000000</SolidColorBrush>
    <SolidColorBrush x:Key="BorderBrush.Default">#D6D7DC</SolidColorBrush>
    <SolidColorBrush x:Key="IconBrush.Default">#333333</SolidColorBrush>
    <SolidColorBrush x:Key="Popup.Background.Default">#F3F4F7</SolidColorBrush>
    <SolidColorBrush x:Key="Dropdown.Background.Default">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Dropdown.Item.Background.Default">transparent</SolidColorBrush>
    <SolidColorBrush x:Key="Dropdown.Item.Background.MouseOver">#FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Dropdown.Item.Background.IsSelected">#EF5B52</SolidColorBrush>
    <SolidColorBrush x:Key="Dropdown.Item.Foreground.IsSelected">#FFFFFF</SolidColorBrush>
    <converters:AndMultiBooleanConverter x:Key="AndMultiBooleanConverter"/>
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:InverseVisibilityConverter x:Key="InverseVisibilityConverter"/>
    <converters:TwoValuesIsEqualConverter x:Key="TwoValuesIsEqualConverter"/>
    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
    <Style x:Key="style_dropDown_item" TargetType="{x:Type local:KSSelectableButton}">
      <Setter Property="Control.Background" Value="{DynamicResource Dropdown.Item.Background.Default}"/>
      <Setter Property="Control.Foreground" Value="{DynamicResource Text.Foreground.Default}"/>
      <Setter Property="Control.FontSize" Value="12"/>
      <Setter Property="local:KSButton.CornerRadius" Value="0"/>
      <Setter Property="FrameworkElement.Height" Value="22"/>
      <Setter Property="Control.Padding" Value="10,0,0,0"/>
      <Setter Property="FrameworkElement.Margin" Value="2,1"/>
      <Setter Property="Control.FontWeight" Value="Normal"/>
      <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
      <Style.Triggers>
        <Trigger Property="UIElement.IsMouseOver" Value="true">
          <Setter Property="Control.Background" Value="{DynamicResource IconButton.Background.MouseOver}"/>
        </Trigger>
        <Trigger Property="local:KSSelectableButton.IsSelected" Value="true">
          <Setter Property="Control.Background" Value="{DynamicResource Dropdown.Item.Background.IsSelected}"/>
          <Setter Property="Control.Foreground" Value="{DynamicResource Dropdown.Item.Foreground.IsSelected}"/>
        </Trigger>
      </Style.Triggers>
    </Style>
    <Style x:Key="style_dropDown" TargetType="{x:Type local:KSPopupButton}">
      <Setter Property="local:KSPopupButton.PopupOpenMode" Value="OpenOnClick"/>
      <Setter Property="local:KSPopupButton.PopupVerticalOffset" Value="1"/>
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
      <Setter Property="UIElement.Focusable" Value="false"/>
      <Setter Property="Button.IsDefault" Value="false"/>
      <Setter Property="Control.IsTabStop" Value="false"/>
      <Setter Property="local:KSPopupButton.CornerRadius" Value="0"/>
      <Setter Property="FrameworkElement.Height" Value="22"/>
      <Setter Property="Control.Background" Value="{DynamicResource CheckBox.Background}"/>
      <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderBrush.Default}"/>
      <Setter Property="Control.Foreground" Value="{DynamicResource Text.Foreground.Button}"/>
      <Setter Property="local:KSPopupButton.PopupHorizontalOffset" Value="-2"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type local:KSPopupButton}">
            <FrameworkTemplate.Resources>
              <StreamGeometry x:Key="geometry_arrow_down">
                F1 M 5.80466,6.74731L 0,0.942627L 0.942627,0L 5.80466,4.86194L 10.6667,0L 11.6093,0.942627L 5.80466,6.74731 Z
              </StreamGeometry>
            </FrameworkTemplate.Resources>
            <Grid Background="Transparent">
              <Border x:Name="bd_content" Background="Transparent">
                <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                        Background="{TemplateBinding Control.Background}" BorderThickness="1"
                        CornerRadius="{TemplateBinding local:KSPopupButton.CornerRadius}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Content="{TemplateBinding ContentControl.Content}" Margin="8,0,8,0"/>
                    <local:KSIcon x:Name="icon" Grid.Column="1" IsHitTestVisible="false" Background="Transparent" Width="22"
                                  Padding="6" RenderTransformOrigin="0.5,0.5" IconGeometry="{StaticResource geometry_arrow_down}"
                                  IconBrush="{DynamicResource IconBrush.Default}"/>
                  </Grid>
                </Border>
              </Border>
              <Popup x:Name="my_popup"
                     PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                     StaysOpen="true" AllowsTransparency="true" PlacementTarget="{Binding ElementName=bd_content}"
                     Placement="{Binding PopupPlacement, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                     HorizontalOffset="{Binding PopupHorizontalOffset, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                     VerticalOffset="{Binding PopupVerticalOffset, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Grid Background="Transparent">
                  <Border Background="{DynamicResource Dropdown.Background.Default}" CornerRadius="0" BorderThickness="2"
                          Margin="2">
                    <UIElement.Effect>
                      <DropShadowEffect Color="Gray" ShadowDepth="1" BlurRadius="4" Opacity="1"/>
                    </UIElement.Effect>
                  </Border>
                  <Grid Margin="4">
                    <ContentPresenter Content="{TemplateBinding local:KSPopupButton.PopupContent}"
                                      MinWidth="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=ActualWidth}"/>
                  </Grid>
                </Grid>
              </Popup>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger SourceName="my_popup" Property="Popup.IsOpen" Value="true">
                <Setter TargetName="icon" Property="UIElement.RenderTransform">
                  <Setter.Value>
                    <RotateTransform Angle="180"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <Trigger Property="UIElement.IsMouseOver" Value="true">
          <Setter Property="Control.Background" Value="{DynamicResource Button.Background.MouseOver}"/>
          <Setter Property="Control.BorderBrush" Value="{DynamicResource PrimaryColor}"/>
        </Trigger>
        <Trigger Property="UIElement.IsEnabled" Value="false">
          <Setter Property="Control.Background" Value="Transparent"/>
          <Setter Property="UIElement.Opacity" Value="0.4"/>
        </Trigger>
      </Style.Triggers>
    </Style>
  </FrameworkElement.Resources>
  <local:KSPopupButton x:Name="popupBtn_fontSize" Style="{StaticResource style_dropDown}" PopupPlacement="Bottom"
                       HorizontalAlignment="Stretch" IsEnabled="{Binding ElementName=_this, Path=IsEnabled}">
    <Grid>
      <CheckBox x:Name="ck_isShoAuto" Visibility="Collapsed">
        <ToggleButton.IsChecked>
          <MultiBinding Converter="{StaticResource AndMultiBooleanConverter}">
            <Binding ElementName="_this" Path="IsShowAuto"/>
            <Binding ElementName="_this" Path="IsAuto"/>
          </MultiBinding>
        </ToggleButton.IsChecked>
      </CheckBox>
      <TextBlock x:Name="txt_auto" TextTrimming="WordEllipsis" Foreground="{DynamicResource Text.Foreground.Button}"
                 VerticalAlignment="Center"
                 Visibility="{Binding ElementName=ck_isShoAuto, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
        <Run Text="Auto"/>
      </TextBlock>
      <TextBlock TextTrimming="WordEllipsis" Foreground="{DynamicResource Text.Foreground.Button}"
                 VerticalAlignment="Center"
                 Visibility="{Binding ElementName=txt_auto, Path=Visibility, Converter={StaticResource InverseVisibilityConverter}}">
        <Run Text="{Binding ElementName=_this, Path=SelectedFontSize}"/>
        <Run Text="{Binding ElementName=_this, Path=FontSizeUnit}"/>
      </TextBlock>
    </Grid>
    <local:KSPopupButton.PopupContent>
      <Grid Background="Transparent" Height="200">
        <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto"
                      FocusVisualStyle="{x:Null}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="auto"/>
              <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <local:KSSelectableButton x:Name="btn_auto" Click="btn_auto_Click" Loaded="btn_auto_Loaded"
                                      Style="{StaticResource style_dropDown_item}"
                                      Visibility="{Binding ElementName=_this, Path=IsShowAuto, Converter={StaticResource BooleanToVisibilityConverter}}">
              <TextBlock>Auto</TextBlock>
            </local:KSSelectableButton>
            <ItemsControl x:Name="listbox_fontSize" Grid.Row="1" ItemsSource="{Binding ElementName=_this, Path=FontSizeList}">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Grid>
                    <CheckBox x:Name="ck_isSelectedFontSize" Visibility="Collapsed">
                      <ToggleButton.IsChecked>
                        <MultiBinding Mode="OneWay" Converter="{StaticResource TwoValuesIsEqualConverter}">
                          <Binding/>
                          <Binding ElementName="_this" Path="SelectedFontSize"/>
                        </MultiBinding>
                      </ToggleButton.IsChecked>
                    </CheckBox>
                    <local:KSSelectableButton x:Name="btn_fontSize_item" Loaded="btn_fontSize_item_Loaded" Click="btn_fontSize_item_Click"
                                              Style="{StaticResource style_dropDown_item}">
                      <TextBlock>
                        <Run Text="{Binding ., Mode=OneWay}"/>
                        <Run Text="{Binding ElementName=_this, Path=FontSizeUnit}"/>
                      </TextBlock>
                      <local:KSSelectableButton.IsSelected>
                        <MultiBinding Mode="OneWay" Converter="{StaticResource AndMultiBooleanConverter}">
                          <Binding ElementName="ck_isSelectedFontSize" Path="IsChecked"/>
                          <Binding ElementName="_this" Path="IsAuto" Converter="{StaticResource InverseBooleanConverter}"/>
                        </MultiBinding>
                      </local:KSSelectableButton.IsSelected>
                    </local:KSSelectableButton>
                  </Grid>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </Grid>
        </ScrollViewer>
      </Grid>
    </local:KSPopupButton.PopupContent>
  </local:KSPopupButton>
</UserControl>