<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:pdfeditor.Controls.Menus"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <SolidColorBrush x:Key="ToolbarButton.Static.Foreground" Color="#3F3F3F"/>
  <SolidColorBrush x:Key="ToolbarButton.Defaulted.Border" Color="#45FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Static.Background" Color="Transparent"/>
  <SolidColorBrush x:Key="ToolbarButton.Static.Border" Color="Transparent"/>
  <SolidColorBrush x:Key="ToolbarButton.MouseOver.Background" Color="#12FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.MouseOver.Border" Color="#12FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Pressed.Background" Color="#1DFF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Pressed.Border" Color="#1DFF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Checked.Background" Color="#15FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Checked.Border" Color="#45FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Checked.MouseOver.Background" Color="#1DFF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Checked.MouseOver.Border" Color="#45FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Checked.Pressed.Background" Color="#2EFF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Checked.Pressed.Border" Color="#45FF0000"/>
  <SolidColorBrush x:Key="ToolbarButton.Disabled.Background" Color="#FFF4F4F4"/>
  <SolidColorBrush x:Key="ToolbarButton.Disabled.Border" Color="#FFADB2B5"/>
  <SolidColorBrush x:Key="ToolbarButton.Disabled.Foreground" Color="#FF838383"/>
  <sys:Double x:Key="ToolbarButton.MinWidth">56</sys:Double>
  <sys:Double x:Key="ToolbarButton.MaxWidth">120</sys:Double>
  <SolidColorBrush x:Key="ToolbarChildButton.DropDownIcon.Fill" Color="#3F3F3F"/>
  <SolidColorBrush x:Key="ToolbarChildButton.Static.Border" Color="#25000000"/>
  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="0" RadiusX="2" RadiusY="2" SnapsToDevicePixels="true"
                     Stroke="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" StrokeThickness="1"
                     Opacity="0.4"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolbarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{StaticResource ToolbarButton.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource ToolbarButton.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource ToolbarButton.Static.Foreground}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="4,1"/>
    <Setter Property="FrameworkElement.MinWidth" Value="{StaticResource ToolbarButton.MinWidth}"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="{StaticResource ToolbarButton.MaxWidth}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="local:ToolbarButtonHelper.HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <Image x:Name="root" SnapsToDevicePixels="false" Stretch="Uniform" MaxWidth="24" MaxHeight="24"
                 RenderOptions.BitmapScalingMode="HighQuality" Source="{Binding}"/>
          <DataTemplate.Triggers>
            <DataTrigger Value="{x:Static Orientation.Horizontal}"
                         Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ButtonBase}}, Path=Orientation}">
              <Setter TargetName="root" Property="FrameworkElement.MaxWidth" Value="16"/>
              <Setter TargetName="root" Property="FrameworkElement.MaxHeight" Value="16"/>
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid SnapsToDevicePixels="true">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ContentStates">
                <VisualState x:Name="ContentIsElement"/>
                <VisualState x:Name="ContentIsText">
                  <Storyboard>
                    <ThicknessAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Margin" Duration="0"
                                        To="0,2,0,6"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisplayStates">
                <VisualState x:Name="Vertical"/>
                <VisualState x:Name="Horizontal">
                  <Storyboard>
                    <Int32Animation Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="(Grid.ColumnSpan)" Duration="0"
                                    To="1"/>
                    <Int32Animation Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="(Grid.RowSpan)" Duration="0"
                                    To="2"/>
                    <Int32Animation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(Grid.ColumnSpan)" Duration="0"
                                    To="1"/>
                    <Int32Animation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(Grid.RowSpan)" Duration="0"
                                    To="2"/>
                    <Int32Animation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(Grid.Row)" Duration="0" To="0"/>
                    <Int32Animation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="(Grid.Column)" Duration="0"
                                    To="1"/>
                    <ThicknessAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Margin" Duration="0" To="0"/>
                    <ThicknessAnimation Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="Margin" Duration="0" To="4"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="NoIcon">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                    <ThicknessAnimation Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Margin" Duration="0" To="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="NoContent">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                    <ThicknessAnimation Storyboard.TargetName="HeaderPresenter" Storyboard.TargetProperty="Margin" Duration="0" To="0"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="FocusBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="2"
                       RadiusY="2" SnapsToDevicePixels="true"
                       Stroke="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" StrokeThickness="1"
                       Opacity="0.4"/>
            <Border x:Name="border" CornerRadius="2" TextBlock.Foreground="{DynamicResource TextBrushWhiteAndBlack}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <Grid x:Name="ContentLayout" Margin="{TemplateBinding Control.Padding}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <ContentPresenter x:Name="HeaderPresenter" Margin="4,6,4,4" SnapsToDevicePixels="true" HorizontalAlignment="Center"
                                  VerticalAlignment="Center" Grid.ColumnSpan="2" Focusable="false"
                                  Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Header}"
                                  ContentTemplate="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=HeaderTemplate}"/>
                <ContentPresenter x:Name="contentPresenter" Grid.ColumnSpan="2" Grid.Row="1" Margin="0,0,0,4"
                                  RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Center" Focusable="false"/>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter Value="{StaticResource ToolbarButton.Defaulted.Border}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonMouseOverBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonMouseOverBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonPressedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonPressedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonCheckedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="local:ToolbarButtonHelper.IsKeyboardFocusedInternal" Value="false">
              <Setter TargetName="FocusBorder" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedMouseOverBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedMouseOverBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedPressedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedPressedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="local:ToolbarButtonHelper.IsMouseOverInternal" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{StaticResource ToolbarButton.Static.Background}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{StaticResource ToolbarButton.Static.Border}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="local:ToolbarButtonHelper.IsMouseOverInternal" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{StaticResource ToolbarButton.Static.Background}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{StaticResource ToolbarButton.Static.Border}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="local:ToolbarButtonHelper.IsMouseOverInternal" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="local:ToolbarButtonHelper.IsMouseOverInternal" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.6"/>
              <Setter Value="{StaticResource ToolbarButton.Disabled.Foreground}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:ToolbarButton}" BasedOn="{StaticResource ToolbarButtonBaseStyle}"/>
  <Style TargetType="{x:Type local:ToolbarToggleButton}" BasedOn="{StaticResource ToolbarButtonBaseStyle}"/>
  <Style TargetType="{x:Type local:ToolbarRadioButton}" BasedOn="{StaticResource ToolbarButtonBaseStyle}"/>
  <Style x:Key="ToolbarChildButtonBaseStyle" TargetType="{x:Type ButtonBase}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{StaticResource ToolbarButton.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource ToolbarButton.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource ToolbarButton.Static.Foreground}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="4,1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid SnapsToDevicePixels="true">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DropIconVisibilityStates">
                <VisualState x:Name="DropIconVisible"/>
                <VisualState x:Name="DropIconNotVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DropDownIcon" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="FocusBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="2"
                       RadiusY="2" SnapsToDevicePixels="true"
                       Stroke="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" StrokeThickness="1"
                       Opacity="0.4"/>
            <Border x:Name="border" CornerRadius="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <Grid>
                <Grid Margin="{TemplateBinding Control.Padding}"
                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Focusable="false"/>
                  <Path x:Name="DropDownIcon" Margin="4,1,0,0" Grid.Column="1" Data="M 3.6,0 L 0,0 3.6,4 7.2,0 Z"
                        Fill="{DynamicResource MainViewDropPath}" VerticalAlignment="Center"/>
                </Grid>
                <Rectangle x:Name="IndicatorBackground" Margin="-1,-1,-1,-1" Opacity="0.04" Grid.ColumnSpan="2"
                           HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="2" RadiusY="2"
                           Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IndicatorBrush}"/>
                <Rectangle x:Name="Indicator" Margin="-1,0,-1,-1" Opacity="0.5" Grid.ColumnSpan="2"
                           HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="4" RadiusX="2" RadiusY="2"
                           Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IndicatorBrush}"/>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter Value="{StaticResource ToolbarButton.Defaulted.Border}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonFocusBorderMouseOver}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonMouseOverBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonPressedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonPressedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonCheckedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Property="local:ToolbarButtonHelper.IsKeyboardFocusedInternal" Value="false">
              <Setter TargetName="FocusBorder" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedMouseOverBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedMouseOverBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedPressedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedPressedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.8"/>
              <Setter Value="{StaticResource ToolbarButton.Disabled.Foreground}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.FontSize" Value="12"/>
  </Style>
  <Style x:Key="ToolbarChildButtonBaseStyle2" TargetType="{x:Type ButtonBase}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="{StaticResource ToolbarButton.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource ToolbarButton.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{StaticResource ToolbarButton.Static.Foreground}"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid SnapsToDevicePixels="true">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DropIconVisibilityStates">
                <VisualState x:Name="DropIconVisible"/>
                <VisualState x:Name="DropIconNotVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DropDownIcon" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="FocusBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="2"
                       RadiusY="2" SnapsToDevicePixels="true"
                       Stroke="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}" StrokeThickness="1"
                       Opacity="0.4"/>
            <Border x:Name="border" CornerRadius="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <Grid>
                <Grid Margin="0" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Focusable="false"/>
                  <Viewbox x:Name="DropDownIcon" Grid.Column="1">
                    <Grid>
                      <Path Margin="0 0 0 3"
                            Data="M 9.80707,4.64645 C 9.61181,4.45118 9.29522,4.45118 9.09996,4.64645 L 7.09996,6.64645 C 6.9047,6.84171 6.9047,7.15829 7.09996,7.35355 7.29522,7.54882 7.61181,7.54882 7.80707,7.35355 L 8.95352,6.20711 8.95352,13 C 8.95352,13.2761 9.17737,13.5 9.45352,13.5 9.72966,13.5 9.95352,13.2761 9.95352,13 L 9.95352,6.20711 11.1,7.35355 C 11.2952,7.54882 11.6118,7.54882 11.8071,7.35355 12.0023,7.15829 12.0023,6.84171 11.8071,6.64645 L 9.80707,4.64645 M 5.45352,8.9 C 4.56986,8.9 3.85352,9.61634 3.85352,10.5 L 3.85352,18 C 3.85352,18.8837 4.56986,19.6 5.45352,19.6 L 13.4535,19.6 C 14.3372,19.6 15.0535,18.8837 15.0535,18 L 15.0535,10.5 C 15.0535,9.61634 14.3372,8.9 13.4535,8.9 L 11.4535,8.9 C 11.1221,8.9 10.8535,9.16863 10.8535,9.5 10.8535,9.83137 11.1221,10.1 11.4535,10.1 L 13.4535,10.1 C 13.6744,10.1 13.8535,10.2791 13.8535,10.5 L 13.8535,18 C 13.8535,18.2209 13.6744,18.4 13.4535,18.4 L 5.45352,18.4 C 5.2326,18.4 5.05352,18.2209 5.05352,18 L 5.05352,10.5 C 5.05352,10.2791 5.2326,10.1 5.45352,10.1 L 7.45352,10.1 C 7.78489,10.1 8.05352,9.83137 8.05352,9.5 8.05352,9.16863 7.78489,8.9 7.45352,8.9 L 5.45352,8.9 Z"
                            Fill="{DynamicResource TextBrushWhiteAndBlack}" VerticalAlignment="Center"
                            HorizontalAlignment="Left"/>
                      <Path Margin="0 0 0 3" Data="M 23,11 L 18,11 20.5,13.5 23,11 Z"
                            Fill="{DynamicResource TextBrushWhiteAndBlack}"/>
                    </Grid>
                  </Viewbox>
                </Grid>
                <Rectangle x:Name="IndicatorBackground" Margin="-1,-1,-1,-1" Opacity="0.04" Grid.ColumnSpan="2"
                           HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="2" RadiusY="2"
                           Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IndicatorBrush}"/>
                <Rectangle x:Name="Indicator" Margin="-1,0,-1,-1" Opacity="0.5" Grid.ColumnSpan="2"
                           HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="4" RadiusX="2" RadiusY="2"
                           Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IndicatorBrush}"/>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter Value="{StaticResource ToolbarButton.Defaulted.Border}" TargetName="border"
                      Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonMouseOverBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonMouseOverBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonPressedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonPressedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter Value="{DynamicResource ToolbarButtonCheckedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Property="local:ToolbarButtonHelper.IsKeyboardFocusedInternal" Value="false">
              <Setter TargetName="FocusBorder" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedMouseOverBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedMouseOverBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                <Condition Property="ButtonBase.IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource ToolbarButtonCheckedPressedBackground}" TargetName="border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource ToolbarButtonCheckedPressedBorder}" TargetName="border"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="Indicator" Property="UIElement.Opacity" Value="0.6"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.8"/>
              <Setter Value="{StaticResource ToolbarButton.Disabled.Foreground}" TargetName="contentPresenter"
                      Property="TextElement.Foreground"/>
              <Setter TargetName="IndicatorBackground" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.FontSize" Value="12"/>
  </Style>
  <Style TargetType="{x:Type local:ToolbarChildButton}"
         BasedOn="{StaticResource ToolbarChildButtonBaseStyle}"/>
  <Style TargetType="{x:Type local:ToolbarChildToggleButton}"
         BasedOn="{StaticResource ToolbarChildButtonBaseStyle}"/>
  <Style TargetType="{x:Type local:ToolShareButton}" BasedOn="{StaticResource ToolbarChildButtonBaseStyle2}"/>
  <Style TargetType="{x:Type local:ToolbarShareToggleButton}"
         BasedOn="{StaticResource ToolbarChildButtonBaseStyle2}"/>
</ResourceDictionary>