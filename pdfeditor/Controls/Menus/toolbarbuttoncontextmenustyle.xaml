<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cv="clr-namespace:pdfeditor.Utils.Converters"
                    xmlns:local="clr-namespace:pdfeditor.Controls.Menus"
                    xmlns:signaturepickers="clr-namespace:pdfeditor.Controls.Signature"
                    xmlns:stamppickers="clr-namespace:pdfeditor.Controls.Stamp"
                    xmlns:colorpickers="clr-namespace:pdfeditor.Controls.ColorPickers"
                    xmlns:hotkeys="clr-namespace:CommomLib.Commom.HotKeys;assembly=CommomLib"
                    xmlns:controls="clr-namespace:CommomLib.Controls;assembly=CommomLib">
  <cv:StringBrushConverter x:Key="StringBrushConverter"/>
  <cv:StringStrokeConverter x:Key="StringStrokeConverter"/>
  <controls:HasHotKeyConverter x:Key="HasHotKeyConverter"/>
  <controls:HotKeyNameConverter x:Key="HotKeyNameConverter"/>
  <controls:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
  <BitmapImage x:Key="ToolbarContextMenuSelectedIcon" UriSource="/Style/Resources/Annonate/linestrokeselected.png"/>
  <Style TargetType="{x:Type local:ToolbarButtonContextMenuItem}">
    <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
    <Setter Property="Control.BorderBrush" Value="#FFFFFF"/>
    <Setter Property="Control.Background" Value="#FFFFFF"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrushWhiteAndBlack}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
  </Style>
  <Style x:Key="SeparatorStyle" TargetType="{x:Type local:ToolbarButtonContextMenuItem}">
    <Setter Property="UIElement.IsEnabled" Value="false"/>
    <Setter Property="MenuItem.IsCheckable" Value="false"/>
    <Setter Property="Control.Background" Value="{DynamicResource PickerBackground}"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ToolbarButtonContextMenuItem}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Rectangle HorizontalAlignment="Stretch" Margin="4,3,4,4" Fill="#D2D2D2" Height="1"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}">
    <Setter Property="HeaderedItemsControl.Header" Value="{Binding Caption}"/>
    <Setter Property="MenuItem.Icon" Value="{Binding Icon}"/>
    <Setter Property="ItemsControl.ItemsSource" Value="{Binding}"/>
    <Setter Property="MenuItem.Command" Value="{Binding Command}"/>
    <Setter Property="MenuItem.CommandParameter" Value="{Binding}"/>
    <Setter Property="MenuItem.IsCheckable" Value="{Binding IsCheckable}"/>
    <Setter Property="MenuItem.IsChecked" Value="{Binding IsChecked, Mode=TwoWay}"/>
    <Setter Property="hotkeys:HotKeyExtensions.InvokeWhen" Value="{Binding HotKeyInvokeWhen}"/>
    <Setter Property="hotkeys:HotKeyExtensions.InvokeAction" Value="{Binding HotKeyInvokeAction}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="CheckIconColumn" Width="0"/>
              <ColumnDefinition x:Name="IconColumn" Width="30"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto" MinWidth="25"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_checkImg" Grid.Column="0" Width="12" Height="12" Stretch="Uniform"
                   Source="{StaticResource ToolbarContextMenuSelectedIcon}" Visibility="Collapsed"/>
            <Image x:Name="_imgicon" Grid.Column="1" Width="12" Height="12" Stretch="Uniform"
                   Source="{TemplateBinding MenuItem.Icon}"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="2" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid Column="3" Margin="4,0">
              <Path x:Name="_path" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Center"
                    Data="M 0,8 L 4,4 0,0 Z" Fill="#7E8A92"/>
              <TextBlock x:Name="TextBlock_Shortcut" Visibility="Collapsed" VerticalAlignment="Center" Opacity="0.5"
                         Foreground="{DynamicResource ToolBarButtonContextMenu}" HorizontalAlignment="Right"
                         TextAlignment="Left" Width="100"
                         Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
              <TextBlock x:Name="TextBlock_Shortcut2" VerticalAlignment="Center" Opacity="0.5" Width="100"
                         Foreground="{DynamicResource ToolBarButtonContextMenu}" HorizontalAlignment="Right"
                         TextAlignment="Left" Text="{Binding HotKeyString}"
                         Visibility="{Binding HotKeyString, Converter={StaticResource StringToVisibilityConverter}}"/>
            </Grid>
            <Popup x:Name="SubMenuPopup" Placement="Right" AllowsTransparency="true" Focusable="false"
                   IsOpen="{TemplateBinding MenuItem.IsSubmenuOpen}" PopupAnimation="Fade">
              <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                <Border Name="SubmenuBorder" Background="#FFFFFF" BorderBrush="LightGray" Margin="1" BorderThickness="1"
                        SnapsToDevicePixels="true">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Border>
              </ScrollViewer>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="true">
              <Setter TargetName="_path" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
              <Setter TargetName="_path" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
              <Setter TargetName="_border" Property="Border.Background" Value="#99FFF0F0"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
              <Setter TargetName="_path" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
            <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
              <Setter TargetName="IconColumn" Property="ColumnDefinition.Width" Value="0"/>
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.HasItems" Value="false"/>
                <Condition Property="MenuItem.IsCheckable" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="CheckIconColumn" Property="ColumnDefinition.Width" Value="30"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="MenuItem.IsCheckable" Value="true"/>
                <Condition Property="MenuItem.IsChecked" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_checkImg" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </MultiTrigger>
            <DataTrigger Value="true"
                         Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HasHotKeyConverter}}">
              <Setter TargetName="TextBlock_Shortcut" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="TextBlock_Shortcut2" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="_path" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColorMoreMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="MenuItem.IsCheckable" Value="false"/>
    <Setter Property="MenuItem.Command" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="CheckIconColumn" Width="0"/>
              <ColumnDefinition Width="20"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_imgicon" Grid.Column="1" Width="12" Height="12" Stretch="Uniform"
                   Source="{TemplateBinding MenuItem.Icon}"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="2" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Path x:Name="_path" Visibility="Visible" Grid.Column="3" HorizontalAlignment="Right"
                  VerticalAlignment="Center" Margin="4,0" Data="M 0,8 L 4,4 0,0 Z" Fill="#7E8A92"/>
            <Popup x:Name="SubMenuPopup" Placement="Right" AllowsTransparency="true" Focusable="false"
                   IsOpen="{TemplateBinding MenuItem.IsSubmenuOpen}" PopupAnimation="Fade">
              <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                <Border Name="SubmenuBorder" Background="#FFFFFF" BorderBrush="LightGray" Margin="1" BorderThickness="1"
                        SnapsToDevicePixels="true">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Border>
              </ScrollViewer>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
              <Setter TargetName="_path" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
              <Setter TargetName="_border" Property="Border.Background" Value="#99FFF0F0"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
              <Setter TargetName="_path" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColorPickerMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="MenuItem.IsCheckable" Value="false"/>
    <Setter Property="MenuItem.StaysOpenOnClick" Value="true"/>
    <Setter Property="MenuItem.Command" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Background="{DynamicResource PickerBackground}">
            <colorpickers:ColorPicker x:Name="ColorPicker"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SignaturePickerMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="MenuItem.IsCheckable" Value="false"/>
    <Setter Property="MenuItem.StaysOpenOnClick" Value="true"/>
    <Setter Property="MenuItem.Command" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Background="{DynamicResource PickerBackground}">
            <signaturepickers:SignaturePicker x:Name="SignaturePicker"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StampPickerMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="MenuItem.IsCheckable" Value="false"/>
    <Setter Property="MenuItem.StaysOpenOnClick" Value="true"/>
    <Setter Property="MenuItem.Command" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Background="{DynamicResource PickerBackground}">
            <stamppickers:StampPicker x:Name="StampPicker"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColorMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="CheckIconColumn" Width="30"/>
              <ColumnDefinition Width="0"/>
              <ColumnDefinition Width="0"/>
              <ColumnDefinition Width="30"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_checkImg" Grid.Column="0" Width="12" Height="12" Stretch="Uniform"
                   Source="{StaticResource ToolbarContextMenuSelectedIcon}" Visibility="Collapsed"/>
            <Image x:Name="_imgicon" Grid.Column="1" Width="12" Height="12" Stretch="Uniform"
                   Source="{TemplateBinding MenuItem.Icon}"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="2" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid Column="3" Width="16" Height="16" HorizontalAlignment="Right" VerticalAlignment="Center"
                  Margin="0,0,8,0" DataContext="{Binding TagData}">
              <Ellipse x:Name="_colorIndicator" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                       SnapsToDevicePixels="false" UseLayoutRounding="false"
                       Fill="{Binding MenuItemValue, Converter={StaticResource StringBrushConverter}}"
                       Stroke="{Binding MenuItemValue, Converter={StaticResource StringStrokeConverter}, ConverterParameter=Stroke}"/>
              <Line StrokeThickness="1" SnapsToDevicePixels="false" UseLayoutRounding="false" X1="2.8" Y1="2.8"
                    X2="13.2" Y2="12.2"
                    Stroke="{Binding MenuItemValue, Converter={StaticResource StringStrokeConverter}, ConverterParameter=Fill}"/>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="true">
              <Setter TargetName="CheckIconColumn" Property="ColumnDefinition.Width" Value="0"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
              <Setter TargetName="_border" Property="Border.Background" Value="#99FFF0F0"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="MenuItem.IsCheckable" Value="true"/>
                <Condition Property="MenuItem.IsChecked" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_checkImg" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StrokeThicknessMenuItem" TargetType="{x:Type MenuItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="CheckIconColumn" Width="30"/>
              <ColumnDefinition Width="0"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="25"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_checkImg" Grid.Column="0" Width="12" Height="12" Stretch="Uniform"
                   Source="{StaticResource ToolbarContextMenuSelectedIcon}" Visibility="Collapsed"/>
            <Image x:Name="_imgicon" Grid.Column="1" Width="12" Height="12" Stretch="Uniform"
                   Source="{TemplateBinding MenuItem.Icon}"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="2" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="true">
              <Setter TargetName="CheckIconColumn" Property="ColumnDefinition.Width" Value="0"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
              <Setter TargetName="_border" Property="Border.Background" Value="#99FFF0F0"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="MenuItem.IsCheckable" Value="true"/>
                <Condition Property="MenuItem.IsChecked" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_checkImg" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StampPresetsMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="hotkeys:HotKeyExtensions.InvokeWhen" Value="{Binding HotKeyInvokeWhen}"/>
    <Setter Property="hotkeys:HotKeyExtensions.InvokeAction" Value="{Binding HotKeyInvokeAction}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="30"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto" MinWidth="25"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_imgicon" Grid.Column="0" Width="12" Height="12" Stretch="Uniform"
                   Source="{TemplateBinding MenuItem.Icon}"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="1" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid Column="2" Margin="4,0">
              <Path x:Name="_path" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Center"
                    Data="M 0,8 L 4,4 0,0 Z" Fill="#7E8A92"/>
              <TextBlock x:Name="TextBlock_Shortcut" Visibility="Collapsed" VerticalAlignment="Center" Opacity="0.5"
                         Foreground="{DynamicResource ToolBarButtonContextMenu}" HorizontalAlignment="Right"
                         Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}}"/>
              <TextBlock x:Name="TextBlock_Shortcut2" VerticalAlignment="Center" Opacity="0.5"
                         Foreground="{DynamicResource ToolBarButtonContextMenu}" HorizontalAlignment="Right"
                         Text="{Binding HotKeyString}"
                         Visibility="{Binding HotKeyString, Converter={StaticResource StringToVisibilityConverter}}"/>
            </Grid>
            <Popup x:Name="SubMenuPopup" Placement="Right" AllowsTransparency="true" Focusable="false"
                   IsOpen="{TemplateBinding MenuItem.IsSubmenuOpen}" PopupAnimation="Fade">
              <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                <Border Name="SubmenuBorder" Background="{DynamicResource SolidBrushWhiteAndBlack}"
                        BorderBrush="{DynamicResource ContextMenuBorder}" Margin="1" BorderThickness="1"
                        SnapsToDevicePixels="true">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Border>
              </ScrollViewer>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="true">
              <Setter TargetName="_path" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
              <Setter TargetName="_border" Property="Border.Background" Value="#99FFF0F0"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </MultiTrigger>
            <DataTrigger Value="true"
                         Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HasHotKeyConverter}}">
              <Setter TargetName="TextBlock_Shortcut" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="TextBlock_Shortcut2" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="_path" Property="UIElement.Visibility" Value="Collapsed"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SpeedPresetsMenuItemModel" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource StampPresetsMenuItem}">
    <Setter Property="UIElement.IsEnabled" Value="{Binding IsEnabled}"/>
  </Style>
  <Style x:Key="ConvertMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="30"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_imgicon" Grid.Column="0" Width="12" Height="12" Stretch="Uniform"
                   Source="{TemplateBinding MenuItem.Icon}"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="1" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BackGroudMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="24" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="CheckIconColumn" Width="30"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
            <Image x:Name="_checkImg" Grid.Column="0" Width="12" Height="12" Stretch="Uniform"
                   Source="{StaticResource ToolbarContextMenuSelectedIcon}" Visibility="Collapsed"/>
            <TextBlock x:Name="_txt" Foreground="{DynamicResource ToolBarButtonContextMenu}" Grid.Column="1" Margin="4,0"
                       VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="_txt" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="TextBlock.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="_txt" Property="TextBlock.Foreground" Value="Gray"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="MenuItem.IsCheckable" Value="true"/>
                <Condition Property="MenuItem.IsChecked" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_checkImg" Property="UIElement.Visibility" Value="Visible"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PresetsMenuItem" TargetType="{x:Type local:ToolbarButtonContextMenuItem}"
         BasedOn="{StaticResource DefaultMenuItem}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Height="36" Background="{DynamicResource PickerBackground}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="_col" Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="_border" HorizontalAlignment="Stretch" Grid.Column="0" Grid.ColumnSpan="2"
                    VerticalAlignment="Stretch" Background="Transparent"/>
            <stamppickers:StampDefaultTextPreview Grid.Column="1" Width="126" Margin="3" IsHitTestVisible="false"
                                                  StampModel="{Binding TagData.MenuItemValue}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
              <Setter TargetName="_border" Value="{DynamicResource TextBrushWhiteAndBlack}" Property="Border.Background"/>
              <Setter TargetName="_border" Value="{Binding ElementName=_txt, Path=ActualWidth}"
                      Property="FrameworkElement.Width"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="_border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <local:ToolbarButtonContextMenuStyleSelector x:Key="ToolbarButtonContextMenuStyleSelector" SeparatorStyle="{StaticResource SeparatorStyle}"
                                               ColorItemStyle="{StaticResource ColorMenuItem}"
                                               StrokeThicknessItemStyle="{StaticResource StrokeThicknessMenuItem}"
                                               ConvertItemStyle="{StaticResource ConvertMenuItem}"
                                               BackgroundStyle="{StaticResource BackGroudMenuItem}"
                                               StampItemStyle="{StaticResource StampPresetsMenuItem}"
                                               StampPresetsMenuItem="{StaticResource PresetsMenuItem}"
                                               DefaultItemStyle="{StaticResource DefaultMenuItem}"
                                               ColorMoreItemStyle="{StaticResource ColorMoreMenuItem}"
                                               ColorPickerItemStyle="{StaticResource ColorPickerMenuItem}"
                                               SignaturePickerItemStyle="{StaticResource SignaturePickerMenuItem}"
                                               SpeedPresetsMenuItem="{StaticResource SpeedPresetsMenuItemModel}"
                                               StampPickerItemStyle="{StaticResource StampPickerMenuItem}"/>
  <Style TargetType="{x:Type local:ToolbarButtonContextMenu}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
    <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    <Setter Property="ContextMenu.HasDropShadow" Value="true"/>
    <Setter Property="ItemsControl.ItemContainerStyleSelector"
            Value="{StaticResource ToolbarButtonContextMenuStyleSelector}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Grid>
            <Border x:Name="Border" BorderBrush="{DynamicResource ContextMenuBorder}" BorderThickness="1"
                    Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
              <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                              Grid.IsSharedSizeScope="true" Margin="0"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              KeyboardNavigation.TabNavigation="Cycle"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>