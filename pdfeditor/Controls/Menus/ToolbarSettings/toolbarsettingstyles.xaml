<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:colorpicker="clr-namespace:pdfeditor.Controls.ColorPickers"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:utils="clr-namespace:pdfeditor.Utils"
                    xmlns:commonCtrl="clr-namespace:CommomLib.Controls;assembly=CommomLib">
  <Style x:Key="NoStyleButton" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource DialogButtonStyle}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" CornerRadius="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="true">
            <Grid>
              <Rectangle x:Name="BackgroundBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                         Fill="{DynamicResource EditTextBoldColor}" Opacity="0" SnapsToDevicePixels="false" RadiusX="2"
                         RadiusY="2"/>
              <Rectangle x:Name="BackgroundBorder2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                         Fill="{DynamicResource EditTextBoldColor}" Opacity="0" SnapsToDevicePixels="false" RadiusX="2"
                         RadiusY="2"/>
              <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true" Margin="{TemplateBinding Control.Padding}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="BackgroundBorder" Property="UIElement.Opacity" Value="0.4"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="BackgroundBorder" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="BackgroundBorder2" Property="UIElement.Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.6"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TextButtonStyle" TargetType="{x:Type ButtonBase}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" CornerRadius="2" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="true">
            <Grid>
              <Rectangle x:Name="BackgroundBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                         Fill="#FF000000" Opacity="0" SnapsToDevicePixels="false" RadiusX="2" RadiusY="2"/>
              <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true" Margin="{TemplateBinding Control.Padding}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.6"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}"
         BasedOn="{StaticResource DefaultComboBoxItemStyle}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Padding" Value="4,1"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Height" Value="28"/>
  </Style>
  <Style x:Key="ToolbarSettingComboboxStyle" TargetType="{x:Type ComboBox}"
         BasedOn="{StaticResource DefaultComboBoxStyle}">
    <Setter Property="Control.Padding" Value="6,4"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="FrameworkElement.Height" Value="24"/>
    <Setter Property="commonCtrl:UIElementExtension.CornerRadius" Value="0"/>
    <Setter Property="ItemsControl.ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource DefaultComboBoxItemStyle}">
          <Setter Property="Control.FontSize" Value="12"/>
          <Setter Property="Control.Padding" Value="6,4"/>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolbarSettingButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="5,2,5,2"
                              RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource BtnInfoMouseOverColor}" Property="Border.Background"/>
              <Setter TargetName="border" Property="Border.CornerRadius" Value="2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolbarSettingCollapsedButtonStyle" TargetType="{x:Type colorpicker:ColorPickerButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource MainViewFontSizeBorder}"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Width" Value="50"/>
    <Setter Property="FrameworkElement.Height" Value="22"/>
    <Setter Property="colorpicker:ColorPickerButton.Placement" Value="Bottom"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type colorpicker:ColorPickerButton}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="false"
                  ToolTip="{Binding Caption}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition/>
              </Grid.ColumnDefinitions>
              <Image Width="16" Height="16" Stretch="UniformToFill" Grid.Column="0" Source="{Binding Icon}"/>
              <Rectangle x:Name="Indicator" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Stretch"
                         VerticalAlignment="Stretch" Grid.Column="2"
                         Tag="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedColor}"/>
              <Viewbox x:Name="transparentLine" Stretch="Fill" Grid.Column="2" HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch" SnapsToDevicePixels="false" Visibility="Collapsed"
                       Tag="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedColor}">
                <Path Data="M 2,2 L 13.5,13.5 " Height="16" Width="16" Stroke="#99FF0000" StrokeThickness="1"
                      StrokeStartLineCap="Triangle" StrokeEndLineCap="Triangle" SnapsToDevicePixels="false"/>
              </Viewbox>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Property="Border.Background" Value="Transparent"/>
            </Trigger>
            <DataTrigger Value="0" Binding="{Binding ElementName=transparentLine, Path=Tag.A, Mode=OneWay}">
              <Setter TargetName="transparentLine" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Indicator" Property="Shape.Stroke" Value="#D2D2D2"/>
              <Setter TargetName="Indicator" Property="Shape.StrokeThickness" Value="1"/>
            </DataTrigger>
            <DataTrigger Value="White" Binding="{Binding ElementName=Indicator, Path=Tag, Mode=OneWay}">
              <Setter TargetName="Indicator" Property="Shape.Stroke" Value="#D2D2D2"/>
              <Setter TargetName="Indicator" Property="Shape.StrokeThickness" Value="1"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolbarSettingComboxIconStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
  </Style>
  <Style x:Key="ToobarDefaultValueButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource SolidBrushWhiteAndBlack}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static JetSystemColors.ControlBrushKey}}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="-5,2,5,2"
                              RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource ToolbarSettingStyleMouseOver}"
                      Property="Border.Background"/>
              <Setter TargetName="border" Property="Border.CornerRadius" Value="2"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="border" Value="{DynamicResource ToolbarSettingStylePresss}"
                      Property="Border.Background"/>
              <Setter TargetName="border" Property="Border.CornerRadius" Value="2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolbarSettingTextBoxStyle" TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource DefaultTextBoxStyle}">
    <Setter Property="Control.BorderThickness" Value="0"/>
  </Style>
  <Style x:Key="ToolbarSettingRoundButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static JetSystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="16,2"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Rectangle x:Name="background" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                       Fill="{TemplateBinding Control.Background}" RadiusX="12" RadiusY="12"/>
            <Rectangle x:Name="background2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="#000000"
                       Opacity="0" RadiusX="12" RadiusY="12"/>
            <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="12"
                    SnapsToDevicePixels="true">
              <ContentPresenter x:Name="contentPresenter" Focusable="false"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="background2" Property="UIElement.Opacity" Value="0.04"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="background2" Property="UIElement.Opacity" Value="0.08"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>