<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CommomLib.Controls"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:appTheme="clr-namespace:CommomLib.AppTheme"
                    xmlns:hotkeys="clr-namespace:CommomLib.Commom.HotKeys">
  <ResourceDictionary.MergedDictionaries>
    <appTheme:ThemeResourceDictionary FollowMainThemeResourceTheme="true">
      <appTheme:ThemeResourceDictionary.ThemeResources>
        <ResourceDictionary x:Key="Light">
          <SolidColorBrush x:Key="DefaultFocusBorder" Color="#66000000"/>
          <SolidColorBrush x:Key="TextBox.Default.Static.Foreground" Color="#FF000000"/>
          <SolidColorBrush x:Key="TextBox.Default.Static.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="TextBox.Default.Static.Border" Color="#FFD2D2D2"/>
          <SolidColorBrush x:Key="TextBox.Default.MouseOver.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="TextBox.Default.MouseOver.Border" Color="#FFC9C9C9"/>
          <SolidColorBrush x:Key="TextBox.Default.Focus.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="TextBox.Default.Focus.Border" Color="#FFBBBBBB"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Border" Color="#FFD2D2D2"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Glyph" Color="#FFD2D2D2"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Background" Color="#FFEFEFEF"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Border" Color="#FFCCCCCC"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Glyph" Color="#FFCCCCCC"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Background" Color="#FFDFDFDF"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Border" Color="#FFBBBBBB"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Glyph" Color="#FFBBBBBB"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Background" Color="#FFF0F0F0"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Border" Color="#FFD9D9D9"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Glyph" Color="#FFBBBBBB"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Border" Color="#FFD2D2D2"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Background" Color="#FFEFEFEF"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Border" Color="#FFCCCCCC"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Background" Color="#FFDFDFDF"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Border" Color="#FFBBBBBB"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Background" Color="#FFF0F0F0"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Border" Color="#FFD9D9D9"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHover.Background" Color="#1A000000"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHover.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelected.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelected.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedHover.Background" Color="#1A000000"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedHover.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedNoFocus.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedNoFocus.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewFocus.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHoverFocus.Background" Color="#1A000000"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHoverFocus.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="OptionMark.Default.Static.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="OptionMark.Default.Static.Border" Color="#FFd2d2d2"/>
          <SolidColorBrush x:Key="OptionMark.Default.Static.Glyph" Color="#FF4F5A69"/>
          <SolidColorBrush x:Key="OptionMark.Default.MouseOver.Background" Color="#FFF9F9F9"/>
          <SolidColorBrush x:Key="OptionMark.Default.MouseOver.Border" Color="#FFDDDDDD"/>
          <SolidColorBrush x:Key="OptionMark.Default.MouseOver.Glyph" Color="#FF4F5A69"/>
          <SolidColorBrush x:Key="OptionMark.Default.Pressed.Background" Color="#FFEFEFEF"/>
          <SolidColorBrush x:Key="OptionMark.Default.Pressed.Border" Color="#FFDDDDDD"/>
          <SolidColorBrush x:Key="OptionMark.Default.Pressed.Glyph" Color="#FF4F5A69"/>
          <SolidColorBrush x:Key="OptionMark.Default.Check.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="OptionMark.Default.Check.Glyph" Color="#FF4F5A69"/>
          <SolidColorBrush x:Key="OptionMark.Default.Disabled.Background" Color="#CCEEEEEE"/>
          <SolidColorBrush x:Key="OptionMark.Default.Disabled.Border" Color="#CCDDDDDD"/>
          <SolidColorBrush x:Key="OptionMark.Default.Disabled.Glyph" Color="#CC4F5A69"/>
          <SolidColorBrush x:Key="RadioButton.Default.Static.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="RadioButton.Default.Static.Border" Color="#FFd2d2d2"/>
          <SolidColorBrush x:Key="RadioButton.Default.Static.Glyph" Color="#FF666666"/>
          <SolidColorBrush x:Key="RadioButton.Default.MouseOver.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="RadioButton.Default.MouseOver.Border" Color="#FF666666"/>
          <SolidColorBrush x:Key="RadioButton.Default.MouseOver.Glyph" Color="#FF666666"/>
          <SolidColorBrush x:Key="RadioButton.Default.Pressed.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="RadioButton.Default.Pressed.Border" Color="#FF666666"/>
          <SolidColorBrush x:Key="RadioButton.Default.Pressed.Glyph" Color="#FF666666"/>
          <SolidColorBrush x:Key="RadioButton.Default.Disabled.Background" Color="#66757575"/>
          <SolidColorBrush x:Key="RadioButton.Default.Disabled.Border" Color="#66757575"/>
          <SolidColorBrush x:Key="RadioButton.Default.Disabled.Glyph" Color="#66757575"/>
          <SolidColorBrush x:Key="Button.Default.MouseOver.Background" Color="#FFF9F9F9"/>
          <SolidColorBrush x:Key="Button.Default.Pressed.Background" Color="#FFEFEFEF"/>
          <SolidColorBrush x:Key="Button.Default.Disabled.Background" Color="#CCEEEEEE"/>
          <SolidColorBrush x:Key="Button.Default.Disabled.Border" Color="#CCDDDDDD"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Static.Foreground" Color="#FF000000"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Static.Background" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Static.Border" Color="#FFD2D2D2"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.MouseOver.Background" Color="#EEEEEE"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.MouseOver.Border" Color="#FFC9C9C9"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Focus.Background" Color="#DDDDDD"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Focus.Border" Color="#FFBBBBBB"/>
        </ResourceDictionary>
        <ResourceDictionary x:Key="Dark">
          <SolidColorBrush x:Key="DefaultFocusBorder" Color="#66FFFFFF"/>
          <SolidColorBrush x:Key="TextBox.Default.Static.Foreground" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="TextBox.Default.Static.Background" Color="#333333"/>
          <SolidColorBrush x:Key="TextBox.Default.Static.Border" Color="#FF444444"/>
          <SolidColorBrush x:Key="TextBox.Default.MouseOver.Background" Color="#FF1F1F1F"/>
          <SolidColorBrush x:Key="TextBox.Default.MouseOver.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="TextBox.Default.Focus.Background" Color="#FF0F0F0F"/>
          <SolidColorBrush x:Key="TextBox.Default.Focus.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Background" Color="#333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Border" Color="#FF444444"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Glyph" Color="#D2D2D2"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Background" Color="#FF1F1F1F"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Glyph" Color="#D2D2D2"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Background" Color="#FF0F0F0F"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Glyph" Color="#D2D2D2"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Background" Color="#FF0F0F0F"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Border" Color="#FF262626"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Glyph" Color="#FF404040"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Background" Color="#333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Border" Color="#FF444444"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Static.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Background" Color="#FF1F1F1F"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.MouseOver.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Background" Color="#FF0F0F0F"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Pressed.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Background" Color="#FF0F0F0F"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Border" Color="#FF262626"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Button.Default.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBox.Default.Disabled.Editable.Button.Default.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHover.Background" Color="#444444"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHover.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelected.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelected.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedHover.Background" Color="#444444"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedHover.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedNoFocus.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewSelectedNoFocus.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewFocus.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHoverFocus.Background" Color="#444444"/>
          <SolidColorBrush x:Key="ComboBoxItem.Default.ItemsviewHoverFocus.Border" Color="Transparent"/>
          <SolidColorBrush x:Key="OptionMark.Default.Static.Background" Color="#FF333333"/>
          <SolidColorBrush x:Key="OptionMark.Default.Static.Border" Color="#FF757575"/>
          <SolidColorBrush x:Key="OptionMark.Default.Static.Glyph" Color="#FFAAAAAA"/>
          <SolidColorBrush x:Key="OptionMark.Default.MouseOver.Background" Color="#FF1F1F1F"/>
          <SolidColorBrush x:Key="OptionMark.Default.MouseOver.Border" Color="#FF444444"/>
          <SolidColorBrush x:Key="OptionMark.Default.MouseOver.Glyph" Color="#FFAAAAAA"/>
          <SolidColorBrush x:Key="OptionMark.Default.Pressed.Background" Color="#FF000000"/>
          <SolidColorBrush x:Key="OptionMark.Default.Pressed.Border" Color="#FF444444"/>
          <SolidColorBrush x:Key="OptionMark.Default.Pressed.Glyph" Color="#FFAAAAAA"/>
          <SolidColorBrush x:Key="OptionMark.Default.Check.Background" Color="#298FEE"/>
          <SolidColorBrush x:Key="OptionMark.Default.Check.Glyph" Color="#FFFFFF"/>
          <SolidColorBrush x:Key="OptionMark.Default.Disabled.Background" Color="#CC333333"/>
          <SolidColorBrush x:Key="OptionMark.Default.Disabled.Border" Color="#CC444444"/>
          <SolidColorBrush x:Key="OptionMark.Default.Disabled.Glyph" Color="#CCAAAAAA"/>
          <SolidColorBrush x:Key="RadioButton.Default.Static.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="RadioButton.Default.Static.Border" Color="#FF757575"/>
          <SolidColorBrush x:Key="RadioButton.Default.Static.Glyph" Color="#FFFFFF"/>
          <SolidColorBrush x:Key="RadioButton.Default.MouseOver.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="RadioButton.Default.MouseOver.Border" Color="#FF888888"/>
          <SolidColorBrush x:Key="RadioButton.Default.MouseOver.Glyph" Color="#FF888888"/>
          <SolidColorBrush x:Key="RadioButton.Default.Pressed.Background" Color="Transparent"/>
          <SolidColorBrush x:Key="RadioButton.Default.Pressed.Border" Color="#FF888888"/>
          <SolidColorBrush x:Key="RadioButton.Default.Pressed.Glyph" Color="#FF888888"/>
          <SolidColorBrush x:Key="RadioButton.Default.Disabled.Background" Color="#66AAAAAA"/>
          <SolidColorBrush x:Key="RadioButton.Default.Disabled.Border" Color="#66AAAAAA"/>
          <SolidColorBrush x:Key="RadioButton.Default.Disabled.Glyph" Color="#66AAAAAA"/>
          <SolidColorBrush x:Key="Button.Default.MouseOver.Background" Color="#FF1F1F1F"/>
          <SolidColorBrush x:Key="Button.Default.Pressed.Background" Color="#FF000000"/>
          <SolidColorBrush x:Key="Button.Default.Disabled.Background" Color="#CC333333"/>
          <SolidColorBrush x:Key="Button.Default.Disabled.Border" Color="#CC444444"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Static.Foreground" Color="#FFFFFFFF"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Static.Background" Color="#333333"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Static.Border" Color="#FF444444"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.MouseOver.Background" Color="#FF1F1F1F"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.MouseOver.Border" Color="#FF333333"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Focus.Background" Color="#FF0F0F0F"/>
          <SolidColorBrush x:Key="HotKeyEditBox.Default.Focus.Border" Color="#FF333333"/>
        </ResourceDictionary>
      </appTheme:ThemeResourceDictionary.ThemeResources>
    </appTheme:ThemeResourceDictionary>
  </ResourceDictionary.MergedDictionaries>
  <Style x:Key="DefaultFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="-2" SnapsToDevicePixels="true" Stroke="{DynamicResource DefaultFocusBorder}"
                     StrokeThickness="1" RadiusX="2" RadiusY="2" Opacity="0.6"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Control.Background" Value="{DynamicResource TextBox.Default.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBox.Default.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="local:UIElementExtension.CornerRadius" Value="2"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderFontFamily"
            Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontFamily}"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderFontSize"
            Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize}"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderForeground" Value="#FF999999"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderPadding"
            Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Padding}"/>
    <Setter Property="local:TextBoxExtensions.IsEmptyTracerEnabled" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="border" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
            <Grid>
              <ScrollViewer x:Name="PART_ContentHost" Focusable="false" local:ScrollBarHelper.IndicatorMode="Collapsed"/>
              <Canvas Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderPadding)}">
                <TextBlock x:Name="PlaceHolderTextBlock" Visibility="Collapsed" Canvas.Left="2" Canvas.Top="0"
                           IsHitTestVisible="false" Focusable="false"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.Placeholder)}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderFontSize)}"
                           FontFamily="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderFontFamily)}"
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderForeground)}"/>
              </Canvas>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.MouseOver.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.MouseOver.Background}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.Focus.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.Focus.Background}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="local:TextBoxExtensions.IsEmpty" Value="true">
              <Setter TargetName="PlaceHolderTextBlock" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true"/>
          <Condition Property="TextBoxBase.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="TextBoxBase.SelectionBrush"
                Value="{DynamicResource {x:Static JetSystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultPasswordBoxStyle" TargetType="{x:Type PasswordBox}">
    <Setter Property="PasswordBox.PasswordChar" Value="●"/>
    <Setter Property="Control.Background" Value="{DynamicResource TextBox.Default.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource TextBox.Default.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="PasswordBox.CaretBrush" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="local:UIElementExtension.CornerRadius" Value="2"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderFontFamily"
            Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontFamily}"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderFontSize"
            Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize}"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderPadding"
            Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Padding}"/>
    <Setter Property="local:TextBoxExtensions.PlaceholderForeground" Value="#FF999999"/>
    <Setter Property="local:TextBoxExtensions.IsEmptyTracerEnabled" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <Border x:Name="border" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                  CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
            <Grid>
              <ScrollViewer x:Name="PART_ContentHost" Focusable="false" local:ScrollBarHelper.IndicatorMode="Collapsed"/>
              <Canvas Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderPadding)}">
                <TextBlock x:Name="PlaceHolderTextBlock" Visibility="Collapsed" Canvas.Left="2" Canvas.Top="0"
                           IsHitTestVisible="false" Focusable="false"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.Placeholder)}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderFontSize)}"
                           FontFamily="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderFontFamily)}"
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:TextBoxExtensions.PlaceholderForeground)}"/>
              </Canvas>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.MouseOver.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.MouseOver.Background}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.Focus.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="border" Value="{DynamicResource TextBox.Default.Focus.Background}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="local:TextBoxExtensions.IsEmpty" Value="true">
              <Setter TargetName="PlaceHolderTextBlock" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="PasswordBox.IsInactiveSelectionHighlightEnabled" Value="true"/>
          <Condition Property="PasswordBox.IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="PasswordBox.SelectionBrush"
                Value="{DynamicResource {x:Static JetSystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultComboBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="4,4,21,4" StrokeThickness="1" Stroke="{DynamicResource BtnBrushGrayAndDark}"
                     SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <sys:Double x:Key="DefaultComboBoxArrowWidth">20</sys:Double>
  <Style x:Key="DefaultComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="ButtonBase.ClickMode" Value="Press"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="templateRoot" SnapsToDevicePixels="true"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
            <Border x:Name="splitBorder" SnapsToDevicePixels="true" HorizontalAlignment="Right"
                    Width="{StaticResource DefaultComboBoxArrowWidth}" BorderThickness="1" BorderBrush="Transparent"
                    Margin="0">
              <Path x:Name="arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Stroke="{DynamicResource ComboBox.Default.Static.Glyph}" StrokeThickness="1"
                    Data="M 10,0 L 5,5 0,0 " Margin="0,0,0,0"/>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="true"/>
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Static.Editable.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Static.Editable.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.Static.Editable.Button.Default.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.Static.Editable.Button.Default.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="arrow" Value="{DynamicResource ComboBox.Default.MouseOver.Glyph}"
                      Property="Shape.Stroke"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="false"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.MouseOver.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.MouseOver.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.MouseOver.Editable.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.MouseOver.Editable.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.MouseOver.Editable.Button.Default.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.MouseOver.Editable.Button.Default.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="arrow" Value="{DynamicResource ComboBox.Default.Pressed.Glyph}" Property="Shape.Stroke"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="false"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Pressed.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Pressed.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Pressed.Editable.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Pressed.Editable.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.Pressed.Editable.Button.Default.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.Pressed.Editable.Button.Default.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="arrow" Value="{DynamicResource ComboBox.Default.Disabled.Glyph}"
                      Property="Shape.Stroke"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="false"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Disabled.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Disabled.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                           Value="true"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Disabled.Editable.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="templateRoot" Value="{DynamicResource ComboBox.Default.Disabled.Editable.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.Disabled.Editable.Button.Default.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="splitBorder"
                      Value="{DynamicResource ComboBox.Default.Disabled.Editable.Button.Default.Border}"
                      Property="Border.BorderBrush"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="DefaultComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition MinWidth="{StaticResource DefaultComboBoxArrowWidth}" Width="0"/>
      </Grid.ColumnDefinitions>
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" Grid.ColumnSpan="2"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
        <local:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                      MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBox.Default.Static.Border}"
                  Background="{DynamicResource SolidBrushWhiteAndBlack}" BorderThickness="1" CornerRadius="0,0,2,2">
            <ScrollViewer x:Name="DropDownScrollViewer">
              <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas x:Name="canvas" HorizontalAlignment="Left" VerticalAlignment="Top" Height="0" Width="0">
                  <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                             Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                             Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </local:SystemDropShadowChrome>
      </Popup>
      <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Style="{StaticResource DefaultComboBoxToggleButton}" Grid.ColumnSpan="2"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    local:UIElementExtension.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}"/>
      <Border x:Name="border" Margin="{TemplateBinding Control.BorderThickness}"
              Background="{DynamicResource ComboBox.Default.Static.Background}"
              CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
        <TextBox x:Name="PART_EditableTextBox" Style="{StaticResource DefaultComboBoxEditableTextBox}"
                 Margin="{TemplateBinding Control.Padding}"
                 HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                 VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="border" Property="UIElement.Opacity" Value="0.56"/>
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
        <Setter Value="{DynamicResource TextBox.Default.Static.Foreground}" Property="Control.Foreground"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
        <Setter TargetName="shadow" Property="local:SystemDropShadowChrome.Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
        <Setter TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"
                Property="Canvas.Top"/>
        <Setter TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"
                Property="Canvas.Left"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="DefaultComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition MinWidth="{StaticResource DefaultComboBoxArrowWidth}" Width="0"/>
      </Grid.ColumnDefinitions>
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Margin="1" Placement="Bottom" Grid.ColumnSpan="2"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
        <local:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                      MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
          <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource ComboBox.Default.Static.Border}"
                  Background="{DynamicResource SolidBrushWhiteAndBlack}" BorderThickness="1" CornerRadius="0,0,2,2">
            <ScrollViewer x:Name="DropDownScrollViewer">
              <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas x:Name="canvas" HorizontalAlignment="Left" VerticalAlignment="Top" Height="0" Width="0">
                  <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}"
                             Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                             Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </local:SystemDropShadowChrome>
      </Popup>
      <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Style="{StaticResource DefaultComboBoxToggleButton}" Grid.ColumnSpan="2"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    local:UIElementExtension.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}"/>
      <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                        ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                        IsHitTestVisible="false" Margin="{TemplateBinding Control.Padding}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
        <Setter TargetName="shadow" Property="local:SystemDropShadowChrome.Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="dropDownBorder" Property="FrameworkElement.Height" Value="95"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ItemsControl.IsGrouping" Value="true"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
        <Setter TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"
                Property="Canvas.Top"/>
        <Setter TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"
                Property="Canvas.Left"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Padding" Value="4,1"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource DefaultComboBoxFocusVisual}"/>
    <Setter Property="local:UIElementExtension.CornerRadius"
            Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Path=(local:UIElementExtension.CornerRadius)}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" Padding="{TemplateBinding Control.Padding}"
                  SnapsToDevicePixels="true"
                  CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static JetSystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewHover.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewHover.Border}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewSelected.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewSelected.Border}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewSelectedHover.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewSelectedHover.Border}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewSelectedNoFocus.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewSelectedNoFocus.Border}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="false"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewFocus.Border}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="false"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewHoverFocus.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="Bd" Value="{DynamicResource ComboBoxItem.Default.ItemsviewHoverFocus.Border}"
                      Property="Border.BorderBrush"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultComboBoxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource DefaultComboBoxFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ComboBox.Default.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource ComboBox.Default.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Control.Padding" Value="6,3,5,3"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Template" Value="{StaticResource DefaultComboBoxTemplate}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource DefaultComboBoxItemStyle}"/>
    <Setter Property="local:UIElementExtension.CornerRadius" Value="2"/>
    <Style.Triggers>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Control.Template" Value="{StaticResource DefaultComboBoxEditableTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="DefaultOptionMarkFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="17,-2,-2,-2" SnapsToDevicePixels="true" Stroke="{DynamicResource DefaultFocusBorder}"
                     StrokeThickness="1" RadiusX="2" RadiusY="2" Opacity="0.6"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="local:UIElementExtension.CornerRadius" Value="2"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource DefaultFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource OptionMark.Default.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource OptionMark.Default.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid x:Name="templateRoot" SnapsToDevicePixels="true" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="checkBoxBorder" Margin="1,0.5,1,1"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" SnapsToDevicePixels="false"
                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
              <Grid x:Name="markGrid">
                <Path x:Name="optionMark" Opacity="0" Stretch="None" Margin="2.2,3"
                      Stroke="{DynamicResource OptionMark.Default.Static.Glyph}" StrokeThickness="1"
                      Data="M 1,4 L 3.66667,7 9,1 "/>
                <Rectangle x:Name="indeterminateMark" Margin="2" Opacity="0"
                           Fill="{DynamicResource OptionMark.Default.Static.Glyph}"/>
              </Grid>
            </Border>
            <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true" Grid.Column="1"
                              Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter Value="{StaticResource DefaultOptionMarkFocusVisual}" Property="FrameworkElement.FocusVisualStyle"/>
              <Setter Property="Control.Padding" Value="4,1,0,0"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource OptionMark.Default.MouseOver.Background}" TargetName="checkBoxBorder"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource OptionMark.Default.MouseOver.Border}" TargetName="checkBoxBorder"
                      Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource OptionMark.Default.MouseOver.Glyph}" TargetName="optionMark"
                      Property="Shape.Stroke"/>
              <Setter Value="{DynamicResource OptionMark.Default.MouseOver.Glyph}" TargetName="indeterminateMark"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource OptionMark.Default.Disabled.Background}" TargetName="checkBoxBorder"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource OptionMark.Default.Disabled.Border}" TargetName="checkBoxBorder"
                      Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource OptionMark.Default.Disabled.Glyph}" TargetName="optionMark"
                      Property="Shape.Stroke"/>
              <Setter Value="{DynamicResource OptionMark.Default.Disabled.Glyph}" TargetName="indeterminateMark"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource OptionMark.Default.Pressed.Background}" TargetName="checkBoxBorder"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource OptionMark.Default.Pressed.Border}" TargetName="checkBoxBorder"
                      Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource OptionMark.Default.Pressed.Glyph}" TargetName="optionMark"
                      Property="Shape.Stroke"/>
              <Setter Value="{DynamicResource OptionMark.Default.Pressed.Glyph}" TargetName="indeterminateMark"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="1"/>
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="0"/>
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource DefaultFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource RadioButton.Default.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource RadioButton.Default.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid x:Name="templateRoot" SnapsToDevicePixels="true" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="radioButtonBorder" Margin="1,1,2,1"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="100" SnapsToDevicePixels="false">
              <Grid x:Name="markGrid" Margin="2" SnapsToDevicePixels="false">
                <Ellipse x:Name="optionMark" Opacity="0" MinWidth="7.2" MinHeight="7.2"
                         Fill="{DynamicResource RadioButton.Default.Static.Glyph}" SnapsToDevicePixels="false"
                         RenderTransformOrigin="0.5,0.5">
                  <UIElement.RenderTransform>
                    <ScaleTransform/>
                  </UIElement.RenderTransform>
                </Ellipse>
              </Grid>
            </Border>
            <ContentPresenter x:Name="contentPresenter" RecognizesAccessKey="true" Grid.Column="1"
                              Margin="{TemplateBinding Control.Padding}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Focusable="false"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter Value="{StaticResource DefaultOptionMarkFocusVisual}" Property="FrameworkElement.FocusVisualStyle"/>
              <Setter Property="Control.Padding" Value="4,-1,0,0"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Value="{DynamicResource RadioButton.Default.MouseOver.Background}" TargetName="radioButtonBorder"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource RadioButton.Default.MouseOver.Border}" TargetName="radioButtonBorder"
                      Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource RadioButton.Default.MouseOver.Glyph}" TargetName="optionMark"
                      Property="Shape.Fill"/>
              <TriggerBase.EnterActions>
                <StopStoryboard BeginStoryboardName="EnterPressedStoryboard"/>
                <StopStoryboard BeginStoryboardName="ExitPressedStoryboard"/>
                <StopStoryboard BeginStoryboardName="ExitMouseOverStoryboard"/>
                <BeginStoryboard x:Name="EnterMouseOverStoryboard">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1.2"
                                     Duration="0:0:0.1"/>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1.2"
                                     Duration="0:0:0.1"/>
                  </Storyboard>
                </BeginStoryboard>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <StopStoryboard BeginStoryboardName="EnterPressedStoryboard"/>
                <StopStoryboard BeginStoryboardName="ExitPressedStoryboard"/>
                <StopStoryboard BeginStoryboardName="EnterMouseOverStoryboard"/>
                <BeginStoryboard x:Name="ExitMouseOverStoryboard">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1"
                                     Duration="0:0:0.1"/>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1"
                                     Duration="0:0:0.1"/>
                  </Storyboard>
                </BeginStoryboard>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource RadioButton.Default.Disabled.Background}" TargetName="radioButtonBorder"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource RadioButton.Default.Disabled.Border}" TargetName="radioButtonBorder"
                      Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource RadioButton.Default.Disabled.Glyph}" TargetName="optionMark"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter Value="{DynamicResource RadioButton.Default.Pressed.Background}" TargetName="radioButtonBorder"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource RadioButton.Default.Pressed.Border}" TargetName="radioButtonBorder"
                      Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource RadioButton.Default.Pressed.Glyph}" TargetName="optionMark"
                      Property="Shape.Fill"/>
              <TriggerBase.EnterActions>
                <StopStoryboard BeginStoryboardName="EnterMouseOverStoryboard"/>
                <StopStoryboard BeginStoryboardName="ExitPressedStoryboard"/>
                <StopStoryboard BeginStoryboardName="ExitMouseOverStoryboard"/>
                <BeginStoryboard x:Name="EnterPressedStoryboard">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="0.7"
                                     Duration="0:0:0.1"/>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="0.7"
                                     Duration="0:0:0.1"/>
                  </Storyboard>
                </BeginStoryboard>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <StopStoryboard BeginStoryboardName="EnterPressedStoryboard"/>
                <StopStoryboard BeginStoryboardName="ExitMouseOverStoryboard"/>
                <StopStoryboard BeginStoryboardName="EnterMouseOverStoryboard"/>
                <BeginStoryboard x:Name="ExitPressedStoryboard">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1"
                                     Duration="0:0:0.1"/>
                    <DoubleAnimation Storyboard.TargetName="optionMark"
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1"
                                     Duration="0:0:0.1"/>
                  </Storyboard>
                </BeginStoryboard>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="0.56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="{DynamicResource OptionMark.Default.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource OptionMark.Default.Static.Border}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBox.Default.Static.Foreground}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
            <ContentPresenter x:Name="contentPresenter" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="border" Value="{DynamicResource Button.Default.MouseOver.Background}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="border" Value="{DynamicResource Button.Default.Pressed.Background}"
                      Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Value="{DynamicResource Button.Default.Disabled.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="border" Value="{DynamicResource Button.Default.Disabled.Border}"
                      Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Control.BorderBrush" Value="{DynamicResource OptionMark.Default.Static.Border}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="Control.BorderBrush" Value="Red"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <local:IsNullOrEmptyConverter x:Key="IsNullOrEmptyConverter"/>
  <local:IsStringConverter x:Key="IsStringConverter"/>
  <local:HasHotKeyConverter x:Key="HasHotKeyConverter"/>
  <local:HotKeyNameConverter x:Key="HotKeyNameConverter"/>
  <local:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
  <local:IsDefaultToolTipContentConverter x:Key="IsDefaultToolTipContentConverter"/>
  <ControlTemplate x:Key="DefaultToolTipTemplate" TargetType="{x:Type ToolTip}">
    <Border Name="Border" Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
      <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
        <FrameworkElement.Resources>
          <DataTemplate DataType="{x:Type sys:String}">
            <TextBlock TextWrapping="Wrap" Text="{TemplateBinding ContentPresenter.Content}"/>
          </DataTemplate>
        </FrameworkElement.Resources>
      </ContentPresenter>
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="ToolTipWithCaptionTemplate" TargetType="{x:Type ToolTip}">
    <Border Name="Border" Background="{TemplateBinding Control.Background}"
            BorderBrush="{TemplateBinding Control.BorderBrush}"
            BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(local:UIElementExtension.CornerRadius)}">
      <Grid Margin="{TemplateBinding Control.Padding}"
            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
        <Grid.RowDefinitions>
          <RowDefinition Height="*"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <TextBlock x:Name="CaptionText" Grid.Column="0" Margin="0,0,8,0" TextWrapping="Wrap" FontWeight="Bold"
                     HorizontalAlignment="Left"
                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PlacementTarget.(local:ToolTipExtensions.Caption)}"/>
          <TextBlock x:Name="HotKeyText" Grid.Column="1" HorizontalAlignment="Left" FontWeight="Bold"
                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PlacementTarget.(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HotKeyNameConverter}, ConverterParameter=[{0}]}"/>
        </Grid>
        <ContentPresenter x:Name="ContentPresenter" Grid.Row="1" Margin="0,4,0,0"
                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
          <FrameworkElement.Resources>
            <DataTemplate DataType="{x:Type sys:String}">
              <TextBlock TextWrapping="Wrap" Text="{TemplateBinding ContentPresenter.Content}"/>
            </DataTemplate>
          </FrameworkElement.Resources>
        </ContentPresenter>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Value="true"
                   Binding="{Binding ElementName=CaptionText, Path=Text, Converter={StaticResource IsNullOrEmptyConverter}}">
        <Setter TargetName="CaptionText" Property="UIElement.Visibility" Value="Collapsed"/>
      </DataTrigger>
      <Trigger Value="{x:Null}" Property="ContentControl.Content">
        <Setter TargetName="ContentPresenter" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <DataTrigger Value="true"
                   Binding="{Binding ElementName=ContentPresenter, Path=Content, Converter={StaticResource IsDefaultToolTipContentConverter}}">
        <Setter TargetName="ContentPresenter" Property="UIElement.Visibility" Value="Collapsed"/>
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DefaultToolTipStyle" TargetType="{x:Type ToolTip}">
    <Setter Property="Control.Background" Value="{DynamicResource ToolTipBackground}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource ToolTipForeground}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource ToolTipBorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="UIElement.Opacity" Value="0.95"/>
    <Setter Property="Control.Padding" Value="6,4"/>
    <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
    <Setter Property="Control.FontSize" Value="12"/>
    <Setter Property="Control.FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
    <Setter Property="Control.FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
    <Setter Property="TextBlock.TextAlignment" Value="Left"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ToolTip.HasDropShadow" Value="false"/>
    <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template" Value="{StaticResource DefaultToolTipTemplate}"/>
    <Setter Property="local:UIElementExtension.CornerRadius" Value="2"/>
    <Setter Property="FrameworkElement.MaxWidth" Value="308"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.(local:ToolTipExtensions.Caption), Converter={StaticResource IsNullOrEmptyConverter}}"
                   Value="false">
        <Setter Property="Control.Template" Value="{StaticResource ToolTipWithCaptionTemplate}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.(hotkeys:HotKeyExtensions.InvokeWhen), Converter={StaticResource HasHotKeyConverter}}"
                   Value="true">
        <Setter Property="Control.Template" Value="{StaticResource ToolTipWithCaptionTemplate}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource DefaultToolTipStyle}"/>
  <Style x:Key="HotKeyEditBoxWithoutBorderStyle" TargetType="{x:Type local:HotKeyEditBox}">
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="local:UIElementExtension.CornerRadius" Value="0"/>
  </Style>
</ResourceDictionary>